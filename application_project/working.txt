NAMESPACE       NAME                                           READY   STATUS      RESTARTS   AGE     IP               NODE                             NOMINATED NODE   READINESS GATES
ai-app          pod/agent-deployment-5d56ddfb98-6hws6          1/1     Running     0          5h19m   10.104.128.24    ip-10-104-128-67.ec2.internal    <none>           <none>
ai-app          pod/agent-deployment-5d56ddfb98-gfz2x          0/1     Completed   0          7h11m   10.104.0.57      ip-10-104-0-135.ec2.internal     <none>           <none>
ai-app          pod/aws-cli-deployment-bb558f6c7-v2zmr         1/1     Running     0          3d15h   10.104.128.119   ip-10-104-128-161.ec2.internal   <none>           <none>
ai-app          pod/netshoot-deployment-7655b866d4-rdmf2       1/1     Running     0          3d16h   10.104.128.153   ip-10-104-128-67.ec2.internal    <none>           <none>
ai-app          pod/ui-deployment-66bcb989f7-hflnx             1/1     Running     0          7h49m   10.104.0.137     ip-10-104-0-39.ec2.internal      <none>           <none>
ingress-nginx   pod/ingress-nginx-controller-9756f5bd9-bwr2v   1/1     Running     0          2d20h   10.104.0.26      ip-10-104-0-135.ec2.internal     <none>           <none>
kube-system     pod/aws-node-8wdht                             2/2     Running     0          7d20h   10.104.128.161   ip-10-104-128-161.ec2.internal   <none>           <none>
kube-system     pod/aws-node-gfvp8                             2/2     Running     0          6d15h   10.104.128.67    ip-10-104-128-67.ec2.internal    <none>           <none>
kube-system     pod/aws-node-vhgb9                             2/2     Running     0          3d23h   10.104.0.39      ip-10-104-0-39.ec2.internal      <none>           <none>
kube-system     pod/aws-node-zrq7z                             2/2     Running     0          7d20h   10.104.0.135     ip-10-104-0-135.ec2.internal     <none>           <none>
kube-system     pod/coredns-789f8477df-9cfrj                   1/1     Running     0          7d20h   10.104.128.44    ip-10-104-128-161.ec2.internal   <none>           <none>
kube-system     pod/coredns-789f8477df-mwqbf                   1/1     Running     0          7d20h   10.104.128.36    ip-10-104-128-161.ec2.internal   <none>           <none>
kube-system     pod/eks-pod-identity-agent-5xcg2               1/1     Running     0          7d20h   10.104.0.135     ip-10-104-0-135.ec2.internal     <none>           <none>
kube-system     pod/eks-pod-identity-agent-mb8cp               1/1     Running     0          6d15h   10.104.128.67    ip-10-104-128-67.ec2.internal    <none>           <none>
kube-system     pod/eks-pod-identity-agent-mjsrr               1/1     Running     0          3d23h   10.104.0.39      ip-10-104-0-39.ec2.internal      <none>           <none>
kube-system     pod/eks-pod-identity-agent-tzhk2               1/1     Running     0          7d20h   10.104.128.161   ip-10-104-128-161.ec2.internal   <none>           <none>
kube-system     pod/kube-proxy-9bvsh                           1/1     Running     0          6d15h   10.104.128.67    ip-10-104-128-67.ec2.internal    <none>           <none>
kube-system     pod/kube-proxy-nzsht                           1/1     Running     0          7d20h   10.104.128.161   ip-10-104-128-161.ec2.internal   <none>           <none>
kube-system     pod/kube-proxy-r6s6n                           1/1     Running     0          7d20h   10.104.0.135     ip-10-104-0-135.ec2.internal     <none>           <none>
kube-system     pod/kube-proxy-w647g                           1/1     Running     0          3d23h   10.104.0.39      ip-10-104-0-39.ec2.internal      <none>           <none>
kube-system     pod/pan-cni-2r4tq                              1/1     Running     0          3d20h   10.104.128.161   ip-10-104-128-161.ec2.internal   <none>           <none>
kube-system     pod/pan-cni-9mlqb                              1/1     Running     0          3d20h   10.104.128.67    ip-10-104-128-67.ec2.internal    <none>           <none>
kube-system     pod/pan-cni-9s65j                              1/1     Running     0          3d20h   10.104.0.135     ip-10-104-0-135.ec2.internal     <none>           <none>
kube-system     pod/pan-cni-rfmbl                              1/1     Running     0          3d20h   10.104.0.39      ip-10-104-0-39.ec2.internal      <none>           <none>

NAMESPACE       NAME                                         TYPE           CLUSTER-IP       EXTERNAL-IP                                                                     PORT(S)                      AGE     SELECTOR
ai-app          service/agent-service                        ClusterIP      172.20.247.101   <none>                                                                          80/TCP                       7h49m   app=agent
ai-app          service/agent-ws-service                     ClusterIP      172.20.128.147   <none>                                                                          3001/TCP                     31h     app=agent
ai-app          service/ui-service                           ClusterIP      172.20.34.76     <none>                                                                          80/TCP                       7h49m   app=ui
default         service/agent-service                        ClusterIP      172.20.207.253   <none>                                                                          80/TCP                       12h     app=agent
default         service/kubernetes                           ClusterIP      172.20.0.1       <none>                                                                          443/TCP                      7d20h   <none>
default         service/ui-service                           ClusterIP      172.20.127.106   <none>                                                                          80/TCP                       12h     app=ui
ingress-nginx   service/ingress-nginx-controller             LoadBalancer   172.20.214.241   a8e5afe1fbff2457aa8a7d21eeb2943a-0ee7ac6d712fd784.elb.us-east-1.amazonaws.com   80:30187/TCP,443:31959/TCP   2d20h   app.kubernetes.io/component=controller,app.kubernetes.io/instance=ingress-nginx,app.kubernetes.io/name=ingress-nginx
ingress-nginx   service/ingress-nginx-controller-admission   ClusterIP      172.20.126.188   <none>                                                                          443/TCP                      2d20h   app.kubernetes.io/component=controller,app.kubernetes.io/instance=ingress-nginx,app.kubernetes.io/name=ingress-nginx
kube-system     service/kube-dns                             ClusterIP      172.20.0.10      <none>                                                                          53/UDP,53/TCP,9153/TCP       7d20h   k8s-app=kube-dns
kube-system     service/pan-ngfw-svc                         ClusterIP      172.20.63.90     <none>                                                                          6080/UDP                     3d20h   <none>

NAMESPACE     NAME                                    DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR                 AGE     CONTAINERS                   IMAGES                                                                                                                                                                          SELECTOR
kube-system   daemonset.apps/aws-node                 4         4         4       4            4           <none>                        7d20h   aws-node,aws-eks-nodeagent   602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon-k8s-cni:v1.18.3-eksbuild.2,602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.2-eksbuild.2   k8s-app=aws-node
kube-system   daemonset.apps/eks-pod-identity-agent   4         4         4       4            4           <none>                        7d20h   eks-pod-identity-agent       602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15                                                                                                  app.kubernetes.io/instance=eks-pod-identity-agent,app.kubernetes.io/name=eks-pod-identity-agent
kube-system   daemonset.apps/kube-proxy               4         4         4       4            4           <none>                        7d20h   kube-proxy                   602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/kube-proxy:v1.31.0-minimal-eksbuild.2                                                                                          k8s-app=kube-proxy
kube-system   daemonset.apps/pan-cni                  4         4         4       4            4           beta.kubernetes.io/os=linux   3d20h   install-pan-cni              gcr.io/pan-cn-series/airs/pan-cni:4.0.0                                                                                                                                         k8s-app=pan-cni

NAMESPACE       NAME                                       READY   UP-TO-DATE   AVAILABLE   AGE     CONTAINERS   IMAGES                                                                                                                     SELECTOR
ai-app          deployment.apps/agent-deployment           1/1     1            1           7h49m   agent        migara/agent-app                                                                                                           app=agent
ai-app          deployment.apps/aws-cli-deployment         1/1     1            1           3d16h   aws-cli      amazon/aws-cli                                                                                                             app=aws-cli
ai-app          deployment.apps/netshoot-deployment        1/1     1            1           3d16h   netshoot     nicolaka/netshoot                                                                                                          app=netshoot
ai-app          deployment.apps/ui-deployment              1/1     1            1           7h49m   ui           migara/ui-app                                                                                                              app=ui
ingress-nginx   deployment.apps/ingress-nginx-controller   1/1     1            1           2d20h   controller   registry.k8s.io/ingress-nginx/controller:v1.11.2@sha256:d5f8217feeac4887cb1ed21f27c2674e58be06bd8f5184cacea2a69abaf78dce   app.kubernetes.io/component=controller,app.kubernetes.io/instance=ingress-nginx,app.kubernetes.io/name=ingress-nginx
kube-system     deployment.apps/coredns                    2/2     2            2           7d20h   coredns      602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/coredns:v1.11.3-eksbuild.1                                                eks.amazonaws.com/component=coredns,k8s-app=kube-dns

NAMESPACE       NAME                                                 DESIRED   CURRENT   READY   AGE     CONTAINERS   IMAGES                                                                                                                     SELECTOR
ai-app          replicaset.apps/agent-deployment-55ccdccb8c          0         0         0       7h13m   agent        bridgetokubernetes.azurecr.io/lpkremoteagent:1.3.4                                                                         app=agent,pod-template-hash=55ccdccb8c
ai-app          replicaset.apps/agent-deployment-5d56ddfb98          1         1         1       7h49m   agent        migara/agent-app                                                                                                           app=agent,pod-template-hash=5d56ddfb98
ai-app          replicaset.apps/aws-cli-deployment-86bd569d85        0         0         0       3d16h   aws-cli      amazon/aws-cli                                                                                                             app=aws-cli,pod-template-hash=86bd569d85
ai-app          replicaset.apps/aws-cli-deployment-bb558f6c7         1         1         1       3d15h   aws-cli      amazon/aws-cli                                                                                                             app=aws-cli,pod-template-hash=bb558f6c7
ai-app          replicaset.apps/netshoot-deployment-7655b866d4       1         1         1       3d16h   netshoot     nicolaka/netshoot                                                                                                          app=netshoot,pod-template-hash=7655b866d4
ai-app          replicaset.apps/ui-deployment-66bcb989f7             1         1         1       7h49m   ui           migara/ui-app                                                                                                              app=ui,pod-template-hash=66bcb989f7
ingress-nginx   replicaset.apps/ingress-nginx-controller-9756f5bd9   1         1         1       2d20h   controller   registry.k8s.io/ingress-nginx/controller:v1.11.2@sha256:d5f8217feeac4887cb1ed21f27c2674e58be06bd8f5184cacea2a69abaf78dce   app.kubernetes.io/component=controller,app.kubernetes.io/instance=ingress-nginx,app.kubernetes.io/name=ingress-nginx,pod-template-hash=9756f5bd9
kube-system     replicaset.apps/coredns-789f8477df                   2         2         2       7d20h   coredns      602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/coredns:v1.11.3-eksbuild.1                                                eks.amazonaws.com/component=coredns,k8s-app=kube-dns,pod-template-hash=789f8477df
Name:             agent-deployment-5d56ddfb98-6hws6
Namespace:        ai-app
Priority:         0
Service Account:  eks-pods-sa
Node:             ip-10-104-128-67.ec2.internal/10.104.128.67
Start Time:       Thu, 10 Oct 2024 21:16:47 -0400
Labels:           app=agent
                  paloaltonetworks.com/trafficobject=1
                  pod-template-hash=5d56ddfb98
Annotations:      <none>
Status:           Running
IP:               10.104.128.24
IPs:
  IP:           10.104.128.24
Controlled By:  ReplicaSet/agent-deployment-5d56ddfb98
Containers:
  agent:
    Container ID:   containerd://8799a7a961ff880f3f6473b49f73c12c4f724166e2e5f73f3648599e4b55d7e4
    Image:          migara/agent-app
    Image ID:       docker.io/migara/agent-app@sha256:059d7291369041f3b9cc1d5c240a83c4c3fbd3d0683c16989f5e0bf917fd55d4
    Port:           3001/TCP
    Host Port:      0/TCP
    State:          Running
      Started:      Thu, 10 Oct 2024 21:16:48 -0400
    Ready:          True
    Restart Count:  0
    Environment:
      AWS_STS_REGIONAL_ENDPOINTS:   regional
      AWS_DEFAULT_REGION:           us-east-1
      AWS_REGION:                   us-east-1
      AWS_ROLE_ARN:                 arn:aws:iam::367521625516:role/2szv4dtt-eks-pod-role
      AWS_WEB_IDENTITY_TOKEN_FILE:  /var/run/secrets/eks.amazonaws.com/serviceaccount/token
    Mounts:
      /var/run/secrets/eks.amazonaws.com/serviceaccount from aws-iam-token (ro)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-v2wfr (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  aws-iam-token:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  86400
  kube-api-access-v2wfr:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              <none>
Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:                      <none>


Name:             agent-deployment-5d56ddfb98-gfz2x
Namespace:        ai-app
Priority:         0
Service Account:  eks-pods-sa
Node:             ip-10-104-0-135.ec2.internal/10.104.0.135
Start Time:       Thu, 10 Oct 2024 19:24:50 -0400
Labels:           app=agent
                  paloaltonetworks.com/trafficobject=1
                  pod-template-hash=5d56ddfb98
Annotations:      <none>
Status:           Succeeded
IP:               10.104.0.57
IPs:
  IP:           10.104.0.57
Controlled By:  ReplicaSet/agent-deployment-5d56ddfb98
Containers:
  agent:
    Container ID:   containerd://a45025eb315d8756f8613651526a364bbc335db889cf0dc3628213700a5b059a
    Image:          migara/agent-app
    Image ID:       docker.io/migara/agent-app@sha256:823992b6a14f7238c6f8dca65d86da3b7f5f16384d561edf9319bd5a8369c8f2
    Port:           3001/TCP
    Host Port:      0/TCP
    State:          Terminated
      Reason:       Completed
      Exit Code:    0
      Started:      Thu, 10 Oct 2024 19:24:51 -0400
      Finished:     Thu, 10 Oct 2024 19:37:18 -0400
    Ready:          False
    Restart Count:  0
    Environment:
      AWS_STS_REGIONAL_ENDPOINTS:   regional
      AWS_DEFAULT_REGION:           us-east-1
      AWS_REGION:                   us-east-1
      AWS_ROLE_ARN:                 arn:aws:iam::367521625516:role/2szv4dtt-eks-pod-role
      AWS_WEB_IDENTITY_TOKEN_FILE:  /var/run/secrets/eks.amazonaws.com/serviceaccount/token
    Mounts:
      /var/run/secrets/eks.amazonaws.com/serviceaccount from aws-iam-token (ro)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-kq854 (ro)
Conditions:
  Type                        Status
  DisruptionTarget            True 
  PodReadyToStartContainers   False 
  Initialized                 True 
  Ready                       False 
  ContainersReady             False 
  PodScheduled                True 
Volumes:
  aws-iam-token:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  86400
  kube-api-access-kq854:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              <none>
Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:                      <none>


Name:             aws-cli-deployment-bb558f6c7-v2zmr
Namespace:        ai-app
Priority:         0
Service Account:  eks-pods-sa
Node:             ip-10-104-128-161.ec2.internal/10.104.128.161
Start Time:       Mon, 07 Oct 2024 11:17:36 -0400
Labels:           app=aws-cli
                  paloaltonetworks.com/trafficobject=1
                  pod-template-hash=bb558f6c7
Annotations:      <none>
Status:           Running
IP:               10.104.128.119
IPs:
  IP:           10.104.128.119
Controlled By:  ReplicaSet/aws-cli-deployment-bb558f6c7
Containers:
  aws-cli:
    Container ID:  containerd://89f13412678ad4b5d31b5983699a85123d28716615f9c4f952cb2d4c51f7b1ab
    Image:         amazon/aws-cli
    Image ID:      docker.io/amazon/aws-cli@sha256:34ee73bf22c6b60bca156cd73e5dd486622ff994361c2ce7fe0410b24ec5540d
    Port:          <none>
    Host Port:     <none>
    Command:
      /bin/bash
    Args:
      -c
      yum install -y ca-certificates
      cp /custom-certs/* /etc/pki/ca-trust/source/anchors/
      update-ca-trust
      echo "Custom certificates added"
      sleep infinity
      
    State:          Running
      Started:      Mon, 07 Oct 2024 11:17:46 -0400
    Ready:          True
    Restart Count:  0
    Environment:
      AWS_CA_BUNDLE:                /etc/pki/ca-trust/source/anchors/Trust-Root-CA.crt
      AWS_STS_REGIONAL_ENDPOINTS:   regional
      AWS_DEFAULT_REGION:           us-east-1
      AWS_REGION:                   us-east-1
      AWS_ROLE_ARN:                 arn:aws:iam::367521625516:role/2szv4dtt-eks-pod-role
      AWS_WEB_IDENTITY_TOKEN_FILE:  /var/run/secrets/eks.amazonaws.com/serviceaccount/token
    Mounts:
      /custom-certs from custom-certs (ro)
      /var/run/secrets/eks.amazonaws.com/serviceaccount from aws-iam-token (ro)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-fx7qr (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  aws-iam-token:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  86400
  custom-certs:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      custom-ca-certs
    Optional:  false
  kube-api-access-fx7qr:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              <none>
Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:                      <none>


Name:             netshoot-deployment-7655b866d4-rdmf2
Namespace:        ai-app
Priority:         0
Service Account:  eks-pods-sa
Node:             ip-10-104-128-67.ec2.internal/10.104.128.67
Start Time:       Mon, 07 Oct 2024 10:16:22 -0400
Labels:           app=netshoot
                  paloaltonetworks.com/trafficobject=1
                  pod-template-hash=7655b866d4
Annotations:      <none>
Status:           Running
IP:               10.104.128.153
IPs:
  IP:           10.104.128.153
Controlled By:  ReplicaSet/netshoot-deployment-7655b866d4
Containers:
  netshoot:
    Container ID:  containerd://c5fd69e09835e6f6bbbe34628e8294c85f00254f6f2f15405d5d92f7798b0006
    Image:         nicolaka/netshoot
    Image ID:      docker.io/nicolaka/netshoot@sha256:a20c2531bf35436ed3766cd6cfe89d352b050ccc4d7005ce6400adf97503da1b
    Port:          <none>
    Host Port:     <none>
    Command:
      /bin/sh
    Args:
      -c
      cp /custom-certs/* /usr/local/share/ca-certificates/
      update-ca-certificates
      echo "Custom certificates added"
      while true; do sleep 3600; done
      
    State:          Running
      Started:      Mon, 07 Oct 2024 10:16:33 -0400
    Ready:          True
    Restart Count:  0
    Environment:
      AWS_STS_REGIONAL_ENDPOINTS:   regional
      AWS_DEFAULT_REGION:           us-east-1
      AWS_REGION:                   us-east-1
      AWS_ROLE_ARN:                 arn:aws:iam::367521625516:role/2szv4dtt-eks-pod-role
      AWS_WEB_IDENTITY_TOKEN_FILE:  /var/run/secrets/eks.amazonaws.com/serviceaccount/token
    Mounts:
      /custom-certs from custom-certs (ro)
      /var/run/secrets/eks.amazonaws.com/serviceaccount from aws-iam-token (ro)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-5487d (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  aws-iam-token:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  86400
  custom-certs:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      custom-ca-certs
    Optional:  false
  kube-api-access-5487d:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              <none>
Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:                      <none>


Name:             ui-deployment-66bcb989f7-hflnx
Namespace:        ai-app
Priority:         0
Service Account:  default
Node:             ip-10-104-0-39.ec2.internal/10.104.0.39
Start Time:       Thu, 10 Oct 2024 18:46:43 -0400
Labels:           app=ui
                  paloaltonetworks.com/trafficobject=1
                  pod-template-hash=66bcb989f7
Annotations:      <none>
Status:           Running
IP:               10.104.0.137
IPs:
  IP:           10.104.0.137
Controlled By:  ReplicaSet/ui-deployment-66bcb989f7
Containers:
  ui:
    Container ID:   containerd://6eb68c05e0653a91b43927e606c820d87e811e8046b0a4d417efcc5ae2249271
    Image:          migara/ui-app
    Image ID:       docker.io/migara/ui-app@sha256:b7a4c1b2fd1bb3dc968d21e699d32fb9caf9085fb37112c3d18ead37d1336468
    Port:           3000/TCP
    Host Port:      0/TCP
    State:          Running
      Started:      Thu, 10 Oct 2024 18:46:44 -0400
    Ready:          True
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-fhqn7 (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  kube-api-access-fhqn7:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              <none>
Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:                      <none>


Name:             ingress-nginx-controller-9756f5bd9-bwr2v
Namespace:        ingress-nginx
Priority:         0
Service Account:  ingress-nginx
Node:             ip-10-104-0-135.ec2.internal/10.104.0.135
Start Time:       Tue, 08 Oct 2024 06:23:05 -0400
Labels:           app.kubernetes.io/component=controller
                  app.kubernetes.io/instance=ingress-nginx
                  app.kubernetes.io/managed-by=Helm
                  app.kubernetes.io/name=ingress-nginx
                  app.kubernetes.io/part-of=ingress-nginx
                  app.kubernetes.io/version=1.11.2
                  helm.sh/chart=ingress-nginx-4.11.2
                  pod-template-hash=9756f5bd9
Annotations:      <none>
Status:           Running
IP:               10.104.0.26
IPs:
  IP:           10.104.0.26
Controlled By:  ReplicaSet/ingress-nginx-controller-9756f5bd9
Containers:
  controller:
    Container ID:    containerd://26a6b1ff040517283064ee8774ca01cf2e15a2f776182590f2ffb2a54bfa1847
    Image:           registry.k8s.io/ingress-nginx/controller:v1.11.2@sha256:d5f8217feeac4887cb1ed21f27c2674e58be06bd8f5184cacea2a69abaf78dce
    Image ID:        registry.k8s.io/ingress-nginx/controller@sha256:d5f8217feeac4887cb1ed21f27c2674e58be06bd8f5184cacea2a69abaf78dce
    Ports:           80/TCP, 443/TCP, 8443/TCP
    Host Ports:      0/TCP, 0/TCP, 0/TCP
    SeccompProfile:  RuntimeDefault
    Args:
      /nginx-ingress-controller
      --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
      --election-id=ingress-nginx-leader
      --controller-class=k8s.io/ingress-nginx
      --ingress-class=nginx
      --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
      --validating-webhook=:8443
      --validating-webhook-certificate=/usr/local/certificates/cert
      --validating-webhook-key=/usr/local/certificates/key
      --enable-metrics=false
    State:          Running
      Started:      Tue, 08 Oct 2024 06:23:06 -0400
    Ready:          True
    Restart Count:  0
    Requests:
      cpu:      100m
      memory:   90Mi
    Liveness:   http-get http://:10254/healthz delay=10s timeout=1s period=10s #success=1 #failure=5
    Readiness:  http-get http://:10254/healthz delay=10s timeout=1s period=10s #success=1 #failure=3
    Environment:
      POD_NAME:       ingress-nginx-controller-9756f5bd9-bwr2v (v1:metadata.name)
      POD_NAMESPACE:  ingress-nginx (v1:metadata.namespace)
      LD_PRELOAD:     /usr/local/lib/libmimalloc.so
    Mounts:
      /usr/local/certificates/ from webhook-cert (ro)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-bhk4d (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  webhook-cert:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  ingress-nginx-admission
    Optional:    false
  kube-api-access-bhk4d:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   Burstable
Node-Selectors:              kubernetes.io/os=linux
Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:                      <none>


Name:                 aws-node-8wdht
Namespace:            kube-system
Priority:             2000001000
Priority Class Name:  system-node-critical
Service Account:      aws-node
Node:                 ip-10-104-128-161.ec2.internal/10.104.128.161
Start Time:           Thu, 03 Oct 2024 05:55:18 -0400
Labels:               app.kubernetes.io/instance=aws-vpc-cni
                      app.kubernetes.io/name=aws-node
                      controller-revision-hash=6cf5b4754c
                      k8s-app=aws-node
                      pod-template-generation=2
Annotations:          <none>
Status:               Running
IP:                   10.104.128.161
IPs:
  IP:           10.104.128.161
Controlled By:  DaemonSet/aws-node
Init Containers:
  aws-vpc-cni-init:
    Container ID:   containerd://80aa03f69cdf1dfea61e64836518c6b1f58297200544973f68c75d8b684e80fd
    Image:          602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon-k8s-cni-init:v1.18.3-eksbuild.2
    Image ID:       sha256:addf38b09e5099344c33a451c35f4ae26b321549f05aa62c50b4e74fed9c26a6
    Port:           <none>
    Host Port:      <none>
    State:          Terminated
      Reason:       Completed
      Exit Code:    0
      Started:      Thu, 03 Oct 2024 05:55:18 -0400
      Finished:     Thu, 03 Oct 2024 05:55:18 -0400
    Ready:          True
    Restart Count:  0
    Requests:
      cpu:  25m
    Environment:
      DISABLE_TCP_EARLY_DEMUX:  false
      ENABLE_IPv6:              false
    Mounts:
      /host/opt/cni/bin from cni-bin-dir (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-cg68x (ro)
Containers:
  aws-node:
    Container ID:   containerd://d61284a7006db2ac397cdc411e0765b8a3a3ad603cb742e4e0254a0e03c28cd3
    Image:          602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon-k8s-cni:v1.18.3-eksbuild.2
    Image ID:       sha256:f65b58751c202d60e13020ac144c608728fd2fcea406d6cafac1e755d5839673
    Port:           61678/TCP
    Host Port:      61678/TCP
    State:          Running
      Started:      Thu, 03 Oct 2024 05:55:19 -0400
    Ready:          True
    Restart Count:  0
    Requests:
      cpu:      25m
    Liveness:   exec [/app/grpc-health-probe -addr=:50051 -connect-timeout=5s -rpc-timeout=5s] delay=60s timeout=10s period=10s #success=1 #failure=3
    Readiness:  exec [/app/grpc-health-probe -addr=:50051 -connect-timeout=5s -rpc-timeout=5s] delay=1s timeout=10s period=10s #success=1 #failure=3
    Environment:
      ADDITIONAL_ENI_TAGS:                    {}
      ANNOTATE_POD_IP:                        false
      AWS_VPC_CNI_NODE_PORT_SUPPORT:          true
      AWS_VPC_ENI_MTU:                        9001
      AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG:     false
      AWS_VPC_K8S_CNI_EXTERNALSNAT:           false
      AWS_VPC_K8S_CNI_LOGLEVEL:               DEBUG
      AWS_VPC_K8S_CNI_LOG_FILE:               /host/var/log/aws-routed-eni/ipamd.log
      AWS_VPC_K8S_CNI_RANDOMIZESNAT:          prng
      AWS_VPC_K8S_CNI_VETHPREFIX:             eni
      AWS_VPC_K8S_PLUGIN_LOG_FILE:            /var/log/aws-routed-eni/plugin.log
      AWS_VPC_K8S_PLUGIN_LOG_LEVEL:           DEBUG
      CLUSTER_ENDPOINT:                       https://178AE1BF31E1B14F35D0CAFE8F59ED13.gr7.us-east-1.eks.amazonaws.com
      CLUSTER_NAME:                           2szv4dtt-K8s
      DISABLE_INTROSPECTION:                  false
      DISABLE_METRICS:                        false
      DISABLE_NETWORK_RESOURCE_PROVISIONING:  false
      ENABLE_IPv4:                            true
      ENABLE_IPv6:                            false
      ENABLE_POD_ENI:                         false
      ENABLE_PREFIX_DELEGATION:               false
      ENABLE_SUBNET_DISCOVERY:                true
      NETWORK_POLICY_ENFORCING_MODE:          standard
      VPC_CNI_VERSION:                        v1.18.3
      VPC_ID:                                 vpc-00fdb9083fc4969ce
      WARM_ENI_TARGET:                        1
      WARM_PREFIX_TARGET:                     1
      MY_NODE_NAME:                            (v1:spec.nodeName)
      MY_POD_NAME:                            aws-node-8wdht (v1:metadata.name)
    Mounts:
      /host/etc/cni/net.d from cni-net-dir (rw)
      /host/opt/cni/bin from cni-bin-dir (rw)
      /host/var/log/aws-routed-eni from log-dir (rw)
      /run/xtables.lock from xtables-lock (rw)
      /var/run/aws-node from run-dir (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-cg68x (ro)
  aws-eks-nodeagent:
    Container ID:  containerd://308759cdde663d89c6f1b38400b47fa9edcd22cc2c30814385620b2951e4ff4d
    Image:         602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.2-eksbuild.2
    Image ID:      602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-network-policy-agent@sha256:9744cc538f8f7afa925ada8afb4b32f6c9c7fb225383978c8f2701df1220bb9f
    Port:          <none>
    Host Port:     <none>
    Args:
      --enable-ipv6=false
      --enable-network-policy=false
      --enable-cloudwatch-logs=false
      --enable-policy-event-logs=false
      --log-file=/var/log/aws-routed-eni/network-policy-agent.log
      --metrics-bind-addr=:8162
      --health-probe-bind-addr=:8163
      --conntrack-cache-cleanup-period=300
    State:          Running
      Started:      Thu, 03 Oct 2024 05:55:20 -0400
    Ready:          True
    Restart Count:  0
    Requests:
      cpu:  25m
    Environment:
      MY_NODE_NAME:   (v1:spec.nodeName)
    Mounts:
      /host/opt/cni/bin from cni-bin-dir (rw)
      /sys/fs/bpf from bpf-pin-path (rw)
      /var/log/aws-routed-eni from log-dir (rw)
      /var/run/aws-node from run-dir (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-cg68x (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  bpf-pin-path:
    Type:          HostPath (bare host directory volume)
    Path:          /sys/fs/bpf
    HostPathType:  
  cni-bin-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /opt/cni/bin
    HostPathType:  
  cni-net-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /etc/cni/net.d
    HostPathType:  
  log-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /var/log/aws-routed-eni
    HostPathType:  DirectoryOrCreate
  run-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /var/run/aws-node
    HostPathType:  DirectoryOrCreate
  xtables-lock:
    Type:          HostPath (bare host directory volume)
    Path:          /run/xtables.lock
    HostPathType:  FileOrCreate
  kube-api-access-cg68x:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   Burstable
Node-Selectors:              <none>
Tolerations:                 op=Exists
                             node.kubernetes.io/disk-pressure:NoSchedule op=Exists
                             node.kubernetes.io/memory-pressure:NoSchedule op=Exists
                             node.kubernetes.io/network-unavailable:NoSchedule op=Exists
                             node.kubernetes.io/not-ready:NoExecute op=Exists
                             node.kubernetes.io/pid-pressure:NoSchedule op=Exists
                             node.kubernetes.io/unreachable:NoExecute op=Exists
                             node.kubernetes.io/unschedulable:NoSchedule op=Exists
Events:                      <none>


Name:                 aws-node-gfvp8
Namespace:            kube-system
Priority:             2000001000
Priority Class Name:  system-node-critical
Service Account:      aws-node
Node:                 ip-10-104-128-67.ec2.internal/10.104.128.67
Start Time:           Fri, 04 Oct 2024 11:10:37 -0400
Labels:               app.kubernetes.io/instance=aws-vpc-cni
                      app.kubernetes.io/name=aws-node
                      controller-revision-hash=6cf5b4754c
                      k8s-app=aws-node
                      pod-template-generation=2
Annotations:          <none>
Status:               Running
IP:                   10.104.128.67
IPs:
  IP:           10.104.128.67
Controlled By:  DaemonSet/aws-node
Init Containers:
  aws-vpc-cni-init:
    Container ID:   containerd://5c29663a5fa09b5421c5342ea216160e2ca46df50079f6d410f8e34d215a5f14
    Image:          602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon-k8s-cni-init:v1.18.3-eksbuild.2
    Image ID:       sha256:addf38b09e5099344c33a451c35f4ae26b321549f05aa62c50b4e74fed9c26a6
    Port:           <none>
    Host Port:      <none>
    State:          Terminated
      Reason:       Completed
      Exit Code:    0
      Started:      Fri, 04 Oct 2024 11:10:43 -0400
      Finished:     Fri, 04 Oct 2024 11:10:44 -0400
    Ready:          True
    Restart Count:  0
    Requests:
      cpu:  25m
    Environment:
      DISABLE_TCP_EARLY_DEMUX:  false
      ENABLE_IPv6:              false
    Mounts:
      /host/opt/cni/bin from cni-bin-dir (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-25wck (ro)
Containers:
  aws-node:
    Container ID:   containerd://4b9018f81fc5ab0d645083c3268158ff2ecd668d66fe70a778289e924a60264c
    Image:          602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon-k8s-cni:v1.18.3-eksbuild.2
    Image ID:       sha256:f65b58751c202d60e13020ac144c608728fd2fcea406d6cafac1e755d5839673
    Port:           61678/TCP
    Host Port:      61678/TCP
    State:          Running
      Started:      Fri, 04 Oct 2024 11:10:47 -0400
    Ready:          True
    Restart Count:  0
    Requests:
      cpu:      25m
    Liveness:   exec [/app/grpc-health-probe -addr=:50051 -connect-timeout=5s -rpc-timeout=5s] delay=60s timeout=10s period=10s #success=1 #failure=3
    Readiness:  exec [/app/grpc-health-probe -addr=:50051 -connect-timeout=5s -rpc-timeout=5s] delay=1s timeout=10s period=10s #success=1 #failure=3
    Environment:
      ADDITIONAL_ENI_TAGS:                    {}
      ANNOTATE_POD_IP:                        false
      AWS_VPC_CNI_NODE_PORT_SUPPORT:          true
      AWS_VPC_ENI_MTU:                        9001
      AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG:     false
      AWS_VPC_K8S_CNI_EXTERNALSNAT:           false
      AWS_VPC_K8S_CNI_LOGLEVEL:               DEBUG
      AWS_VPC_K8S_CNI_LOG_FILE:               /host/var/log/aws-routed-eni/ipamd.log
      AWS_VPC_K8S_CNI_RANDOMIZESNAT:          prng
      AWS_VPC_K8S_CNI_VETHPREFIX:             eni
      AWS_VPC_K8S_PLUGIN_LOG_FILE:            /var/log/aws-routed-eni/plugin.log
      AWS_VPC_K8S_PLUGIN_LOG_LEVEL:           DEBUG
      CLUSTER_ENDPOINT:                       https://178AE1BF31E1B14F35D0CAFE8F59ED13.gr7.us-east-1.eks.amazonaws.com
      CLUSTER_NAME:                           2szv4dtt-K8s
      DISABLE_INTROSPECTION:                  false
      DISABLE_METRICS:                        false
      DISABLE_NETWORK_RESOURCE_PROVISIONING:  false
      ENABLE_IPv4:                            true
      ENABLE_IPv6:                            false
      ENABLE_POD_ENI:                         false
      ENABLE_PREFIX_DELEGATION:               false
      ENABLE_SUBNET_DISCOVERY:                true
      NETWORK_POLICY_ENFORCING_MODE:          standard
      VPC_CNI_VERSION:                        v1.18.3
      VPC_ID:                                 vpc-00fdb9083fc4969ce
      WARM_ENI_TARGET:                        1
      WARM_PREFIX_TARGET:                     1
      MY_NODE_NAME:                            (v1:spec.nodeName)
      MY_POD_NAME:                            aws-node-gfvp8 (v1:metadata.name)
    Mounts:
      /host/etc/cni/net.d from cni-net-dir (rw)
      /host/opt/cni/bin from cni-bin-dir (rw)
      /host/var/log/aws-routed-eni from log-dir (rw)
      /run/xtables.lock from xtables-lock (rw)
      /var/run/aws-node from run-dir (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-25wck (ro)
  aws-eks-nodeagent:
    Container ID:  containerd://1a3c8789f6cec4ac8ce50ed08db0853ab9724619ff9adfc3fd0c8d8014e38b93
    Image:         602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.2-eksbuild.2
    Image ID:      602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-network-policy-agent@sha256:9744cc538f8f7afa925ada8afb4b32f6c9c7fb225383978c8f2701df1220bb9f
    Port:          <none>
    Host Port:     <none>
    Args:
      --enable-ipv6=false
      --enable-network-policy=false
      --enable-cloudwatch-logs=false
      --enable-policy-event-logs=false
      --log-file=/var/log/aws-routed-eni/network-policy-agent.log
      --metrics-bind-addr=:8162
      --health-probe-bind-addr=:8163
      --conntrack-cache-cleanup-period=300
    State:          Running
      Started:      Fri, 04 Oct 2024 11:10:49 -0400
    Ready:          True
    Restart Count:  0
    Requests:
      cpu:  25m
    Environment:
      MY_NODE_NAME:   (v1:spec.nodeName)
    Mounts:
      /host/opt/cni/bin from cni-bin-dir (rw)
      /sys/fs/bpf from bpf-pin-path (rw)
      /var/log/aws-routed-eni from log-dir (rw)
      /var/run/aws-node from run-dir (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-25wck (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  bpf-pin-path:
    Type:          HostPath (bare host directory volume)
    Path:          /sys/fs/bpf
    HostPathType:  
  cni-bin-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /opt/cni/bin
    HostPathType:  
  cni-net-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /etc/cni/net.d
    HostPathType:  
  log-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /var/log/aws-routed-eni
    HostPathType:  DirectoryOrCreate
  run-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /var/run/aws-node
    HostPathType:  DirectoryOrCreate
  xtables-lock:
    Type:          HostPath (bare host directory volume)
    Path:          /run/xtables.lock
    HostPathType:  FileOrCreate
  kube-api-access-25wck:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   Burstable
Node-Selectors:              <none>
Tolerations:                 op=Exists
                             node.kubernetes.io/disk-pressure:NoSchedule op=Exists
                             node.kubernetes.io/memory-pressure:NoSchedule op=Exists
                             node.kubernetes.io/network-unavailable:NoSchedule op=Exists
                             node.kubernetes.io/not-ready:NoExecute op=Exists
                             node.kubernetes.io/pid-pressure:NoSchedule op=Exists
                             node.kubernetes.io/unreachable:NoExecute op=Exists
                             node.kubernetes.io/unschedulable:NoSchedule op=Exists
Events:                      <none>


Name:                 aws-node-vhgb9
Namespace:            kube-system
Priority:             2000001000
Priority Class Name:  system-node-critical
Service Account:      aws-node
Node:                 ip-10-104-0-39.ec2.internal/10.104.0.39
Start Time:           Mon, 07 Oct 2024 02:58:23 -0400
Labels:               app.kubernetes.io/instance=aws-vpc-cni
                      app.kubernetes.io/name=aws-node
                      controller-revision-hash=6cf5b4754c
                      k8s-app=aws-node
                      pod-template-generation=2
Annotations:          <none>
Status:               Running
IP:                   10.104.0.39
IPs:
  IP:           10.104.0.39
Controlled By:  DaemonSet/aws-node
Init Containers:
  aws-vpc-cni-init:
    Container ID:   containerd://b1b0637a4df7e0453a25a42f90844da58d8826ae5e4a8c2371524f8b921a23d0
    Image:          602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon-k8s-cni-init:v1.18.3-eksbuild.2
    Image ID:       sha256:addf38b09e5099344c33a451c35f4ae26b321549f05aa62c50b4e74fed9c26a6
    Port:           <none>
    Host Port:      <none>
    State:          Terminated
      Reason:       Completed
      Exit Code:    0
      Started:      Mon, 07 Oct 2024 02:58:31 -0400
      Finished:     Mon, 07 Oct 2024 02:58:31 -0400
    Ready:          True
    Restart Count:  0
    Requests:
      cpu:  25m
    Environment:
      DISABLE_TCP_EARLY_DEMUX:  false
      ENABLE_IPv6:              false
    Mounts:
      /host/opt/cni/bin from cni-bin-dir (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-nbsjm (ro)
Containers:
  aws-node:
    Container ID:   containerd://f7c223bac4b0b020ead3b2d95492a63ad97f859548e957d6bd50d775ad89f64e
    Image:          602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon-k8s-cni:v1.18.3-eksbuild.2
    Image ID:       sha256:f65b58751c202d60e13020ac144c608728fd2fcea406d6cafac1e755d5839673
    Port:           61678/TCP
    Host Port:      61678/TCP
    State:          Running
      Started:      Mon, 07 Oct 2024 02:58:33 -0400
    Ready:          True
    Restart Count:  0
    Requests:
      cpu:      25m
    Liveness:   exec [/app/grpc-health-probe -addr=:50051 -connect-timeout=5s -rpc-timeout=5s] delay=60s timeout=10s period=10s #success=1 #failure=3
    Readiness:  exec [/app/grpc-health-probe -addr=:50051 -connect-timeout=5s -rpc-timeout=5s] delay=1s timeout=10s period=10s #success=1 #failure=3
    Environment:
      ADDITIONAL_ENI_TAGS:                    {}
      ANNOTATE_POD_IP:                        false
      AWS_VPC_CNI_NODE_PORT_SUPPORT:          true
      AWS_VPC_ENI_MTU:                        9001
      AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG:     false
      AWS_VPC_K8S_CNI_EXTERNALSNAT:           false
      AWS_VPC_K8S_CNI_LOGLEVEL:               DEBUG
      AWS_VPC_K8S_CNI_LOG_FILE:               /host/var/log/aws-routed-eni/ipamd.log
      AWS_VPC_K8S_CNI_RANDOMIZESNAT:          prng
      AWS_VPC_K8S_CNI_VETHPREFIX:             eni
      AWS_VPC_K8S_PLUGIN_LOG_FILE:            /var/log/aws-routed-eni/plugin.log
      AWS_VPC_K8S_PLUGIN_LOG_LEVEL:           DEBUG
      CLUSTER_ENDPOINT:                       https://178AE1BF31E1B14F35D0CAFE8F59ED13.gr7.us-east-1.eks.amazonaws.com
      CLUSTER_NAME:                           2szv4dtt-K8s
      DISABLE_INTROSPECTION:                  false
      DISABLE_METRICS:                        false
      DISABLE_NETWORK_RESOURCE_PROVISIONING:  false
      ENABLE_IPv4:                            true
      ENABLE_IPv6:                            false
      ENABLE_POD_ENI:                         false
      ENABLE_PREFIX_DELEGATION:               false
      ENABLE_SUBNET_DISCOVERY:                true
      NETWORK_POLICY_ENFORCING_MODE:          standard
      VPC_CNI_VERSION:                        v1.18.3
      VPC_ID:                                 vpc-00fdb9083fc4969ce
      WARM_ENI_TARGET:                        1
      WARM_PREFIX_TARGET:                     1
      MY_NODE_NAME:                            (v1:spec.nodeName)
      MY_POD_NAME:                            aws-node-vhgb9 (v1:metadata.name)
    Mounts:
      /host/etc/cni/net.d from cni-net-dir (rw)
      /host/opt/cni/bin from cni-bin-dir (rw)
      /host/var/log/aws-routed-eni from log-dir (rw)
      /run/xtables.lock from xtables-lock (rw)
      /var/run/aws-node from run-dir (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-nbsjm (ro)
  aws-eks-nodeagent:
    Container ID:  containerd://27fcf27d169f0a5f355aaa0905416ce7feb8bb8fb949a546078d0dfb1803826a
    Image:         602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.2-eksbuild.2
    Image ID:      602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-network-policy-agent@sha256:9744cc538f8f7afa925ada8afb4b32f6c9c7fb225383978c8f2701df1220bb9f
    Port:          <none>
    Host Port:     <none>
    Args:
      --enable-ipv6=false
      --enable-network-policy=false
      --enable-cloudwatch-logs=false
      --enable-policy-event-logs=false
      --log-file=/var/log/aws-routed-eni/network-policy-agent.log
      --metrics-bind-addr=:8162
      --health-probe-bind-addr=:8163
      --conntrack-cache-cleanup-period=300
    State:          Running
      Started:      Mon, 07 Oct 2024 02:58:35 -0400
    Ready:          True
    Restart Count:  0
    Requests:
      cpu:  25m
    Environment:
      MY_NODE_NAME:   (v1:spec.nodeName)
    Mounts:
      /host/opt/cni/bin from cni-bin-dir (rw)
      /sys/fs/bpf from bpf-pin-path (rw)
      /var/log/aws-routed-eni from log-dir (rw)
      /var/run/aws-node from run-dir (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-nbsjm (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  bpf-pin-path:
    Type:          HostPath (bare host directory volume)
    Path:          /sys/fs/bpf
    HostPathType:  
  cni-bin-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /opt/cni/bin
    HostPathType:  
  cni-net-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /etc/cni/net.d
    HostPathType:  
  log-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /var/log/aws-routed-eni
    HostPathType:  DirectoryOrCreate
  run-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /var/run/aws-node
    HostPathType:  DirectoryOrCreate
  xtables-lock:
    Type:          HostPath (bare host directory volume)
    Path:          /run/xtables.lock
    HostPathType:  FileOrCreate
  kube-api-access-nbsjm:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   Burstable
Node-Selectors:              <none>
Tolerations:                 op=Exists
                             node.kubernetes.io/disk-pressure:NoSchedule op=Exists
                             node.kubernetes.io/memory-pressure:NoSchedule op=Exists
                             node.kubernetes.io/network-unavailable:NoSchedule op=Exists
                             node.kubernetes.io/not-ready:NoExecute op=Exists
                             node.kubernetes.io/pid-pressure:NoSchedule op=Exists
                             node.kubernetes.io/unreachable:NoExecute op=Exists
                             node.kubernetes.io/unschedulable:NoSchedule op=Exists
Events:                      <none>


Name:                 aws-node-zrq7z
Namespace:            kube-system
Priority:             2000001000
Priority Class Name:  system-node-critical
Service Account:      aws-node
Node:                 ip-10-104-0-135.ec2.internal/10.104.0.135
Start Time:           Thu, 03 Oct 2024 05:55:14 -0400
Labels:               app.kubernetes.io/instance=aws-vpc-cni
                      app.kubernetes.io/name=aws-node
                      controller-revision-hash=6cf5b4754c
                      k8s-app=aws-node
                      pod-template-generation=2
Annotations:          <none>
Status:               Running
IP:                   10.104.0.135
IPs:
  IP:           10.104.0.135
Controlled By:  DaemonSet/aws-node
Init Containers:
  aws-vpc-cni-init:
    Container ID:   containerd://bd8635855aa4b527340e297f1d0b468510afc896902b50565bc54d9b49480730
    Image:          602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon-k8s-cni-init:v1.18.3-eksbuild.2
    Image ID:       sha256:addf38b09e5099344c33a451c35f4ae26b321549f05aa62c50b4e74fed9c26a6
    Port:           <none>
    Host Port:      <none>
    State:          Terminated
      Reason:       Completed
      Exit Code:    0
      Started:      Thu, 03 Oct 2024 05:55:15 -0400
      Finished:     Thu, 03 Oct 2024 05:55:15 -0400
    Ready:          True
    Restart Count:  0
    Requests:
      cpu:  25m
    Environment:
      DISABLE_TCP_EARLY_DEMUX:  false
      ENABLE_IPv6:              false
    Mounts:
      /host/opt/cni/bin from cni-bin-dir (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-z8hp9 (ro)
Containers:
  aws-node:
    Container ID:   containerd://87d04820b923b5e3619687efb6b8b0940605c6eeb9594a9ae480fc85776bd86e
    Image:          602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon-k8s-cni:v1.18.3-eksbuild.2
    Image ID:       sha256:f65b58751c202d60e13020ac144c608728fd2fcea406d6cafac1e755d5839673
    Port:           61678/TCP
    Host Port:      61678/TCP
    State:          Running
      Started:      Thu, 03 Oct 2024 05:55:15 -0400
    Ready:          True
    Restart Count:  0
    Requests:
      cpu:      25m
    Liveness:   exec [/app/grpc-health-probe -addr=:50051 -connect-timeout=5s -rpc-timeout=5s] delay=60s timeout=10s period=10s #success=1 #failure=3
    Readiness:  exec [/app/grpc-health-probe -addr=:50051 -connect-timeout=5s -rpc-timeout=5s] delay=1s timeout=10s period=10s #success=1 #failure=3
    Environment:
      ADDITIONAL_ENI_TAGS:                    {}
      ANNOTATE_POD_IP:                        false
      AWS_VPC_CNI_NODE_PORT_SUPPORT:          true
      AWS_VPC_ENI_MTU:                        9001
      AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG:     false
      AWS_VPC_K8S_CNI_EXTERNALSNAT:           false
      AWS_VPC_K8S_CNI_LOGLEVEL:               DEBUG
      AWS_VPC_K8S_CNI_LOG_FILE:               /host/var/log/aws-routed-eni/ipamd.log
      AWS_VPC_K8S_CNI_RANDOMIZESNAT:          prng
      AWS_VPC_K8S_CNI_VETHPREFIX:             eni
      AWS_VPC_K8S_PLUGIN_LOG_FILE:            /var/log/aws-routed-eni/plugin.log
      AWS_VPC_K8S_PLUGIN_LOG_LEVEL:           DEBUG
      CLUSTER_ENDPOINT:                       https://178AE1BF31E1B14F35D0CAFE8F59ED13.gr7.us-east-1.eks.amazonaws.com
      CLUSTER_NAME:                           2szv4dtt-K8s
      DISABLE_INTROSPECTION:                  false
      DISABLE_METRICS:                        false
      DISABLE_NETWORK_RESOURCE_PROVISIONING:  false
      ENABLE_IPv4:                            true
      ENABLE_IPv6:                            false
      ENABLE_POD_ENI:                         false
      ENABLE_PREFIX_DELEGATION:               false
      ENABLE_SUBNET_DISCOVERY:                true
      NETWORK_POLICY_ENFORCING_MODE:          standard
      VPC_CNI_VERSION:                        v1.18.3
      VPC_ID:                                 vpc-00fdb9083fc4969ce
      WARM_ENI_TARGET:                        1
      WARM_PREFIX_TARGET:                     1
      MY_NODE_NAME:                            (v1:spec.nodeName)
      MY_POD_NAME:                            aws-node-zrq7z (v1:metadata.name)
    Mounts:
      /host/etc/cni/net.d from cni-net-dir (rw)
      /host/opt/cni/bin from cni-bin-dir (rw)
      /host/var/log/aws-routed-eni from log-dir (rw)
      /run/xtables.lock from xtables-lock (rw)
      /var/run/aws-node from run-dir (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-z8hp9 (ro)
  aws-eks-nodeagent:
    Container ID:  containerd://935f7000da513cc3e8c7a061d39bd9e75cf9bb1852434f9b7e51bce51a12c0c5
    Image:         602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.2-eksbuild.2
    Image ID:      602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-network-policy-agent@sha256:9744cc538f8f7afa925ada8afb4b32f6c9c7fb225383978c8f2701df1220bb9f
    Port:          <none>
    Host Port:     <none>
    Args:
      --enable-ipv6=false
      --enable-network-policy=false
      --enable-cloudwatch-logs=false
      --enable-policy-event-logs=false
      --log-file=/var/log/aws-routed-eni/network-policy-agent.log
      --metrics-bind-addr=:8162
      --health-probe-bind-addr=:8163
      --conntrack-cache-cleanup-period=300
    State:          Running
      Started:      Thu, 03 Oct 2024 05:55:15 -0400
    Ready:          True
    Restart Count:  0
    Requests:
      cpu:  25m
    Environment:
      MY_NODE_NAME:   (v1:spec.nodeName)
    Mounts:
      /host/opt/cni/bin from cni-bin-dir (rw)
      /sys/fs/bpf from bpf-pin-path (rw)
      /var/log/aws-routed-eni from log-dir (rw)
      /var/run/aws-node from run-dir (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-z8hp9 (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  bpf-pin-path:
    Type:          HostPath (bare host directory volume)
    Path:          /sys/fs/bpf
    HostPathType:  
  cni-bin-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /opt/cni/bin
    HostPathType:  
  cni-net-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /etc/cni/net.d
    HostPathType:  
  log-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /var/log/aws-routed-eni
    HostPathType:  DirectoryOrCreate
  run-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /var/run/aws-node
    HostPathType:  DirectoryOrCreate
  xtables-lock:
    Type:          HostPath (bare host directory volume)
    Path:          /run/xtables.lock
    HostPathType:  FileOrCreate
  kube-api-access-z8hp9:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   Burstable
Node-Selectors:              <none>
Tolerations:                 op=Exists
                             node.kubernetes.io/disk-pressure:NoSchedule op=Exists
                             node.kubernetes.io/memory-pressure:NoSchedule op=Exists
                             node.kubernetes.io/network-unavailable:NoSchedule op=Exists
                             node.kubernetes.io/not-ready:NoExecute op=Exists
                             node.kubernetes.io/pid-pressure:NoSchedule op=Exists
                             node.kubernetes.io/unreachable:NoExecute op=Exists
                             node.kubernetes.io/unschedulable:NoSchedule op=Exists
Events:                      <none>


Name:                 coredns-789f8477df-9cfrj
Namespace:            kube-system
Priority:             2000000000
Priority Class Name:  system-cluster-critical
Service Account:      coredns
Node:                 ip-10-104-128-161.ec2.internal/10.104.128.161
Start Time:           Thu, 03 Oct 2024 05:54:52 -0400
Labels:               eks.amazonaws.com/component=coredns
                      k8s-app=kube-dns
                      pod-template-hash=789f8477df
Annotations:          <none>
Status:               Running
IP:                   10.104.128.44
IPs:
  IP:           10.104.128.44
Controlled By:  ReplicaSet/coredns-789f8477df
Containers:
  coredns:
    Container ID:  containerd://49b1080d706f62c15e7a4c9bf95ea20bd145e4c86970c22addfb5573d6a9f285
    Image:         602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/coredns:v1.11.3-eksbuild.1
    Image ID:      602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/coredns@sha256:5a047e99333089d71ed61efa3aba76b4bc2bc581c801d3a661d1109d90c3e1e6
    Ports:         53/UDP, 53/TCP, 9153/TCP
    Host Ports:    0/UDP, 0/TCP, 0/TCP
    Args:
      -conf
      /etc/coredns/Corefile
    State:          Running
      Started:      Thu, 03 Oct 2024 05:54:55 -0400
    Ready:          True
    Restart Count:  0
    Limits:
      memory:  170Mi
    Requests:
      cpu:        100m
      memory:     70Mi
    Liveness:     http-get http://:8080/health delay=60s timeout=5s period=10s #success=1 #failure=5
    Readiness:    http-get http://:8181/ready delay=0s timeout=1s period=10s #success=1 #failure=3
    Environment:  <none>
    Mounts:
      /etc/coredns from config-volume (ro)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-rhh4k (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  config-volume:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      coredns
    Optional:  false
  kube-api-access-rhh4k:
    Type:                     Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:   3607
    ConfigMapName:            kube-root-ca.crt
    ConfigMapOptional:        <nil>
    DownwardAPI:              true
QoS Class:                    Burstable
Node-Selectors:               <none>
Tolerations:                  CriticalAddonsOnly op=Exists
                              node-role.kubernetes.io/control-plane:NoSchedule
                              node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                              node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Topology Spread Constraints:  topology.kubernetes.io/zone:ScheduleAnyway when max skew 1 is exceeded for selector k8s-app=kube-dns
Events:                       <none>


Name:                 coredns-789f8477df-mwqbf
Namespace:            kube-system
Priority:             2000000000
Priority Class Name:  system-cluster-critical
Service Account:      coredns
Node:                 ip-10-104-128-161.ec2.internal/10.104.128.161
Start Time:           Thu, 03 Oct 2024 05:54:53 -0400
Labels:               eks.amazonaws.com/component=coredns
                      k8s-app=kube-dns
                      pod-template-hash=789f8477df
Annotations:          <none>
Status:               Running
IP:                   10.104.128.36
IPs:
  IP:           10.104.128.36
Controlled By:  ReplicaSet/coredns-789f8477df
Containers:
  coredns:
    Container ID:  containerd://cb4fafd24544bb9ec06da2b542fb56563324e1be9c6e0c9d3da220dd700212b4
    Image:         602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/coredns:v1.11.3-eksbuild.1
    Image ID:      602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/coredns@sha256:5a047e99333089d71ed61efa3aba76b4bc2bc581c801d3a661d1109d90c3e1e6
    Ports:         53/UDP, 53/TCP, 9153/TCP
    Host Ports:    0/UDP, 0/TCP, 0/TCP
    Args:
      -conf
      /etc/coredns/Corefile
    State:          Running
      Started:      Thu, 03 Oct 2024 05:54:55 -0400
    Ready:          True
    Restart Count:  0
    Limits:
      memory:  170Mi
    Requests:
      cpu:        100m
      memory:     70Mi
    Liveness:     http-get http://:8080/health delay=60s timeout=5s period=10s #success=1 #failure=5
    Readiness:    http-get http://:8181/ready delay=0s timeout=1s period=10s #success=1 #failure=3
    Environment:  <none>
    Mounts:
      /etc/coredns from config-volume (ro)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-v9vzm (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  config-volume:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      coredns
    Optional:  false
  kube-api-access-v9vzm:
    Type:                     Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:   3607
    ConfigMapName:            kube-root-ca.crt
    ConfigMapOptional:        <nil>
    DownwardAPI:              true
QoS Class:                    Burstable
Node-Selectors:               <none>
Tolerations:                  CriticalAddonsOnly op=Exists
                              node-role.kubernetes.io/control-plane:NoSchedule
                              node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                              node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Topology Spread Constraints:  topology.kubernetes.io/zone:ScheduleAnyway when max skew 1 is exceeded for selector k8s-app=kube-dns
Events:                       <none>


Name:                 eks-pod-identity-agent-5xcg2
Namespace:            kube-system
Priority:             2000001000
Priority Class Name:  system-node-critical
Service Account:      default
Node:                 ip-10-104-0-135.ec2.internal/10.104.0.135
Start Time:           Thu, 03 Oct 2024 05:55:12 -0400
Labels:               app.kubernetes.io/instance=eks-pod-identity-agent
                      app.kubernetes.io/name=eks-pod-identity-agent
                      controller-revision-hash=7b747df5b6
                      pod-template-generation=1
Annotations:          <none>
Status:               Running
IP:                   10.104.0.135
IPs:
  IP:           10.104.0.135
Controlled By:  DaemonSet/eks-pod-identity-agent
Init Containers:
  eks-pod-identity-agent-init:
    Container ID:  containerd://5eee6be1356f404f340d92a8ae43497a5ec4452c6ceeeeebe48beef211ffdd52
    Image:         602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
    Image ID:      602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent@sha256:832ad48c9872fdcae32f2ea369d9874fa34f271b4dbc58ce04393c757befa462
    Port:          <none>
    Host Port:     <none>
    Command:
      /go-runner
      /eks-pod-identity-agent
      initialize
    State:          Terminated
      Reason:       Completed
      Exit Code:    0
      Started:      Thu, 03 Oct 2024 05:55:14 -0400
      Finished:     Thu, 03 Oct 2024 05:55:14 -0400
    Ready:          True
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-rzm5j (ro)
Containers:
  eks-pod-identity-agent:
    Container ID:  containerd://f1638eb93cc4c3f7830ac5955a6da9a3f8afed653cded399534eefdf8d68c39d
    Image:         602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
    Image ID:      602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent@sha256:832ad48c9872fdcae32f2ea369d9874fa34f271b4dbc58ce04393c757befa462
    Ports:         80/TCP, 2703/TCP
    Host Ports:    80/TCP, 2703/TCP
    Command:
      /go-runner
      /eks-pod-identity-agent
      server
    Args:
      --port
      80
      --cluster-name
      2szv4dtt-K8s
      --probe-port
      2703
    State:          Running
      Started:      Thu, 03 Oct 2024 05:55:14 -0400
    Ready:          True
    Restart Count:  0
    Liveness:       http-get http://localhost:probes-port/healthz delay=30s timeout=10s period=10s #success=1 #failure=3
    Readiness:      http-get http://localhost:probes-port/readyz delay=1s timeout=10s period=10s #success=1 #failure=30
    Environment:
      AWS_REGION:  us-east-1
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-rzm5j (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  kube-api-access-rzm5j:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              <none>
Tolerations:                 op=Exists
                             node.kubernetes.io/disk-pressure:NoSchedule op=Exists
                             node.kubernetes.io/memory-pressure:NoSchedule op=Exists
                             node.kubernetes.io/network-unavailable:NoSchedule op=Exists
                             node.kubernetes.io/not-ready:NoExecute op=Exists
                             node.kubernetes.io/pid-pressure:NoSchedule op=Exists
                             node.kubernetes.io/unreachable:NoExecute op=Exists
                             node.kubernetes.io/unschedulable:NoSchedule op=Exists
Events:                      <none>


Name:                 eks-pod-identity-agent-mb8cp
Namespace:            kube-system
Priority:             2000001000
Priority Class Name:  system-node-critical
Service Account:      default
Node:                 ip-10-104-128-67.ec2.internal/10.104.128.67
Start Time:           Fri, 04 Oct 2024 11:10:37 -0400
Labels:               app.kubernetes.io/instance=eks-pod-identity-agent
                      app.kubernetes.io/name=eks-pod-identity-agent
                      controller-revision-hash=7b747df5b6
                      pod-template-generation=1
Annotations:          <none>
Status:               Running
IP:                   10.104.128.67
IPs:
  IP:           10.104.128.67
Controlled By:  DaemonSet/eks-pod-identity-agent
Init Containers:
  eks-pod-identity-agent-init:
    Container ID:  containerd://5121291d1e7db7b7aa8bac207ca0fc433b86aa8b8e31d261e68b51ec7e9c899c
    Image:         602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
    Image ID:      602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent@sha256:832ad48c9872fdcae32f2ea369d9874fa34f271b4dbc58ce04393c757befa462
    Port:          <none>
    Host Port:     <none>
    Command:
      /go-runner
      /eks-pod-identity-agent
      initialize
    State:          Terminated
      Reason:       Completed
      Exit Code:    0
      Started:      Fri, 04 Oct 2024 11:10:40 -0400
      Finished:     Fri, 04 Oct 2024 11:10:40 -0400
    Ready:          True
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-c7xv5 (ro)
Containers:
  eks-pod-identity-agent:
    Container ID:  containerd://afb9dab5b267cb74be7064b0cc2403305153b8946fcae6397e7530f8c39ed90c
    Image:         602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
    Image ID:      602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent@sha256:832ad48c9872fdcae32f2ea369d9874fa34f271b4dbc58ce04393c757befa462
    Ports:         80/TCP, 2703/TCP
    Host Ports:    80/TCP, 2703/TCP
    Command:
      /go-runner
      /eks-pod-identity-agent
      server
    Args:
      --port
      80
      --cluster-name
      2szv4dtt-K8s
      --probe-port
      2703
    State:          Running
      Started:      Fri, 04 Oct 2024 11:10:42 -0400
    Ready:          True
    Restart Count:  0
    Liveness:       http-get http://localhost:probes-port/healthz delay=30s timeout=10s period=10s #success=1 #failure=3
    Readiness:      http-get http://localhost:probes-port/readyz delay=1s timeout=10s period=10s #success=1 #failure=30
    Environment:
      AWS_REGION:  us-east-1
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-c7xv5 (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  kube-api-access-c7xv5:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              <none>
Tolerations:                 op=Exists
                             node.kubernetes.io/disk-pressure:NoSchedule op=Exists
                             node.kubernetes.io/memory-pressure:NoSchedule op=Exists
                             node.kubernetes.io/network-unavailable:NoSchedule op=Exists
                             node.kubernetes.io/not-ready:NoExecute op=Exists
                             node.kubernetes.io/pid-pressure:NoSchedule op=Exists
                             node.kubernetes.io/unreachable:NoExecute op=Exists
                             node.kubernetes.io/unschedulable:NoSchedule op=Exists
Events:                      <none>


Name:                 eks-pod-identity-agent-mjsrr
Namespace:            kube-system
Priority:             2000001000
Priority Class Name:  system-node-critical
Service Account:      default
Node:                 ip-10-104-0-39.ec2.internal/10.104.0.39
Start Time:           Mon, 07 Oct 2024 02:58:23 -0400
Labels:               app.kubernetes.io/instance=eks-pod-identity-agent
                      app.kubernetes.io/name=eks-pod-identity-agent
                      controller-revision-hash=7b747df5b6
                      pod-template-generation=1
Annotations:          <none>
Status:               Running
IP:                   10.104.0.39
IPs:
  IP:           10.104.0.39
Controlled By:  DaemonSet/eks-pod-identity-agent
Init Containers:
  eks-pod-identity-agent-init:
    Container ID:  containerd://c3390498e016fdf58feea0a3086d71e7425fbba6580b52bce7c39eb80f34a5ef
    Image:         602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
    Image ID:      602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent@sha256:832ad48c9872fdcae32f2ea369d9874fa34f271b4dbc58ce04393c757befa462
    Port:          <none>
    Host Port:     <none>
    Command:
      /go-runner
      /eks-pod-identity-agent
      initialize
    State:          Terminated
      Reason:       Completed
      Exit Code:    0
      Started:      Mon, 07 Oct 2024 02:58:28 -0400
      Finished:     Mon, 07 Oct 2024 02:58:28 -0400
    Ready:          True
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-hvpc2 (ro)
Containers:
  eks-pod-identity-agent:
    Container ID:  containerd://66659865ace11417152ab3b67946be46ab0d88738106092e15bbeb171f16b7f8
    Image:         602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
    Image ID:      602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent@sha256:832ad48c9872fdcae32f2ea369d9874fa34f271b4dbc58ce04393c757befa462
    Ports:         80/TCP, 2703/TCP
    Host Ports:    80/TCP, 2703/TCP
    Command:
      /go-runner
      /eks-pod-identity-agent
      server
    Args:
      --port
      80
      --cluster-name
      2szv4dtt-K8s
      --probe-port
      2703
    State:          Running
      Started:      Mon, 07 Oct 2024 02:58:30 -0400
    Ready:          True
    Restart Count:  0
    Liveness:       http-get http://localhost:probes-port/healthz delay=30s timeout=10s period=10s #success=1 #failure=3
    Readiness:      http-get http://localhost:probes-port/readyz delay=1s timeout=10s period=10s #success=1 #failure=30
    Environment:
      AWS_REGION:  us-east-1
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-hvpc2 (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  kube-api-access-hvpc2:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              <none>
Tolerations:                 op=Exists
                             node.kubernetes.io/disk-pressure:NoSchedule op=Exists
                             node.kubernetes.io/memory-pressure:NoSchedule op=Exists
                             node.kubernetes.io/network-unavailable:NoSchedule op=Exists
                             node.kubernetes.io/not-ready:NoExecute op=Exists
                             node.kubernetes.io/pid-pressure:NoSchedule op=Exists
                             node.kubernetes.io/unreachable:NoExecute op=Exists
                             node.kubernetes.io/unschedulable:NoSchedule op=Exists
Events:                      <none>


Name:                 eks-pod-identity-agent-tzhk2
Namespace:            kube-system
Priority:             2000001000
Priority Class Name:  system-node-critical
Service Account:      default
Node:                 ip-10-104-128-161.ec2.internal/10.104.128.161
Start Time:           Thu, 03 Oct 2024 05:55:12 -0400
Labels:               app.kubernetes.io/instance=eks-pod-identity-agent
                      app.kubernetes.io/name=eks-pod-identity-agent
                      controller-revision-hash=7b747df5b6
                      pod-template-generation=1
Annotations:          <none>
Status:               Running
IP:                   10.104.128.161
IPs:
  IP:           10.104.128.161
Controlled By:  DaemonSet/eks-pod-identity-agent
Init Containers:
  eks-pod-identity-agent-init:
    Container ID:  containerd://c78b02e67281ea438f8b3c4bdc9cf31561565fe8544c4d320cb541e628b8f7ee
    Image:         602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
    Image ID:      602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent@sha256:832ad48c9872fdcae32f2ea369d9874fa34f271b4dbc58ce04393c757befa462
    Port:          <none>
    Host Port:     <none>
    Command:
      /go-runner
      /eks-pod-identity-agent
      initialize
    State:          Terminated
      Reason:       Completed
      Exit Code:    0
      Started:      Thu, 03 Oct 2024 05:55:13 -0400
      Finished:     Thu, 03 Oct 2024 05:55:13 -0400
    Ready:          True
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-d85qb (ro)
Containers:
  eks-pod-identity-agent:
    Container ID:  containerd://93224e1b700b5db5483f7d1c17872f6da4b6d92bec71d5065e942e0f32755129
    Image:         602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
    Image ID:      602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent@sha256:832ad48c9872fdcae32f2ea369d9874fa34f271b4dbc58ce04393c757befa462
    Ports:         80/TCP, 2703/TCP
    Host Ports:    80/TCP, 2703/TCP
    Command:
      /go-runner
      /eks-pod-identity-agent
      server
    Args:
      --port
      80
      --cluster-name
      2szv4dtt-K8s
      --probe-port
      2703
    State:          Running
      Started:      Thu, 03 Oct 2024 05:55:15 -0400
    Ready:          True
    Restart Count:  0
    Liveness:       http-get http://localhost:probes-port/healthz delay=30s timeout=10s period=10s #success=1 #failure=3
    Readiness:      http-get http://localhost:probes-port/readyz delay=1s timeout=10s period=10s #success=1 #failure=30
    Environment:
      AWS_REGION:  us-east-1
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-d85qb (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  kube-api-access-d85qb:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              <none>
Tolerations:                 op=Exists
                             node.kubernetes.io/disk-pressure:NoSchedule op=Exists
                             node.kubernetes.io/memory-pressure:NoSchedule op=Exists
                             node.kubernetes.io/network-unavailable:NoSchedule op=Exists
                             node.kubernetes.io/not-ready:NoExecute op=Exists
                             node.kubernetes.io/pid-pressure:NoSchedule op=Exists
                             node.kubernetes.io/unreachable:NoExecute op=Exists
                             node.kubernetes.io/unschedulable:NoSchedule op=Exists
Events:                      <none>


Name:                 kube-proxy-9bvsh
Namespace:            kube-system
Priority:             2000001000
Priority Class Name:  system-node-critical
Service Account:      kube-proxy
Node:                 ip-10-104-128-67.ec2.internal/10.104.128.67
Start Time:           Fri, 04 Oct 2024 11:10:37 -0400
Labels:               controller-revision-hash=6cf9ccc4bc
                      k8s-app=kube-proxy
                      pod-template-generation=1
Annotations:          <none>
Status:               Running
IP:                   10.104.128.67
IPs:
  IP:           10.104.128.67
Controlled By:  DaemonSet/kube-proxy
Containers:
  kube-proxy:
    Container ID:  containerd://2c9622264f58b3bfa81dc98bb4ce77a22ee383e39605be0c43fb634d48c91593
    Image:         602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/kube-proxy:v1.31.0-minimal-eksbuild.2
    Image ID:      sha256:90cb402e7ebc61b5e0f195d0f212b4bc4b1d6b21ecb2613b6b26e2e9c9d09e0a
    Port:          <none>
    Host Port:     <none>
    Command:
      kube-proxy
      --v=2
      --config=/var/lib/kube-proxy-config/config
      --hostname-override=$(NODE_NAME)
    State:          Running
      Started:      Fri, 04 Oct 2024 11:10:42 -0400
    Ready:          True
    Restart Count:  0
    Requests:
      cpu:  100m
    Environment:
      NODE_NAME:   (v1:spec.nodeName)
    Mounts:
      /lib/modules from lib-modules (ro)
      /run/xtables.lock from xtables-lock (rw)
      /var/lib/kube-proxy-config/ from config (rw)
      /var/lib/kube-proxy/ from kubeconfig (rw)
      /var/log from varlog (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-pj2gw (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  varlog:
    Type:          HostPath (bare host directory volume)
    Path:          /var/log
    HostPathType:  
  xtables-lock:
    Type:          HostPath (bare host directory volume)
    Path:          /run/xtables.lock
    HostPathType:  FileOrCreate
  lib-modules:
    Type:          HostPath (bare host directory volume)
    Path:          /lib/modules
    HostPathType:  
  kubeconfig:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      kube-proxy
    Optional:  false
  config:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      kube-proxy-config
    Optional:  false
  kube-api-access-pj2gw:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   Burstable
Node-Selectors:              <none>
Tolerations:                 op=Exists
                             node.kubernetes.io/disk-pressure:NoSchedule op=Exists
                             node.kubernetes.io/memory-pressure:NoSchedule op=Exists
                             node.kubernetes.io/network-unavailable:NoSchedule op=Exists
                             node.kubernetes.io/not-ready:NoExecute op=Exists
                             node.kubernetes.io/pid-pressure:NoSchedule op=Exists
                             node.kubernetes.io/unreachable:NoExecute op=Exists
                             node.kubernetes.io/unschedulable:NoSchedule op=Exists
Events:                      <none>


Name:                 kube-proxy-nzsht
Namespace:            kube-system
Priority:             2000001000
Priority Class Name:  system-node-critical
Service Account:      kube-proxy
Node:                 ip-10-104-128-161.ec2.internal/10.104.128.161
Start Time:           Thu, 03 Oct 2024 05:54:35 -0400
Labels:               controller-revision-hash=6cf9ccc4bc
                      k8s-app=kube-proxy
                      pod-template-generation=1
Annotations:          <none>
Status:               Running
IP:                   10.104.128.161
IPs:
  IP:           10.104.128.161
Controlled By:  DaemonSet/kube-proxy
Containers:
  kube-proxy:
    Container ID:  containerd://5082f44a5eae4bd9ce811861ed5598be46b748f64943e5fb53e2d0faafb0ba0d
    Image:         602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/kube-proxy:v1.31.0-minimal-eksbuild.2
    Image ID:      sha256:90cb402e7ebc61b5e0f195d0f212b4bc4b1d6b21ecb2613b6b26e2e9c9d09e0a
    Port:          <none>
    Host Port:     <none>
    Command:
      kube-proxy
      --v=2
      --config=/var/lib/kube-proxy-config/config
      --hostname-override=$(NODE_NAME)
    State:          Running
      Started:      Thu, 03 Oct 2024 05:54:40 -0400
    Ready:          True
    Restart Count:  0
    Requests:
      cpu:  100m
    Environment:
      NODE_NAME:   (v1:spec.nodeName)
    Mounts:
      /lib/modules from lib-modules (ro)
      /run/xtables.lock from xtables-lock (rw)
      /var/lib/kube-proxy-config/ from config (rw)
      /var/lib/kube-proxy/ from kubeconfig (rw)
      /var/log from varlog (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-bfnkd (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  varlog:
    Type:          HostPath (bare host directory volume)
    Path:          /var/log
    HostPathType:  
  xtables-lock:
    Type:          HostPath (bare host directory volume)
    Path:          /run/xtables.lock
    HostPathType:  FileOrCreate
  lib-modules:
    Type:          HostPath (bare host directory volume)
    Path:          /lib/modules
    HostPathType:  
  kubeconfig:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      kube-proxy
    Optional:  false
  config:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      kube-proxy-config
    Optional:  false
  kube-api-access-bfnkd:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   Burstable
Node-Selectors:              <none>
Tolerations:                 op=Exists
                             node.kubernetes.io/disk-pressure:NoSchedule op=Exists
                             node.kubernetes.io/memory-pressure:NoSchedule op=Exists
                             node.kubernetes.io/network-unavailable:NoSchedule op=Exists
                             node.kubernetes.io/not-ready:NoExecute op=Exists
                             node.kubernetes.io/pid-pressure:NoSchedule op=Exists
                             node.kubernetes.io/unreachable:NoExecute op=Exists
                             node.kubernetes.io/unschedulable:NoSchedule op=Exists
Events:                      <none>


Name:                 kube-proxy-r6s6n
Namespace:            kube-system
Priority:             2000001000
Priority Class Name:  system-node-critical
Service Account:      kube-proxy
Node:                 ip-10-104-0-135.ec2.internal/10.104.0.135
Start Time:           Thu, 03 Oct 2024 05:54:33 -0400
Labels:               controller-revision-hash=6cf9ccc4bc
                      k8s-app=kube-proxy
                      pod-template-generation=1
Annotations:          <none>
Status:               Running
IP:                   10.104.0.135
IPs:
  IP:           10.104.0.135
Controlled By:  DaemonSet/kube-proxy
Containers:
  kube-proxy:
    Container ID:  containerd://6e9092c6b4d4c874c6f0a24fb92b9e9a208836198c76bbf5e84c567695c1215a
    Image:         602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/kube-proxy:v1.31.0-minimal-eksbuild.2
    Image ID:      sha256:90cb402e7ebc61b5e0f195d0f212b4bc4b1d6b21ecb2613b6b26e2e9c9d09e0a
    Port:          <none>
    Host Port:     <none>
    Command:
      kube-proxy
      --v=2
      --config=/var/lib/kube-proxy-config/config
      --hostname-override=$(NODE_NAME)
    State:          Running
      Started:      Thu, 03 Oct 2024 05:54:47 -0400
    Ready:          True
    Restart Count:  0
    Requests:
      cpu:  100m
    Environment:
      NODE_NAME:   (v1:spec.nodeName)
    Mounts:
      /lib/modules from lib-modules (ro)
      /run/xtables.lock from xtables-lock (rw)
      /var/lib/kube-proxy-config/ from config (rw)
      /var/lib/kube-proxy/ from kubeconfig (rw)
      /var/log from varlog (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-ck4k9 (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  varlog:
    Type:          HostPath (bare host directory volume)
    Path:          /var/log
    HostPathType:  
  xtables-lock:
    Type:          HostPath (bare host directory volume)
    Path:          /run/xtables.lock
    HostPathType:  FileOrCreate
  lib-modules:
    Type:          HostPath (bare host directory volume)
    Path:          /lib/modules
    HostPathType:  
  kubeconfig:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      kube-proxy
    Optional:  false
  config:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      kube-proxy-config
    Optional:  false
  kube-api-access-ck4k9:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   Burstable
Node-Selectors:              <none>
Tolerations:                 op=Exists
                             node.kubernetes.io/disk-pressure:NoSchedule op=Exists
                             node.kubernetes.io/memory-pressure:NoSchedule op=Exists
                             node.kubernetes.io/network-unavailable:NoSchedule op=Exists
                             node.kubernetes.io/not-ready:NoExecute op=Exists
                             node.kubernetes.io/pid-pressure:NoSchedule op=Exists
                             node.kubernetes.io/unreachable:NoExecute op=Exists
                             node.kubernetes.io/unschedulable:NoSchedule op=Exists
Events:                      <none>


Name:                 kube-proxy-w647g
Namespace:            kube-system
Priority:             2000001000
Priority Class Name:  system-node-critical
Service Account:      kube-proxy
Node:                 ip-10-104-0-39.ec2.internal/10.104.0.39
Start Time:           Mon, 07 Oct 2024 02:58:23 -0400
Labels:               controller-revision-hash=6cf9ccc4bc
                      k8s-app=kube-proxy
                      pod-template-generation=1
Annotations:          <none>
Status:               Running
IP:                   10.104.0.39
IPs:
  IP:           10.104.0.39
Controlled By:  DaemonSet/kube-proxy
Containers:
  kube-proxy:
    Container ID:  containerd://8cc543ced44bfbb5cdd91d38b59b0a67f7f920c831295a124e3ea1c1a6ce253c
    Image:         602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/kube-proxy:v1.31.0-minimal-eksbuild.2
    Image ID:      sha256:90cb402e7ebc61b5e0f195d0f212b4bc4b1d6b21ecb2613b6b26e2e9c9d09e0a
    Port:          <none>
    Host Port:     <none>
    Command:
      kube-proxy
      --v=2
      --config=/var/lib/kube-proxy-config/config
      --hostname-override=$(NODE_NAME)
    State:          Running
      Started:      Mon, 07 Oct 2024 02:58:31 -0400
    Ready:          True
    Restart Count:  0
    Requests:
      cpu:  100m
    Environment:
      NODE_NAME:   (v1:spec.nodeName)
    Mounts:
      /lib/modules from lib-modules (ro)
      /run/xtables.lock from xtables-lock (rw)
      /var/lib/kube-proxy-config/ from config (rw)
      /var/lib/kube-proxy/ from kubeconfig (rw)
      /var/log from varlog (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-v8tnr (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  varlog:
    Type:          HostPath (bare host directory volume)
    Path:          /var/log
    HostPathType:  
  xtables-lock:
    Type:          HostPath (bare host directory volume)
    Path:          /run/xtables.lock
    HostPathType:  FileOrCreate
  lib-modules:
    Type:          HostPath (bare host directory volume)
    Path:          /lib/modules
    HostPathType:  
  kubeconfig:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      kube-proxy
    Optional:  false
  config:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      kube-proxy-config
    Optional:  false
  kube-api-access-v8tnr:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   Burstable
Node-Selectors:              <none>
Tolerations:                 op=Exists
                             node.kubernetes.io/disk-pressure:NoSchedule op=Exists
                             node.kubernetes.io/memory-pressure:NoSchedule op=Exists
                             node.kubernetes.io/network-unavailable:NoSchedule op=Exists
                             node.kubernetes.io/not-ready:NoExecute op=Exists
                             node.kubernetes.io/pid-pressure:NoSchedule op=Exists
                             node.kubernetes.io/unreachable:NoExecute op=Exists
                             node.kubernetes.io/unschedulable:NoSchedule op=Exists
Events:                      <none>


Name:                 pan-cni-2r4tq
Namespace:            kube-system
Priority:             2000001000
Priority Class Name:  system-node-critical
Service Account:      pan-cni-sa
Node:                 ip-10-104-128-161.ec2.internal/10.104.128.161
Start Time:           Mon, 07 Oct 2024 06:09:41 -0400
Labels:               controller-revision-hash=6b9d67c684
                      k8s-app=pan-cni
                      pod-template-generation=1
Annotations:          paloaltonetworks.com/app: pan-cni
                      scheduler.alpha.kubernetes.io/critical-pod: 
Status:               Running
IP:                   10.104.128.161
IPs:
  IP:           10.104.128.161
Controlled By:  DaemonSet/pan-cni
Containers:
  install-pan-cni:
    Container ID:  containerd://7ec8b2aca7b675cb8a4fc2c075394056229c529a87a6f1599e1104d40d696ed0
    Image:         gcr.io/pan-cn-series/airs/pan-cni:4.0.0
    Image ID:      gcr.io/pan-cn-series/airs/pan-cni@sha256:724c998c3fdf52dce1ed9fac0cfb73111ee0ead72273fae74ee21f36f7972f56
    Port:          <none>
    Host Port:     <none>
    Command:
      /install-pan-cni.sh
      main
    State:          Running
      Started:      Mon, 07 Oct 2024 06:09:45 -0400
    Ready:          True
    Restart Count:  0
    Environment:
      CNI_NETWORK_CONFIG:  <set to the key 'cni_network_config' of config map 'pan-cni-config'>  Optional: false
      MY_POD_NAMESPACE:    kube-system (v1:metadata.namespace)
      MY_POD_NAME:         pan-cni-2r4tq (v1:metadata.name)
    Mounts:
      /host/appinfo from appinfo (rw)
      /host/etc/cni/net.d from cni-net-dir (rw)
      /host/opt/cni/bin from cni-bin-dir (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-zlcbn (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  cni-bin-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /opt/cni/bin
    HostPathType:  
  cni-net-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /etc/cni/net.d
    HostPathType:  
  appinfo:
    Type:          HostPath (bare host directory volume)
    Path:          /var/log/pan-appinfo
    HostPathType:  DirectoryOrCreate
  kube-api-access-zlcbn:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              beta.kubernetes.io/os=linux
Tolerations:                 :NoSchedule op=Exists
                             :NoExecute op=Exists
                             CriticalAddonsOnly op=Exists
                             node.kubernetes.io/disk-pressure:NoSchedule op=Exists
                             node.kubernetes.io/memory-pressure:NoSchedule op=Exists
                             node.kubernetes.io/network-unavailable:NoSchedule op=Exists
                             node.kubernetes.io/not-ready:NoExecute op=Exists
                             node.kubernetes.io/pid-pressure:NoSchedule op=Exists
                             node.kubernetes.io/unreachable:NoExecute op=Exists
                             node.kubernetes.io/unschedulable:NoSchedule op=Exists
Events:                      <none>


Name:                 pan-cni-9mlqb
Namespace:            kube-system
Priority:             2000001000
Priority Class Name:  system-node-critical
Service Account:      pan-cni-sa
Node:                 ip-10-104-128-67.ec2.internal/10.104.128.67
Start Time:           Mon, 07 Oct 2024 06:09:41 -0400
Labels:               controller-revision-hash=6b9d67c684
                      k8s-app=pan-cni
                      pod-template-generation=1
Annotations:          paloaltonetworks.com/app: pan-cni
                      scheduler.alpha.kubernetes.io/critical-pod: 
Status:               Running
IP:                   10.104.128.67
IPs:
  IP:           10.104.128.67
Controlled By:  DaemonSet/pan-cni
Containers:
  install-pan-cni:
    Container ID:  containerd://7c9ecb74bd3d8340fe21795849a7bcf88e4ac24287fd73ec1064d0b02a64e533
    Image:         gcr.io/pan-cn-series/airs/pan-cni:4.0.0
    Image ID:      gcr.io/pan-cn-series/airs/pan-cni@sha256:724c998c3fdf52dce1ed9fac0cfb73111ee0ead72273fae74ee21f36f7972f56
    Port:          <none>
    Host Port:     <none>
    Command:
      /install-pan-cni.sh
      main
    State:          Running
      Started:      Mon, 07 Oct 2024 06:09:44 -0400
    Ready:          True
    Restart Count:  0
    Environment:
      CNI_NETWORK_CONFIG:  <set to the key 'cni_network_config' of config map 'pan-cni-config'>  Optional: false
      MY_POD_NAMESPACE:    kube-system (v1:metadata.namespace)
      MY_POD_NAME:         pan-cni-9mlqb (v1:metadata.name)
    Mounts:
      /host/appinfo from appinfo (rw)
      /host/etc/cni/net.d from cni-net-dir (rw)
      /host/opt/cni/bin from cni-bin-dir (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-td842 (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  cni-bin-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /opt/cni/bin
    HostPathType:  
  cni-net-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /etc/cni/net.d
    HostPathType:  
  appinfo:
    Type:          HostPath (bare host directory volume)
    Path:          /var/log/pan-appinfo
    HostPathType:  DirectoryOrCreate
  kube-api-access-td842:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              beta.kubernetes.io/os=linux
Tolerations:                 :NoSchedule op=Exists
                             :NoExecute op=Exists
                             CriticalAddonsOnly op=Exists
                             node.kubernetes.io/disk-pressure:NoSchedule op=Exists
                             node.kubernetes.io/memory-pressure:NoSchedule op=Exists
                             node.kubernetes.io/network-unavailable:NoSchedule op=Exists
                             node.kubernetes.io/not-ready:NoExecute op=Exists
                             node.kubernetes.io/pid-pressure:NoSchedule op=Exists
                             node.kubernetes.io/unreachable:NoExecute op=Exists
                             node.kubernetes.io/unschedulable:NoSchedule op=Exists
Events:                      <none>


Name:                 pan-cni-9s65j
Namespace:            kube-system
Priority:             2000001000
Priority Class Name:  system-node-critical
Service Account:      pan-cni-sa
Node:                 ip-10-104-0-135.ec2.internal/10.104.0.135
Start Time:           Mon, 07 Oct 2024 06:09:41 -0400
Labels:               controller-revision-hash=6b9d67c684
                      k8s-app=pan-cni
                      pod-template-generation=1
Annotations:          paloaltonetworks.com/app: pan-cni
                      scheduler.alpha.kubernetes.io/critical-pod: 
Status:               Running
IP:                   10.104.0.135
IPs:
  IP:           10.104.0.135
Controlled By:  DaemonSet/pan-cni
Containers:
  install-pan-cni:
    Container ID:  containerd://5ba9980a921c0bd476917be2781ccb7dc3c258a9995ffe27fda998c550ffecca
    Image:         gcr.io/pan-cn-series/airs/pan-cni:4.0.0
    Image ID:      gcr.io/pan-cn-series/airs/pan-cni@sha256:724c998c3fdf52dce1ed9fac0cfb73111ee0ead72273fae74ee21f36f7972f56
    Port:          <none>
    Host Port:     <none>
    Command:
      /install-pan-cni.sh
      main
    State:          Running
      Started:      Mon, 07 Oct 2024 06:09:44 -0400
    Ready:          True
    Restart Count:  0
    Environment:
      CNI_NETWORK_CONFIG:  <set to the key 'cni_network_config' of config map 'pan-cni-config'>  Optional: false
      MY_POD_NAMESPACE:    kube-system (v1:metadata.namespace)
      MY_POD_NAME:         pan-cni-9s65j (v1:metadata.name)
    Mounts:
      /host/appinfo from appinfo (rw)
      /host/etc/cni/net.d from cni-net-dir (rw)
      /host/opt/cni/bin from cni-bin-dir (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-h4szh (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  cni-bin-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /opt/cni/bin
    HostPathType:  
  cni-net-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /etc/cni/net.d
    HostPathType:  
  appinfo:
    Type:          HostPath (bare host directory volume)
    Path:          /var/log/pan-appinfo
    HostPathType:  DirectoryOrCreate
  kube-api-access-h4szh:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              beta.kubernetes.io/os=linux
Tolerations:                 :NoSchedule op=Exists
                             :NoExecute op=Exists
                             CriticalAddonsOnly op=Exists
                             node.kubernetes.io/disk-pressure:NoSchedule op=Exists
                             node.kubernetes.io/memory-pressure:NoSchedule op=Exists
                             node.kubernetes.io/network-unavailable:NoSchedule op=Exists
                             node.kubernetes.io/not-ready:NoExecute op=Exists
                             node.kubernetes.io/pid-pressure:NoSchedule op=Exists
                             node.kubernetes.io/unreachable:NoExecute op=Exists
                             node.kubernetes.io/unschedulable:NoSchedule op=Exists
Events:                      <none>


Name:                 pan-cni-rfmbl
Namespace:            kube-system
Priority:             2000001000
Priority Class Name:  system-node-critical
Service Account:      pan-cni-sa
Node:                 ip-10-104-0-39.ec2.internal/10.104.0.39
Start Time:           Mon, 07 Oct 2024 06:09:41 -0400
Labels:               controller-revision-hash=6b9d67c684
                      k8s-app=pan-cni
                      pod-template-generation=1
Annotations:          paloaltonetworks.com/app: pan-cni
                      scheduler.alpha.kubernetes.io/critical-pod: 
Status:               Running
IP:                   10.104.0.39
IPs:
  IP:           10.104.0.39
Controlled By:  DaemonSet/pan-cni
Containers:
  install-pan-cni:
    Container ID:  containerd://74a4022acb7d2dcc198123ec34f1b35900e62f53a699ffb0e386d5ac3fd09173
    Image:         gcr.io/pan-cn-series/airs/pan-cni:4.0.0
    Image ID:      gcr.io/pan-cn-series/airs/pan-cni@sha256:724c998c3fdf52dce1ed9fac0cfb73111ee0ead72273fae74ee21f36f7972f56
    Port:          <none>
    Host Port:     <none>
    Command:
      /install-pan-cni.sh
      main
    State:          Running
      Started:      Mon, 07 Oct 2024 06:09:45 -0400
    Ready:          True
    Restart Count:  0
    Environment:
      CNI_NETWORK_CONFIG:  <set to the key 'cni_network_config' of config map 'pan-cni-config'>  Optional: false
      MY_POD_NAMESPACE:    kube-system (v1:metadata.namespace)
      MY_POD_NAME:         pan-cni-rfmbl (v1:metadata.name)
    Mounts:
      /host/appinfo from appinfo (rw)
      /host/etc/cni/net.d from cni-net-dir (rw)
      /host/opt/cni/bin from cni-bin-dir (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-frtvh (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  cni-bin-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /opt/cni/bin
    HostPathType:  
  cni-net-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /etc/cni/net.d
    HostPathType:  
  appinfo:
    Type:          HostPath (bare host directory volume)
    Path:          /var/log/pan-appinfo
    HostPathType:  DirectoryOrCreate
  kube-api-access-frtvh:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              beta.kubernetes.io/os=linux
Tolerations:                 :NoSchedule op=Exists
                             :NoExecute op=Exists
                             CriticalAddonsOnly op=Exists
                             node.kubernetes.io/disk-pressure:NoSchedule op=Exists
                             node.kubernetes.io/memory-pressure:NoSchedule op=Exists
                             node.kubernetes.io/network-unavailable:NoSchedule op=Exists
                             node.kubernetes.io/not-ready:NoExecute op=Exists
                             node.kubernetes.io/pid-pressure:NoSchedule op=Exists
                             node.kubernetes.io/unreachable:NoExecute op=Exists
                             node.kubernetes.io/unschedulable:NoSchedule op=Exists
Events:                      <none>


Name:                     agent-service
Namespace:                ai-app
Labels:                   <none>
Annotations:              <none>
Selector:                 app=agent
Type:                     ClusterIP
IP Family Policy:         SingleStack
IP Families:              IPv4
IP:                       172.20.247.101
IPs:                      172.20.247.101
Port:                     <unset>  80/TCP
TargetPort:               3001/TCP
Endpoints:                10.104.128.24:3001
Session Affinity:         None
Internal Traffic Policy:  Cluster
Events:                   <none>


Name:                     agent-ws-service
Namespace:                ai-app
Labels:                   <none>
Annotations:              <none>
Selector:                 app=agent
Type:                     ClusterIP
IP Family Policy:         SingleStack
IP Families:              IPv4
IP:                       172.20.128.147
IPs:                      172.20.128.147
Port:                     <unset>  3001/TCP
TargetPort:               3001/TCP
Endpoints:                10.104.128.24:3001
Session Affinity:         None
Internal Traffic Policy:  Cluster
Events:                   <none>


Name:                     ui-service
Namespace:                ai-app
Labels:                   <none>
Annotations:              <none>
Selector:                 app=ui
Type:                     ClusterIP
IP Family Policy:         SingleStack
IP Families:              IPv4
IP:                       172.20.34.76
IPs:                      172.20.34.76
Port:                     <unset>  80/TCP
TargetPort:               3000/TCP
Endpoints:                10.104.0.137:3000
Session Affinity:         None
Internal Traffic Policy:  Cluster
Events:                   <none>


Name:                     agent-service
Namespace:                default
Labels:                   <none>
Annotations:              <none>
Selector:                 app=agent
Type:                     ClusterIP
IP Family Policy:         SingleStack
IP Families:              IPv4
IP:                       172.20.207.253
IPs:                      172.20.207.253
Port:                     <unset>  80/TCP
TargetPort:               3001/TCP
Endpoints:                
Session Affinity:         None
Internal Traffic Policy:  Cluster
Events:                   <none>


Name:                     kubernetes
Namespace:                default
Labels:                   component=apiserver
                          provider=kubernetes
Annotations:              <none>
Selector:                 <none>
Type:                     ClusterIP
IP Family Policy:         SingleStack
IP Families:              IPv4
IP:                       172.20.0.1
IPs:                      172.20.0.1
Port:                     https  443/TCP
TargetPort:               443/TCP
Endpoints:                10.104.0.150:443,10.104.128.236:443
Session Affinity:         None
Internal Traffic Policy:  Cluster
Events:                   <none>


Name:                     ui-service
Namespace:                default
Labels:                   <none>
Annotations:              <none>
Selector:                 app=ui
Type:                     ClusterIP
IP Family Policy:         SingleStack
IP Families:              IPv4
IP:                       172.20.127.106
IPs:                      172.20.127.106
Port:                     <unset>  80/TCP
TargetPort:               3000/TCP
Endpoints:                
Session Affinity:         None
Internal Traffic Policy:  Cluster
Events:                   <none>


Name:                     ingress-nginx-controller
Namespace:                ingress-nginx
Labels:                   app.kubernetes.io/component=controller
                          app.kubernetes.io/instance=ingress-nginx
                          app.kubernetes.io/managed-by=Helm
                          app.kubernetes.io/name=ingress-nginx
                          app.kubernetes.io/part-of=ingress-nginx
                          app.kubernetes.io/version=1.11.2
                          helm.sh/chart=ingress-nginx-4.11.2
Annotations:              meta.helm.sh/release-name: ingress-nginx
                          meta.helm.sh/release-namespace: ingress-nginx
                          service.beta.kubernetes.io/aws-load-balancer-type: nlb
Selector:                 app.kubernetes.io/component=controller,app.kubernetes.io/instance=ingress-nginx,app.kubernetes.io/name=ingress-nginx
Type:                     LoadBalancer
IP Family Policy:         SingleStack
IP Families:              IPv4
IP:                       172.20.214.241
IPs:                      172.20.214.241
LoadBalancer Ingress:     a8e5afe1fbff2457aa8a7d21eeb2943a-0ee7ac6d712fd784.elb.us-east-1.amazonaws.com
Port:                     http  80/TCP
TargetPort:               http/TCP
NodePort:                 http  30187/TCP
Endpoints:                10.104.0.26:80
Port:                     https  443/TCP
TargetPort:               https/TCP
NodePort:                 https  31959/TCP
Endpoints:                10.104.0.26:443
Session Affinity:         None
External Traffic Policy:  Cluster
Internal Traffic Policy:  Cluster
Events:                   <none>


Name:                     ingress-nginx-controller-admission
Namespace:                ingress-nginx
Labels:                   app.kubernetes.io/component=controller
                          app.kubernetes.io/instance=ingress-nginx
                          app.kubernetes.io/managed-by=Helm
                          app.kubernetes.io/name=ingress-nginx
                          app.kubernetes.io/part-of=ingress-nginx
                          app.kubernetes.io/version=1.11.2
                          helm.sh/chart=ingress-nginx-4.11.2
Annotations:              meta.helm.sh/release-name: ingress-nginx
                          meta.helm.sh/release-namespace: ingress-nginx
Selector:                 app.kubernetes.io/component=controller,app.kubernetes.io/instance=ingress-nginx,app.kubernetes.io/name=ingress-nginx
Type:                     ClusterIP
IP Family Policy:         SingleStack
IP Families:              IPv4
IP:                       172.20.126.188
IPs:                      172.20.126.188
Port:                     https-webhook  443/TCP
TargetPort:               webhook/TCP
Endpoints:                10.104.0.26:8443
Session Affinity:         None
Internal Traffic Policy:  Cluster
Events:                   <none>


Name:                     kube-dns
Namespace:                kube-system
Labels:                   eks.amazonaws.com/component=kube-dns
                          k8s-app=kube-dns
                          kubernetes.io/cluster-service=true
                          kubernetes.io/name=CoreDNS
Annotations:              prometheus.io/port: 9153
                          prometheus.io/scrape: true
Selector:                 k8s-app=kube-dns
Type:                     ClusterIP
IP Family Policy:         SingleStack
IP Families:              IPv4
IP:                       172.20.0.10
IPs:                      172.20.0.10
Port:                     dns  53/UDP
TargetPort:               53/UDP
Endpoints:                10.104.128.44:53,10.104.128.36:53
Port:                     dns-tcp  53/TCP
TargetPort:               53/TCP
Endpoints:                10.104.128.44:53,10.104.128.36:53
Port:                     metrics  9153/TCP
TargetPort:               9153/TCP
Endpoints:                10.104.128.44:9153,10.104.128.36:9153
Session Affinity:         None
Internal Traffic Policy:  Cluster
Events:                   <none>


Name:                     pan-ngfw-svc
Namespace:                kube-system
Labels:                   app=pan-ngfw-svc
                          app.kubernetes.io/managed-by=Helm
Annotations:              meta.helm.sh/release-name: ai-runtime-security
                          meta.helm.sh/release-namespace: kube-system
Selector:                 <none>
Type:                     ClusterIP
IP Family Policy:         SingleStack
IP Families:              IPv4
IP:                       172.20.63.90
IPs:                      172.20.63.90
Port:                     <unset>  6080/UDP
TargetPort:               6080/UDP
Endpoints:                10.111.0.77:6080,10.111.1.69:6080
Session Affinity:         None
Internal Traffic Policy:  Cluster
Events:                   <none>


Name:           aws-node
Selector:       k8s-app=aws-node
Node-Selector:  <none>
Labels:         app.kubernetes.io/instance=aws-vpc-cni
                app.kubernetes.io/managed-by=Helm
                app.kubernetes.io/name=aws-node
                app.kubernetes.io/version=v1.18.3
                helm.sh/chart=aws-vpc-cni-1.18.3
                k8s-app=aws-node
Annotations:    deprecated.daemonset.template.generation: 2
Desired Number of Nodes Scheduled: 4
Current Number of Nodes Scheduled: 4
Number of Nodes Scheduled with Up-to-date Pods: 4
Number of Nodes Scheduled with Available Pods: 4
Number of Nodes Misscheduled: 0
Pods Status:  4 Running / 0 Waiting / 0 Succeeded / 0 Failed
Pod Template:
  Labels:           app.kubernetes.io/instance=aws-vpc-cni
                    app.kubernetes.io/name=aws-node
                    k8s-app=aws-node
  Service Account:  aws-node
  Init Containers:
   aws-vpc-cni-init:
    Image:      602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon-k8s-cni-init:v1.18.3-eksbuild.2
    Port:       <none>
    Host Port:  <none>
    Requests:
      cpu:  25m
    Environment:
      DISABLE_TCP_EARLY_DEMUX:  false
      ENABLE_IPv6:              false
    Mounts:
      /host/opt/cni/bin from cni-bin-dir (rw)
  Containers:
   aws-node:
    Image:      602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon-k8s-cni:v1.18.3-eksbuild.2
    Port:       61678/TCP
    Host Port:  0/TCP
    Requests:
      cpu:      25m
    Liveness:   exec [/app/grpc-health-probe -addr=:50051 -connect-timeout=5s -rpc-timeout=5s] delay=60s timeout=10s period=10s #success=1 #failure=3
    Readiness:  exec [/app/grpc-health-probe -addr=:50051 -connect-timeout=5s -rpc-timeout=5s] delay=1s timeout=10s period=10s #success=1 #failure=3
    Environment:
      ADDITIONAL_ENI_TAGS:                    {}
      ANNOTATE_POD_IP:                        false
      AWS_VPC_CNI_NODE_PORT_SUPPORT:          true
      AWS_VPC_ENI_MTU:                        9001
      AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG:     false
      AWS_VPC_K8S_CNI_EXTERNALSNAT:           false
      AWS_VPC_K8S_CNI_LOGLEVEL:               DEBUG
      AWS_VPC_K8S_CNI_LOG_FILE:               /host/var/log/aws-routed-eni/ipamd.log
      AWS_VPC_K8S_CNI_RANDOMIZESNAT:          prng
      AWS_VPC_K8S_CNI_VETHPREFIX:             eni
      AWS_VPC_K8S_PLUGIN_LOG_FILE:            /var/log/aws-routed-eni/plugin.log
      AWS_VPC_K8S_PLUGIN_LOG_LEVEL:           DEBUG
      CLUSTER_ENDPOINT:                       https://178AE1BF31E1B14F35D0CAFE8F59ED13.gr7.us-east-1.eks.amazonaws.com
      CLUSTER_NAME:                           2szv4dtt-K8s
      DISABLE_INTROSPECTION:                  false
      DISABLE_METRICS:                        false
      DISABLE_NETWORK_RESOURCE_PROVISIONING:  false
      ENABLE_IPv4:                            true
      ENABLE_IPv6:                            false
      ENABLE_POD_ENI:                         false
      ENABLE_PREFIX_DELEGATION:               false
      ENABLE_SUBNET_DISCOVERY:                true
      NETWORK_POLICY_ENFORCING_MODE:          standard
      VPC_CNI_VERSION:                        v1.18.3
      VPC_ID:                                 vpc-00fdb9083fc4969ce
      WARM_ENI_TARGET:                        1
      WARM_PREFIX_TARGET:                     1
      MY_NODE_NAME:                            (v1:spec.nodeName)
      MY_POD_NAME:                             (v1:metadata.name)
    Mounts:
      /host/etc/cni/net.d from cni-net-dir (rw)
      /host/opt/cni/bin from cni-bin-dir (rw)
      /host/var/log/aws-routed-eni from log-dir (rw)
      /run/xtables.lock from xtables-lock (rw)
      /var/run/aws-node from run-dir (rw)
   aws-eks-nodeagent:
    Image:      602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.2-eksbuild.2
    Port:       <none>
    Host Port:  <none>
    Args:
      --enable-ipv6=false
      --enable-network-policy=false
      --enable-cloudwatch-logs=false
      --enable-policy-event-logs=false
      --log-file=/var/log/aws-routed-eni/network-policy-agent.log
      --metrics-bind-addr=:8162
      --health-probe-bind-addr=:8163
      --conntrack-cache-cleanup-period=300
    Requests:
      cpu:  25m
    Environment:
      MY_NODE_NAME:   (v1:spec.nodeName)
    Mounts:
      /host/opt/cni/bin from cni-bin-dir (rw)
      /sys/fs/bpf from bpf-pin-path (rw)
      /var/log/aws-routed-eni from log-dir (rw)
      /var/run/aws-node from run-dir (rw)
  Volumes:
   bpf-pin-path:
    Type:          HostPath (bare host directory volume)
    Path:          /sys/fs/bpf
    HostPathType:  
   cni-bin-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /opt/cni/bin
    HostPathType:  
   cni-net-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /etc/cni/net.d
    HostPathType:  
   log-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /var/log/aws-routed-eni
    HostPathType:  DirectoryOrCreate
   run-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /var/run/aws-node
    HostPathType:  DirectoryOrCreate
   xtables-lock:
    Type:               HostPath (bare host directory volume)
    Path:               /run/xtables.lock
    HostPathType:       FileOrCreate
  Priority Class Name:  system-node-critical
  Node-Selectors:       <none>
  Tolerations:          op=Exists
Events:                 <none>


Name:           eks-pod-identity-agent
Selector:       app.kubernetes.io/instance=eks-pod-identity-agent,app.kubernetes.io/name=eks-pod-identity-agent
Node-Selector:  <none>
Labels:         app.kubernetes.io/instance=eks-pod-identity-agent
                app.kubernetes.io/managed-by=Helm
                app.kubernetes.io/name=eks-pod-identity-agent
                app.kubernetes.io/version=0.1.15
                helm.sh/chart=eks-pod-identity-agent-1.3.2
Annotations:    deprecated.daemonset.template.generation: 1
Desired Number of Nodes Scheduled: 4
Current Number of Nodes Scheduled: 4
Number of Nodes Scheduled with Up-to-date Pods: 4
Number of Nodes Scheduled with Available Pods: 4
Number of Nodes Misscheduled: 0
Pods Status:  4 Running / 0 Waiting / 0 Succeeded / 0 Failed
Pod Template:
  Labels:  app.kubernetes.io/instance=eks-pod-identity-agent
           app.kubernetes.io/name=eks-pod-identity-agent
  Init Containers:
   eks-pod-identity-agent-init:
    Image:      602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
    Port:       <none>
    Host Port:  <none>
    Command:
      /go-runner
      /eks-pod-identity-agent
      initialize
    Environment:  <none>
    Mounts:       <none>
  Containers:
   eks-pod-identity-agent:
    Image:       602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
    Ports:       80/TCP, 2703/TCP
    Host Ports:  0/TCP, 0/TCP
    Command:
      /go-runner
      /eks-pod-identity-agent
      server
    Args:
      --port
      80
      --cluster-name
      2szv4dtt-K8s
      --probe-port
      2703
    Liveness:   http-get http://localhost:probes-port/healthz delay=30s timeout=10s period=10s #success=1 #failure=3
    Readiness:  http-get http://localhost:probes-port/readyz delay=1s timeout=10s period=10s #success=1 #failure=30
    Environment:
      AWS_REGION:       us-east-1
    Mounts:             <none>
  Volumes:              <none>
  Priority Class Name:  system-node-critical
  Node-Selectors:       <none>
  Tolerations:          op=Exists
Events:                 <none>


Name:           kube-proxy
Selector:       k8s-app=kube-proxy
Node-Selector:  <none>
Labels:         eks.amazonaws.com/component=kube-proxy
                k8s-app=kube-proxy
Annotations:    deprecated.daemonset.template.generation: 1
Desired Number of Nodes Scheduled: 4
Current Number of Nodes Scheduled: 4
Number of Nodes Scheduled with Up-to-date Pods: 4
Number of Nodes Scheduled with Available Pods: 4
Number of Nodes Misscheduled: 0
Pods Status:  4 Running / 0 Waiting / 0 Succeeded / 0 Failed
Pod Template:
  Labels:           k8s-app=kube-proxy
  Service Account:  kube-proxy
  Containers:
   kube-proxy:
    Image:      602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/kube-proxy:v1.31.0-minimal-eksbuild.2
    Port:       <none>
    Host Port:  <none>
    Command:
      kube-proxy
      --v=2
      --config=/var/lib/kube-proxy-config/config
      --hostname-override=$(NODE_NAME)
    Requests:
      cpu:  100m
    Environment:
      NODE_NAME:   (v1:spec.nodeName)
    Mounts:
      /lib/modules from lib-modules (ro)
      /run/xtables.lock from xtables-lock (rw)
      /var/lib/kube-proxy-config/ from config (rw)
      /var/lib/kube-proxy/ from kubeconfig (rw)
      /var/log from varlog (rw)
  Volumes:
   varlog:
    Type:          HostPath (bare host directory volume)
    Path:          /var/log
    HostPathType:  
   xtables-lock:
    Type:          HostPath (bare host directory volume)
    Path:          /run/xtables.lock
    HostPathType:  FileOrCreate
   lib-modules:
    Type:          HostPath (bare host directory volume)
    Path:          /lib/modules
    HostPathType:  
   kubeconfig:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      kube-proxy
    Optional:  false
   config:
    Type:               ConfigMap (a volume populated by a ConfigMap)
    Name:               kube-proxy-config
    Optional:           false
  Priority Class Name:  system-node-critical
  Node-Selectors:       <none>
  Tolerations:          op=Exists
Events:                 <none>


Name:           pan-cni
Selector:       k8s-app=pan-cni
Node-Selector:  beta.kubernetes.io/os=linux
Labels:         app.kubernetes.io/managed-by=Helm
                k8s-app=pan-cni
Annotations:    deprecated.daemonset.template.generation: 1
                meta.helm.sh/release-name: ai-runtime-security
                meta.helm.sh/release-namespace: kube-system
Desired Number of Nodes Scheduled: 4
Current Number of Nodes Scheduled: 4
Number of Nodes Scheduled with Up-to-date Pods: 4
Number of Nodes Scheduled with Available Pods: 4
Number of Nodes Misscheduled: 0
Pods Status:  4 Running / 0 Waiting / 0 Succeeded / 0 Failed
Pod Template:
  Labels:           k8s-app=pan-cni
  Annotations:      paloaltonetworks.com/app: pan-cni
                    scheduler.alpha.kubernetes.io/critical-pod: 
  Service Account:  pan-cni-sa
  Containers:
   install-pan-cni:
    Image:      gcr.io/pan-cn-series/airs/pan-cni:4.0.0
    Port:       <none>
    Host Port:  <none>
    Command:
      /install-pan-cni.sh
      main
    Environment:
      CNI_NETWORK_CONFIG:  <set to the key 'cni_network_config' of config map 'pan-cni-config'>  Optional: false
      MY_POD_NAMESPACE:     (v1:metadata.namespace)
      MY_POD_NAME:          (v1:metadata.name)
    Mounts:
      /host/appinfo from appinfo (rw)
      /host/etc/cni/net.d from cni-net-dir (rw)
      /host/opt/cni/bin from cni-bin-dir (rw)
  Volumes:
   cni-bin-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /opt/cni/bin
    HostPathType:  
   cni-net-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /etc/cni/net.d
    HostPathType:  
   appinfo:
    Type:               HostPath (bare host directory volume)
    Path:               /var/log/pan-appinfo
    HostPathType:       DirectoryOrCreate
  Priority Class Name:  system-node-critical
  Node-Selectors:       beta.kubernetes.io/os=linux
  Tolerations:          :NoSchedule op=Exists
                        :NoExecute op=Exists
                        CriticalAddonsOnly op=Exists
Events:                 <none>


Name:                   agent-deployment
Namespace:              ai-app
CreationTimestamp:      Thu, 10 Oct 2024 18:46:43 -0400
Labels:                 <none>
Annotations:            deployment.kubernetes.io/revision: 3
Selector:               app=agent
Replicas:               1 desired | 1 updated | 1 total | 1 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:           app=agent
  Service Account:  eks-pods-sa
  Containers:
   agent:
    Image:         migara/agent-app
    Port:          3001/TCP
    Host Port:     0/TCP
    Environment:   <none>
    Mounts:        <none>
  Volumes:         <none>
  Node-Selectors:  <none>
  Tolerations:     <none>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Progressing    True    NewReplicaSetAvailable
  Available      True    MinimumReplicasAvailable
OldReplicaSets:  agent-deployment-55ccdccb8c (0/0 replicas created)
NewReplicaSet:   agent-deployment-5d56ddfb98 (1/1 replicas created)
Events:          <none>


Name:                   aws-cli-deployment
Namespace:              ai-app
CreationTimestamp:      Mon, 07 Oct 2024 10:16:22 -0400
Labels:                 <none>
Annotations:            deployment.kubernetes.io/revision: 2
Selector:               app=aws-cli
Replicas:               1 desired | 1 updated | 1 total | 1 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:           app=aws-cli
  Service Account:  eks-pods-sa
  Containers:
   aws-cli:
    Image:      amazon/aws-cli
    Port:       <none>
    Host Port:  <none>
    Command:
      /bin/bash
    Args:
      -c
      yum install -y ca-certificates
      cp /custom-certs/* /etc/pki/ca-trust/source/anchors/
      update-ca-trust
      echo "Custom certificates added"
      sleep infinity
      
    Environment:
      AWS_CA_BUNDLE:  /etc/pki/ca-trust/source/anchors/Trust-Root-CA.crt
    Mounts:
      /custom-certs from custom-certs (ro)
  Volumes:
   custom-certs:
    Type:          ConfigMap (a volume populated by a ConfigMap)
    Name:          custom-ca-certs
    Optional:      false
  Node-Selectors:  <none>
  Tolerations:     <none>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      True    MinimumReplicasAvailable
  Progressing    True    NewReplicaSetAvailable
OldReplicaSets:  aws-cli-deployment-86bd569d85 (0/0 replicas created)
NewReplicaSet:   aws-cli-deployment-bb558f6c7 (1/1 replicas created)
Events:          <none>


Name:                   netshoot-deployment
Namespace:              ai-app
CreationTimestamp:      Mon, 07 Oct 2024 10:16:22 -0400
Labels:                 <none>
Annotations:            deployment.kubernetes.io/revision: 1
Selector:               app=netshoot
Replicas:               1 desired | 1 updated | 1 total | 1 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:           app=netshoot
  Service Account:  eks-pods-sa
  Containers:
   netshoot:
    Image:      nicolaka/netshoot
    Port:       <none>
    Host Port:  <none>
    Command:
      /bin/sh
    Args:
      -c
      cp /custom-certs/* /usr/local/share/ca-certificates/
      update-ca-certificates
      echo "Custom certificates added"
      while true; do sleep 3600; done
      
    Environment:  <none>
    Mounts:
      /custom-certs from custom-certs (ro)
  Volumes:
   custom-certs:
    Type:          ConfigMap (a volume populated by a ConfigMap)
    Name:          custom-ca-certs
    Optional:      false
  Node-Selectors:  <none>
  Tolerations:     <none>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      True    MinimumReplicasAvailable
  Progressing    True    NewReplicaSetAvailable
OldReplicaSets:  <none>
NewReplicaSet:   netshoot-deployment-7655b866d4 (1/1 replicas created)
Events:          <none>


Name:                   ui-deployment
Namespace:              ai-app
CreationTimestamp:      Thu, 10 Oct 2024 18:46:43 -0400
Labels:                 <none>
Annotations:            deployment.kubernetes.io/revision: 1
Selector:               app=ui
Replicas:               1 desired | 1 updated | 1 total | 1 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:  app=ui
  Containers:
   ui:
    Image:         migara/ui-app
    Port:          3000/TCP
    Host Port:     0/TCP
    Environment:   <none>
    Mounts:        <none>
  Volumes:         <none>
  Node-Selectors:  <none>
  Tolerations:     <none>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      True    MinimumReplicasAvailable
  Progressing    True    NewReplicaSetAvailable
OldReplicaSets:  <none>
NewReplicaSet:   ui-deployment-66bcb989f7 (1/1 replicas created)
Events:          <none>


Name:                   ingress-nginx-controller
Namespace:              ingress-nginx
CreationTimestamp:      Tue, 08 Oct 2024 06:23:05 -0400
Labels:                 app.kubernetes.io/component=controller
                        app.kubernetes.io/instance=ingress-nginx
                        app.kubernetes.io/managed-by=Helm
                        app.kubernetes.io/name=ingress-nginx
                        app.kubernetes.io/part-of=ingress-nginx
                        app.kubernetes.io/version=1.11.2
                        helm.sh/chart=ingress-nginx-4.11.2
Annotations:            deployment.kubernetes.io/revision: 1
                        meta.helm.sh/release-name: ingress-nginx
                        meta.helm.sh/release-namespace: ingress-nginx
Selector:               app.kubernetes.io/component=controller,app.kubernetes.io/instance=ingress-nginx,app.kubernetes.io/name=ingress-nginx
Replicas:               1 desired | 1 updated | 1 total | 1 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:           app.kubernetes.io/component=controller
                    app.kubernetes.io/instance=ingress-nginx
                    app.kubernetes.io/managed-by=Helm
                    app.kubernetes.io/name=ingress-nginx
                    app.kubernetes.io/part-of=ingress-nginx
                    app.kubernetes.io/version=1.11.2
                    helm.sh/chart=ingress-nginx-4.11.2
  Service Account:  ingress-nginx
  Containers:
   controller:
    Image:           registry.k8s.io/ingress-nginx/controller:v1.11.2@sha256:d5f8217feeac4887cb1ed21f27c2674e58be06bd8f5184cacea2a69abaf78dce
    Ports:           80/TCP, 443/TCP, 8443/TCP
    Host Ports:      0/TCP, 0/TCP, 0/TCP
    SeccompProfile:  RuntimeDefault
    Args:
      /nginx-ingress-controller
      --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
      --election-id=ingress-nginx-leader
      --controller-class=k8s.io/ingress-nginx
      --ingress-class=nginx
      --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
      --validating-webhook=:8443
      --validating-webhook-certificate=/usr/local/certificates/cert
      --validating-webhook-key=/usr/local/certificates/key
      --enable-metrics=false
    Requests:
      cpu:      100m
      memory:   90Mi
    Liveness:   http-get http://:10254/healthz delay=10s timeout=1s period=10s #success=1 #failure=5
    Readiness:  http-get http://:10254/healthz delay=10s timeout=1s period=10s #success=1 #failure=3
    Environment:
      POD_NAME:        (v1:metadata.name)
      POD_NAMESPACE:   (v1:metadata.namespace)
      LD_PRELOAD:     /usr/local/lib/libmimalloc.so
    Mounts:
      /usr/local/certificates/ from webhook-cert (ro)
  Volumes:
   webhook-cert:
    Type:          Secret (a volume populated by a Secret)
    SecretName:    ingress-nginx-admission
    Optional:      false
  Node-Selectors:  kubernetes.io/os=linux
  Tolerations:     <none>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      True    MinimumReplicasAvailable
  Progressing    True    NewReplicaSetAvailable
OldReplicaSets:  <none>
NewReplicaSet:   ingress-nginx-controller-9756f5bd9 (1/1 replicas created)
Events:          <none>


Name:                   coredns
Namespace:              kube-system
CreationTimestamp:      Thu, 03 Oct 2024 05:50:26 -0400
Labels:                 eks.amazonaws.com/component=coredns
                        k8s-app=kube-dns
                        kubernetes.io/name=CoreDNS
Annotations:            deployment.kubernetes.io/revision: 1
Selector:               eks.amazonaws.com/component=coredns,k8s-app=kube-dns
Replicas:               2 desired | 2 updated | 2 total | 2 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  1 max unavailable, 25% max surge
Pod Template:
  Labels:           eks.amazonaws.com/component=coredns
                    k8s-app=kube-dns
  Service Account:  coredns
  Containers:
   coredns:
    Image:       602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/coredns:v1.11.3-eksbuild.1
    Ports:       53/UDP, 53/TCP, 9153/TCP
    Host Ports:  0/UDP, 0/TCP, 0/TCP
    Args:
      -conf
      /etc/coredns/Corefile
    Limits:
      memory:  170Mi
    Requests:
      cpu:        100m
      memory:     70Mi
    Liveness:     http-get http://:8080/health delay=60s timeout=5s period=10s #success=1 #failure=5
    Readiness:    http-get http://:8181/ready delay=0s timeout=1s period=10s #success=1 #failure=3
    Environment:  <none>
    Mounts:
      /etc/coredns from config-volume (ro)
  Volumes:
   config-volume:
    Type:                       ConfigMap (a volume populated by a ConfigMap)
    Name:                       coredns
    Optional:                   false
  Topology Spread Constraints:  topology.kubernetes.io/zone:ScheduleAnyway when max skew 1 is exceeded for selector k8s-app=kube-dns
  Priority Class Name:          system-cluster-critical
  Node-Selectors:               <none>
  Tolerations:                  CriticalAddonsOnly op=Exists
                                node-role.kubernetes.io/control-plane:NoSchedule
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      True    MinimumReplicasAvailable
  Progressing    True    NewReplicaSetAvailable
OldReplicaSets:  <none>
NewReplicaSet:   coredns-789f8477df (2/2 replicas created)
Events:          <none>


Name:           agent-deployment-55ccdccb8c
Namespace:      ai-app
Selector:       app=agent,pod-template-hash=55ccdccb8c
Labels:         app=agent
                pod-template-hash=55ccdccb8c
Annotations:    deployment.kubernetes.io/desired-replicas: 1
                deployment.kubernetes.io/max-replicas: 2
                deployment.kubernetes.io/revision: 2
Controlled By:  Deployment/agent-deployment
Replicas:       0 current / 0 desired
Pods Status:    0 Running / 0 Waiting / 0 Succeeded / 0 Failed
Pod Template:
  Labels:           app=agent
                    pod-template-hash=55ccdccb8c
  Service Account:  eks-pods-sa
  Containers:
   agent:
    Image:      bridgetokubernetes.azurecr.io/lpkremoteagent:1.3.4
    Port:       3001/TCP
    Host Port:  0/TCP
    Environment:
      BRIDGE_COLLECT_TELEMETRY:  True
      CONSOLE_VERBOSITY:         Verbose
      BRIDGE_CORRELATION_ID:     2fc8ffbe-735e-43f0-a14f-8387a6b5b6971728320816919:5a87b5d76e6a:b3ee4cf4f6a4
    Mounts:                      <none>
  Volumes:                       <none>
  Node-Selectors:                <none>
  Tolerations:                   <none>
Events:                          <none>


Name:           agent-deployment-5d56ddfb98
Namespace:      ai-app
Selector:       app=agent,pod-template-hash=5d56ddfb98
Labels:         app=agent
                pod-template-hash=5d56ddfb98
Annotations:    deployment.kubernetes.io/desired-replicas: 1
                deployment.kubernetes.io/max-replicas: 2
                deployment.kubernetes.io/revision: 3
                deployment.kubernetes.io/revision-history: 1
Controlled By:  Deployment/agent-deployment
Replicas:       1 current / 1 desired
Pods Status:    1 Running / 0 Waiting / 1 Succeeded / 0 Failed
Pod Template:
  Labels:           app=agent
                    pod-template-hash=5d56ddfb98
  Service Account:  eks-pods-sa
  Containers:
   agent:
    Image:         migara/agent-app
    Port:          3001/TCP
    Host Port:     0/TCP
    Environment:   <none>
    Mounts:        <none>
  Volumes:         <none>
  Node-Selectors:  <none>
  Tolerations:     <none>
Events:            <none>


Name:           aws-cli-deployment-86bd569d85
Namespace:      ai-app
Selector:       app=aws-cli,pod-template-hash=86bd569d85
Labels:         app=aws-cli
                pod-template-hash=86bd569d85
Annotations:    deployment.kubernetes.io/desired-replicas: 1
                deployment.kubernetes.io/max-replicas: 2
                deployment.kubernetes.io/revision: 1
Controlled By:  Deployment/aws-cli-deployment
Replicas:       0 current / 0 desired
Pods Status:    0 Running / 0 Waiting / 0 Succeeded / 0 Failed
Pod Template:
  Labels:           app=aws-cli
                    pod-template-hash=86bd569d85
  Service Account:  eks-pods-sa
  Containers:
   aws-cli:
    Image:      amazon/aws-cli
    Port:       <none>
    Host Port:  <none>
    Command:
      /bin/bash
    Args:
      -c
      yum install -y ca-certificates
      cp /custom-certs/* /etc/pki/ca-trust/source/anchors/
      update-ca-trust
      echo "Custom certificates added"
      sleep infinity
      
    Environment:  <none>
    Mounts:
      /custom-certs from custom-certs (ro)
  Volumes:
   custom-certs:
    Type:          ConfigMap (a volume populated by a ConfigMap)
    Name:          custom-ca-certs
    Optional:      false
  Node-Selectors:  <none>
  Tolerations:     <none>
Events:            <none>


Name:           aws-cli-deployment-bb558f6c7
Namespace:      ai-app
Selector:       app=aws-cli,pod-template-hash=bb558f6c7
Labels:         app=aws-cli
                pod-template-hash=bb558f6c7
Annotations:    deployment.kubernetes.io/desired-replicas: 1
                deployment.kubernetes.io/max-replicas: 2
                deployment.kubernetes.io/revision: 2
Controlled By:  Deployment/aws-cli-deployment
Replicas:       1 current / 1 desired
Pods Status:    1 Running / 0 Waiting / 0 Succeeded / 0 Failed
Pod Template:
  Labels:           app=aws-cli
                    pod-template-hash=bb558f6c7
  Service Account:  eks-pods-sa
  Containers:
   aws-cli:
    Image:      amazon/aws-cli
    Port:       <none>
    Host Port:  <none>
    Command:
      /bin/bash
    Args:
      -c
      yum install -y ca-certificates
      cp /custom-certs/* /etc/pki/ca-trust/source/anchors/
      update-ca-trust
      echo "Custom certificates added"
      sleep infinity
      
    Environment:
      AWS_CA_BUNDLE:  /etc/pki/ca-trust/source/anchors/Trust-Root-CA.crt
    Mounts:
      /custom-certs from custom-certs (ro)
  Volumes:
   custom-certs:
    Type:          ConfigMap (a volume populated by a ConfigMap)
    Name:          custom-ca-certs
    Optional:      false
  Node-Selectors:  <none>
  Tolerations:     <none>
Events:            <none>


Name:           netshoot-deployment-7655b866d4
Namespace:      ai-app
Selector:       app=netshoot,pod-template-hash=7655b866d4
Labels:         app=netshoot
                pod-template-hash=7655b866d4
Annotations:    deployment.kubernetes.io/desired-replicas: 1
                deployment.kubernetes.io/max-replicas: 2
                deployment.kubernetes.io/revision: 1
Controlled By:  Deployment/netshoot-deployment
Replicas:       1 current / 1 desired
Pods Status:    1 Running / 0 Waiting / 0 Succeeded / 0 Failed
Pod Template:
  Labels:           app=netshoot
                    pod-template-hash=7655b866d4
  Service Account:  eks-pods-sa
  Containers:
   netshoot:
    Image:      nicolaka/netshoot
    Port:       <none>
    Host Port:  <none>
    Command:
      /bin/sh
    Args:
      -c
      cp /custom-certs/* /usr/local/share/ca-certificates/
      update-ca-certificates
      echo "Custom certificates added"
      while true; do sleep 3600; done
      
    Environment:  <none>
    Mounts:
      /custom-certs from custom-certs (ro)
  Volumes:
   custom-certs:
    Type:          ConfigMap (a volume populated by a ConfigMap)
    Name:          custom-ca-certs
    Optional:      false
  Node-Selectors:  <none>
  Tolerations:     <none>
Events:            <none>


Name:           ui-deployment-66bcb989f7
Namespace:      ai-app
Selector:       app=ui,pod-template-hash=66bcb989f7
Labels:         app=ui
                pod-template-hash=66bcb989f7
Annotations:    deployment.kubernetes.io/desired-replicas: 1
                deployment.kubernetes.io/max-replicas: 2
                deployment.kubernetes.io/revision: 1
Controlled By:  Deployment/ui-deployment
Replicas:       1 current / 1 desired
Pods Status:    1 Running / 0 Waiting / 0 Succeeded / 0 Failed
Pod Template:
  Labels:  app=ui
           pod-template-hash=66bcb989f7
  Containers:
   ui:
    Image:         migara/ui-app
    Port:          3000/TCP
    Host Port:     0/TCP
    Environment:   <none>
    Mounts:        <none>
  Volumes:         <none>
  Node-Selectors:  <none>
  Tolerations:     <none>
Events:            <none>


Name:           ingress-nginx-controller-9756f5bd9
Namespace:      ingress-nginx
Selector:       app.kubernetes.io/component=controller,app.kubernetes.io/instance=ingress-nginx,app.kubernetes.io/name=ingress-nginx,pod-template-hash=9756f5bd9
Labels:         app.kubernetes.io/component=controller
                app.kubernetes.io/instance=ingress-nginx
                app.kubernetes.io/managed-by=Helm
                app.kubernetes.io/name=ingress-nginx
                app.kubernetes.io/part-of=ingress-nginx
                app.kubernetes.io/version=1.11.2
                helm.sh/chart=ingress-nginx-4.11.2
                pod-template-hash=9756f5bd9
Annotations:    deployment.kubernetes.io/desired-replicas: 1
                deployment.kubernetes.io/max-replicas: 2
                deployment.kubernetes.io/revision: 1
                meta.helm.sh/release-name: ingress-nginx
                meta.helm.sh/release-namespace: ingress-nginx
Controlled By:  Deployment/ingress-nginx-controller
Replicas:       1 current / 1 desired
Pods Status:    1 Running / 0 Waiting / 0 Succeeded / 0 Failed
Pod Template:
  Labels:           app.kubernetes.io/component=controller
                    app.kubernetes.io/instance=ingress-nginx
                    app.kubernetes.io/managed-by=Helm
                    app.kubernetes.io/name=ingress-nginx
                    app.kubernetes.io/part-of=ingress-nginx
                    app.kubernetes.io/version=1.11.2
                    helm.sh/chart=ingress-nginx-4.11.2
                    pod-template-hash=9756f5bd9
  Service Account:  ingress-nginx
  Containers:
   controller:
    Image:           registry.k8s.io/ingress-nginx/controller:v1.11.2@sha256:d5f8217feeac4887cb1ed21f27c2674e58be06bd8f5184cacea2a69abaf78dce
    Ports:           80/TCP, 443/TCP, 8443/TCP
    Host Ports:      0/TCP, 0/TCP, 0/TCP
    SeccompProfile:  RuntimeDefault
    Args:
      /nginx-ingress-controller
      --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
      --election-id=ingress-nginx-leader
      --controller-class=k8s.io/ingress-nginx
      --ingress-class=nginx
      --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
      --validating-webhook=:8443
      --validating-webhook-certificate=/usr/local/certificates/cert
      --validating-webhook-key=/usr/local/certificates/key
      --enable-metrics=false
    Requests:
      cpu:      100m
      memory:   90Mi
    Liveness:   http-get http://:10254/healthz delay=10s timeout=1s period=10s #success=1 #failure=5
    Readiness:  http-get http://:10254/healthz delay=10s timeout=1s period=10s #success=1 #failure=3
    Environment:
      POD_NAME:        (v1:metadata.name)
      POD_NAMESPACE:   (v1:metadata.namespace)
      LD_PRELOAD:     /usr/local/lib/libmimalloc.so
    Mounts:
      /usr/local/certificates/ from webhook-cert (ro)
  Volumes:
   webhook-cert:
    Type:          Secret (a volume populated by a Secret)
    SecretName:    ingress-nginx-admission
    Optional:      false
  Node-Selectors:  kubernetes.io/os=linux
  Tolerations:     <none>
Events:            <none>


Name:           coredns-789f8477df
Namespace:      kube-system
Selector:       eks.amazonaws.com/component=coredns,k8s-app=kube-dns,pod-template-hash=789f8477df
Labels:         eks.amazonaws.com/component=coredns
                k8s-app=kube-dns
                pod-template-hash=789f8477df
Annotations:    deployment.kubernetes.io/desired-replicas: 2
                deployment.kubernetes.io/max-replicas: 3
                deployment.kubernetes.io/revision: 1
Controlled By:  Deployment/coredns
Replicas:       2 current / 2 desired
Pods Status:    2 Running / 0 Waiting / 0 Succeeded / 0 Failed
Pod Template:
  Labels:           eks.amazonaws.com/component=coredns
                    k8s-app=kube-dns
                    pod-template-hash=789f8477df
  Service Account:  coredns
  Containers:
   coredns:
    Image:       602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/coredns:v1.11.3-eksbuild.1
    Ports:       53/UDP, 53/TCP, 9153/TCP
    Host Ports:  0/UDP, 0/TCP, 0/TCP
    Args:
      -conf
      /etc/coredns/Corefile
    Limits:
      memory:  170Mi
    Requests:
      cpu:        100m
      memory:     70Mi
    Liveness:     http-get http://:8080/health delay=60s timeout=5s period=10s #success=1 #failure=5
    Readiness:    http-get http://:8181/ready delay=0s timeout=1s period=10s #success=1 #failure=3
    Environment:  <none>
    Mounts:
      /etc/coredns from config-volume (ro)
  Volumes:
   config-volume:
    Type:                       ConfigMap (a volume populated by a ConfigMap)
    Name:                       coredns
    Optional:                   false
  Topology Spread Constraints:  topology.kubernetes.io/zone:ScheduleAnyway when max skew 1 is exceeded for selector k8s-app=kube-dns
  Priority Class Name:          system-cluster-critical
  Node-Selectors:               <none>
  Tolerations:                  CriticalAddonsOnly op=Exists
                                node-role.kubernetes.io/control-plane:NoSchedule
Events:                         <none>
apiVersion: v1
items:
- apiVersion: v1
  data:
    Forward-Trust-CA-ECDSA.pem.crt: |-
      -----BEGIN CERTIFICATE-----
      MIICTjCCATagAwIBAgIFAK86XiAwDQYJKoZIhvcNAQELBQAwPTE7MDkGA1UEAxMy
      UGFsbyBBbHRvIE5ldHdvcmtzIC0gUHJvZmVzc2lvbmFsIFNlcnZpY2VzIFJvb3Qg
      Q0EwHhcNMjQwNzI2MTU1NjI4WhcNMjYwNzI2MTU1NjI4WjBAMT4wPAYDVQQDEzVQ
      YWxvIEFsdG8gTmV0d29ya3MgLSBQcm9mZXNzaW8gRm9yd2FyZCBUcnVzdCBDQSBF
      Q0RTQTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABNY50W+eGgWpi095vOB04aCI
      B6/4hpCKRIg+qPUqb4z3BsRiDJOidHWJuvI7xmVH1vpm2QB3AoWU3EdX4ofvwf+j
      HTAbMAwGA1UdEwQFMAMBAf8wCwYDVR0PBAQDAgIEMA0GCSqGSIb3DQEBCwUAA4IB
      AQAWYCruDPP+3Rb4V29gMSmK5Z1RqBKtJFU2LtVNK20jJgiVe09BI8OtDQwCZ976
      KoOS0NVum0y7x5xJADGhlY92vNxRVUxzQouHn33da/Fh1HkUbZ9an/3Vwhbz8Mr7
      Nsm9lMZ3BaXkEp6n6N42OwiI63WQX3qtYO9mGkFODw7s8xLDl9lKvOjc1sJjVKM5
      WJfjzRBnxdRw5a0CQJsTGuRoPckPZI5lQZqJTlwkcNjfmpW+dgXx+RxDrLgtdzVa
      iDNmw4fMYHbD3scDLNDTmWuYEFbt0g+tseP9UtLkF6LZqxouhpLq5WxThe1hq/+0
      DHbV9slSjUfg6CNtsJLHFK/N
      -----END CERTIFICATE-----
    Forward-Trust-CA.pem.crt: |-
      -----BEGIN CERTIFICATE-----
      MIIDHzCCAgegAwIBAgIFAK86Xh4wDQYJKoZIhvcNAQELBQAwPTE7MDkGA1UEAxMy
      UGFsbyBBbHRvIE5ldHdvcmtzIC0gUHJvZmVzc2lvbmFsIFNlcnZpY2VzIFJvb3Qg
      Q0EwHhcNMjQwNzI0MDc1NDA4WhcNMjYwNzI0MDc1NDA4WjBGMUQwQgYDVQQDEztQ
      YWxvIEFsdG8gTmV0d29ya3MgLSBQcm9mZXNzaW9uYWwgU2VydmljZXMgRm9yd2Fy
      ZCBUcnVzdCBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAOfCSWc9
      lA2YIh1IVq5UmQn46dpXM61nvw3B4blCDXg/dfm9qYMGth3SlWyeGJAAbibogMtE
      +HRV9Tpg6vlC2SuvGAhYGSpknJLFe8TvLA6yR8VsYz0O4v61AwFo3zypjE5Rcj9H
      TvC28urHWhVm19ELMok12czQP3wLHHOw75iOhSRh5ofu6kN3MII/e98e5UrlRCiW
      CxzGBX4k+In/zk42nRoJEOmFUoy2Up+PpdTbaTmvshaWtkOOneAjktEuefF20Q76
      fuL1KzbtQcAsa4XK1rDMUV5G5m6zpldd7Ul+wrBrU+dxEOAkg8V1KIi83jHdLaod
      rRAW5Hyv+5aRFP8CAwEAAaMdMBswDAYDVR0TBAUwAwEB/zALBgNVHQ8EBAMCAgQw
      DQYJKoZIhvcNAQELBQADggEBAD1CwUMiKS0PdWDmWy3WS1zj5KQ5HVQm7YoUeNGu
      bLU/dPAlL7jpH7vH78E65QRLlpPsQ+G9uLV/fMKepoBcfv9jLuDAxf09R92fsN48
      hrxdtSS54eGXZ5ZjTI0GryPfEDzlqxwwDHfzu2DDoGKNFIsGGPB5ctR5bS9J+az1
      Z/lVf9k0zqWLf4fUFC9YgjUbUVfVQ8uXWlo1IlUaKrpIWaQpx5+5czgEDYeAQCTG
      ELAyKzh+ZXi5zuV+xi21ZjI86QZKOuvz2cC3tAWkT2litn8+PbmqfPlUlQlJAaGK
      SG4LH8EtivrRGXDTIfvU76dPcpIL0a2CymPBWwkA0xvHNIY=
      -----END CERTIFICATE-----
    Trust-Root-CA.crt: |-
      -----BEGIN CERTIFICATE-----
      MIIDGjCCAgKgAwIBAgIJAOAssb/vAU5uMA0GCSqGSIb3DQEBCwUAMD0xOzA5BgNV
      BAMTMlBhbG8gQWx0byBOZXR3b3JrcyAtIFByb2Zlc3Npb25hbCBTZXJ2aWNlcyBS
      b290IENBMB4XDTI0MDcyNDA3NTQwN1oXDTI2MDcyNDA3NTQwN1owPTE7MDkGA1UE
      AxMyUGFsbyBBbHRvIE5ldHdvcmtzIC0gUHJvZmVzc2lvbmFsIFNlcnZpY2VzIFJv
      b3QgQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDHa/VpQeOkKnxG
      VoSI4rD8lCWQw19kHPIcs4dGQbyhIy17vVGYM2t6EWYlSiJxOHh/ybtXoPdPd/QJ
      EkUGRnLILa9cWFn7hjY6h1G7lGhA4SlaPPXETJ22QHIo3buVhzonwAqf/62LAMlP
      S1KlkEWD8Hgx87TENB0MRvThqieVCT/tQXBF1aIoqE8DmIuifYUg3hp6nAnuF7hV
      jaWLf6moP3gwP4n0RlEopnnyuNI/ICmNnGmrKnHYYJ2rOJlkRppp6z1jLLtTH8o8
      MjFzShoVcWnaP8ME3/MOSKD4a2JOquqi8sd3OmNDhwj3mYWjXRKn502j4LGQNyPU
      ZM3geD1tAgMBAAGjHTAbMAwGA1UdEwQFMAMBAf8wCwYDVR0PBAQDAgIEMA0GCSqG
      SIb3DQEBCwUAA4IBAQAIgyxijj3wYMuvvI2IcyZANY+HCT7dihAJUwDSbH/SjhGb
      GF4F0x/7DN4Gm/4Xfs4S/tcd2l3KAO+MOdc2HLA9LUxdVzinUdl29iUvphtzi1+N
      MZ1NDd333oRjxwQaYZaTApXrz2N07Iqc44baob6Cxd8ba1K8s5tJP8kAFdHXzZJN
      IEZvWVP6caHWO90xebJSCtKFIox8J1WfCc/EzoGXVUDw0pj9EmQao5UfjTy7Fp1W
      rJYc+5k7a43YzRkXB8wG5+Mh17Zg/sxQzxifLA42vgITTzwelLHVHG7JxcdOvjTr
      Pf286DbyrucUJefaVPN039H5+oGhlFkgYOBihdGG
      -----END CERTIFICATE-----
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"Forward-Trust-CA-ECDSA.pem.crt":"-----BEGIN CERTIFICATE-----\nMIICTjCCATagAwIBAgIFAK86XiAwDQYJKoZIhvcNAQELBQAwPTE7MDkGA1UEAxMy\nUGFsbyBBbHRvIE5ldHdvcmtzIC0gUHJvZmVzc2lvbmFsIFNlcnZpY2VzIFJvb3Qg\nQ0EwHhcNMjQwNzI2MTU1NjI4WhcNMjYwNzI2MTU1NjI4WjBAMT4wPAYDVQQDEzVQ\nYWxvIEFsdG8gTmV0d29ya3MgLSBQcm9mZXNzaW8gRm9yd2FyZCBUcnVzdCBDQSBF\nQ0RTQTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABNY50W+eGgWpi095vOB04aCI\nB6/4hpCKRIg+qPUqb4z3BsRiDJOidHWJuvI7xmVH1vpm2QB3AoWU3EdX4ofvwf+j\nHTAbMAwGA1UdEwQFMAMBAf8wCwYDVR0PBAQDAgIEMA0GCSqGSIb3DQEBCwUAA4IB\nAQAWYCruDPP+3Rb4V29gMSmK5Z1RqBKtJFU2LtVNK20jJgiVe09BI8OtDQwCZ976\nKoOS0NVum0y7x5xJADGhlY92vNxRVUxzQouHn33da/Fh1HkUbZ9an/3Vwhbz8Mr7\nNsm9lMZ3BaXkEp6n6N42OwiI63WQX3qtYO9mGkFODw7s8xLDl9lKvOjc1sJjVKM5\nWJfjzRBnxdRw5a0CQJsTGuRoPckPZI5lQZqJTlwkcNjfmpW+dgXx+RxDrLgtdzVa\niDNmw4fMYHbD3scDLNDTmWuYEFbt0g+tseP9UtLkF6LZqxouhpLq5WxThe1hq/+0\nDHbV9slSjUfg6CNtsJLHFK/N\n-----END CERTIFICATE-----","Forward-Trust-CA.pem.crt":"-----BEGIN CERTIFICATE-----\nMIIDHzCCAgegAwIBAgIFAK86Xh4wDQYJKoZIhvcNAQELBQAwPTE7MDkGA1UEAxMy\nUGFsbyBBbHRvIE5ldHdvcmtzIC0gUHJvZmVzc2lvbmFsIFNlcnZpY2VzIFJvb3Qg\nQ0EwHhcNMjQwNzI0MDc1NDA4WhcNMjYwNzI0MDc1NDA4WjBGMUQwQgYDVQQDEztQ\nYWxvIEFsdG8gTmV0d29ya3MgLSBQcm9mZXNzaW9uYWwgU2VydmljZXMgRm9yd2Fy\nZCBUcnVzdCBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAOfCSWc9\nlA2YIh1IVq5UmQn46dpXM61nvw3B4blCDXg/dfm9qYMGth3SlWyeGJAAbibogMtE\n+HRV9Tpg6vlC2SuvGAhYGSpknJLFe8TvLA6yR8VsYz0O4v61AwFo3zypjE5Rcj9H\nTvC28urHWhVm19ELMok12czQP3wLHHOw75iOhSRh5ofu6kN3MII/e98e5UrlRCiW\nCxzGBX4k+In/zk42nRoJEOmFUoy2Up+PpdTbaTmvshaWtkOOneAjktEuefF20Q76\nfuL1KzbtQcAsa4XK1rDMUV5G5m6zpldd7Ul+wrBrU+dxEOAkg8V1KIi83jHdLaod\nrRAW5Hyv+5aRFP8CAwEAAaMdMBswDAYDVR0TBAUwAwEB/zALBgNVHQ8EBAMCAgQw\nDQYJKoZIhvcNAQELBQADggEBAD1CwUMiKS0PdWDmWy3WS1zj5KQ5HVQm7YoUeNGu\nbLU/dPAlL7jpH7vH78E65QRLlpPsQ+G9uLV/fMKepoBcfv9jLuDAxf09R92fsN48\nhrxdtSS54eGXZ5ZjTI0GryPfEDzlqxwwDHfzu2DDoGKNFIsGGPB5ctR5bS9J+az1\nZ/lVf9k0zqWLf4fUFC9YgjUbUVfVQ8uXWlo1IlUaKrpIWaQpx5+5czgEDYeAQCTG\nELAyKzh+ZXi5zuV+xi21ZjI86QZKOuvz2cC3tAWkT2litn8+PbmqfPlUlQlJAaGK\nSG4LH8EtivrRGXDTIfvU76dPcpIL0a2CymPBWwkA0xvHNIY=\n-----END CERTIFICATE-----","Trust-Root-CA.crt":"-----BEGIN CERTIFICATE-----\nMIIDGjCCAgKgAwIBAgIJAOAssb/vAU5uMA0GCSqGSIb3DQEBCwUAMD0xOzA5BgNV\nBAMTMlBhbG8gQWx0byBOZXR3b3JrcyAtIFByb2Zlc3Npb25hbCBTZXJ2aWNlcyBS\nb290IENBMB4XDTI0MDcyNDA3NTQwN1oXDTI2MDcyNDA3NTQwN1owPTE7MDkGA1UE\nAxMyUGFsbyBBbHRvIE5ldHdvcmtzIC0gUHJvZmVzc2lvbmFsIFNlcnZpY2VzIFJv\nb3QgQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDHa/VpQeOkKnxG\nVoSI4rD8lCWQw19kHPIcs4dGQbyhIy17vVGYM2t6EWYlSiJxOHh/ybtXoPdPd/QJ\nEkUGRnLILa9cWFn7hjY6h1G7lGhA4SlaPPXETJ22QHIo3buVhzonwAqf/62LAMlP\nS1KlkEWD8Hgx87TENB0MRvThqieVCT/tQXBF1aIoqE8DmIuifYUg3hp6nAnuF7hV\njaWLf6moP3gwP4n0RlEopnnyuNI/ICmNnGmrKnHYYJ2rOJlkRppp6z1jLLtTH8o8\nMjFzShoVcWnaP8ME3/MOSKD4a2JOquqi8sd3OmNDhwj3mYWjXRKn502j4LGQNyPU\nZM3geD1tAgMBAAGjHTAbMAwGA1UdEwQFMAMBAf8wCwYDVR0PBAQDAgIEMA0GCSqG\nSIb3DQEBCwUAA4IBAQAIgyxijj3wYMuvvI2IcyZANY+HCT7dihAJUwDSbH/SjhGb\nGF4F0x/7DN4Gm/4Xfs4S/tcd2l3KAO+MOdc2HLA9LUxdVzinUdl29iUvphtzi1+N\nMZ1NDd333oRjxwQaYZaTApXrz2N07Iqc44baob6Cxd8ba1K8s5tJP8kAFdHXzZJN\nIEZvWVP6caHWO90xebJSCtKFIox8J1WfCc/EzoGXVUDw0pj9EmQao5UfjTy7Fp1W\nrJYc+5k7a43YzRkXB8wG5+Mh17Zg/sxQzxifLA42vgITTzwelLHVHG7JxcdOvjTr\nPf286DbyrucUJefaVPN039H5+oGhlFkgYOBihdGG\n-----END CERTIFICATE-----"},"kind":"ConfigMap","metadata":{"annotations":{},"name":"custom-ca-certs","namespace":"ai-app"}}
    creationTimestamp: "2024-10-07T10:09:46Z"
    name: custom-ca-certs
    namespace: ai-app
    resourceVersion: "961822"
    uid: e0f5d31d-3fcb-497c-a248-97d0b18e618d
- apiVersion: v1
  data:
    ca.crt: |
      -----BEGIN CERTIFICATE-----
      MIIDBTCCAe2gAwIBAgIIGH/HmUr6/SQwDQYJKoZIhvcNAQELBQAwFTETMBEGA1UE
      AxMKa3ViZXJuZXRlczAeFw0yNDEwMDMwOTQxMTNaFw0zNDEwMDEwOTQ2MTNaMBUx
      EzARBgNVBAMTCmt1YmVybmV0ZXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
      AoIBAQDQ5i+wUaTmgdmm3fgPPE+fiNUqSAYtyOuec2/V8HC4yds+F0IaRevJ3XGQ
      59S+or9DFXyt5JAfH4FGNVkZTiFiDme/0jlHqifRfS9vz/d8TLLb+SQtTNHJuFYT
      nH+V5xeOfI40wewla+vKwPAm8tziwNH9J+SSNVO2jMgrzdGkHfoZ3R8rxA6ljPUi
      20Bmf576Rvpf3Ua2aBxTQPI+lrpAawpmMANyRA4oQUfN5d68tyIMzKUZcXXGv51d
      mzxgN/WoZVIghGVkCmuL0ThAYYVljhFz1qj3e5z1VX+ekkY/d8h+ArvT5zkJfzLX
      Em6KCtOgTQzNAPo7JlCH9B+7I13BAgMBAAGjWTBXMA4GA1UdDwEB/wQEAwICpDAP
      BgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBRQM8Lxr5l7cBUmRROt7wnJJP91lDAV
      BgNVHREEDjAMggprdWJlcm5ldGVzMA0GCSqGSIb3DQEBCwUAA4IBAQAKG8fZt2Id
      edS4PeB7NTvuyIwzCHU5CDgDmF7fzwQthjRZFriAddncS941L66kroOC99FbKNPc
      1FWaH0t4YR4R0F0IPrRivRUHOldABNTNJHe3E+1QHPtRjlof+oa/SZ1A3w5bRH+c
      FboOimqQoiQVxBvGSebBRh6zf8xeFOqsCyP0IXJ4VyRY48Z1bvM0Mq2h90WIgX98
      o4RDP/v5C0ZACeLalyCxaZmueIx9k3L+1jWC5as1DVCd8x2AqxS+2GksxNeYZOSj
      eeCAyq0gKeoDABcW3ms6ywMIyT/eGeZp0Uxm26hH2gCKYfNgSnvS9rB8XxzdHJyW
      7Gv0dcYbRc0u
      -----END CERTIFICATE-----
  kind: ConfigMap
  metadata:
    annotations:
      kubernetes.io/description: Contains a CA bundle that can be used to verify the
        kube-apiserver when using internal endpoints such as the internal service
        IP or kubernetes.default.svc. No other usage is guaranteed across distributions
        of Kubernetes clusters.
    creationTimestamp: "2024-10-07T10:09:46Z"
    name: kube-root-ca.crt
    namespace: ai-app
    resourceVersion: "961820"
    uid: d78a0152-3be8-4f1b-81d7-f917c96ad68d
- apiVersion: v1
  data:
    ca.crt: |
      -----BEGIN CERTIFICATE-----
      MIIDBTCCAe2gAwIBAgIIGH/HmUr6/SQwDQYJKoZIhvcNAQELBQAwFTETMBEGA1UE
      AxMKa3ViZXJuZXRlczAeFw0yNDEwMDMwOTQxMTNaFw0zNDEwMDEwOTQ2MTNaMBUx
      EzARBgNVBAMTCmt1YmVybmV0ZXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
      AoIBAQDQ5i+wUaTmgdmm3fgPPE+fiNUqSAYtyOuec2/V8HC4yds+F0IaRevJ3XGQ
      59S+or9DFXyt5JAfH4FGNVkZTiFiDme/0jlHqifRfS9vz/d8TLLb+SQtTNHJuFYT
      nH+V5xeOfI40wewla+vKwPAm8tziwNH9J+SSNVO2jMgrzdGkHfoZ3R8rxA6ljPUi
      20Bmf576Rvpf3Ua2aBxTQPI+lrpAawpmMANyRA4oQUfN5d68tyIMzKUZcXXGv51d
      mzxgN/WoZVIghGVkCmuL0ThAYYVljhFz1qj3e5z1VX+ekkY/d8h+ArvT5zkJfzLX
      Em6KCtOgTQzNAPo7JlCH9B+7I13BAgMBAAGjWTBXMA4GA1UdDwEB/wQEAwICpDAP
      BgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBRQM8Lxr5l7cBUmRROt7wnJJP91lDAV
      BgNVHREEDjAMggprdWJlcm5ldGVzMA0GCSqGSIb3DQEBCwUAA4IBAQAKG8fZt2Id
      edS4PeB7NTvuyIwzCHU5CDgDmF7fzwQthjRZFriAddncS941L66kroOC99FbKNPc
      1FWaH0t4YR4R0F0IPrRivRUHOldABNTNJHe3E+1QHPtRjlof+oa/SZ1A3w5bRH+c
      FboOimqQoiQVxBvGSebBRh6zf8xeFOqsCyP0IXJ4VyRY48Z1bvM0Mq2h90WIgX98
      o4RDP/v5C0ZACeLalyCxaZmueIx9k3L+1jWC5as1DVCd8x2AqxS+2GksxNeYZOSj
      eeCAyq0gKeoDABcW3ms6ywMIyT/eGeZp0Uxm26hH2gCKYfNgSnvS9rB8XxzdHJyW
      7Gv0dcYbRc0u
      -----END CERTIFICATE-----
  kind: ConfigMap
  metadata:
    annotations:
      kubernetes.io/description: Contains a CA bundle that can be used to verify the
        kube-apiserver when using internal endpoints such as the internal service
        IP or kubernetes.default.svc. No other usage is guaranteed across distributions
        of Kubernetes clusters.
    creationTimestamp: "2024-10-03T09:47:20Z"
    name: kube-root-ca.crt
    namespace: default
    resourceVersion: "333"
    uid: e12832f4-be38-4b15-97a2-aabf401b2c66
- apiVersion: v1
  data:
    allow-snippet-annotations: "false"
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: ingress-nginx
      meta.helm.sh/release-namespace: ingress-nginx
    creationTimestamp: "2024-10-08T10:23:05Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.11.2
      helm.sh/chart: ingress-nginx-4.11.2
    name: ingress-nginx-controller
    namespace: ingress-nginx
    resourceVersion: "1219508"
    uid: 7375e0d1-09de-4edb-beaa-0503351048ab
- apiVersion: v1
  data:
    ca.crt: |
      -----BEGIN CERTIFICATE-----
      MIIDBTCCAe2gAwIBAgIIGH/HmUr6/SQwDQYJKoZIhvcNAQELBQAwFTETMBEGA1UE
      AxMKa3ViZXJuZXRlczAeFw0yNDEwMDMwOTQxMTNaFw0zNDEwMDEwOTQ2MTNaMBUx
      EzARBgNVBAMTCmt1YmVybmV0ZXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
      AoIBAQDQ5i+wUaTmgdmm3fgPPE+fiNUqSAYtyOuec2/V8HC4yds+F0IaRevJ3XGQ
      59S+or9DFXyt5JAfH4FGNVkZTiFiDme/0jlHqifRfS9vz/d8TLLb+SQtTNHJuFYT
      nH+V5xeOfI40wewla+vKwPAm8tziwNH9J+SSNVO2jMgrzdGkHfoZ3R8rxA6ljPUi
      20Bmf576Rvpf3Ua2aBxTQPI+lrpAawpmMANyRA4oQUfN5d68tyIMzKUZcXXGv51d
      mzxgN/WoZVIghGVkCmuL0ThAYYVljhFz1qj3e5z1VX+ekkY/d8h+ArvT5zkJfzLX
      Em6KCtOgTQzNAPo7JlCH9B+7I13BAgMBAAGjWTBXMA4GA1UdDwEB/wQEAwICpDAP
      BgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBRQM8Lxr5l7cBUmRROt7wnJJP91lDAV
      BgNVHREEDjAMggprdWJlcm5ldGVzMA0GCSqGSIb3DQEBCwUAA4IBAQAKG8fZt2Id
      edS4PeB7NTvuyIwzCHU5CDgDmF7fzwQthjRZFriAddncS941L66kroOC99FbKNPc
      1FWaH0t4YR4R0F0IPrRivRUHOldABNTNJHe3E+1QHPtRjlof+oa/SZ1A3w5bRH+c
      FboOimqQoiQVxBvGSebBRh6zf8xeFOqsCyP0IXJ4VyRY48Z1bvM0Mq2h90WIgX98
      o4RDP/v5C0ZACeLalyCxaZmueIx9k3L+1jWC5as1DVCd8x2AqxS+2GksxNeYZOSj
      eeCAyq0gKeoDABcW3ms6ywMIyT/eGeZp0Uxm26hH2gCKYfNgSnvS9rB8XxzdHJyW
      7Gv0dcYbRc0u
      -----END CERTIFICATE-----
  kind: ConfigMap
  metadata:
    annotations:
      kubernetes.io/description: Contains a CA bundle that can be used to verify the
        kube-apiserver when using internal endpoints such as the internal service
        IP or kubernetes.default.svc. No other usage is guaranteed across distributions
        of Kubernetes clusters.
    creationTimestamp: "2024-10-08T10:22:55Z"
    name: kube-root-ca.crt
    namespace: ingress-nginx
    resourceVersion: "1219439"
    uid: d9edeada-e429-4690-bd16-a10ebe8c7990
- apiVersion: v1
  data:
    ca.crt: |
      -----BEGIN CERTIFICATE-----
      MIIDBTCCAe2gAwIBAgIIGH/HmUr6/SQwDQYJKoZIhvcNAQELBQAwFTETMBEGA1UE
      AxMKa3ViZXJuZXRlczAeFw0yNDEwMDMwOTQxMTNaFw0zNDEwMDEwOTQ2MTNaMBUx
      EzARBgNVBAMTCmt1YmVybmV0ZXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
      AoIBAQDQ5i+wUaTmgdmm3fgPPE+fiNUqSAYtyOuec2/V8HC4yds+F0IaRevJ3XGQ
      59S+or9DFXyt5JAfH4FGNVkZTiFiDme/0jlHqifRfS9vz/d8TLLb+SQtTNHJuFYT
      nH+V5xeOfI40wewla+vKwPAm8tziwNH9J+SSNVO2jMgrzdGkHfoZ3R8rxA6ljPUi
      20Bmf576Rvpf3Ua2aBxTQPI+lrpAawpmMANyRA4oQUfN5d68tyIMzKUZcXXGv51d
      mzxgN/WoZVIghGVkCmuL0ThAYYVljhFz1qj3e5z1VX+ekkY/d8h+ArvT5zkJfzLX
      Em6KCtOgTQzNAPo7JlCH9B+7I13BAgMBAAGjWTBXMA4GA1UdDwEB/wQEAwICpDAP
      BgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBRQM8Lxr5l7cBUmRROt7wnJJP91lDAV
      BgNVHREEDjAMggprdWJlcm5ldGVzMA0GCSqGSIb3DQEBCwUAA4IBAQAKG8fZt2Id
      edS4PeB7NTvuyIwzCHU5CDgDmF7fzwQthjRZFriAddncS941L66kroOC99FbKNPc
      1FWaH0t4YR4R0F0IPrRivRUHOldABNTNJHe3E+1QHPtRjlof+oa/SZ1A3w5bRH+c
      FboOimqQoiQVxBvGSebBRh6zf8xeFOqsCyP0IXJ4VyRY48Z1bvM0Mq2h90WIgX98
      o4RDP/v5C0ZACeLalyCxaZmueIx9k3L+1jWC5as1DVCd8x2AqxS+2GksxNeYZOSj
      eeCAyq0gKeoDABcW3ms6ywMIyT/eGeZp0Uxm26hH2gCKYfNgSnvS9rB8XxzdHJyW
      7Gv0dcYbRc0u
      -----END CERTIFICATE-----
  kind: ConfigMap
  metadata:
    annotations:
      kubernetes.io/description: Contains a CA bundle that can be used to verify the
        kube-apiserver when using internal endpoints such as the internal service
        IP or kubernetes.default.svc. No other usage is guaranteed across distributions
        of Kubernetes clusters.
    creationTimestamp: "2024-10-03T09:47:20Z"
    name: kube-root-ca.crt
    namespace: kube-node-lease
    resourceVersion: "334"
    uid: dcddbe5b-711f-496b-bada-472756ca3355
- apiVersion: v1
  data:
    ca.crt: |
      -----BEGIN CERTIFICATE-----
      MIIDBTCCAe2gAwIBAgIIGH/HmUr6/SQwDQYJKoZIhvcNAQELBQAwFTETMBEGA1UE
      AxMKa3ViZXJuZXRlczAeFw0yNDEwMDMwOTQxMTNaFw0zNDEwMDEwOTQ2MTNaMBUx
      EzARBgNVBAMTCmt1YmVybmV0ZXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
      AoIBAQDQ5i+wUaTmgdmm3fgPPE+fiNUqSAYtyOuec2/V8HC4yds+F0IaRevJ3XGQ
      59S+or9DFXyt5JAfH4FGNVkZTiFiDme/0jlHqifRfS9vz/d8TLLb+SQtTNHJuFYT
      nH+V5xeOfI40wewla+vKwPAm8tziwNH9J+SSNVO2jMgrzdGkHfoZ3R8rxA6ljPUi
      20Bmf576Rvpf3Ua2aBxTQPI+lrpAawpmMANyRA4oQUfN5d68tyIMzKUZcXXGv51d
      mzxgN/WoZVIghGVkCmuL0ThAYYVljhFz1qj3e5z1VX+ekkY/d8h+ArvT5zkJfzLX
      Em6KCtOgTQzNAPo7JlCH9B+7I13BAgMBAAGjWTBXMA4GA1UdDwEB/wQEAwICpDAP
      BgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBRQM8Lxr5l7cBUmRROt7wnJJP91lDAV
      BgNVHREEDjAMggprdWJlcm5ldGVzMA0GCSqGSIb3DQEBCwUAA4IBAQAKG8fZt2Id
      edS4PeB7NTvuyIwzCHU5CDgDmF7fzwQthjRZFriAddncS941L66kroOC99FbKNPc
      1FWaH0t4YR4R0F0IPrRivRUHOldABNTNJHe3E+1QHPtRjlof+oa/SZ1A3w5bRH+c
      FboOimqQoiQVxBvGSebBRh6zf8xeFOqsCyP0IXJ4VyRY48Z1bvM0Mq2h90WIgX98
      o4RDP/v5C0ZACeLalyCxaZmueIx9k3L+1jWC5as1DVCd8x2AqxS+2GksxNeYZOSj
      eeCAyq0gKeoDABcW3ms6ywMIyT/eGeZp0Uxm26hH2gCKYfNgSnvS9rB8XxzdHJyW
      7Gv0dcYbRc0u
      -----END CERTIFICATE-----
  kind: ConfigMap
  metadata:
    annotations:
      kubernetes.io/description: Contains a CA bundle that can be used to verify the
        kube-apiserver when using internal endpoints such as the internal service
        IP or kubernetes.default.svc. No other usage is guaranteed across distributions
        of Kubernetes clusters.
    creationTimestamp: "2024-10-03T09:47:20Z"
    name: kube-root-ca.crt
    namespace: kube-public
    resourceVersion: "335"
    uid: 785a38ff-6a70-43ac-9135-7e929a9c6f9f
- apiVersion: v1
  data:
    branch-eni-cooldown: "60"
    enable-network-policy-controller: "false"
    enable-windows-ipam: "false"
    enable-windows-prefix-delegation: "false"
    minimum-ip-target: "3"
    warm-ip-target: "1"
    warm-prefix-target: "0"
  kind: ConfigMap
  metadata:
    creationTimestamp: "2024-10-03T09:50:26Z"
    labels:
      app.kubernetes.io/instance: aws-vpc-cni
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: aws-node
      app.kubernetes.io/version: v1.18.3
      helm.sh/chart: aws-vpc-cni-1.18.3
      k8s-app: aws-node
    name: amazon-vpc-cni
    namespace: kube-system
    resourceVersion: "816"
    uid: 1ecbc451-b451-4f92-a22f-dc5708d50fef
- apiVersion: v1
  data:
    mapRoles: |
      - groups:
        - system:bootstrappers
        - system:nodes
        rolearn: arn:aws:iam::367521625516:role/2szv4dtt-K8s-node-eks-node-group-20241003092912868100000002
        username: system:node:{{EC2PrivateDNSName}}
  kind: ConfigMap
  metadata:
    creationTimestamp: "2024-10-03T09:53:59Z"
    name: aws-auth
    namespace: kube-system
    resourceVersion: "1354"
    uid: f1be6992-b139-4c2b-99e4-ed33c160bfcf
- apiVersion: v1
  data:
    Corefile: |
      .:53 {
          errors
          health {
              lameduck 5s
            }
          ready
          kubernetes cluster.local in-addr.arpa ip6.arpa {
            pods insecure
            fallthrough in-addr.arpa ip6.arpa
          }
          prometheus :9153
          forward . /etc/resolv.conf
          cache 30
          loop
          reload
          loadbalance
      }
  kind: ConfigMap
  metadata:
    creationTimestamp: "2024-10-03T09:50:26Z"
    labels:
      eks.amazonaws.com/component: coredns
      k8s-app: kube-dns
    name: coredns
    namespace: kube-system
    resourceVersion: "780"
    uid: 0bdf3618-8a05-49bb-9354-0decea9de7e2
- apiVersion: v1
  data:
    client-ca-file: |
      -----BEGIN CERTIFICATE-----
      MIIDBTCCAe2gAwIBAgIITblHeKFd1YMwDQYJKoZIhvcNAQELBQAwFTETMBEGA1UE
      AxMKa3ViZXJuZXRlczAeFw0yNDEwMDMwOTQxMjFaFw0zNDEwMDEwOTQ2MjFaMBUx
      EzARBgNVBAMTCmt1YmVybmV0ZXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
      AoIBAQC8O/RddY3IXOLk/hvtdMYaL/H6bJUGqSV554b1dQ4pNy/iP9IHpOodqtUc
      +zofpj205eo+oQYb3cP7F9c6pxETC4vbATYN1O/cB1loTi1BdiN0C6Wk4zuKaxR2
      qCBl4WpZqudaAvu1QzJdh1iIsKZjm/xA4uwevGCRTZpId/vfjfx9uJY4KmXwcAUf
      PS4gE/3KNNzYCuR8du6XMKnVICVJokCyk/4ogUk/AAjTtj3L5pD7qYRi5AW30Khc
      +02l5cm6pdMx3wEnuCfhAc8HRheQ7mnMwvkP6VHftwSBBkPwadUms+rvzDRAA+b8
      oo+02WJwn/rHNR758YjX2ExGbcyvAgMBAAGjWTBXMA4GA1UdDwEB/wQEAwICpDAP
      BgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBRYmH4tC3daxinqvtg6Jt+Sl48StzAV
      BgNVHREEDjAMggprdWJlcm5ldGVzMA0GCSqGSIb3DQEBCwUAA4IBAQCBijbemLvu
      +7mKg1DIoVxLaP2xOiEJ7ie48y5iDMQ9LHlkeXohsGkKLXuCEiUakXfiou0zEhC0
      s4ZgbSejsiDZJSGj1Yos9rXv63q8dOsBhm4f7M6Gq5ASTviR9XkpHRzX/H9U8hty
      jSB0/cdY7lN3UOWSVFL8echqwTygigAa2+yvl5QUQ9wvkPC8+dxEfli9MODQvziD
      iFS5hGpStkHCqiwVJtQb6wrTlXYIqbQQcBlyUjm3Gok7fmFdR9yZwZtoqgfYdBvn
      olMsj4bTh59Xp6g+9zkAyIpjASgY/xdlAPB8VIZDcngSMFRF/qFN7wogv3lYkqk/
      n7U8G9pQS51V
      -----END CERTIFICATE-----
      -----BEGIN CERTIFICATE-----
      MIIDBTCCAe2gAwIBAgIID9OVIEijdkEwDQYJKoZIhvcNAQELBQAwFTETMBEGA1UE
      AxMKa3ViZXJuZXRlczAeFw0yNDEwMDMwOTQ4NDFaFw0zNDEwMDEwOTUzNDFaMBUx
      EzARBgNVBAMTCmt1YmVybmV0ZXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
      AoIBAQDYjMrwJUmetPti3mUmUS8/QyG9dIPlHvhlllmrQjMoJ1yyuR6JSZyUEXzp
      TQVXYRFK8LEsnIleStXtCVOBpnSpN6UtI/Tp0HV74ByZv8OCvLCmijpEn8OEDn/w
      /UsNwnLw2vuwV/Zad1aRDsszJO6RQ/jVP3UazXB1qbgaueXfC9ZLfCuBrfv7DHea
      e2dMcsdCsoni8EvpBmO7sR8RyYmHVD13CJ31BMeHiDaZ7szBQ5q7Onkj5VorxhUH
      L5h1x7zzF2n40nxU9nyS++bxV+IqPLYnZlThFgQVsptL9T7Z1K7U31CH9uvwS2DD
      QsPbPHelIxMJkXMSD7GyAerR4xlHAgMBAAGjWTBXMA4GA1UdDwEB/wQEAwICpDAP
      BgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBRu23KrTMBPDb91gcWusIZVsv33ZjAV
      BgNVHREEDjAMggprdWJlcm5ldGVzMA0GCSqGSIb3DQEBCwUAA4IBAQCWGiRmJKME
      npDhW30NJjdnUmsTicdia8OJ49VPTTedmAViGXH4NZ2u113XpEa+E0b9Y2kA6DSy
      Dukoecz48XblXCNUWyXGxDPIxBojoAeDfQQ2911TN8LU92KHtzZy6nT55RMethWe
      +1MK0bYG3zZkDFI7frB/T9HuSZAEEsz/lloyKnO1nU7hNZPBddOIqd+xLy1G3jqW
      VazOIo9qTGChmq752NgTxr5MROi/tGt2GVoJ2UU7flcyDqsFsbfCtI1R+8oWsYlI
      5+ad4JRUcqTBlf0fxbdp8ek4XdCUqG300IA5JL49c2EVwX0a+OuTHXCYYL0R7W8x
      ucRKHOio0+dX
      -----END CERTIFICATE-----
      -----BEGIN CERTIFICATE-----
      MIIDBTCCAe2gAwIBAgIIVz8pDM06dR8wDQYJKoZIhvcNAQELBQAwFTETMBEGA1UE
      AxMKa3ViZXJuZXRlczAeFw0yNDEwMTAxMDAwNDZaFw0zNDEwMDgxMDA1NDZaMBUx
      EzARBgNVBAMTCmt1YmVybmV0ZXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
      AoIBAQDFeXZByuNNKP/odIbib4ylPrvZIKs3gIejXGz1cI8OAd/w0qmkFwm0Nde1
      FeSqk5YofWWo9mi3GJuEuLzi7UFUIF2wcvG9OJNXDg8lNlM71esFGBr25/d/CZvD
      riRMHlj7s5bOOch95WeL3C4x0PCHmUAcguf5w0NFsbqY9S1ReAPPF826E/rQYpvr
      H3ThDm42NHh/bUVtTs1Dzt0IlrQoAwBt8VbmSDFpz3TrL62oxS3ygpm+5M9JgsGj
      emM4Y4mmq9g1vJuyyR1afJpgiJB3wZP3EJGTOtGuAqso64SgKn/XbxLlbqohWl7A
      itMtDPs2AHCwQwcdWO8bZK1lSZbpAgMBAAGjWTBXMA4GA1UdDwEB/wQEAwICpDAP
      BgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBTQj2t4bYOkjgIRYfCOwpCvSvpxKTAV
      BgNVHREEDjAMggprdWJlcm5ldGVzMA0GCSqGSIb3DQEBCwUAA4IBAQCBpkLdtHAF
      ur13TGv25cVVrhbrs8xMri9xp7olPLBOn4od1ioh2I9snGqhgWFI8/Vh6sZ35ZJp
      HQAqvPJSHkZeH2s80pRDXy2lZ5N/HSlisH18cU2TetZXaGlZUdS5nSyz5cjuVSQW
      ykNHvGP/41gMfVhPkzi0Qc20nc0oo4LRAcserSUYGkPqgkDyro/UTbzP1o58uryn
      jw1/ShuZIYj9J+X/LAGuY0eZPrkP8z+xHMXgl8VNw0zuz0ForSxUSDIS/Nf0goRh
      D7D7EqJ6cww3jGse+QHLSRZ8GT9vQyL3RCitOEF7RcoWtAZ+WEx/wL+92s/dCULb
      +n0FdtzkN4it
      -----END CERTIFICATE-----
      -----BEGIN CERTIFICATE-----
      MIIDBTCCAe2gAwIBAgIIW13lGRuYsPwwDQYJKoZIhvcNAQELBQAwFTETMBEGA1UE
      AxMKa3ViZXJuZXRlczAeFw0yNDEwMTAxMDAyMTVaFw0zNDEwMDgxMDA3MTVaMBUx
      EzARBgNVBAMTCmt1YmVybmV0ZXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
      AoIBAQC8zY1HMgj6ZLD27gqha+wQfuBOQKdREor4OFuMQP1svzYu1DGTrxytarvN
      b54gg6e8mcB1rscRuMRucmDWCJP2ku1MhuIuNYZGwXKbZHvuwUk/bN7G2cC5H55l
      r26s/4IVPtQawRTqs1/UDJ409ePGXQHw1EYMHf912PeKIGZHrYe3YGzU2xprtT9K
      eBvWwVyite5EzJlX1Bu0isp0TcCLqzm3cBSWLOxbi0h3uaiKM5kBYt2lEjXN13+d
      K8aUgRARjPJiG9smnB+FBHdVS//5bKkdc1+gvRnOItYmPaMi0aGzGFDToRzFbmp8
      AaCMpn8twa9HOYl/+mcCtFvVITlZAgMBAAGjWTBXMA4GA1UdDwEB/wQEAwICpDAP
      BgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBTuO9/QlEvSAt0iZ6UC8XkrBy8XGTAV
      BgNVHREEDjAMggprdWJlcm5ldGVzMA0GCSqGSIb3DQEBCwUAA4IBAQBHHU8AezsR
      sZlQRgKB39FYjUerdUwgpBDitbwO5kcJrDAKiEjyMI6oDAVzzvNwv6neInD+DSc6
      yCxAg0psbXVvfhg157rHcKI2OiIdtMnnmm7N4h3MHHt5hn1F8BEMjikwsZLZS2MR
      zVaBOtP4num2A64JUQKIiepztN58LeAxK10rTZza24K6uG9T9U/4c0Bn43eWdr/P
      CS54EImzukQtivGNdCzl5iOliUpvtxxsa1KZpHLlAd9EEZF8MbUJFQA6oWfJI5Dr
      qMn1JCPfcN0ZllLM3j6WaxgrmkePJwElfXWxLoT+7NOvf4GCFh6Ez+BVNXkkZpQb
      HAOdTPVxEZQR
      -----END CERTIFICATE-----
    requestheader-allowed-names: '["front-proxy-client"]'
    requestheader-client-ca-file: |
      -----BEGIN CERTIFICATE-----
      MIIDETCCAfmgAwIBAgIIb52DLqFeu3kwDQYJKoZIhvcNAQELBQAwGTEXMBUGA1UE
      AxMOZnJvbnQtcHJveHktY2EwHhcNMjQxMDAzMDk0MTEzWhcNMzQxMDAxMDk0NjEz
      WjAZMRcwFQYDVQQDEw5mcm9udC1wcm94eS1jYTCCASIwDQYJKoZIhvcNAQEBBQAD
      ggEPADCCAQoCggEBAMdqWoQq1gvvOg8Tl9BPJVOY5rOpU/gyubof+p/WWvGxkCUu
      stbnxLTVlkXIRCyF4rHrMPLkD0WitP2yxB1E4HW5a01gweJ3yNasKV/9cN24VCcf
      WeA1gP9ACc4bJjyQ+CbAnglCmn/QVzYBXpJzsMaS2boga6N8qLVm+Fvu1OvPtF+1
      qLHqLwd2NR0C5XB09lhX/2hRDGArCqmVg6sYBQxtm23htJ26q9YL2IYihG2R/8OA
      0dbaWsKDtAIvyYBxL94NeekTnIK2aZpAuYaciBIipz2UfKDTH6giBFNw8qilDKHU
      nOUahCiJQYYHKh97CDvELdRmFS2+bHuPTs6QRisCAwEAAaNdMFswDgYDVR0PAQH/
      BAQDAgKkMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFOeAfr7T5T5t8oHkZmsP
      1tksS57pMBkGA1UdEQQSMBCCDmZyb250LXByb3h5LWNhMA0GCSqGSIb3DQEBCwUA
      A4IBAQAjpMsrOv3wCwRDtjva3eqO/LTGnb67iBsuFuE7t2iTsL1DuA5oNNTkQl/X
      HrJU/9qfEyAhpgZ+6sHKvzF1uec1+Li8Fl5YGGa0NBncmXm2/rbJTRye7Z99R4KH
      5Gb735JSrkgTi7tmK+C4qGaLBuU8eElEdilvMwTHFFp+zL48242Uadnfb4vE2xk7
      /qhd6VO6yrUbM5V5puL7zq/MsoOT4ctWfh5W7HVRFuIFc6MJcEGrvIH1M0YXIaAz
      T8lRowppp49PTULnYVrayVlxmJ6edkPK0wpZx3UivFN4umPqGg3nKKdpIemaBelT
      Dj5r3xEYrQrzFzSDhz+TRERHpY2x
      -----END CERTIFICATE-----
    requestheader-extra-headers-prefix: '["X-Remote-Extra-"]'
    requestheader-group-headers: '["X-Remote-Group"]'
    requestheader-username-headers: '["X-Remote-User"]'
  kind: ConfigMap
  metadata:
    creationTimestamp: "2024-10-03T09:47:10Z"
    name: extension-apiserver-authentication
    namespace: kube-system
    resourceVersion: "1741794"
    uid: cd07b807-4089-48aa-8dd6-2e5552cd62f5
- apiVersion: v1
  data:
    since: "2024-10-03"
  kind: ConfigMap
  metadata:
    creationTimestamp: "2024-10-03T09:47:10Z"
    name: kube-apiserver-legacy-service-account-token-tracking
    namespace: kube-system
    resourceVersion: "10"
    uid: 5b9bda62-3262-4d5b-824f-3866fb88ab4a
- apiVersion: v1
  data:
    kubeconfig: |-
      kind: Config
      apiVersion: v1
      clusters:
      - cluster:
          certificate-authority: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          server: https://178ae1bf31e1b14f35d0cafe8f59ed13.gr7.us-east-1.eks.amazonaws.com
        name: default
      contexts:
      - context:
          cluster: default
          namespace: default
          user: default
        name: default
      current-context: default
      users:
      - name: default
        user:
          tokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
  kind: ConfigMap
  metadata:
    creationTimestamp: "2024-10-03T09:50:25Z"
    labels:
      eks.amazonaws.com/component: kube-proxy
      k8s-app: kube-proxy
    name: kube-proxy
    namespace: kube-system
    resourceVersion: "771"
    uid: dcd4b0c6-ef1e-4c2e-931f-beb715e661bc
- apiVersion: v1
  data:
    config: |-
      apiVersion: kubeproxy.config.k8s.io/v1alpha1
      bindAddress: 0.0.0.0
      clientConnection:
        acceptContentTypes: ""
        burst: 10
        contentType: application/vnd.kubernetes.protobuf
        kubeconfig: /var/lib/kube-proxy/kubeconfig
        qps: 5
      clusterCIDR: ""
      configSyncPeriod: 15m0s
      conntrack:
        maxPerCore: 32768
        min: 131072
        tcpCloseWaitTimeout: 1h0m0s
        tcpEstablishedTimeout: 24h0m0s
      enableProfiling: false
      healthzBindAddress: 0.0.0.0:10256
      hostnameOverride: ""
      iptables:
        masqueradeAll: false
        masqueradeBit: 14
        minSyncPeriod: 0s
        syncPeriod: 30s
      ipvs:
        excludeCIDRs: null
        minSyncPeriod: 0s
        scheduler: ""
        syncPeriod: 30s
      kind: KubeProxyConfiguration
      metricsBindAddress: 0.0.0.0:10249
      mode: "iptables"
      nodePortAddresses: null
      oomScoreAdj: -998
      portRange: ""
  kind: ConfigMap
  metadata:
    creationTimestamp: "2024-10-03T09:50:25Z"
    labels:
      eks.amazonaws.com/component: kube-proxy
      k8s-app: kube-proxy
    name: kube-proxy-config
    namespace: kube-system
    resourceVersion: "772"
    uid: 84dfd961-fa2a-4651-ae39-0df59ddf3818
- apiVersion: v1
  data:
    ca.crt: |
      -----BEGIN CERTIFICATE-----
      MIIDBTCCAe2gAwIBAgIIGH/HmUr6/SQwDQYJKoZIhvcNAQELBQAwFTETMBEGA1UE
      AxMKa3ViZXJuZXRlczAeFw0yNDEwMDMwOTQxMTNaFw0zNDEwMDEwOTQ2MTNaMBUx
      EzARBgNVBAMTCmt1YmVybmV0ZXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
      AoIBAQDQ5i+wUaTmgdmm3fgPPE+fiNUqSAYtyOuec2/V8HC4yds+F0IaRevJ3XGQ
      59S+or9DFXyt5JAfH4FGNVkZTiFiDme/0jlHqifRfS9vz/d8TLLb+SQtTNHJuFYT
      nH+V5xeOfI40wewla+vKwPAm8tziwNH9J+SSNVO2jMgrzdGkHfoZ3R8rxA6ljPUi
      20Bmf576Rvpf3Ua2aBxTQPI+lrpAawpmMANyRA4oQUfN5d68tyIMzKUZcXXGv51d
      mzxgN/WoZVIghGVkCmuL0ThAYYVljhFz1qj3e5z1VX+ekkY/d8h+ArvT5zkJfzLX
      Em6KCtOgTQzNAPo7JlCH9B+7I13BAgMBAAGjWTBXMA4GA1UdDwEB/wQEAwICpDAP
      BgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBRQM8Lxr5l7cBUmRROt7wnJJP91lDAV
      BgNVHREEDjAMggprdWJlcm5ldGVzMA0GCSqGSIb3DQEBCwUAA4IBAQAKG8fZt2Id
      edS4PeB7NTvuyIwzCHU5CDgDmF7fzwQthjRZFriAddncS941L66kroOC99FbKNPc
      1FWaH0t4YR4R0F0IPrRivRUHOldABNTNJHe3E+1QHPtRjlof+oa/SZ1A3w5bRH+c
      FboOimqQoiQVxBvGSebBRh6zf8xeFOqsCyP0IXJ4VyRY48Z1bvM0Mq2h90WIgX98
      o4RDP/v5C0ZACeLalyCxaZmueIx9k3L+1jWC5as1DVCd8x2AqxS+2GksxNeYZOSj
      eeCAyq0gKeoDABcW3ms6ywMIyT/eGeZp0Uxm26hH2gCKYfNgSnvS9rB8XxzdHJyW
      7Gv0dcYbRc0u
      -----END CERTIFICATE-----
  kind: ConfigMap
  metadata:
    annotations:
      kubernetes.io/description: Contains a CA bundle that can be used to verify the
        kube-apiserver when using internal endpoints such as the internal service
        IP or kubernetes.default.svc. No other usage is guaranteed across distributions
        of Kubernetes clusters.
    creationTimestamp: "2024-10-03T09:47:20Z"
    name: kube-root-ca.crt
    namespace: kube-system
    resourceVersion: "336"
    uid: 96793b83-edc0-441f-b0a8-705eee2dbc80
- apiVersion: v1
  data:
    cni_network_config: |-
      {
        "cniVersion": "0.3.0",
        "name": "pan-cni",
        "type": "pan-cni",
        "log_level": "debug",
        "appinfo_dir": "/var/log/pan-appinfo",
        "mode": "service",
        "cloud": "eks",
        "dpservicename": "pan-ngfw-svc",
        "dpservicenamespace": "kube-system",
        "traffic_object_id": "1",
        "interfaces": ["eth0"],
        "interfacesip": [""],
        "interfacesmac": [""],
        "firewall": [ "pan-fw" ],
        "override_mtu": "",
        "kubernetes": {
            "kubeconfig": "__KUBECONFIG_FILEPATH__",
            "cni_bin_dir": "/opt/cni/bin",
            "exclude_namespaces": [ ],
            "security_namespaces": [ "kube-system"]
        }
      }
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: ai-runtime-security
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2024-10-07T10:09:40Z"
    labels:
      app.kubernetes.io/managed-by: Helm
    name: pan-cni-config
    namespace: kube-system
    resourceVersion: "961750"
    uid: f72a8d55-2ace-41dc-9369-6efe8a85026c
kind: List
metadata:
  resourceVersion: ""
apiVersion: v1
items:
- apiVersion: v1
  data:
    ca: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJkekNDQVJ5Z0F3SUJBZ0lSQUpFZXhFQUQ1SnpDQ3ZWUzAzVUZHRUF3Q2dZSUtvWkl6ajBFQXdJd0R6RU4KTUFzR0ExVUVDaE1FYm1sc01UQWdGdzB5TkRFd01EZ3hNREU0TURCYUdBOHlNVEkwTURreE5ERXdNVGd3TUZvdwpEekVOTUFzR0ExVUVDaE1FYm1sc01UQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJHNW1NcjU5CmN3VmNqd1IvV2VSODRaZlpiSS9LNGFLQy9vb2RlTm51WnRWT2VEQkIyR3FiU2xIaEVZTGthTTVTV01WZXdpVWgKNGhiSkNadmhvY3dmS2RHalZ6QlZNQTRHQTFVZER3RUIvd1FFQXdJQ0JEQVRCZ05WSFNVRUREQUtCZ2dyQmdFRgpCUWNEQVRBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXQkJTcGRRUHRBbXV6ZVh4WUZhSTBqNTJwCkZyZlRRREFLQmdncWhrak9QUVFEQWdOSkFEQkdBaUVBcmdXQytnMlczZ1cvQU9DMWM4MXNUS1JQLzlaRU40M3YKQ2IrbG11dytpMjBDSVFDQ1JHRjdOTWp0MzFsRkUyTUhabmhERHF6Z245c1ErNHJWWnZGWWtpZjQrZz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    cert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJ1akNDQVdDZ0F3SUJBZ0lRWVpCTVM5Um1JTHhEb2lOMGloV1NZekFLQmdncWhrak9QUVFEQWpBUE1RMHcKQ3dZRFZRUUtFd1J1YVd3eE1DQVhEVEkwTVRBd09ERXdNVGd3TUZvWUR6SXhNalF3T1RFME1UQXhPREF3V2pBUApNUTB3Q3dZRFZRUUtFd1J1YVd3eU1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRXpiNXhvZzF6CmQySmhIcTIwUXVIZEJJbklqSjQ3U1dNUFhyLzdJWlNsQm1tbW1MQXlaRW5xRmcxb3FsenN6RUR6K0FEbEFCYzcKUzRuN0pxMTZlTXNoT3FPQm16Q0JtREFPQmdOVkhROEJBZjhFQkFNQ0JhQXdFd1lEVlIwbEJBd3dDZ1lJS3dZQgpCUVVIQXdFd0RBWURWUjBUQVFIL0JBSXdBREJqQmdOVkhSRUVYREJhZ2lKcGJtZHlaWE56TFc1bmFXNTRMV052CmJuUnliMnhzWlhJdFlXUnRhWE56YVc5dWdqUnBibWR5WlhOekxXNW5hVzU0TFdOdmJuUnliMnhzWlhJdFlXUnQKYVhOemFXOXVMbWx1WjNKbGMzTXRibWRwYm5ndWMzWmpNQW9HQ0NxR1NNNDlCQU1DQTBnQU1FVUNJSHdIcXc1cwp6azBaZ3EwTG1sYyt0cjVqV3BxRGVtemxPQW5naWdpVkF2SVRBaUVBeC8veEVDQXIzZEVuQ2Z0cS81WlpVMXNCCkJBa2RwMHhGVXhVRDc1VUd1Nk09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSU11WEEvaVBJWGxEOXpqTWhvL1lKVkFSRGlrMDFYY2dBdDJUbUh5QXF5UkZvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFemI1eG9nMXpkMkpoSHEyMFF1SGRCSW5Jako0N1NXTVBYci83SVpTbEJtbW1tTEF5WkVucQpGZzFvcWx6c3pFRHorQURsQUJjN1M0bjdKcTE2ZU1zaE9nPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=
  kind: Secret
  metadata:
    creationTimestamp: "2024-10-08T10:23:00Z"
    name: ingress-nginx-admission
    namespace: ingress-nginx
    resourceVersion: "1219477"
    uid: c8b819ac-c6d4-401b-8054-9f86911bee49
  type: Opaque
- apiVersion: v1
  data:
    release: SDRzSUFBQUFBQUFDLyt5OVY1UGl5clluL2xVcSt2OHdEMmNiU1JSOW1vNjRENGhDcmtEVkNKREovNW00SVVOTGdwVFFLWVNkdU45OUlsUGVnVERWdmZlWmZ0aXh1NFNVZHVYS1pYL3IvM3p5ZFcveDZlc24xN2ZmRjV2Tjc3N3Qrb2RQdjMxeS9lL3JUMS8vejZmdjd2c20vRzlyRWNEMWNXRjkrdnFKSXFqbjMwbmlkK0xMakNTL1V0VFhidWVQSHRHbFBuZitRWkJmQ2VMVGI1K2dmdlVuMWdJdVF2d3kvbU5qdnJ0QjZLNzlUMTgvOGY0bTFDRjhNdGRlZ0Y3NjlOdW5UYWlIMjgybnI1L1NUbjc3NUsvREJYbzBjeFpQaGNrOG1Xcy9mRjlEdUhoL2N2VE5rN0ZZK0U5dTFPakMrdU5mUGg4K2VmcnhLZFJYaXlmOTZmdGkvK1M1L2paY2JKNityOStmUW1meEJOZTY5V1RvVVBmTnhmc1QvKzBwWEQ4Wml5ZDlwN3RRTitEaWozLzUybnI3Wk9yKzAxNFBUUWQvRkEzeXlUZyt2Vzk5My9YdHAvKzEyaG9MTTRSUDlpSjgyaXplZDY2NWVQcjlkN1FEbTBBM3krTXUvUFY3YmhhLy83N2Voc0UyZk5xN0Ztb0E5L20vL3VYL3krLzdUNHVEanRicGlZKytmZ29kSGMxdnRkZzhiVGVMcC9WM1BMaXN0YS8vOHArZTlNQ1ZGKzhiZCsxL2ZmSVg0WDc5dm5KOSs0L1ZsODBmN3ZyUEhZbmVXYm0rOVRWcEZqM3dGcUZ1NmFHT1czaDZRdFA0bW5TZlBjSXorL3IwZmIxR3p6YkJ3b3pmajZjM2dQcG1JK0p2OFVTakg5KzNjTEdKWDN4Nit2M0pXVy9DcjAvNy9mNlB1SU0vekxXWC9QejA1SVJoOERYNzgra3AwRU5uVTNpQ1drRlBaOGRnOGZYcDIvdml1M3NvL3Y3MFpPam1hdUZiWDh2UG41TGRxdm1sTlBGcDlHTGRlOEg2UGF4dDRPbkozM3JHNHYzcjB4ZWkvRHNhOHRlblA2UEgvOS9UekhFM1Q1dUZpYzdHazd0NVd2dncrUFMrK1BmV2ZWOVlUKzczcDlsb2lwNUhCTHJ3RVhWYUtSM25OdS9wS1lUbEJjNHYyTy9OaTcxWm1PK0xVTXpQK3ZjUWJoRDk4ZWtBR3JyKzdVbC9tdUx2TVFucUxqNFltQ0lYNzZINzNUWDFjUEdrKzliVGFuRjg4cmFiOEVtSEd6eVo0SDI5YzYwRjJwMHl5ZVlKTkdyOUVuMUdBNjZuMGR3M0lkejhZYjZIWDUvK3RTV0lqbW5vbThYbjU2ZUZiNjZ0aFlXSGpIOVlaRyt2RnNlR3QxZUxZL1p5aUtrUThZTjNmeEV1OERIRFEvcjBQNzk5TWgzOVBVVE1ONWtCK25jRG4zYlcrREU2QUp1dmYvNXB1Nkd6TmRCKy9aazEvbWY1bzgxNisyNGlidm4vWC9YaC8vN3QweTVhOGs5ZlB6My9RWkovVURYY09tSTdPWGFGU09BMWJmTnB1MEZiTHJLOHFEN3BteWY5NlgyQldzVWJmRGppdlMvdzIwKy9mVm90anZ2MXU0VUhIQThKY2Z4a1VKN3VZbEphdktNMzBxVXlBOTNYdy9Xbi8va3RmY1RxNXFyd0lOZ3UzczNDazNkM3BZZW4vSk5OK0w3MjdXWGhXYWl2U2FyejNQMzgrWE9uMC9uMFAvLzd0MCt1aVJjZ1dkQnRnR2J4eDk1ZHVkN0NjdlUvMXUvMm4raXZBUDMxcDduMnZMVy8rVE4wdHA3eHAvbW4yZjFUUlBQNWI3aTIxMzlzZHZhZlhZSUlEcjhYSC80UitQYW4zejVsdFAvcDY2Y2RoWjhFMlJNeTJScmQ5OWVoam5abWcwaElSeWRNTi9GR3Urcy9UVWYzYlh4bi92NDBEeXgwOE9MZGkzcDlpamM3dDVlLzc2SzIvK1dqMW92TkJlK0w5d1ZjNkJ1MFB0OTF1RmtnV2tiRWxJMHNPZ0QvUmY1QmtYOFF2eFBvQmJnMlY1KysrbHNJZi9zVUxyd0E2dmdlejdZeGZmaW4rRFliVHY4SUR5R2lPbndzUHNtc0Eza1dia0ZIZ0dabkhCcWVGUmkrYld0VWIydHh3czVnRDlCMDZiV21qbTNOazZIaDBvSGhpNFNtSERaQW1Xd0hkdkRQeFpHd2RVV0x2bUdad1BESE5yL3E3Z0FyVDR5T1FQQnVmeXQ3ek1aUzVOUElFM2VHTHgwTjZyQUJLcjgxS2Zsb2VYQUpwbDFpb2RLUTU4amVZR1ZCYTBBVE9qdTNOWlhlR3l4Y2Fxb1VHTlN6TGN2Q21HZUZMczhKcE9GMUE4TXpiWXQxb0VuTlVmK2hvVEJid0kwLzU4ZjF5blozMXFDL0JncTV0N2lWUFlMQU1UZ1ptc2Z1MHFDNmhPbjFOZ1lySDBlK0NFMGZCQm8xM3hwZWJ3VmtlbWY2MG1ua09ZVEY5WVBYS2QzN1BsbmJQQ3MvbTJ6dmFBMW9YbWFraVVwMHYwbEQrZnQ4Mkp2S0wrUS9GOGRXODkwYWxBVG5xQjF1dk5VNWlUQUhxUDFvM0VBNW5FQ3Ivb2pWS3h1U21pY3ZMWFp2QTBvbWVDNmRoejJha2x0TklhSFpvUjMwOTZLenNYV2x1elE0ZVFXbWZWZFh1cjdweVNmelNHNEJCYmVMUVRmL3Zzc1BudTN2S3RIbXUrSmFlb0EwMkFOdUMrMC8ybGQrUUlSR1J5Wk1UaVo0TmpnWlZIZXZxZEw2MjFUNDU4Z1g5MEFaYi9FOE9kRVlNMFIrRDNxOHUzcGRkRFloejhwYmtGdW54KzB2ZlhxZHJ0QmNYL2tCRFJjYyttMWlUeGxwUG1mRTc3TlZieWpKdmNtTUZPYmYxUENmL0tDcmFNcUJCT3A0V3p3cjNSTlFCVXBYUkRqeXNqTmdIcnRyaTVQMjVySGRIcy9KM3R1TWtCaVZwTC9ONGFRbkRKeDNTeEdnMXBFMlBJdlBSOW9QWGxlUENZRXE3algwTnhmK0U1MXBqVHFRZ0ozYnZGYzUzOXZDKzhuK3RQaXVORmZQVWc0YjNOYVV0MGN1M2ZzKzdZY2pwVWRhSEUxYUEvcmZKdFhibWl4RDZDK0V1emgyVHlZckwwZCt0TzdLaWJIeWEvUjl5Z2NEUC96bmFFcER3NXRVOWlMZUEySCtRcmcxNjRIUGszazgyMzlnc1hKb2twdTlPdTJlTEpZaExMUi9pclRDdEV6SjhaaVlGZURRdkVWRWQrN0F4dnV6MU5rdk5nOUJZRktRNEZuTUV6NlBqbDlXaS9nOFRtVzY5K1pLLzR4b0pyOS9Vby9ucEIzUE1rdU5RbWVHN2hvZCtjaXp6TjVrRDRGR01ZU3U5TFk4QndKdEd1My95T1h4M0RYSzJmRURRZEZWTWJBR2RFUkRwL1Z1ZEpUK21hNEhSM3dXdUxDR2JxN3ZkMzU4ZHRNOTRFUjBOM2c4aTNtWW95dmRFejhReGdiRnJDWWVzOUdVN2hLb3ZOdnFMUGhTMTJUbmVFK242c1EyRktiTGM1S2pJNzQ5cFQyZ21yYWh3SzJsb2oya1BhUERZNzdPczRlZHBreHNMZXZQbnNwOTIySy8ySnFIN2dmZzZNckIwYndESE5rQk1Ecm9IbUMyUEdjNUZpdXVlVTVhZ3ltZDdMV3QrU3ZiOU9XdGdXajcyUGYxanV3Q1JTU01BZTBEZFdKbi9CblJVZGN4RlBsa3Nzd1NUT2wvTG81MFlIaml4bElreUErRXdQQ3NJMURGMDBqcCtyclNmUjU1K2ZlVDg5RG11K0lkQVh4NVk3Q29yWXovanFia3psS2x2YVZPYkl1Q0t6dytOWnFqc0Mvd2t3QzROT1o3bWdLMzVySHZUcWdEYVhZa2FLN2doSGY3cmZpanhjRjl4SnNDRHExTHRCY2x1bUhrNld4QXU0c3BmYlNVN2hiZENYaTlWVVEzNHM1UVNNZndwTk9iWGVCdmt4a2hmWit0R0ZHYTFaN2p2VUZKcDRmeHRBRVJtcFM4d1h2YzRiRThNZkx3ZlhrMFBKbEFOS3NyWDNiNDJ4blpjby9UZmRrMHRZZk9pc1V5VzQyYTk5RGRPWUlDTkZqWk1hbjVkb2I1SmFLTmcyTnkvUzJtUVZYWUFrejczY0E0OXBZR1JlNE5xZ3NOZjlJcm5xblcvQzBFcXVRQWxpRzBhWFNuSS83SzQ3M0k1SVZvVDBqUDZBZ2RUUlZXajF0M2ZyVWc2VzhTMDN1YnpFbm0rNVMzMzE3NnorT1g5Zk80ZjVhZkhzWkxjenNlUE85SHkrRm4vTTJBSm93amtrZEUxSys5VUhxazZkS095ZEViWFJFZGk0VTd3ODN4cmZqdUdLeVlMYUk3VFNIM0JqdTNwNm5NZ21STGh1QlowdEVwK2NSek1qbzNPK0RHTW1kK3ZaZnIxNmpkL2twWFJXVTg3WC8rTnFWUFFDRXBvQW92YUo4MFZZRDhnUC9IdDlrUThjSVhuV1dPMXFCTG14eXRBRlU0b2JNUzMyV095Y0wwMlp0TG96M3ZHQjNoSFoyZGtiZDVqdmVmR21PWklBd01iL0taSDZacmp0ckk5blcyZnVVSGZadVBlTVhuM0Z4enoyTitORnZid092dEJtN2Y1Z2QwS2pzQmRXZ0xMRHpKeTZFTlBHYUQ1T2hvck9oN0JzbEpSQ1I3ZDZOelBNRGY0ek5yZWwxb3NVakdoYnNSbFk0UjBZcGpkc2FmTWUwMDN3M3AyWnBFNzJmOWNoVVpBTXNOU2YrUkhBZzlmaUFGSnFrZHNNNFF6YXZVcHZpRzZQN05wYy9LNUtrc1M0Z2JUUlZQYzA4K29Yc3lraFBqc3pySjk1M0lvTkV6MDVjM1FCMS9qc2FBL2lOc25lMmRySmUxYlhXc3pzaEw5d1d0UVppOTE3ZXgzUDhTNzJQeUgwYzdGdXZrMWp2OUw0eC9teU5kNmMybEo2WW5lN3BxdjViZVEydmhhb3I0RHBUdXFxYWRhTnpKWFRkYnY5YjlqdjZMK09MYUJxcmpHQ3E5QVhKNlJ6UitnM25LUzNPYi9JRGVXZ3JwQXBYL3pML1krL3g2WkcwZ25yYTJSL3Q0N0VkNnJyUHdoSFFiclJQcGdybzZ0ZzJxdTBIM0QxQVpVbGNGQ0FiNC9wdlBtREgrUFpFVGdOTEZNZ0lZNUdTTHdybEM2eTV0ekZNMjd0R1VYaHNka2NnL2kvYkE2bGpITGx5d1RHaXlCNGpwYVpKYll6eEdBVnJEeXJrTUxmWndHdGlCa0IvamhiRnRlSFpvenlsNWFYcEliMHBsc1ZUMzVWbTBKMUlBUEt3bm8zc2EwZWM3VUZlMm9jb25hMEE3QmlmdWVGYUFQRWNmalE0SUFDc2p1cWpqU1VYZXc4Unp3VHliaEJiTHJEUlZjaEthcXRESGxDUU1ibnlXL3hSNEYxcnpZM2RwK3BQUC9NdkIxVlFSaXNzSldwTWxrdWZCZ0Y0Q1ZTQyt4ZjJoOVJ0NUlWek0xdlkzVmtEM0tTVU9FSzhRa1I2eDRsbjAyek9hRnhHZmtTcXY2a2diYzcvK3I0STlLaldTL0xlemdNSGlmZk5IR01ETVRyTG9iSGF2TGszcEN2RVo3YTgxb0QxZE9VQXNKODNJMEZKRlFsUEVOWnJucTl1TGRid3YveDZza055RDl3UGZMVEUveWQwMWptUDZrKzNBWGU4UXI0djRpd1FCdW1mUDZPZTgydytMN3pPa3dVM3MwVXBjYTZwQWpGYVk5dkt5SHY1dTFnSFE5SVVBM2VYZkJ6U0JaR0h0MktmR1Ivb0x6MGxIWFNGbmxnSVFUN0Y1bDNENUFablRWN3VyNk8vMUsxNFBPM2d4UGRteHNua2s4M01RNzdZOCtXaFM2RzZtSGZOSWt5YUY5a2ZveGpMNU1yb242WTJtQ05BWVBMOW02MGJZZ0pVOVhlazJ5Y3Q0am9VMTRPaWpyblFKNFBaZFFSMkhnanJPMzhYNEhzajluZEk3eisxdDA1UDNCcGJaKys3cmtiZDUrTVZGenkxc1l4cmI0bkljclpVSHczbEg5b0FIbi9rQkh4YjNBTjBKMGQ5WVhqaXVYeWNkQVVibmNZam5vNm55QnRFTjBwa1hVL3BnS2N4R1YwQUFrSDZqMHZ2NEh0OE9vQVhSWGxoS056blBCUCtpblhnV3ovdUV6ckZHTVNTNnEwMnFoOVo3bEtmeHVCMGJlQkFhckhUaVdlWUlwa2hXSXBGOHVNSTZJU2V0RWU5NXpmWmpPSU5qdkgrUkhJL3RNY0hJWHY5NzFDRjdzV3kxQWdvSURLOWVEaXpxTFdUQlJwT2p3OHhtTU84aEdlcW9ZMWs3ZS8vaXU5ZnZEWlpyUm1veWovNHFvbE1zeTZFNU9aWnlJR3JvSlpWZHpvMjNiUHNVMk9Uc2xXWCszSmdHM1NsUURoRHh1K1NzWG44ZWtiNTM4UXhVK2tuR2QvdjV2L1IzeWgrWUJSZnpBbnhQRmZUcGxBZWFIdExQbUJPWVByOU8wSDUzckJQUHBtdU43emxkbmFENzQ4aXpKR2x3VWxEU3pWZEFwVGRHQjRaQTZSSW0wdUd3RGt3aS9vbnZFTHl2M1BocVBwdlpRY2tDYjRyT2NuODdUOGNlMFV4aVp5M3ozZWk1L0EzelJBL3A3OUY2b3pPT3ozWkUwNEVoaXlUd1FMQVk5TjNSbE0vUmJDUVA0Ny90NUc0cHlMRVpEWHJ5TVpKQjVLT3VTdDFZWm9BTDdxcDdwbVRQVGVVT2FNS3M3UW51VTM2MkJvV3hCdUNNelQ4L1RpVFhXS29RV0J4OFFmMEIxU0h5YTIyeFBhQXA1T2FNSHBIYU9vQXF6SUFpa3FZSGljVThuWE54RFRreE9idG83V21UNk80TUtPeU16dVN5dnFJd1BwaDJ5OTloSFFXZG80a3F5a2ltdnF4dmtBNmc1dHY4TjFpSDhaaU53Zlk2YzA0SUxBOXVnR0pCU1JXWG1uS0lkTnpsR3R2aGtZellhTVB4WUtncEZoeGRhc3U5UEQ2TmNvNEcxU1B3MkZyc2F6b3ZTbDRpUGNkazZLTkJnY0NJN1g0MXo2TTE1NlNkb2pDaE1iaXg3UUdOZExnVk92djhDMjhYNzJSc3cxcHFLdTFvSHR6b3FoUWt1aHJnaEYyc2U0WDhrQm5Qc0l6THJFRDZyTXZJVEc4d25YZUhLaWt5Y3dpRUNZSDBIcnJ1WG12WUIzRnRlcjJkbGVpTDNQM3JpTWZHaUdCTzltaHBTQW96ZTEyak02ZnZ2RXdaNGR1TW5LVGp4bndhNzZrQU5VWDZabmlIN2h5TmNZajZrRThMVlNRQWxuUGJuUWVnTUtzWjBzTmtkQjRrRnNuRlpnZWVMRllPYzdTVDhhOUdmaGI1TlpDdWorUWlEZkZ4MU1la3ZRd1NyMTFWL2tqM29mbStUT25kN1NmdE5QRU8zSzZKK0xVdmVmeUFoK2FSdDVNOXI5eUozQTF6bnRJclhiR2cyWmxjSVJkSC9Vc3M5SUVxRnVWamJDL3BMblV1NGxsbFhnM2lieWJKR3RUT1UrakhNa1U4TnVtbHByMlVCdXRrcjNnY3lkenkzKzFORDI0dFZyUDVWVDllVHlrQUZOSmY2K1hzUzMvZkpJY1gvZDc0N2g3WmdRcW1zYXhFTVFUU2I2d0JscG13WEdFZWFSY29vbU9wSXVRNWNZZGtxMm5CcGh1MXc3T29qOFBLUE5LTzZjMXRnNFdocm1JZGx6Q3dUUktlK0lIakxxYVJYQ1FOdTdOSVpvSmJjSXhvNUhWNmxaNTB4cS9RUk1jRVh2dlhDemJma284aU9NTW5vcmsvUXAraWVsdXpnMlFta1VCN2FTbmR3RlJsaUdnTUtDTDJTVXpuayswQXlpZUE5U1RSTVZ4RVZ6MEt5K3dzczgzSmxXZy9kcVpMbzNmZ0lySWxCOWFBUmpMN0V0K1JLempFOUlwOUdpdmJvcGl0TmFBcFhSbmFXdk44Qzk5ci9mYTg2MXc3aGJVWlNLZ2RwdkQ3eTdwWDVtZEk5d0NzZk9UZC92cUM3NzdreDEwVmRDV3NQMkNiVzFlUUJtV2RxV1lzTGRlbVNvTVRXeWp1WlF2NVYwVG5jcG5FaTJDN1lkNk94dEdrNWgwQ2s3TER6TGYzL0RwWUNiRmNES0RoUi9aRWkzVUM4MGgzZE9XdzRUa3hNRlFhOFFlc1orTzJYZzU1bmVBZm85T2hlT2RqbldUK2o4am5TdWI5ai9INTcwVzBOQWt5M3oxclFTUUhhNWdQUEwvZVNidFp1MFdhZFkwT2xvVXUwZTdlVW9TTnJvcnJlUmFuZ21NME1ydVJiTitzUS9qSlhqaXpaSnh6dkY5OGtkNVkyVXY3bjBlNjZ0dXl6S2UrWUQ3RnU1UDFmTmdicWtTWG5zM2wyWHpJdkVqVGxjc1BuSHQ4cmtHZU5vVTBua2Flb0xYQVp5MW5jeFBRdjJINlRzVjJjUDBheisyeWpNSVBwRk54elc2ejF4a1VHU0phTjFqR0JjcmhkTVZlUm5ZNmJwejBzUWJLSVJ6NTRucEVSZmE0U08rNTZPdE9iSGZiUkM2NjVGL00vTGZDT0J2RHMxMlNiV3I5YnJGZXRUY0gzUm83TUZwdkVaMzlSTlp0YUdOdm02cThzL0w3a3VrV1RUN2NQYmJES2owdlhoY0NZQjhBa2gvTzJuWFBqNWtpSGNOamZLQk1RczFmSmVQT2JEd3dpLzBxclUrZUhrTkQ2VzFuTVEzRTd6WHAyb1YzeTdMc3VmdDZudk83MzBCdnAvamUyWm1yZzZONThnYkxoT3E1dFluOUxXMTkxa21NUnZNZXhyR09YZXkvYVBUanQ3Q1BaL2F2dVcxUVd1SzNLZGh2c3ZzSis3cDNGanIzMkZZcm42N1JnZEoyNWd6U0gwbkRsOTZxUG9NaVRWUy9tV3kxUkc2TzVwVDRQL1Aycit2bGlreGZUdm5aUkJHWDZINnlralBBMWVsY3RmMjcyYi81Njl1K3FJK0tTTGZGOG42ZTMrTzdnbHNobnVBWUxQUjBSVjd4TExNeUZIaUsvUjBkb0FocmcrcTkvOTF0K3BvaWhib3FZajRvVTdLcnM3MmQzaG4vTEYzQ0FTd1ptQjNFczd0cXNzYUpqZldoUHBzNnVXMUs1L3AvdHExa1BZNDB1citYK29EK3QwRTk3aHczclQyU2NUWHF0blBlY2ozaitkU2VvMlhDMC9CWlNlTko4anJCSmRrcmQxYWdCVFhQMlJsVWVDckhETDlPejlpUXIxNmJTUzZXbytvL1NlSk84dWVjOTlKL3V3OWV3NS9EaTVLNGhBRWQ3eUgrSGROc3REYlByekxTZGZBWkVpTy9yanJCWnlueTcrSWNnS1dtNG5pcGswR1JrQjhXWXQ4Uy95OGF4d1p3WXh2SFJyR0h3RkFnQVpRSmpzZUk5S3orV3ZOWGNheUQ5RGFQYkNUWTEyTjJhS2dkVjlmNEtwcjJJSjZuUEFPS2VBU3E5R3BRajdXRHRPT1BOL0cwMnJISDYvc0kzOUVENkltT2RGdzIyR2wvZTF0WkEwL3lvem1tZTB1Z3VaYmttam9icGl1ZlJsUDUxTUwyMHJULzUyU25rcS9ocXJFLy9xNXNZVmZOL1o3R3BmM3Q0eDJTT1EwRlI2TkNkTVorbUZ4VTEvY0g4SWI2bUNXUFdlb1Uxbjl6ZHF6MG5vMTR2SXJ6VXBMNHZDajJoN1BXUUhtMlRiYTNNak8vNzk2Z0RvSFdXZUZZT0UwNW5Jd2pHaFBqR3F5OHV1SU9TT1dQU1RxK21ydDNlREUrcFYwNzdlU2dJajlRMHIxcVlaOHF5MEtyVzhaNGh6NUZadWUwNEt0TTdncHBrUHllNVEzSWRDTHZ4bkh5OWpWK0dxbVdSK1RpRGx6NmxQcjNwMUdPQTFBZDR0NHplekVlNFl3OGZWTjdGK0liN20wekw5ZkdNUVp2QnRXZEdsU1BxTVltMU94bjRydjJCZEpZTWFlWjE5dk9VeDkySERkQnlpY2N2MXZ5RWRlTi9kNTRod3Qwbi9paEhZTTk3Q3lTUHVvcTltUDdZQzZmTklyWkpMbWoxK3poWTJNWnpxMnhDTkdaTVZSNllubzlIRk9LZURiT1QyTFJHZTRmNjJ4dUdzWHNOVVVJREJZU3VpTEhPVGJTMGVqMGNXekRhRXJUcytIK0ZmRW9NT3h0RFE3aS9aZlFPcXRpMSt4STBKaGR0YjZQOC9OREFWcWNmRFRjTE1mWDlIcUlWOFk2QngxSUhXRm5xZjBvNW91aGQ0REpZbzdtYkcraksySzM4ZHo3RGU5N3pGNmZXMGVqSSs4clo1b1RvYUVDYUs3d1htQ1prMTgrOThiVDU0TTRJTkQ3MjBscHpVY3JyUHVrZHVMUnlnb3NKclVwVitYQ1FkODE0N0djajAvTTNrZG5HeWhkM0g1cS8yeXRNOHJQRmljNFBFdnVBSWR6RkJwMUt0U1A2VEdpUVVta3dXSzVGWTl2Rk50QUVyNVJ5SWVJWWs0NnVpcXQrWlJPa256V2lMNFRud0J3KzFzY1o5c1JBNHZ0SFJmb3ZTaVA5Z2hVZW1kU2tEQTZTRFlqY2I1VW1odWJ2S05ZZ2RtUm91K21QVHlXSkVianU0cnp0cEt6OFJuVHRDODU0QmgvWDRvNStLNlNmZnhPR2wrUXZKZkw2MGp6MXliNFBPWDR4a3BYUlN4N28vczZ5ejNwaC95Z0Z4Z2VKRlFxWHU5SkxpNEgzYnY1ZHpseG5YMUhMbk50a0dhSDN4bHNiNmtwKzUzbXdlMklnbHRkbGI0YlNtOWxLUWZFTTliWm1ISmpydWJONU9OZkxzVHZKVzNVL1BZUzhZbmNYWFV4NXE0WWsxVWNUeG9UVTF4WEpQL3NMRlZZQWpYSkJhTHp6eXI4MVV6emRPUlRpV2NTeGZiemF3UjJCaWVIWUU1aU9TWEw3U0RTWElaa25jMTltdThVWW5tS1FmcVUvWmtmOU1Ma25LQzlSdTFVeitCL05lVVhCUHE3N2xYVEN5Nkp0M3RORlJ4RFRkeHZhMFFxOFc5a1Rud3NtTW5hbUFBVFVaczJ2TzdPWXFQVVRuUjE2WW9VWGNOK3RCMGpuQklyYnpWRjJJQXBPaHJaK3lNVk9BWUxWL0ZWMjBPcUphZ1BnU3FGdnRWZGpYRWZ5aVRYYjJxaUNEUDFnMHhGM20vVFdqZndyZ1ZzUWQyVlYwMXJiNXhMRk43Y25GSmJkWG5uNTljbUZUZVhIdFNrc2pSL2k2NFBWZGhxeXI3VURxSWZJalE1MlRWWWVOTHphNm5pWXdZTmxkNUU3cC9MN3ZPMEhhYmtLcys1ZVFzcDVhM2dFNURxSkI4Tmo5blUwb1JhRTlvUnBmQmVjclcyRDB2QUtkd2tVdDJoaVZTYWZuTllYKzZNcENFc0l3V3V2cWxYd3lxVVEzK2lOWFJ4R25ncDVDUktXYndBU1ZGT2k1eW1iSFZhWEl2b1hKNTFIVjlNNFl6V0lKdGpuQTdhSzRtYTVYRForSDN4eFdDWlV4RW1JN2t1MHZsN3VtS0ZtdHJ2bGRWWFllQms2ZVd5T0puTVJlWjFlaTVjV3R3WkhnZ0FRVHJtc0pCU0VJc1pkNmZ1MTY2anhZcjczSndJcmRQUGFCaUhvdmEyd0lPK29URDdpSDV5Ym9uR2tKZkdmVUx0YjVNMlp3cXpueFZTdk1uZXFIT1pSbXZtRnFKNTFJY0RsT2FyU1BuNWtvRDcwUG1pOWo5bXZvclVhcjVsbnFaUnZUMllwbmR0bnA0N2tadW9BTk56UDEzNzR0TG8wTEFJU1hINUhvdWhkTTdBRjRrN2s4M2ZTYXZyeGlDTE1XL3JIUytzUVI2MjRUenZhTk5QMDU3aDFNd3o4OFVxaTBETXZONEt6TFA3YUtxZWdkSHduSjNaa2Q2UzFQN2NQQ05WeDUrRUdING9mNjhNeU1BY2tBNWdKY3hmTHZEenVCM3B6YUFrT0ZXNjhSMS9FSW9RVXVma3JuYnUxRHFad2Nwa3d5MDRrcWs3Nk5zc09KdjIwdXl5eGJBZ0Y5c2ZLY1UwNXd0cjFPaFdBNnBBNEZEN3lEM1ZvdDhRTG1ia1RYUFRLYmw3bHY2YXh4OXFxaE1pRldyR3dpVlF1aWN3RCtFaU4xNURZWjZ4dTJ0QWJwRE1ZdmdpYkRQVzlMdmhBY2xwVzVPU1IwQmQxWVcydFVoemNhQ21IQWg5S0s2QklyNVAyZDRwdjVjNkt6c0dKNjBYTG9sVDZTL3MyUm9vek1aaW5SZWRsWmM2Z2M3UjVPeTRESzlIOEFNSG1tZENCWkl4VENnSGFsUVl5YVVEZnBlTmpROXlaelFlZ3gxcStQMU5HRUVSbkYvVDJqNXUyL2V5ckRaWXpETlRlb05zRldyK0tvd2hiQWpUbCtFTi9VWThPSVVkRUZWZGxkWkdSeVlxc2wwTU81UWZoMFZCUW1kN3BEVWdsMWgrTzEwWXg0Vjd4bEJrd3ZUZzBqelczcG54czNtWXZuZTZSUE1ON1YyL1RzbjNjNk5EN3d5MjV5L21URWRUQlRqM2VtVEVPekw2VC9qblNKVjJKdHZiR0pUVkhTblIreU5WMkZrcVRtKzlRbDh1eVpzc1BHRzlhSDZBbWlKQmM1WHBIcm4xV3VtcUdJMURpZDl6eVV6SFdONU1NMWtiVUpyUEJ2bDVKeWtEejZIRlNac0w1NzZtbmRxMU9HcEsxd2ZUL2dyeDFkR2d2N0ppZmVWdFNaemhVWkVaZEtJS2ZsNnZHQjNYOWtRUmwwQ2xDUXdib1k3dGpJNXBLaDRyVHJmRXp3ZTBwMFZtU2NjOHhyOVArM2tUTkpLakVDOWFDMXcwbGtMbzhJRGVBT1U1U0ZJVW83T0Uxa1Y2TC9IZkZJYW41aDBzQzJYdG53dkhyUTFOYlRCTDZaYm5iamJ1MnY5OXZ6Q2M5WHExK2ROY3ZJZS9lN3F2MjR2M1A0NjZWN0ZYWFphZkxzc1YxMytySWIxaEdJZEJvek9RdFJWZXcyUGF0by9lc1JUNU9QZGtMMTdESlQvTWhjOXdTTllFSjEyeHRrQ1oyTlA0L2RFQXA2SHZUQStkTnh5MmtycU10U2tkcGRrTlJib0szd0oycHIxZThwd1lBQ3FHZWNsQ0RXUDdTTmN2ZjJmdWd6S1VDNVoxUmtwdUxzcVhuYlVjdnVvVTNJS1hkVHJXZ1ZlQ2RtSGJoMUxYNlVsWWRuZkpaRTNDWkEwSGJnd1pFK3RpN1ZJR2FtRDFKa0VHQ1JXdC95enVDNDBaOGIxd2hQY3BTNi9oMmFFOUlZYjJCTzB2RG0yS1F0d3NWVXpDaXZCNEsrdWFoeVBra3ZDYXphdW0wb0djUUp3czF6YW1td0VaYWtyWEFSUzJhZXhHSGUwdzhCSVlyMks3RDE5ejdLSWw4WjUvMURvWFlJMGVORTdBNGYzSnAySGNKTlBQRkdhcktSYldqOURad3ZzODZLNHNWVWhDSGI4VTdBckx5ZW50cGIvWFgraHd6STNkY3BvSFA2QlJYeVJRaFNsUXRCamVLKzhPbzY4SzRjQjJCeFhScWhhYUZQUU5UMTZORkhneU96STA3ZFRsdEROVzhmb09oS1UyN1daNlNIVjlYVFFtWFJWZkpyTzFIY2tRZUo5SXpRdWcxcGtrWTk2Wm51VVlIdnhjaFhMcmh6WHd6NitqS1JFTzNMR2RoWGd4VzM0WWo5V040Zk00K1FRd3hCYUdoblNORGlpbHM5RXZreWxkMXJmUU9ZdldOZjd0TDhXM0l0cU05eDFEc09adEVwOXZoVU1jUlBER2VEODBhcGpzeXlrTzdYeTdqNlp3Q25hSStVKy9Zak9OK0NCYjVJT1I3VTArMXQ0OW1Wcyt5Tm5vMHJDdWdjZnNkVG1YT29YYm1HRG83Zmo4eFJDR3dUdlNYOTljK3FWQUE1T2dCR0Y0elpscUZ6cWV1UC8rQ2p5d1pZaHd3bk15ZmxVTmYya1g5dW5oUFJXemV5ajMzZ3J2MVRiSGM1RmNtZ3RaNDUvRmszWXRUMnhoSjJnNzFwakhRQUVDdHdTNzJBSW01Q2FacnNGMW5MbXJjekRkT2NpN0ZyN0ZHbmhzRXQ5TkJiNWZCeXZKU2x1VGlHZ3g0ZFdqeDBBSmgvazF5c0lSSGdIOVRlYlRZN1kzUXMybjd2aEhRTTZQbEh6b2V2ZEdDT2Z1eWZJdzlPckpVb1IvSS8wNmhUL3NDTDZtZElPRkYvbkJTL0NSMWZiejQ3SHYwTTJXYStQM1FBOU41MDhUYmpmaDR2MTlEUmQvSVNVdHljTjVSQnVtSnpqYU1ZdTNmWDJRWWxkd1lzUjVwWVdMalJOY1RSbHZOVlVtZExaMzFOVWdGaVM3NzIvY3VDS1VwRGpiRUIyUythdWh5SVNHRGNyUmhYOEY0MmlaRTVBd2l3YWNYcytCQmt0c1RjcmVSY29qLzVubjZHUGtlSWhxZUl5aXYwbVR0WTZhSXNFUlIrL016aVNNOGFzM3h1Q3dOem9pTVZMbFBlZ0lEa2l3aFFkQ0x2OGJLMFFoWU9VTlVDVTRVdW1kd2NMbFlzcC81bGtCQXErSCtraU0rRmh4eHM1eE52ck83TWhMalpJaHdQSGUvVFJYdUlUM2UxN29TdktUOGNGdlpPaHQ4TFkvRi9OZE1rZEEvbEtJREVLMzA3U1J6NmZPdDV2R1dEMDN4RkJWOFpIeitNT2pLY1p6NVV5dlI1cGNFWk00UHliVGsvMG9qaTNlaXdSN09vNTV5c2RXRlpRRkxoZm80MW5wMmlUTzFsUjQ4Uk5NWFFCTlR5Z3BIRmFFSjV1MktlK1JNQWpxSFE1N2c1S3lHRE01b2EyeVliZzY5NFFSSzUxS1FFdFRtOW4zU2ZDSG5LeTVBRTJxUjVwSVlEbWxjV0dHMEtGM0lCY3pGOGQzQmtBZCsyb3NNQ0JCVy9PejhlRC9tSTJQaEdtQkxPeHBFa3Q1clFJTUZ5dzhZZU16U1ovTVBEWjF0bzhSUGlFYU94TmlZemxhTjdXSWExM0UvODdOT1hLZ296blF4a1A1bDF4UDA0MUdUTzVjYkYzYmk5SndmY3YxN1YvMzVWL292cFFIaU5jaFdycEhxYjlTMlNvRU1XYkNXK1Z1Yzk4d0ZzKzhjQytpdnkyVjlrMlBXWUZwZkU4cWNHdDJKTWRnOXhzVE8wT3p1elhteGE3T3lodGoyajNwZzE1OEowclFZR1VDVE1ra0Z3cjE1d0lGN0hDZitPNG1jem03aCtnN1ZTUTFTb1JBa1NEQTJJVXhUa1l5anhocjhMekFtOFBXd0FheWJtQjRFcm9IYlRISFI1cnFYT0FjQ0xhSGFJTjRjd3Y1OFdGcXRON25sVGdyc0ZqNzVsekdiTHpOeXVGbGhTN0ZQMFIwbHlxeXVieUROclNNNkNjMWNCaWNmTEpZcEZEMm9yanZENkpac3lPN3VpY3ZMUzY5NzVNeHpDcjVYLzJyRmRicmM5bUg1VE5WeFgyL1ZSRXNLY1czOEh6MEwvTjlvWWVMcUt6bFg1dmpyNk53aHJ2TjM2bGs5QnBuZ1ZWY0ZSN3V1MmhTOVhydVIzRGVCRVVtcVdDQSt2bFljOTFqTmFJUDU5cjNja2F2T05kSGFCUjhnc3FmYWhDSmllL3NLZDRVMExtYSttS2IwSnR3NXRYTzhPU3Q5Ykl1YUNzak5YTzdQVUJhVHJoWk10N3lPaEFHQ1IxRDJaKzlFVXNTYW13aXpta3dLOUV4V2NiVmxVTmdzUkR0SnowZlptNE84OWpsTlhWczg1NFEzV3dkN2FBcGg3M09EZzk4YXZvYzI1UG9tUTBRSFhIeUVVenBFOW9ITUtYUlRXU1BwOCtITVRaTlM0VEJpQkJyWXB4SUExK0M1Z29FaGdkUE9pdXYzdHordnFhNlhoWXFuMVlUcWxiNWVJeUpQbmFaeTRrSnZRWkpvV3p5dlErOUJtbDVoYlNXdk5SUUkvM1paMURRN3UyM1FFZHZnL01WaGFybnIvOElTOGh6TGdQdFlWTGRoNTdIUVJzK1p0ZStuODh5YTY0Z2Rmc2VteDdjeFZsdk9BVmpWcW9VeFEvbytuZG1ON3AxRWduWXA0KzYwb3N6OUxJcVY0MVNick9MSnNyWWxHbDBGeWNvTTZjQ2pjUlpuSE5PM2hoSkpTQnVmQ2JUdWZiOTV2MnFvcFpIZEpuTGRxOVVYMHFybmNYOFpGS3NidlVZTFNORzhpNmRGMXhoREsxWkt0VnE5c2dYSU5MMGRGWGFtZjRxemtadHlIWk5MU3pwTzVFVkRuOUg3S0tzMUt6dktCTTIyc2MzSDRkR0VKcGlKaG12QmVSdTlNNGtDcC9JWjdybU0yTkxWY2JxMTc2Njc3RjE3RjY2VFRQZU1iMU5FdFNQYXQvTUVYU0tmQysxWU1heVpOMXZvMmt1eFBpeHJxek40MTFSejZ0WEpxdU9PQ2RwZWtMTWc1RXZVdHErcHVwYnFTcGpRN3BqcGVKYUZENllvSDVGNlJXdDF1Y3FLMHArNytTdHRWelhqQ09WSHlwcExIWFYzNkt3VHBrMXZWN1lWTDB1UnZ2SnVhRnIvb3RScE9aeE5ibWNSNllRcGxFNjQzZTRzNk5RVTBucFVrVlpvK2t1dThIU3kwbEhiUzV2TGIvTVY0ZkhHbjVWY3hjOFlwNjFzdHlwTmhPOHduZGFaWmcvQkMzTnJFTktLY3BFaDdGYjNhZDZtYXgvcit4UVA4WkNGbnRsajg1bXdGOXQwYTNUeGYyY1o2TWtwNDVuZk90N0E4M0RZcG1qbGJzdlpsU1gxUlM0c1ZRaE8yTmNGUzFvOXFNdFZOenRLVkdwQnc5WGtDK25zeVY4QjFjMW42VUl4c3VINlJhNHlua2VXZmtxMmVvQjg3YlkzZ1prWHI0Q0RaUit1NXRlRy92OHdYT3U1eU81L2Y0WW5wYlI5RVdFamVZMWVKQVZGZjlMaVg3N1pVWDk0VmJVYUo1T090Ni9vQlgxcDhlTjNCdWJvU25kcmRHUnFwenRacXZnTDUvYzlUNjVPRkE2bC94V3hkMWlKdFBVNzl3OWpWYU9ZeDc3Ym5ZZUdjZmc2TFUyRzdwcFAwZWF4cyttdElmb0NFa2t1TWFMSjBLZTNUeWJ4LzVodEJ6aUJCV0xrelpJUWpLbzdzb2tHTTlpNWFQa3dhMnVpbXVjWVBMU2Y2M2lDbVh4Sldsd1lDbitxMUNyL1FmeGdydWsvTXppdEFQREppOURUWjM0dU41RmVsNGUybStUUmJOQjB5bWZ2OEVqdkJrVmkrTUQ0c3I2SDNvZTIvQ3h0MEh0K3lWcEtrdGtlQkJ0WGJCbTRucjR0ZTljcXJONVVhcmpoTURveEZJZHk1eWlnT3Y1RGRKa2c5VXpSeU1SVnAwOHNaVERKdEcrem5rY2F0Ky8zb3VReDJrN0ZTMHBHZDVadkI1MVd0NjlGdjBpSm1DdS9SaTdMK0dEWGhNT1lMMTFOY1BUUzk0QkZEeFpYUFFkQm5mSjk1M0g5b3RCS2l5VzhaUHZJM3k4SEJiZ1BLS3J2R1UxYjRtOXdzS1N0N0FuRnM5Yms5eEthOXJkWTlwSThDU3JmVHVtWjUxcXJHZGhndHZlWUVYTkFWL2c4OUI3ZUx6eVE2MmJNUjlSU0RMeXRuWDlid3JpUldLVGxUaE91cG9rZ0FrUFR6cXE2VFBlTzlKTHJDR3BySHNqc0Fqd21NRGc1Q05JWTFlcmF3dVVMbFc3LzRrTVVyVkF2MWF0cUhHaSt4d2NEWXBvc0xURzlSNFlBWUlhNjIvSllvdkJNZDVjT2tzQ214YmlmK3I0MEczZ05SR21LV1A0NEZTN04rWDc4RDVyNzgyV3M4ZFlLVXJ5b0g4RzR6UFhiNTFsNDFIeVc2bnVRQXNyeGcrMFlOZVBzUWFETkw5SHhSandoMWgzbUhSTU5kYmdXeTNWMkdwTWFLcEFKUGZEbTB0L00xYkEwWlVEYVhyWkdXdXFJWFJYcEVjcTJ6VlllaDhmNlZHMWl1YjJybXlwZlpoKzRwV3N2TzUxOHRrRDVrMFkxQUVtT1J5bDZKYmliNCtMYmluMythUG5mTkhMOUpFOHJZR3Z0bHlEaCtReCtJdHd2MzVmQld2b21zZi8wQlFHdzVNSmkrb2RkYkltM1dmZ2JISEo4YnR6alZOTTJhVGNheG1IWUp0ZytDR3hNazJSS3VhMnB6aC9DYXY5Z2VrTGo4RW1jUHQyeWZUNXVTbm9sVit1YlpNVFlDSE5BZjJkbVhtVHRJZDhRQzAyRGFlcEVwTW1NektKUzAxYjdEeE1ZZkt4bVYzMmpBN3FNekw3eGs1TUhKZ1JmM2V5RkhFSkZIa0ZsTW12NE5XYmcxZlhOczlGcFJQU3F6STFaV0lSYzF3SlNteGp6dmF6OW1iTndZbFV5YVI0NXpyVGNWQTJuQzlVR3VaaDNxZkozdS9UdkhvbVBpZm9PeGovKzNNdU43NkNzWFVEMnc0MlFST3pIamdub0pBVVVJVVhnMEs2b2dENUFmOWxQSDAraXRQbi9XaldkL2xCOTBWVGFVZno0RVpYcFFBUkRLNmJsdVZmYlZQZmxMczZEM0xhV0IrakJUQjVzeTUwKzdlcFBKVzE4Y3JLb2NsSjNmdHpJWnR5MVpLTHBVZU5GUUZhN0RBRGFtcW9OL0lyTCszMkRJZTBYazVlZnB0Mkl6L050TzZnUjdXQmdDS2xkWEd5SEZUKzM3ejl5N2QyczIvTjdlTjZkRW5OSmZDeXRvSEhiRXhzZTZGeEZPVjhDSWR2Ymd4NGlQMllHTlJZbUEvSG4zazJzNi9waUphR1hXaHgxczcwTm9YZkxLKzNzYUtjNDVUNTVrRzVVd2JMU2p1TDZuWTBWVmhOWkZySW5rYzhRR0xoTVZjM0piS3Y5MVBtdlRlOUhnYmxpQzkvenlTaUdqL0o1WVh6NDJkcmU2YktKNHVKYWxyRjZ4TUJTcXJGUEhsRGdkczN0My9JMnhvTWhYbCtjL3VVT0p1ZlJPenZFNkNtU044TTc5REZ0YkdHdU9iVWFhR2ljUkNmb3hwOGVEMEw5YktTZmkzbGdIUnMwVkpGWWw2cTBZWDNKM29XNWFLL0pQUXRrTGpPMUpBa3pZNDB4ZTJtK2ZyTUZwUno5Vmt5TUpacmU1eTNHYkNrczNoWjIrSnlUbzVQOHdqVVJLWDNCaXVIaUtZMTVWRENEcWdiYTVMYkx6aUdaOEVTNkVtb0s4K2YrWmRoM2o4V2FxcjltWC9SU0hFMkppT0I4N0F4T3RiRTlDQ0Z6amFnWk1ha1JNZUllVjZCOWpnQm1xb2NtSjY4a2poaFp3NUxtVFU1K3ByTUQyTzhmcFE4MXBVdXVTaXZYYnovRTZYYlBRK2NlVk9rekM4VWxwK2VWUjVsNFA3ZElNWitvYmo4UW5GcGgrTEN1M3dkSWttZUF5ZXdnc2t0aHpRTHQvU09EOVJKL3Uva1hEK0tDLzZDMlBqTE1NTTVZa0lZWi93SFFsSTlCZ0xnRjBUSEw0aU9CMEYwVEEzcUFEK081b01VR3pEZTI1Qm5FM05DMVExMlBaYndZMXh0RDhKRGZZUWJZN040MzdubVFqZk45ZFlQLzFQdmlZcDdkWkltNGZ4QVAwYmVYMUVERS9NQnd2STFkUG5ycnZoMVZ6emlydkFZMG1KN2NhbldLdDNKYk84ZEtNLzNodC9WbGRsM0xGWGFHUW9PbjZpZUwwYmE2WlM4cmF2VjBacHY3blRvV25ybytuYnlyTkdaY0wzQlBQT3N4dFV0VW5XUFh1cUlBMU80cWcyaHMvREV4NVZIUmdQMG03elVqeEZhdU9uSkIwdUJSNkJNN0tKcWh0V1BHRzE0Yk91Y1JDQ1ZablRzMVJoOXBaM1dHZTlNVC9hQUtrRERFK0dJUXB3VG4zNjB5bXZEamY2L2NIdHd3U0hLRm9Pb3NrMUIzU3RRb1huOHNqU1J1aFNOOGFUWFY4dklyMDlhY0RyMk5HNzFrM09xVkhSZ0NtQ1k2WnBPeW1DWWRvWEQxbkNxUjZKb0Y2dWxSb1kvL0U2dU9rWHF6UTZNcUZwQXFGSERFQ0NKSytiQ09FRGFsengrd0VQeitBVWlydko2cFlmNWRkcGZQMGJLV2lGVittQXBQU0lmVUZ4YmRZT0NXd3lTTmlDWDJwVDBjQnA1ZEp0RmhkVlp6ZVpkK1RRNjRrTG42eXR2bTRBZk9BOHhJYjFPNlM4OHg1QkdSNExOQmF0dkR3eHNuZEIwTitSVXkrTGIvOGszMmlOdnNvL1RVbEl6V0thbEpFN01sSmZCa1plc2ZYcStxK2EyZlNFeUlBdHVIMkllUzJuS0FlMVJ6dmhlZGs0d2UzMGVPV3BLRUM5eGNrSWNBWVR2bnJ4R2x3dHd6L0h2dWphc1pjRUpzVFBacE9wQnR4SVlQNXJTTC9PVlRNdkRlYVVkV2FhSEUxa3FRRlUwQUNSWGtOOUI0aXhoaytCTCtkNUVnRFNJUEF2KzN4ZXF4VW9lRXhnRFBwKzBFd0JXWm9BSG9OYVJUbTh1L1daUVhaaVlVM1A5VElFS0FxQmF0ZXM2bWlKTkl1Rzdod0NkcWVTdXkwR0ZwUkpTWVYydWNaWmZCOCtTMytPSFJVU2wreHhEaDR5b3hNbUo3bjV6WnkySHUvUXNVdkxwL29Rb0tUQVVlV2VwR0poNlozaDVLQ2FhMEJVU0doMlpTQk1UVDdmQzhaenRweTEwVkV1ZWVLN3liM20vSGdxWFVOOXUrZjV3UHl4WWRSZFZZSkx5ZldkV0dDcXlGT1VDbHUrR1NxaHBzK1I2ME82RUNHaFJhQ0szVG1VTE9lcW5YRzA2UjA5SHpXT1dTU1huaTVhUnRPSnoyZklSeVV0NWh6RS9FQVREais0MlhHSExBd0hvNUNxT0RheEMzOEtSUHVsc2p6VFlpYTE1Y3h1b0RLa3BlMXo5U0tBdVZjTTI3ZGZJOGIrTEF5cUNrUnZKeklDVm4vbUJzOUlWa1hpZDl0MVJVblcycEJIbTFxaThCcVUxcXJYMFJPOWdUZGpabVduRnJ3YjlaU2h1TEZVa2dDcEUxdEZLZ05QSHlXdnRaSzJmSmxQVnlVNDRFQ0tUbStybGw5RzA3L0wyaFNJS0NSMVNwR055NC96OUNnMVAyaHNVM0ZyRjV6akJ3ZHpuaXliUU8xQjhKM1A3TmRQUXBYTlVDS1JQWUx0aVBuckthRlZLOXlNcGJsQUlvR0hocVZqZ3dVb1REczhXcUtCNk94TjdxcTRzU3NFZW9LYUs2ZnBjTmFabW5uUnhyYTZ2dnIrTzVwbDZNZWppUEFhOG13VGQ1R0dmQ3ZQSXlTdm12ckhJUTRFZXI2NmVqOFk2NVM4VThBZ3E1K3RPdDNXQnh1djJFRkF5OFJEM2VDeWZ0dW5yWHBvK3E4YzBqN0dxUDdRcHBNSWVBck5UY090SFZiMzc5OU1kVUFFMC9MTWhCV2tJUWU3WnZsWC9iRUcyVHUrcVMyUEt5OStqamtob3FrU2UyMU5McFZjSmZPUkg3bGxVbGYzSDBCZXVBRTcxMEg1MDIvTkxlUXM0R3VrdmhJbDAwVXgvcWR2WGphNktoYkZhVkJFd0lBa25LY21SMTh1VlZ3YU4rTEVEdU5taFZoQ1ptbkNjWWxFMU1pOTNoTFNZVzBQQ1Q3SFd3N25naW8rTGdHb1Z2ZlRJNktSN0M5LytWV3B0ZkVSTkRZdVZRNU05WURXbnJzK21ITnNTVHMrRENzMjJjVENaYXo5OFgwTzRlUC9kWFB2ZlhkdlRnOTkxeTNJV3VyVjQzOXprV3BKNG9EQXJwSXEwY0VLL0dGVFgweFZMMU5UK2p6dzNMU01IQytmb21xU3RCeVpsM1YvTVdPdWdjOUlMUjJoZkJ1UTYyWjhIRnNhTlZNVXJjbXZCMElHYUlrR3pndUxJWDJPS3FLUGY0SDE5T041TXdYdlQ2ejB2WkJGYXVSSFdoK0FWRk9oSWtTTkl4NnlHVWZ6OE5NVDhITzIvcWVJOUpaZVdLaElHUllRbUord1czQ3JVV2RrQnJIekVBdGFEd2tmaWZXdHJlS3lsbHdkVGRHZ0dMUWpaWXNYOUw1YjdrRHpZeTVadVgxcWFnNjVUVzFUa1ZoaTgralpyeGh3OCttQVJXcWYvdUR4eUw2S24ySks5TndiOWRkMUJRdlQ2T3EzUXpQRk84V1ZydFRvc2l2VHJzUHl3d3lLdkhuOVlhdHY4RVllRkJOeFBPQ3lLOUFHSHBYUlF5Z3B4c1VobkxtSHpCL29IV3NaekZJampaeW5ITGNUTFpjeFE2SWNlQmk4UlAxdkU0L2ozS1BURnRmdFFOQkl2WTdSUmtxZ1ptbFEzTURrYVdnT3lVcktMOTgvSFVCanNZV2VSNGxaWDZUMVFhOHFCVGZuWHF4WGNGRFZGV28yVVZQeTdlYzRZc1BLUkNwNS9OWDNXaTdQUnZrYS9UY2tUVUNlWjZIMjZXZFRlUFY0TktERjd2eTVtVGxyUFdlYW9LVVF5cjVOSjdVUEEycUVaUGYvUS9ic1kwektwblVPVW9EN3RyM1JLN280Ry9WVlVHbWR1dnkySnkzemhtSThoak5xb3UwZ1NmbU95ZS91VmszYnpqblJFZThJUHBBajhjYnF5aFVFcFZ2SGF5OGZTRjk3YTM1eXB3U29memhBb2xzejRnVERVRkRrMHFPNE1xQk8zUVpKelRJNCtGUjNka2dNVWNtZEFFVnEvOVBSSDZPa1g2MTA5TkRlNlZSQnNYYkRyN1RVZUwwdVk2Mm9PYjRlR1doVE1mY29GTXlWMU5iRkRaMWJTSGxyU1c5YmU2b3dBNVJiclc5Nm1UZEJIb0lJQUM0TXJKekJSbno0YzZ3b1pKRFZOOGg2V3huZXZDR0JPSEhQektPQWVnclF1SEUyYXJJUnJKbG1jZ1A3dkw5cmJhS3JmVHR2dEl6K2dRMTNwVHRHRmlpN0ZxS2JxK0ZMQVp0MDNWOVZaYlhOUlgxblQ5TFdJTEI4aGR2QUQ2UjJvcTAzRzRQdWZ2MDJiOThka2U2dEpVekI1U3NQSkJaTmNLTmxsVlJlNGZ5N1k4SytONGwramZRL3VVVHo2YmZqMmMrMzdWZVRYRmxvNXZRUERsaFVDMnJWeHBvckFRMnF4cmd4ZmpDMHlabUhQQU5zOXBRSElyWlVtYVdzU3FZRDBhUFJTako0MFVRNEJEa2dxbnMzaWI4bGR4TkViZnVDMEdEZEdZS0lORmpvbUpaOWVwLzNWZGRVdzJnVHk0ajYybFFvTWJQYTgvVHJuMjdxMmFvZTBOY20yZFVkejcwN1A3MVZEVllYOEh0WFd4RDB6NTRZYXVnL2Vsdytza3RGWUJhT0daNTg5RTJ6dmVPSGVtdFVoOTU0SlRPdWFsRWlVNjBIWG92dmFWL0kvcGdVNitqVzhrTGtPRmJpUjdsdklTbVlIbnJTT1ZNTzcwL1dxMWd6UDd2M1RRaFdYRnJ0dmYvYzM5VmVzNjRydisrUmRSUCttS3UrU3dPLzYrcTZ4a1NnZFJ6VVpyczFkZDFsK2FFTVQ0bHBUQlRqbmhCMU9OaVhxQWplanUwdG5tU09RNmFOQmlUQTVZd1dqVi9NWk9QZnRZMnBpbis4L1h3Mm15ait1a0dIaTZpMk5kYU1UWFEvUmNXMGQ3SVpxTDBndUF2bDM0aVJjL04yMDEwSi9qR3RueHpyb3BmclpiZHFTa2lvd3RSVStIbDc5cFZWMWx4Wnl5RVpYQU5RNmNHblVuVUgyRUFCUFhpNFVjUVBhNjFQRk5pOVViamhYUTFkVEJiK2xBWEd2cVlKanFIWHllMjIxaURwMCtGdVN6dkpucGU3ZWFqc2VhUGhhYlMzenhOYVNWYnI1dWRWWDJvMHhyc1l6cWFuSkhRTURTRkVDK2V2WmV0eWU3RFhWOWM3bVF6c1dhMy9PNjhrRis5RDFkWmtUb0FNUjhTK0RQZXkwWTBORm9vU2ZEZzlEbGFTbjB2endiVEtmTk8vUGJHMlBPdkxKZEhzYmd4SWRZNERPTFk5a1V0ZFFFQjg1YkF4cXZEV3BMdyt0Q1BPNENqYy90cEtOMlpFYzA1ZElrMEYzb1ZCM0QwVzFwRGw1ais5a2I5NDZRYTdhOW9mWCs5N29Lb0FHNGx0azQzd3E3N1RYb3c2QjVjbGJkRGZGYS9IeFZYTjhqRzRiWEpqVEVTak1TbGU2U0phWm1GN1B2ZUl1cVg0N3ZaZnU2SjNwUzVWazdIdnNYbm1aYTg3MmpuVVZsS3J5Ris2alZ1NHRWZVNiR0IyQnFOaks2ci9ibTE2UE1DaHhaN3lzYlhrb1R1cnVnb3hXSjgyeUc5czdXUXhhcTBrdWNiRjJYb25lbnhzbmpmZG5NZWl2THVqOStCdWtHNkU5U2Rka1FLK0FBaHhMT1JBNXViKys3OHM4NW1iK1l5Z3lZWHB3V1FDL2FhamVsdmVKTk0rWmhCWW5CQnFHL3VvZDQ1cnoxOUpBbS9IdTBmdjFZOFdvM2p1TDdTME5hditaWjZTWGVmK2hmTzR5Z05DRk5Td0RiaFJwRGMvWndUd0JZdnE4R2FycFE5ZW9MUy9CWVgwdCtFWDV2RVpuQnV0bmMwNkF3SVBQaVM0ajVCT3NVenFUSjZZbmU3cUs3ZGxoWHVmQjM3QWhqUFNuSk55dlBVOUs3UG0zckdQcExMYmpGdzJKcUxteFJ1ajBhTzZ4THlxZDMrTjVTRnZuT3dtNGZ1MTRpL2FSeWpwZ09zVndlREs2UzBHd0dDUzY3MlY2R09Xcm1xcUZleWUwRkdsZnQyZVYrNnpWR3RKSG95UHROS3EzZVhOcFdXSnFhU2lWS1lRTHR2SG9IcjNFTStMS0FreWVENXk5VnkvS08zVy81U3F3N014enZ1VTQwRWJPTW4yMitVb0dFYVRoUlRsZE1hZ0RhU2l5aURPSnVQRUhWVm1KWlBtWjBsdmhoUFZ6OTBvSDZhY1lyaERwZzhkOG1hM1hHbnBJS2pyTUlxaTdlbG1yeFhyRzZ5RWFsSVNCZ2M3dytKMko1SFpXM2dBRjM3SGRBdWpEaGZ2R1NOYWdjdCswOFlWRTlwK1JKNjVOcjdlekdtVWtFc01MemxPZ21PVDlYcGpNVDZYSUhPeHJEUStLcXhuWG5ZTVlWakRXMi91N2RFNWtESFhZWHova0xMUmJFNUUwTzlMT2tMTnE5MWtRSXVtWVorU2UwWlNPb1JsanZYN1FneFk3M3NYMmwxMHVpNjd1ZkNkOE5MWUxrWmsvZlVwUzBibXEvUTdyR1RPcXUxa2crWU1UU0RENWk4cEVSM0lKVklGb1F3T1dLaDVIMUdHblVjeG1SR0ZndndCNGNLbGhuL1dYbjdFT2NNRkpSMDBHTzRPVFF6Q1A2TjJzdGErVUEyMnZidk1PUGJITlhYQkdaMzE4ZGRoaW16ZlpWTnVjMitoT21PUjlDTGY2L3V2YnVqWUdJQjN6NjNtL1lVUURjN2pWVmVrbFg4Mys4amZrRG5DNHBzS1p1ZlQyYUsyQmNvQll4L0pYQlFqK1lnWC9ibUFOY3pxS1h5MkQxOEpXSnhnZUpCNjVEOVBxdU03R3VkeExRNWxjVVR2dVJHWnVmL2MzM0VOQ1FSK3M4NjlHK2xaQnBxM3hEWmZBOFZabmcyYlA5dGZJRjNOK2hmSWE4ZllyS3dWYVoyTHpYaEs4SGRuYnNjOEorM3A0Ty9WYkRZUVdmZ2ZwMGpzMjcrZDQwWkczUjRXL1Y1ZmlvTTc1cGlzOHRRWGZQQ2ZEMWZaOU1ZYXFJcmMyN0UyTHRjSzYzT1c5LzhLekVnUWVReHJjNUp5T2M3Ry9KbnRWemhkWjVsOXVBaHpHRDRRMHhqWUtIdSs3c1M4VzBWVk1UMzMzNHBsdys2dUw3d3lFL04za1JqN2I5Ty9nbnZpMGgvanNJN3RCV242M0psNHAvZTJTZmExVXhlNjhMNzZOZmJGVWNidzR0bExWOFBaZ2g5VXE1MDNuK01aeFcyeHZBeExRNmxLTVorbTMxdjZZU3BzUEhyT21BQS9melZ6eHZzNDl2NWhsVjVIcFBSQVl1RUpsblBqdzJCaEJ3dWpRTzRQdCtRdFozSnVlN0FCOGY0dm9YZ3lRWGwza3U5TE9aSHNiZzdLNjgwNGt4eU8raE1ISkZRd1VkKzM4THZaL2ZXd2hqaitxTC9Yd1VKUVV2QjdROU1nVUpFN3FDSTVHeVJPZ0NrRWNZNFpCVFMrZGVZdVZqNFlDdDNIU0hHZDZ6QkxJTkRROUdNVnpGZUszQzdTNFJtZnZYaDM1a3B3bGwyd3Q5d0g3dDlTeHpzcktIMkZYb21QZFhUN1Z4ZkMxMHczdWxmTmhTWGE0YkQ4Q0NybTNPRGpVVlF6YytnZ1pLVTV1SStlWlhTTk5HaFUxbGE2TjE4clpsOXZiUmRnY0xiNVU0elRhK2J0dXR3UHBLdnBtWEJzVG8xTnk5OUs1dldTTG5aN3pXY1EydW9UbldDeTVOL3IzeDJSZUxrTkVOOUxZZWZ0UEF1bzVxYTVYVWdsMytGRlZxSyt4Qzk1Um1LSVZiVVNvWEVCRmQ3bTBRZjJiL3FRK3hvaEw0b1pRMzdYdmhEd2JRbXdIWXcrbmtSZkN4YVErRmltaEYwU1h0OG0yVjlrR0V2OUFYVzdJOWZZeTlYbzdRQjNDdytVeVgva2t6MFVBMTBkdjRkK2I1UWxVZW1OMElLNUp6THYxdUgyYVN1L05JalpmNGJ0ZmNBV1B3UEw3Z2FuL2JqdUwrMk1oRkc0cFpSSmtHVXhjcHVVbEVreGNFbU5jekNwdVNXOSsxdDZzR1RPR0ttcVVOMllacDV5Smh1YTVLQ2hWSm95T3VOU1VBNFpuYlZNWVQ2ZmtsVGF0ZWtGd05EZ0xsNXA2TVp2eWlNNnlyb2pPSkNxY2w5QmFoY3Vhbmt6cEtwWitlUjFKVVIyaE8yTmhxS3ZWQ0pJejd4YmF2NEJyc3dkSXdwS3h4a1FBeFVvbERqUExZRzJ2SWRkbHY5YWU1WnFNYlFWdTUwaUQ0MkJyemFmdW02UzluSmFXWk1PWHN1VmJSbmhleUJndFpXdVh6OGh0c0FjNEs3RjhucXMzYVJydEVFdTVRaHk1M0pTMWN2bW1UQ1dBVGVYTTM0OFBWYkdzM1g3WDlPOUNGbWlERi9WV24wVjFpMGEwTnlocFhNR3J1czZEV0d6alNta295K1p2S2NYbHNsRXIyWXhKeG1sN3oyQXg2L1hCVnJQSTRzbHNkSVU1bGIyWnBkK3V0UzZWTW1BL3hJS0crNGdzNE5VTTJ5STJiN3Z4eG0xZE5VNStRS005YXB2WmszLzN3bDVGM3FBNUoyOE1KdGJ5U21lZ05wUDFERzAxWkw0K2VsLzJwZ2Qzc2Nkam82bmlhVmJkby9wM0xsa2NHak5nYTNqMjJUTkJuNDFNUXZkV3ZUZWtPYXN2eXFnc1pmUnpOVjZrbC9XMS9LK0ZCK2txWGxqZjNrZDRpeHV5ZC9rQm5hNVhJWHFzZE84bm1hVHQ3LzZtL3FwUjNFS1NLVHRvempqTlp6UzFRN080ZE5kZGxoOWEwRVM3REZLY0plMDRwaWRQVEsrM0JNa1pLeUR4bkRrRFo3NjluTG5mRUNGUnpSWnVsWFZSNVIvWHlEQ3hWNzBwTXpORk90SWlEem5iTyttcXREUDlWWndoMnBDOXlzb2JFNjkzK282UGRJbm91MWJ3WnBubjMwM2JqR2hoRnVBMkxaYnhrd2p1Vm0zTnBRQlE4c2thRkF1K3Q0bnVLdHdOY2NicFJZOXA1SFhlbXZpT3FxSXZ0UGFVc3RBRGl0alZxRU45MWxTV2NkcGFueXEyZVNINzYxd1VPRHByblhhd2ZoR0VIRmtudjlkbW5OV2lHTnhnajJuaDZXODFIcUIwcVpxTXpDeFRnYUcvU1V6dmJUSW5tVHJyYk1RYlpSYVgybTNJN0l3elVOTWFFR2N6UkJOTGZZYTlHOW1NSnUzR09DZHBla0w4M0l6YW1DOWZuOVVaMjFkbVdlYm9wZXlDc2NUMEp2T1ZQSjRSekxCNWYrYWYrVUdQTkR2OHptQjdTMDNaNHd6VkVaSkpQUkx4a1ExNlB2TEYzV09qaGd2WnBmZEhoTTdscmVXUGYwQVdwRWhvcWtCWUtwMWtLRmJQY1NuYnREMk9jYVh0RDgrNk5WaElnV0xHWldVK2xYZXVRUWVvWk1GK2VPWnRYUlpwZFk4ODJRRXN6R2ZRdHM4bXJuNTdMOTNocko5S3VXTHVUcmpQWXVaY2kyeWs4OWxkalpsQ3FhM3NyNTBWaHZkSHRkdG1JMFY3Y3N3Z1V2TVJveGN5Y3o4dzJ5TExLcjJRcWRzV0FRWkhZK2lLV01ncXU1WUdXbWZCRGxwbGxNMG5aUCtoZk81NmIzeDVEUk1QOXVZaDJidE40L25nTldyTFN3aXQ4eGZMWG1URmo4cGVySzdqM3poN01mbk45Smd0b09ieE91d3pIdjJ5N2xWcVg3VEljaSt2UTMybU1kWjlMOVBERkNNdHhYUktGdTZka1NxdnpQNDFtZUJuMTdDSWtEQ1hmaEpDd3ZsNzliSzhVL1BiZjNMazRZT3pkR0s3WFRGanJGN1dhckdlSDVkSlc3aHYySFFOWHB2cDlTSmkyRkpIenpxTk1sSTUreko1LzRxTTBoaWRyVlVXYkRJbjhYdVV2VGg1ZmNoWitNQm95cFFYbHJJdGdTb3RSMVJzZitsa1o2czJVek9KSEkzc1FtSE9ueDRtMmRPMWNqT093dTV0RFJ5dGprdkkvMVZsb2xDajVLUFZiMEVEUlVRc0hOMm9LeURRS0lZQTZuajNNOWFoS1JPLzdzeVVFWm12YnZNT1BiSEZYWEJPWjAzTC90YWlOdVhLS1YraEIrZmF2TTJtMmpxTGVGN0tacnpOMzFYZjFrMFJrYTBSRFdxeU8zOHdDZ0pielpTOUNoMzNYRmJwWGZ0UWs4RjdMczdsYmhySzVJcTZjU2N5ODgzWnJyOHlEUDlHR1lZdDdhTm5aTGg2dFA1TC9zZUszTnF3TnkzV0t0TGxMdTk5QVdGdDBnN1pyalpydXNsZWxma2lLL3pMN2E4QkM1ZldvTyttcFkyaXJHZWJ6eUh6SnVqQi9NVXp3YmZKQW5jTGQxT0VPSnorL1RxOUp6N3RJVDU3YkRlWWVUSmhVYjJqWGxNUklQM3RkTW0rMXBUeGVtc0diU2tUdFZnOXBweHQydDcvV3NsK2ZUUWF2clJELzYrTjhlU0t2MTFSaExYVTVxTXJLekFlOFBBZDJDM0ZicWZQeTJXNExxMXpMc00xNEFlVGo4Z0czaHZVWVFjNmNHWnlHQkVVOFljVHVoZjFDcm9MZlRHcjlOcjVYZTcvK3RoQ25GRlZydW1mejZEaU12MnVLVDYvTnN0MVdvNjdvQW1nQ3FHdWRLTVk1NVYxMUJRUnpsbjVxQ3RSakpsQmRWZm1wVFB2dDh0MnZRRlpwWjJPZkRVNnp6MDY2QlVaVWovWXJwVG83cFdLU2o4UTdhd2tPMXkySDdGeWFISlNWMkxoRVoyOVI4aEk3WkR3bXJNZDI5dEY2Qnd0OXF0eEdpMHJIdHhzQjJJaEFSVHlWQjhURTJVUDNwY2hlOVpuRVdjd0pqeEhDazEyL3dBRW44dW9nbzAwZHNIK1k4WXh4ZFgxU2pKWXBiZjJPV2RONDZ5dk12Z0F0RFpzbTVvcHpCYkpxRG1rK05XVnRKSFBZaVlNYnJ6Vk92V0lidnlBM3NkeFE0Mm9iNldNVi9UdkN4bXZwVXpXSzJUYmEyd0RpWCtnTGpma0Judlo5WGFBMnZMTDZYd3VaNms2Z2Q2WW5zcHN3YUMvQnVyd3pETGdvcUkydjVLZ3lSNTJDNFZFb29mN2Vsc0szZHJ3ZXVmQ3k5K0JJamtGYzA5OTBWTXNXZ0ZWMkdxcTBPVUhnbU9wMHM2a1JNZGc0UlljZTlUWTVXM2VZMGlMN1owMGl0bm9TdGNmZGJTajVzbUVOdU5kZm1Cdkp4U3oxeFFoTUZoSTZHZ2VLMll5bFFFMGZYeGtUcU9WNDVqSHZsdWF6ODVhOG03azVraFRjWG1qSXdRTEQ2dVptem5iVzAyeWI2QnBWNHF3dGtxRExhL2piVVUvbjl1bjEvMHE5UituMTE0Qk1uQ3gwbkhTWGx6SVkzWnpKZWxDd1ZWRTAwQ1dITk96b0pVUDNXU1p2WjdTOFBObm5DN0xqWGZXY2hqL25oWUp6cC9uMTRxWThaQjVrNEVCQmRSUG9GSE14VlROTXIzSHFadEpDbTFhckZSVG5XbVNMbnRScFNqekFJOTBGa3cycGl5MU5BYWRQOTErUGkyV09RSktKbWFLSEJvZG9Tc2o5WnFGbjJNMUc2a3hTM1FHODJINmlFWVhLbzFFaFdscURreFM4bExUenZ4ekRsQXJFWU9ob2ZTT2k1d0twcW1DWHdiUHNEaTRSelJYSE10em9SQ281Y2xITktiU083RzQrZHpJTDlxWkJVdnI3OGMwT3hRbnNpd1R1bklJRnJHNmg5UkZqWkp4T2tBbVZoUHBIT2JaZXJ5V1FVaHpadjhrakdkcGN2TWNvRmUwTjhVMEhLbHJzdlBQUEZNY1J6SDlGRURUWTN4UUdtdEN5L1VwOCt1MmZLdDRiNUU1ZGJ5d3hvMkZVbzhQN2YvWWRZSGlPSllITS9NWUswQ2RaU2hkeVZMKzJ4YmR2aHRndy9YdDk4Vm1ZMEo5cy9sZGg2NitXV3lhWkpseklRT3h5QjJuMG1YbkxHL3lqdVNNbHU2U2hCK0tVUkZKTXFQRGtWZE1NeDFOaVhEZ2xYbHlBcjRYWXI2aG41d0l3cUJReEwzVXgvN1JoZHduSDE3SVhmZ1o5M1dKWDEwSWN6dEhHemRCYnp5b3Iyc0xzQmZvTXduTnVvMSs4M2Vjb0JTSzFoUjR5cG1Rc29UdWlDamxOY2UzazlRaFJGTVpHREJIT3laT3U1TndHbDFadGJxSnYvakZ0YnFLMTN3c2p5bnJNdHZFeFJISko1dm5XRGJPUS8wSXhmYkhyN2xVb2MrL1pQY21YbkRUZmhVS1FyY3MrSHV1dlp5TDhnUDVVUHNDNCszR211MS8rcjRXMFY0ZExRVG1rVXkvSFNuUnVYOXoreTRHMzUveTk4RTNuT0VuV2hQc1NtdGc4Yk4zZVN1NHBFYlp1QTVDcVhoTzdxSFR3anprUXRwRzI4SzJmd0UrM1VZT1hDMnNIMjNEcWtBNkRaeXQwWmxjb1dlMnNXRmQ3TC93RFY2dlJENWtJdHNTR1BaYzNaT1hWdi9SOHVIemg4dUgxOER4dE5VNWF1MWFoWEQvcy9NdmphUGVCRzlVNEFVdW1manpCYlp6OXBFMnZDK2lnOGplbzBqZk5DK0FXbWR5b3kzd2d0M1ZMOUhVNEc2NXROWk8xUlllTWJJRkYzUW5tL2RDQ05oaFFXZlNsTU5lWjRjSFB1ZVNCcXk4TjloZTExQktMdSs3N1ZwQlBqejhJcHhjN1RrZUNNbDZyNXZHLzFDYTlTdVFpSHMwUHRUV1ZPa1NRQlVvVGRsZnVvdmlNZFBvYjBUamd1R2pld0E0UmlwN2lUdURPcXlNanJWTlhQOHQrZHpTb0hvYndQWTZCb3hCcVFlMU5zUVhITUp3TVRVdm9wRTI5c01ZYnEvZDNPdHNoMzRyR1RmK0hqZ0dlM0ExUlV6RG1ZREhiQXhXY0RScWsvQnBUMVBneGxJRktMTU80aU5ydEtiSk9nS1BDUXhPUGdKWldpTTYwTm5lQnBUQ0tjYzV2bGtEUVpoQ0RVYm51VlVZNXFYNTUybUxNRDNvQXlvcTNOK08zMGY3WlhGQ0FDZ3JEYit0OFdOa0tlUHBXU3owN1FBT09JWW5RcERBRDNIb2ZFczcwNVBuQnRFNzZvb1ZHQjZ6U2VsaUhvVzF0S1JUdEIrRTBVRjcwL3VHNXFrclhjZGdTdlNaazNQT3V4aWplV3Vldk5aVUVPQWlCK2tkNit4TUQzNk9RaUFQRTRPUzZNeFdKeDhUNkxXYzNUT3ozVVU4OXJMOEY4MHBaL09Mb0dmUHJmdmJvTHJ1WlJxNDJrWHBMOEw5K24wVnJLRnJIcTlYdmxNRk9zRnpLZnY0eTFpNlJoS0RTR0dqNS9zYkYyRUtXc3ZoSzM3MnNyYlRPRVV5eG51Wi9CS3cvbDRDVmg2M2xzWlZEdjYrMkxVeERjcFMxMlN6NmdHamFXWVlpdnNJK2FFY3JmbCtqZk1qWWdIbmMvcDdwWEw0ZFhtMVorTHpKM1dWaUVmVFM5VzhJNHlJYzVYQmI0L2hhSU1wUUZ6RWNURHZ4Z1A0c1dqN2o1bFBRMXlTWDhYY09MYy9yZk8xV1hGL0wrMVVjcEhQeFFTMXJtd3RyOHlMYXl3UHo2MXhOV2UvU2c5QWljNXg3bXovOHlaalNiQzJMSGZ6dmcxQ2QrMGJXOHRlbE9IcCtTTTlrWWE4cmF0akc4ZmpjQ0pwUm13QmtaT0g1QkNKWmFDaDlMWnpTaWJNNC9NcmY2VFhGaWZ0emRONk42TFE5ZUtRR2o3K3hLNW9EK3dWMlJzRlQyWUhrZGVYdy9qRlBveVhrOWY3NFBFejJVcmdjckxvZVRaVkM2OWRzaUg5bUhpbVZHYnVyM0t5dWYxdGVsOWNSSHdFTVZRZllva2FYcnZXNDdKZjJlN091bWtOVmxuL0F5bW5XL1I3TGZTcFFueEluVDZSN1pGRjhBTzdzR1pZTHZVbkFmOHlyQlh6NGtKTVI4Tmpqb3RwM3pVVDhiQ2pIWGkzK0hjVUZ6WjArWUZ6QWdwSkFWVjRNU2h5cjZrQzVBZjhQNzdOaHR2eGNyZ2RENGc5dXVhcnNXTVlvanJWOFVjd3RWa0VSYnNkdlFOREtUQTdBbWx5Mks0OHNCVEpCK3JrbDAvbmJ4YVAxVElNdVJhaXZRd0ozemFjdEdMM2F4UGI1NHQ3b0VRaW9KbExjVW9nN3pWVld1ckRVcm1RbHZTV3RTZU1tMVViclFpSGZ5T2tlMXQramZqalJBV09yaHd3ajBwczk2K3M0NWdFdW9vYnY3VjViT09RdDFyK2UzY1Y1RXNRNU50dVUzNmdNSmFpVHlUbDEyZkV5dXA0MHJFd3o3TFNkU3lQQ2RDNVQyRkR6MEJpYWFvakd4NURhUXJjWU40L3JiZmgzdTJ6Q2Q3WDNpSjBGdHZOK3hZMmgrMWMzTW80TEs4ZHlrb2U4ZXRvVUNTMFdBZGFxamkxbEFQTVgzY2pGYkhrY2xnT3VUTThpRWc1Q3JlbGVrZWc5S0l4VFF2dStJbnA5VkJmYTZES3A3a3ZiMERWT3ZEUXFqTXRyQ0FYNXA3WGtKdlpZQ3Z0QnZXcHlJVE95cVJKQ3FUQnpvc1ZidkxYZUs3Vy80TzArcjlCMlBKMW1tbmRlbXFLdE5Laks4TXhocGV0TlMzT3o3NUNzOU91QTFncHdGZUp4MnhTSzhaVlZZR0N1K2RxK25ua0F0bzN2UjVweHRhWUVpcGJydDVmOHpWZHpKYWhqeGpSSUhLRlBXTE5qakZDUW8zNGNtY0lVckFKR28yZnRWTHBsL0gwK1NoT24vZWpXZC9sQjkwWFRhVWR6WU1iUkRxSVJVd1I2V1lzYnB0S3grN3F2QWJrUndhekpBRzl6ckQ2R2lmY25VMU9aT0hKd3BHdDlNa2NyT3JaYm1MY1FpeFdFYURGRGc4RmFibG1ITlZpWiswbHhJYWlYbVhQNld0YTJBQWI1L3JiRE1SNnRZMDlkbldzd1RIWXc4Nmk1TldjRTNiQWd4c3dqOWpZbTl0M1gxMytsK0c0VGlybGhNQkNhNlZZRUx5c3NWZk14RkhlTWRqcEVBN2ZYTnJUbE1NSlI4ZEhRSFRDZkRqK3pMTm9yQ0pPcUN5VnRyNGtEZFdBRldUczdEeFlXZ21jNEVZZ3hReDhMemJJdGk1bVV5N2YvV0ZHM0dYcGV0dFdnQ2tIM1Ryalc0Zzl0OHN6UUxvczZTd2FnSFlib3RramNhSUZBRVhUZWw5bCtEc0RsSWlOZXdVZ3JiRjlHWEQzQjY2VGQwV0J0MHRHOGlOOTN0RGRUdzJXb2E0OFh3bktXelRNSW8zbXNrYVZYYzk1V20xWWk4Y1oxeXZyY05aQS9wb0I3TUh0NDBCemtiWnVYMXJqcHNUZk51dDFJNUR1MkxaWWNUL3k2NEJMQzJ0UU5kTG42VHR2S0crZzVSc0JZSmM4SjYvTU5yeXFhcXpQclhsK2J2UlpjYSt1M1Bkb1drajBUOWNIUjc3NGxtTjZFajBmcnJMbldlbnQ5Rm1TZko1ejZCME5Lb0JhUjRJQW5VVVduS1NPc0xOU0lJRklCSDV6YWRGU1JXTHV5OXRKQXA0UTg4SzgxU2M5eHkvRGZKWll0QVl2R2luT3htUmNpRElHTDRSVGcrb1JFcnEvVmJGcmRpUm96QXAzK05GU3VyUkp5aWVnOG1mR0pMNFpWQmUzaGR1UG5uRllIY2lpT1VoczVSaVNwTm1ScHJqZGZSTHBndWdpWDFvOTI5ZHgzbmtUMDV1NG5KUGpFeDdmeVZMcFBRYkN3dGw1Qnk2dmduelUrdUZpRngxcllucVEwcFVEQkpUTVJORWQrUXl6OHdXOGtzSTBsOXE2SGxDVlBnS1ZJWFZWZ0dBb0hZME9YZFl0TW9meWtCblBNTjNoZ2hvZG9FaG4zdTB5TXRNYlRPZmRvVXFLekJ3Q0lTcGMwdWFlaWtDMVJwNjROcjNlenJxQ3o2Y0ZmQ2g1aWEyTXVJQUZDSXhDOFV2Q25wTndwaExNY0RhSGI3VThNdHJmbVNLTDN5ZUVNNTBSdlhrOUx4WGhqSVZiUzdYTE5CVFJMTUZzRjIwaWhDcUZ2dWhVdjVDVjdrbFRBSnpIeGNQeW1hc3BqMHlMZjdXV0Jlc0t2SVV4NzR0LzI3ZmlmM2RiRU4vWGNORWlHTWowQkVjN2RoRlBkQ3gyM3FCakNxNm1qTEVYUzJkN1IxME5JZ3U2V3gvOE0vZDZkU2E5WDNyYjlRRS9INXNSSDVtT0VsT1JZN0t3eEx1amM4MjdmQ1ZqdU1TemMrM0xjVEFOVFFGVmNFdnZZVTlkZExjd2UzMXVIWTJPdkMrKzAzZDV1NXpCWGI2WFluQWNpblJNYnB4dmYyOVEwaWsvOXVTK1QrNjU2SHQ1Q3poNmg0SEI0dWM0aTlzdnpodFFNcEgvMjJEaEtRZG1nK2pHc1ZoeC9ZRDFTNEhHZnNSNEdnTDRMbzB4TlRHbjRGRWNnS1lubFBiR2dvVXhzWWZBN0V6eTdYU3d4d3kvTTdabkZCbFlneXdRaStkRVFsTWwwanpTZXd5S0ZzdjFKaTRxUWR1aktVbWFySVRCb015TzVGaWNmTklHZEdBZTZaV3VpckhlOFZ5NEV3MXZicit5K0d3K1h3WUR3NFhjYkQ0cDNEMGxUeGJMRUpZNmRsK25mVGVXeTl3Y0FzRkhydk11bWVPWk01V3NSeTNLd0VlT0w4cG8rekUwcTFHOW5lbEpLYmhkbXVtNXY4UXJEaEFYRjY2K0Z4WEVMTTd0ZW5kVEJJaUpkRVZCS2hWVWJMTWVTVUgzSHpYL3VqRnBIUUcyR1VNTFBnWXREd09hbitFUDRoRW9ESkVyemhkR29GU1hhUUN3OEtSUlBYUUd1dTNubitQMTFDRzRjRDl0ZEZVczdnL0ZFQnBsVis2d1dsbXFXQkE0S2VCY1l3OGhiRTJsZzBqUHBFOXZTWDlNV0hIVE5MV1pmZCtQNzNQU1NtVGxBbWg3UEc3bGFPRzdNUVVDVmlPL2dhN0lKNEVraXZ0VkRCSTBoSTU4QWxQTHlzc3psNkxqZ2VvRUpqb1hualV4ODdhT0hPMUV4V0xSR0drRHUwL1IyWkZMd0YxY29aQnNOcmZNTDJBcm5WdjhGcVJWYjFlL014b2Z5ZDJHNjF1dWIvOU04WHVPV0JkYWZ2TlhZTlFEQXFNYTNGNTVzYnBWT3dWUGY1cGdodVlucDdWT2MwZTd6ZDZqY1NTUkZWT0RPc0Q3Vll6Z1pDbkN2NEVpSnZWd3doVDRpcWxpMnNaN2Y0Mm51UWxYTjdlMi9ZZXBPVmNmNGMzQ2ZLK0UvZGFkWHNBNkUwMFZIR01hcGY2VVF5Z0xwekl4UEZhY3I2WFFzVGJaRTZsQ3lwK2wrRnREeGRveStaUXJsSlRkeS9CNWRkSGxqNDM1ZWRqcDlETE9DVmhuSCsxM2R3OFVvdUpJeU9qaFJxUE5adkcrYzgzRjc2NGZMdDU5SGQ0WTkyVlM4dEh5WUFrK3BkbG9sWnpHa1FlM2NjanZwaER2MVd4Z2k3bkJITzF4QkNtcDdDdGhsdlczV2c2dUtlVXE4OHB0VlE3MXZOY1JtVnViQUtmZ2VsM0hHRFRBaEVTM1J1YlVTQ3JjY3ZTR0g5ajVLditFUVlxRWlXZ3FRUnJuR05Mb1NNM094ci9ndVc4Uko1ZWpsZHZqcW5KN2tOM29iV0UySDVndE4xSXllditZekxrWUl1Kzh3N0grL1BuNDIxS1ZqaFp0Sk4rMWkzdHNPUHZpeGxKRmRKNkZlWmFlbmoyN2xQM1V4QmVvQTJsMkpHaXU0T1JzdXNMMXZPbzUrZmRVcHRQN0NLaE8zUGRCbUhOWFZMQ3E1eEZ3d2NYL0hzTEpGVEZzNXl0dzFmZTFNU2htTmZHWWphWmd4T25jUGh4Mm1pSU5OT1dBVTdYUldsNXlrRi9YeDRmTllSWXI2RlBzSk05aUZpKzlkKysrWFI1SERlK3BjOEJjY0RiVjByekI5aHd3RkJ5RFpiWWFKUjlqQ0xLbXVVY3dTcWZienRlNXZwcm1vN1BNYVVySjNXdlBIRDhRc0RNTlYraWJsMmtTVjR1WlJJRTdmTUg1ZHZIOUcrZU9uYmlVNkZpc1BDNnQ2UnV1VHBNTE9uclUzdWI0eTl5TXFyWXNreURMR2g1VWVlZkdjNXZ4SVVZNlJwVmR4TVF3OU5ENW1aUWNCZWlzcWhWcDZuNjdjVDRuRUJ2NUoxbVZtb2ZPUTJkbHgrQ2s5WVJ5b0VhRkdUMmtQTldCbW5JZzlLRzRCb3I0UHNOVmlmTFZoSys5anhyYk96c3ZrNUpEeThQd0ZLSEpNa2NrMTN4YkVvZlJraitNbHYxd1BPRHQwVXAwVEpaeGRlVVFXQ3hFYXpDeUZBRm13Y25kSEZRT2VkKzZxVFNyS1dSZ1pJYkg1Q3dINWhBNGhnSTNDemtPUUo3ZGRtNmIrbmpZM2lmdDQ3Vks5aHZ1Slk4SjBSbys0SDVKMTBLdlZpZ2dXaGdWN1FLcVFGemx6YVJrSXFNYktVN1J4ZFZqenNPMTVkWUJRejlQKzI2Ty90elg2UTNmbCs2VmZFclhkVEpickZQT0hjTGkrc1VndDFpdTF6bUp5Q3A5RnpMVXI5MlhKSEFVcDE2amZRR3M3R21xdkxIYTdYSHArM3htZkhPbCtBUXFlOTRHSmFDQlpndHRjT010WHBNU1RGR3IvYXR2cDFxUkxvWUJQTU4vOXJmd0gwUnJWOS9qS3IyZlorZ0FRUVVCaENtc1BkNmJOdFhXWHFNNVZzOVZtdDU0TVNHamdkZm5aWjJJVmw2bnE5SzRzM2R1cE9WdFRvWnAyTWM3QTVseis1RTRyS2FvbjBLZ2R1bWM1b0l2ekR2bzNjelBLN0lGWEtuelJuczU4aEJmb1U4Ly9hemVOSWNFNXE5cEx0a2VSdkFFNTFMdCs3ZWwyZy9zcSsxbUpvZnpPU09Va1ZJbHROSlovc3l6MFp6K2F1ZlZQSzZDWXVWOU9qdHZOOUtGa1J0ejAxNDJROTdlRzFCT2xPeGtSUmgzZk42d3gwV2VtSjdzNmFwdGYxZkpNdXc1dnYrd2sxYW1qMEFCd1FLTmJVcm00TXZJUWtENFNKV1dEWGQzRGJyTWRlZnlaOHdoazIwbWQvSHJJanBQUnVQWTVxQ2VoZnB2UThONDcyc0M3eXMwL0pIOXRhcUMrOWlraExEa3dTM3VVM1FuNENDZk9TZEE0RUZjTFF6Yjh5L1NFUkdpOTVMeldmQUJURWtTY1AzWGxraEZSUVNtdVRUSlZaL044ZnZKejV0REZnQyt1b3ZIbFpDZU10a3lDYnk3OHd5aHZhOGt4L1J0bzZ5cmYyUi9MU3JNMWZIMkd0aVFOc0hQcDdUYTh1b0QvVDdYNWxrblBrcHZFYjY3NWczVkhySWN0a3VRRW0xY2hDM00wN21jdHh4N2V5eXlUTHMrTHBzRy9wSng4dHl0YS93UTZJVzY5bG9oYVQ4NHBDQk14N1Qva0twMFNTV3p0dm1idDdyOGNqbWtHVnV2dU9iUVdjZzl1MmxjRlRmaTlhNmwrbllmNis1cjEwZGJzOTcxYTE5MjIwemxmcE43NkxMck5aOWZuSE96UDhyVjEzQXVpKzRjR01kb3luRiszN0hCZFZsK3J6M2lmcXQxbk1keHB2TTR0L0VqOS9DalhVR1hhRlRtQkFkNElOQVN3T1ZwUGR4UGJHcjVYQ3RDdDg0N2w2ckZzTGxXN3BMYXRVdnBWSzdtdERlRHNTWVZHNlZXWnJWeTNudTUrSGlNd0hnQ3FsUndGeUkxT3lxTzc1eXRWSENPTC9NNTl5YnZydXpYODhpZHRXdlV4aFQvWVBOSi9Sbkx4TzNnZFhwQkZMKzk3WFBpZFNZV0w2OEluV29IT0gxM01QTU53YWFST0wxZkdNNTZ2YnBlbkc2Q0s3aFVPQzJQeURaTFNMWVluUnJjWGljK0wxbzh0dGhLMDN6Lzg4VHUvd0E4K3BHU293Lzc1NG5OalJBaG1ZaUUyMmtyQnJWb0Q4M3BoSzdubkRpWGYzWXJETWxEeGVzVzh5aEh2Y1dpWEZFOExoZnl2SWRmbE1UNHgwUm50ZWozc1dMNDdmMzlpTGxWUmVNRURmTDhlNC9jNTBlSTY0bVhJVXZqcTNnb1F5dWg2MzNaTTlFbnhKZHhvOWVoL0YxNkYzTWlORlFBelJYbTM0N3B6VzErK2R3YlQ1K1A0OEV0Y0lJRmkzSFJvL1pTOHJUK1B5SU8vZkRFaDR5ZFBjUXErYkdKQzcrU0ZmNGZURmI0U3lRbzNKeGM4TGlFZ3NjbUVYeFk0c0JISnd0OFZJTEFSeVFGL014RWdCOGUvUC9SQWY4ZkhlVC9Wd2pzLzFIQi9EOHdnUDlEZy9ZL01GRC9ZNEx6ZjBoQS90ODRDUCtqQXU4L0l0aitnd0xzZndYVi8yV0M2bjlvSVB6ZkpXajk3eEdvL21IQjZmOXhBZW1WSVBRUDhFTG16YzM1NzdKQTVQOE1PamYzbDRKQ2NWVU9COUdEd0luUUd1YnBOS2tMNkVCRHBZbkY5RVo2NU1iM2VDalBucUhxUGowd3lMVll5dk5uQmJrU1d1ZkdJTmQ4bWRHZkcrU2F6ZUhLSU5kaVlLdTBmRUJnYXpVZy9QSEJySmY3dURHQTlaNlNyNlVpUk9VOXFBL1FWOUhadkV3akkvUmVjdmJVQXNKOGFDbkpmVnVPVHFtdWUzTTUyanIrL2pQbWtOMlh3dlU4aXdSNXVUQTlDMUZkK3NYZ2xqT0I5cml1R2tGWmxuaDBIODJ5MC9sa21tcjU4c2ZWWjd6WDFYODdVSlJ1bXV1dDN3aFZodU9XY2h3MDRSUnpacWxGbFh5M0NmYm5OVUVpS1doYi94ZkdkNXNnQ2d0SjdPd0JBencyVUZscFgrTDR1b2RiL2h0aXVmMHFxTi9kOGZHdDJteFZLcyt4VkdsbktIaGRxalRJU0R1ZGtxczFZdXI3SnkyMkYwYmZWWCtYMmQ0N1VHNEdEY1FuMGx2N2JyaCsvK0VGTzlQWmlBYlZEUkNmZTJEQnpuVFZaMHB2cTZ2U3pyVC9TZ1U3NitiK3dJS2Q2ZWxNMW92L1ZiRHpub0tkTmV2NUFRVTdUeFdhZGU4cDJIbDdGa3krLzFxL1BWdmtpdTFEYkM2dDZYMjFydEV6ayswRlJtSkRUU29zUENEYW1zZTE1eVYwYmgzajViNnphRkxpVVZOcE9JMFNFeWxOMmRmSXVqZnYyZHFndXJrRXZNSWNpcitkMXJiRkNTU1l0TEY5M01qWGZBSEdaeG54anhMUVFmRzNSOUdSNmNtUmhJWjAwVTZaanV3MnV1VTk2NStzeHhRbzBUcGpDYks0RC9YdjNKVk5rcjlMNHZVaHkydGY0QnZQelpVNjcxNkRmeHRVckgray9yRmdwOFYwZDB2bVNFUGJ4VGlnaDJUR05OekpjcWFQMWQyWDgxekM3RDFaWExsNTVpdlV6TktRT2ZkY1hNYmhWQ3M3eUZWZDBsQVlRcU9jR3l0S3RMajM3NmVoeEk0eExrS28wK1huTlhGcXQvS3EyUFpYYzU5SDY1SnBOMmVyWGRVblVJZi9sNzB2NjFKVXlmYi9Mdmw4K3JTQTVrblBtNWlDbUVxV3FFeTkrb0VwQVEyUVRuREF1L3E3LzFmc0NDYkZUTTNLT3JmdmYvVkRyYXBDaGhoMjdIbi9OblNSR1ozbHBYMnJYVzljZ0puOG11SnExM3V6ZGlqN20yMDVHeTkyLytaNkNkcm1rUmZmaGtGT01hMUdrOEJnTS95cFdzT0pkbHh5UEJVbmI2ajRJMVBuVTV0RDBNVHZQeENqdk1UU21XcmxQRC9zSE5DMkx2OTdlT1VGYnBjeU5EVDVIWlAyWDVmaWQ1VmR6WnJPbW0vTkhHWXZ3a1EzT0c4cWZEWW1MTmFwWW4wOGhEOXJha3hKRS9OSVdGc3NaaDg5Y0JhUTVvM1ExT2lpaWJFVHFRZGJSR3VqU0V2NGhHYksrMWZFU1hBbEN6MDNkVE1oYVRiUStHVHZ4R2htYVV6U0VvSzhmdStIcGtZTERSVk5xbFM1NDBSQ3g5VGNLdTJIVTNKRFY1REpiV3JPdUZaMXNHMGRhVk1wZGVtT0ovanYyRnZjWEhTZldWcHZZV3JDeGxObGhFV0dPYjV0clcwTjdWYVJHcGhqdERRMWVXOUhTbmxXYTA2MFVnUTBYUkNETzlhTjM1dWpkZ2NYcGRkYlRiSzJ0VHZZck1LZm1YcU50WHNkZm95YmMrbElIWHlIcWQ5dHpQRTdlTy93bzE0UmJUeXZ6WXo2dkl2TDY3RDEvcWFwY2NXOGFqM1RZbit6dkpBRmcwOWNEZGZvcUIyVW9qbm0xckJGeGFPdmpKMDBYbFhucm5aTWkvNGhaNllQYVVDcjhsaVc0RE9UbTdyeUViMjIzbit6S1hNV2l2cnNIRGdSMmtPenFaV2NHcnA4YW5FRHROOXo2Wjc3MHZ0dk5jR3YwVWl0OGRZelZ1dE1QZWcwVFc0WkdaeWFXN3JTbTBOamY3VmI4UHMycy9PKzc5eXpKNWhuZ1RrUVdGb1BPWEdUYjV5RllEL3J6bk5Xd1ZsaWptWkdzZmFEMmxtOEhtQnAyelBhTVBuc1BBOEhQbTB5WEVzUndIS1MzenNzdUtoN1JYaC9HaytRSS9aUFlOYkVHNHJmVnJsZWkzdE1GcDNjTVhsdXlvSHNxYjVkRDdrdUV6QkZYRkdJaStlQnRpTWxNVm4xQkRKNVJjd1ZVMFN4cWN1ZDRyNkxQUmgrc0QrWDU3Vkl3YnhKTnBaTm1NZHFhZ3Qxa0ljTHZ2aTUvSXZVTHBicmMzMFNYL0Jpa0F1VHVHNVMxZDU5S3g1aDI5NDNHbXpXK1hhRGpvWlAvNUpHd3RwZzFZTTc1TjlOSFowSWJRVjdWNS83THAwWEJEY3B6ZEdtbkw2aHoveGlQQzloLzJKZWRkNWw2aVAvcFV4aHFMcytEcjR0cXJ1WHhTQy8zRCtTY2paZE1PMllodWZ5cWRHODd1TjMvQ0NoLzJJOFY4ZCtMODIxNnhjMDdhR0Y3M3pkbnFueEg5VENGNGVYZHVCc0taM1J3YzJ5aGRLU3VuUGpGbHJDUEhOOUh4L0djM2NpUWJCajgxd2VIbWZoYmZvSCtmWXhjU04xaDlkck5aN3NqV2oxZUxIL0JBZDFiT3J6eTk4ZzNVcm9XTTliZjhyU0ZQYng5dUtzWEUvamJkZFR6b0ZWYXU4NUdXeUFJTVZzRkt4VVlYQnhENlQ5aXlpd1J3cXlSYUdINVpYTjlqWXRKUjF0ZTVWYXVvbHNMR01ZUHJmWkNXQkxXcnFTR05weFpHckhvR1ludEk3UkVkWGMwb2ljL0tudnhqekNPb01wZlB3OVYwU1pxZlVaVjdqVGZoRVJhMkw2NStTNUUvVkRjOUhyV0JxRGJFN3RsR1BQVzgvMnlkWGtOYVlaVlF6d1dkdmE3SEZ6MDk1R0YvUzJjemdWODgrVHd5aGJMTnN0c1orMm5YOXB5RWVHaGxKWG42RHYrSzRaQ1lrOVZuTlQvZmk3RHJieHNIMyszek5TMEdxTzdXV3JTVHVKSGFHT3BRbXBJcXFwb1YvYXhFMlpjMEhidC9vM3p2ZGlkM0hlMm1uMmtyYS9QdGRmZjA3aUNUSTBKV255QTVreFdCbVBZMlZCWTlwZ2I0dnROTkJLMjg5Zm5tL3J1V3VSNjJmb0JxMDZmYTIwb1BrSDNQV2lnT2VjWHluRGFQZGZjSk5PdTk3eVVTcjgvZnFuR3ZWVFYyUFFraVQzdE5BMXo5cnNrYkUxVllha0hVclREVi9CTFhxQ2F1N3RzWnFaS3daOGVPZTIralU5NUxvK2RZUDlXR3RJM1RLdlpwUG1xeUd1ZGpvdW0yOS9hUjQzNjFna25iZ0t2YlNrS3RkOHkvZjV5QzdmZlU5WW1laXVyVWx6TjlxNGJXTzZyU3Z0elQ1R1pXK0xhdDdxWHh3M2Y3dHo3VG8yZTBSTzlEWGY0cTMwYTV5VmU1WThwYnBlME8zQkhnNjJ0K3JadGVjVGFUai9oblNDOXJWM3hINXFzMjV2eGZIQWY3RWRBajV4RGUzY003M1BGZnNIbXozdVRRNHRuVEhJQ1d3UG5UQ1Bnc2J4cHpxVVJuRDdQbkhZVHUvSG5pb2ZRTTZPc0kwRXZucElxM2xaRERaMyszbWdqSmhKYkxyL0NvZlhWcDJiK2lTeFdhWFVFVjdEQVRzYjNMZm4xQWJTS004OW8xbktRKy9sVjJlOC9uWjZ2VFV0K2p4ODZoMnpkK3R2empaK0MvM0lTdEtmRHFKV2d5bHFlRzR6VHZGR21JblpZWUtpbm15NjZHUWY0c21NYXM5OGUzYjEvS2V6cTFzRGRKY05vemVmR1diZjJzYjkzQUg1Q3pPNVNiQjE5VjBOcGpmbkRhYWI4NERyalR5OTY0RnE2VW8rMzRjMTBqY2VxQ0N4YnM1bmJtVUFiWTJrN3cvZVhwd2JZRUtBcWVERUcxOGkyZDBuZ3hVZy8ydktHYmtVRGtKRFZ6czJKNjhOeU50eTl1NTZFdUp6TlFzbC82VUZwbXV1OHBNeVdTS2U3UmFpY0pLR2s3T3g5ZGxaS0pGYXlQTHNCbnNuUW84MjIrc1kybkZ1c3dwZlBhUG1GMGtWZHlRdW5NM2hpNUNhM2R0eGkvN1hjNHl2QngzdUNEWjhMNTlwMW1GK3VCYXQ4dVJYTnFtdjVlMVNlbHZSdks2RnFSbVA1ZG8zcTNzQ1o4eWZwcHh4cEwrM0p3T1IzMzVOc2dzSitOK1ZrSEYrRnM3ZVVTWWhHSHF3d1BPd05EbTQwVEZ4em4rYTd5anp0Y3Q4MlV1ZWZkLzdpOXc3MmRTWXZSTWoxUlV4SDBySXVVWTh3a2FlSFNzQjFqa29EV2NsWnBkUUdZSjBqeXFqY3JtdEdXcEVmdG1hbXRuY3BIZFJtL3RjZHk2VWNLck5zZmcxSTE4VVdGT2ZCQ2FyTnUraER2ZXpTcU9MdXRMYkVnWE9lSG1aU3lqUFZWWHRXTm94OGFnQ3ZCTEJ5SVlBWGhVNDZmaUFzN0hjK3F2U0VGKzlGSG5TeGJxOStsV3pKRXJmYTJlOHVzQ3dlSzNQdjF6LzVqaWFpUlVtTnRCaTgyeXNoYVBxcHJ6SG14WGUyTXNPMi9kTnNrV2hrLzgxa2hwemJzN21KdThGRWxMOTJiYVVRenRTT3k3Ynp5MFdLUC85ZFV4U1RkejE2QVd1UFcvOVpYRlBnV0UvLzgrckw3eFJBNzQ3RGVZdkFteHUyOHZJMVk0cHZLTmVKL2o5UU0wSFlwNmVnWldLVE9DSzhuWjVwbkY4YTR1a0M0RFZuOUJBeHBRMlZjd0YxSHBsektTUWhDVnl3MGdsNDRWK01hVWtyM292MUJHS2FxSGhEMTJzMTVGTlBuYmxmaWtUT2RtNmJwaSs3NUlzM01iMnp2Vzk3MHBKYnRZb0I3RTdiS0NSdEx2UnFTU2VrOXBsZkpZVE81NG4wdk1vdWZFZEZ4SWVVaFVyQ2YrRTk4a2RidndaUlE0NTUyTzBuamUzSXlIM0ZvUFFLZmdmWnh5eHRWSC92eEdwSFdNNUNqOXUxVG42V3F2T3V1VWg4SHR6cENRT04yR2NNYmdVaDY2bXhLWSt2MENsL2E5bS8zOVpzLzgvVXdWeEpXVVVVb041TnhJU1RGTjJDL0xzdGJUZ3VXNEdGbFIzSGRIM2VUYVNOTG5LejFyUDdOTnMwYzNseFZkQXZqZk5LcXB6ZlN6bVNlaVdwczIwNlZXZmVSMnJpdkUyNUtSMjE2eWx5eDBzVjFkaitmQ3lhQzhYYWVGcHBjNjJhcVl2RmlsdGwzem5kaDNsVWg5Wk5IV3RObVJ0QW9RdUE2K1p4dFU2VGlNaGRjUWdhS1ZaL0IzT1JhYkE1elpySnJhb0ZoVmN2aFJ1dy8veXkxYTNmSzIwaE04dEhkWXROalU4Vmp3R1lvMWFZdi9rQ3Z4RXdUb3pTYzk3Z1lwWlR1NHNWUDc1TmVRalF6dWVUSUwydVhjNDViV3dLUnEvMWNJT0ZTSlczVXRlNmw4Ym0zTjNMaXZrNWtpWUw2cEtNM0lXVmtyaVZMcmFpYVErejEvcU9wY1ZxV3RYVklIR3pGZ2VPMUdmY1FycmVEeGhnRitOR01iaGxJV3I5ZmdDNWN3cG1pTlVlbHdtaVV5Q3o4NnNuc0lnTW9IM3ZQWGw5WXFablZha2JFUVROa3UybDNycVpHOXppbWhwUitSdzZPU0thdllhOGgwblZtRTluVmpkelhWWmRWaTFMT054WWpYRloycXBxeWRYbUREMlJqZ3RvLzV1RmZYM0x1aXE1SnJDVGZhdVBpak9TZTVxUjJ6cHlxNHVkMWJ3M3FLNVFObUhyVjdCbUZsYTkxRjZIdFc5QkptaCs0L1NzOEhJeXhsRHlrM1VneU1la2EyQkpaNlNiL0tuajhaYWpLZEFkNjRzNkE1NGhsN0R3YkZ1VmR1YTBIME5CNnk4WEoxa1VqbWYybUtmVzQwbmlSdWgxTlJjcE9qZ0dTbzlFalhheTAxZFlDeDlnc3lSa3RzY2Y4NjdLL29hQ2JQbGdKUk9MYkUrcVB2bmEwZjJ2eVBzdlBaS3pUdjE3UGN0dXJubFFUd0pEVzFXQSs1cFFLUzFNZU82OG4yN0E2QzE5UUg5dHE1MkxMR2ZsNjZmc04yZ1gwWDkxUHl2RWYvZFJ2eW5BdktiYWdpQjJDa3p5UERhV2lzM3QvRkJQNVhHdEgwQmNIUlZrYW1lTDVSYmZWNHcwQ3BYNXJVNDhFSWFZM3F1NVNnZmdKNVpoSnpjZGVrNllnVXRyTVpEL21pNXl6anNLdGJuZHd0SzVJbVkrYUtkeWZDbk9veGRiWXlWa2lCa3BUdFBid3BMeUVldmhHM2xjb1FhRlgzMldLemR6K3kxL3ExeGM4eUU3REIydzlqLy81VVhyVER0SzRrZE9mODFqTC9iTUc1cG1OeVl4M2M1RlBFK3FoTmtnZ01SUWxxRm91WTcwU1F3Y25EeWJHMXVVcnJkcDFIYWhUVUhSMXpoTkpuc2JYRjFaeDEzVzRlN3lzQjFPRFVFSlpMS3R1bUMvd0E4YjlzSXo5d0NGTmVhWjNnRGVOejNPU08rb3R4ODB0THBKN0VNR21lOFdJc3puZVBtbk0zUFdpejlYRjN3Ly9rT2xmOE5mbngzbDhxMjNNWHpWZ0ZYV3pKOFFtTjN0MXk2ODMyM1FOUjhQTCtMVG8rRXpwdXRrMDUzMXROK2V3dW1qK2Z3azEwalAxbnp5MVpPdDBJemZiSTJmMEZMcHZ2VzdaZDBmL3kwNWNYSFkveW14dVFYclI4K2FUUHpKVGovbjJrLzBSSlkrTDdnNnpkaC9Yek53WDhqVHZKOXVSRTNIN1AvajNHVy85TlZnVitsU24rVGErVnJtTVlmc3F2dndqbis1MjhQZXd2dHZQVGh6Lzk1Y0xaUnRJMm5sdTBoL1A5Ly8vWlFRUjdqM3kzWEhYdVc2NzNUWHkwM0N0TTAzTVlhYVdjUEw3SGllSnRaV2JpTmkzZDQ3OW5NaWkyL2VBbDlhT2k5Wi9pQ3UzdUgyeC8rZkhqNDkyOFBYbXpaeUhNZi9ueXpVT3I5OXZDKzNXYXR0OUpYaDIraFkyV1lNZng5bDc3L0hXMGRDLzI5OWtNSy8zbjQ3Y0Y1OTZ6TVczak91NWROdGpaK0grVW81SmVIM3g3ZXZYUzdlM2M4T3ZMVWMzYnZZWllQdDNIbUhXRUVGa0xidzQvM2NCOGl6L2RHcVdNaE9pSTZYTWRLTER0RVlSYVNOWFhmdDhuRG4vOTRHRXluRC8vOE4vNkU1YjdHS0ZlMjIwd0lrWmZtYWVaRkQzOW03enM4MlYwOFNPVnRqSDl0WEZ1bGVQVWVlejJPaFhFNTJ5ajU4YjU5QzVHSHY1TGxDWjZJc291ek1QS2VDVjk4K1BlLzYrdEozdVlkd3pRTFkvOUhtdUJWeEJleWQyc1U3OU9IUC8veHo5OGUzcXdRN2Q2OUg1QmU5dkRuZzJDRm1JbHV2UHlERmNhLy92YUFhb1JEVjdiYzdBZHlLVTBzeDF0NHlIT3k3VHU1YzJ1dlBTZHJYa3VzekFud3ZNNEdIMGFXRC9OMVE5OUxzNGMvSDlMQVludVBmMW9jMjdGNkhjZnBNN2JMOU41YzFuMThzeDVkci9ka3UvMG5oN0hkeDY3ZHR4N2YrdXlqNDdHYzlkanB1RTkvZExwY3Q5ZXp1SWZ5M1E5aDdMOTdhZnEzMkEvajQ5ODNPOXY3MjRHUTk5L3duSDBQenlYWklWUXVrZlFtYjdNZjcxN3F4UmtRa1IrbTJUditwZmpuNzV1bjlQZHcrL0RiUTJiNUQzOCs3Sm5mdTc5em1Ob2JhMFl5KzRyMy9zL1pVY0IzYk4zNjZqM2cwYjNIWHViaHQvOTltejc4K1lEQ2VIZkViMDYyN3VEOEtDYnY0UllJR2xscEtwTXR3aU8yTFFmT1B6a0hzTml0NUE4WFFjWU9pSXlGSTdITHRoSCt6Nkx4MDNLNzhlSmk0K3B2TG9rRGp6TGJJdSs5R09JLy9sbnNQV1VveldOS3FPTC96MU9hYkRHSGUrcDJ1WEtKVzVtcGQ4eTg5OWhDMGc5Nlh0SFdjbmtMV2JIanZTOWdXUlFyOWozNkszM1ZEM2c3dkp5T1lZaDJhZWE5U3orQWoxcHZiMkVjWmpsbDYzajFGbkdZSkY3V0lDRzZlQmVEd2hTQTF6aU0vZFpCMjE1ZzdjUGljSjh6K01nNktsNkNRc2RLSC81a21OOGVvakN1WGNCbjV0MzNzdUdQMVNvTFVYaUNOLy93M2gwdnp1REk5anJGUFRNdjJyN25WMjlyRG5WSjlVaXlVcVNDckpSNmI2Ri9jWHJJNVptVnlBVW5JOGNIQzBrcmpMMTNlcUpxUXJQMkk5bUQvM2tJc2l4NStQT3A4eHY4SzRWdCtYZnR2a1hicVhOMmFiYU5xaEgvVHpXWUYrRE1EMmZEbzhmTERWTzgyRk9RMmlQTU9PcW53STNUWVczYWJweVdQSTNTaHhDK3A1aW5lZlJSNlprS0Rmci81WEpLTDhDbVZrdW1XaWgweitpRzNETUxJMHhnVGltUTRPcHltMnpSMXM4SEIrdmRVN2E3REdpcGVMQlZaZzNlL2VwUXZGdkRZZ0VwNlovSk5maXZGSWRaNjMyenJidERYdjJLdWtXN3lKdGhUblo1bVY0SlBBdGx3VER3bk0xNEMrTG9vWEh4aDVVRldHcVNTeWY4NHpiTkJpaTAwdklWMnpTVENkOHZwNHV2RmRSeWZsZ3duMGl2a3RHL3ljT0VYK0tWS1FYbTV4d3hlQWR1VnBER21ZQjFlMjlQTFBQSG0rZFpUdmZwNlEvSFpqeVhaZDdZUHh6MjhZOHVsck5lNTlGMm45NTZ6RlBYc1J6UFlxM0h2bVZiYjM4OHVRNVdyc2dyaC9RN3hZdFp4dTcxTFBhdHd6S2N4VHpaZmVhUllhMG5wL1BVNnpDUGYzaWRqdlhrY1YydXo3eTV2WDZQNGZyV0g1Mm50NzdUNmY3aC9XRTlYWlhjalZQNHNieHU1L1dGL3ZtUk9QOUVFakFkNWc0NVVOTU9HT1ozRmwrZ1V3SjUvZkRuQTh6c29YbVp6OGw1cDhPdC82UlFRVWtJb0VaMVZndHJvNHVsWW12ZzRjOEhNc1cvTjlZVWJ5SWRiUE5NdTJlU3ZiZzdzZDZ0eU11b3dmQnZyRWE2Rm93bUNWWHZQU1dxUEw3NGV4cjhmYzlZS0FrczV1RmNZampiTFhLM0I4ek53NjM3OENmWDZYeEJqQ1JiaE5tK0ZHZmUrOTVDK0RXZ1MyVGJkMis1ZlgwUC9UQzJFSDFrU0xRYittNThYRHozRlRUVkZnbUhkKzQ5OUgzS1UvQTh3OWg5K1BQaHVjUjJQbE9QVWZqbU9ibER5Q0Y1OXhZWjFqLys1OEU3ZWs1aGlWbjRGZjk0K1B2QkNyTy9wY0V1dzB2dzhFOVFGMUM0OTJJdlRYKzhiMjE0QjFYYmw4Rzdsd1piNUQ3ODJTT2NRZlJneE1rRkt5SWFCOU5oZTEwOHdjQ0RuUnN2bHo4STRZVlphS0ZuRDFuNXduTzJzWXNYc2ZQYlF3SjcwTGlVN2h6SFM5UGF0N0hRRGlOdnU4dXFHLzhOV3hTRnNUc05IUzlPdlZKd1JWNzJIanJwTlhaWERoTC9oOHEyNGhHczBtNGpMd3U4WGFyc3lISmFyaHZpcmJGUTNaSzlNQ3NMZnYvdmV4V3UramJlcm56Uk9WeXFYK1Y5TTlKTTZQb1VMc2QyZmdSZ1ZSUVBoaGpHUGgxSDNGUlhydGhoNytlUHBjNjdsWGpWY1huZ091bERvV2tWNC9ySFB6RTVSbUU4MkZzaHdzT0IzWWV6WjdrVjZYUkszdERneTk5cjhtd1RMODQ4NU9GMXlLbVNkRTJwK3I5bUkxenU5bFZqK08yUHgwN1hjanE5N2grZSs5aDEvK2piL1NlM3p6SWN4M0pkNy9IUllaMG55M0k5em1IZXVrK2QvcHZuOWp6UFlkN3NQOTc2TEF1eU9zV2I1R0dwMHpDOXo0UnNZOFgveHZ6TzluN25ialNCMlE3YjdUd3gzTi9zUHNkeFRNZDlxTndHelkwOHMvaXUyYlpidDM1WUVtQlNsNXIwRlJNNGVkOGU4NFdYTmZ4YnljNUdZUm9zS3Zad0p1NHdWMzNkZSsvdm9WdG8zSmdxd2s5WU0vZWZ4NXJmRzJLUGdRdVkzVzVkd2dFd0IweHFPbEcxSHcvdjNyOTJYa3EwVWlmWlBmejV3SFE2RWZCMWJJMDkvUG5RNzh4Q0lPSFUyU1plRzUvL25FVTlQSHpDcUswRUg2TnM2MnhSNlhVb3VXek5SaG1ENGx5M1BjWkVnYTVmcXJuTHlPUXZOcjlOTkJRWGx1L1lvSFpLaFJNMHR1bzlYeDY2VzdPSTd2aDBJbGhSaUlDTC9lTkIrckh2UHZ5enZKcVhkeTdDMkVmZUlyT2N6VU5Uc2hYYTU5bmxZbXdmQzBITXYzODBqUmF3a3NpYTQzOW1Ua0tXWWVjbTVma21EOENXZy85d1VIb29Ia29aOUtPNmkzSk5PQjVmbXU0Vm9mNi9OL1ZyZm9JYjFxUDRGdnhWZlkvOFhTM1d0RFo0T0Z5QjllNzllTjlpaGxIemNCUXFjSjQ2V2JGRVpOeXRaa1NMaHdRLzRMMUhZUXkzaXUrVzQvMW9zaXBRNk05Y2dmZ0M4UWtzRXN4VWg5czR6ZDZ0c0xUSHlacmRNWWhkNGxxWnQ4amVyY3p6cWEvcllHVk9JQkdacG9WWnNOMWxkTThMQllSYVBEeUpNY0lYbTk2eVQ1eGZIOW9wN0svMWRuM3NWTHBrS3JlNVdjanFmdUJtdWNWM2NydG5vdEE4NkVZVXdWNHJjaCs3WHpUdHFUcjJFNVk5MXQrNlg3RHRtZDk3NTI3L0cydzU3b3JVNTM1QzZ2ZnUxTnVieS8vd2w0UXJibFRwaU8rOGczbmx0UWpIRFZyWjQ1VkZ2bHpqM2gxTDNLSlluVVV2Zm8yekh5L0dCOGJtTDRyZmZNNjBMM2d3WnJIQkQrdmRpcWk2Z28vN2p4MUNKRko3YnNQVzFlMEdTWHhBaDRYajRNZTc5eFllcjhlOFNnVzFlUERkMjRkWTJvN0ROTnUrNTlNd0NqTjZ4QzZYc1MwcTh2VjF2ZFFNd0JDd0h2Nk1kd2o5OW9ENURWNmJNanIyZStDaEtQVGo3YnRYSmIxSU9UODNkQVh5N3B5Yzc5ZzVuNWhzYis5RUs5OWxBMlNIZk9ocUtBVk00SncvR0pyOGJtZ3Vjdkx1aTVUekswdEVKMmtzTXc0Rkw1REc4dGJVanFra3Vxbk5Ta1Z2cWNTT25KUzJwT3hZdW9ta01SKzRvdC84WFJSMjVtQzdsc1FlTWxtU2F5c05nNE1UcVpHbEI4Z2NGdkJZbzJRYThqL3M2TmlUeFA3T1hQQ0hZZzZBZXh6eXFhWDEwTlRmN2hSQmZsdHhDcDRQSHUrenpUS1p6WFo5ZFNNdkpWRkpuSGoyTW8zY3hCMCtrYjlGRk50UlB6Zm4yNTBSSi9uMFFQNjJOSGRuY3hNMERIdGJNOGYzQm5IdDJzbU51dnRoT1BQbmJEK3o4YmhGU0NSaG5DRWZRUkhmWWZ1dmFTeHp6bUQ3cjJrMENTejR2NUxoLzcvNTI3VWttSUVUb2IycnovekZTaEdjdzNaWEZpRU90anRMVTVDeGVIcDVDWHNkVytkem05MitUR1B6WkxEOWpibDRldEdaL3NtT2hJUERCbnRYNkwrZDEzbThhdkpJV1RUMmZXbHFLOThWQXlTTit2cHlveTVXT2IreFdmbFU1SWM1cCsxK3lybWNtNThuQUNuSURmdHc3NVIxR1R5Mktkdm43RWpObmNQMkJmckpSWDNXMUNlblYzK2IxY0F1aW9TYnpCTFYxRjR3R2VCdlVreGkvS3dUcWF5bHFkd056MExmTEZOM0VkN0RZVlFWdlU4WGZPQkVhakRGOUNzMjg5S1YwZUI1TnZvOWNodExjWkduTS9RVCt5Sm5TdWhzSVkxd1BIdWM1djBZazZLclNUdUQ3V2RUdHBIR3RyL010OXI0aS9KYXN5dWdKSnA3SitTbjlTV1d4dW9KdjBNYTljYUxWYytRUk9Fa2lTTWZMdzllR2t6eVR0VHZlZ3Mrc0tPNUQrbVRRejRzVTBQOTdZdWtacldjc2tGbnVoNGRwK3VKKzBLZzFFK3Y0ZFBlMHBoNEdzdGJTMU5UazViSkdKR3dNZG5WdmtvcjdOQm5wY3pTZXBITlRUS2o2TTc4M0QrNVk1U2FTeWJDUjN1cXkwZFhFM0p6c2ZFbE5lT2RNVjhmdy9IZU1jeDEvbEFieC9FTDQzZ1pJbVdQMTlOY0hIeERVemFTV08zM25EMEdEaWNYVU1Ga3I4U0JENm5hT1Q2NmFtb09lYncvSFV0YytZWjRtYTVZN1hWdmJZdkN5VGx0ZlVLcXdWbUpRTmQzeFNmZjAvcU1FMWI0TVBWeU1NeFdoMGpaV3ZyTU45Z2djT0s1YjBUOXZUc0dtTmlEay9PQkhWN1NxeVFxeUJHUGUwOWpJTTBTZjh0WThQYWlYbWJFVVBwOTN1N1A2QlhQSTZuU3dTWGYxV1hNa2dsN0VETEoxSTZadmdncXRrQ08xczVoL1FTemNvUE5BSlhNMW9RZGlJZXcreklNWjJ0QUpkUFZ4SWxVUUkvRFI3d3hwdFBXTjU2Ny9kbWltODhBUjRIM2g1Z2Q1Z0QxN3dPU1c0N1h5dHdQL2NRM1JEZzdKNXM5b21FRVl5QXQvSEkrTU1XNWYzbnVhcXpzYk00bWl6cldXQTFKUHVNRm0za2hiSWFIdGtQU21MYldtK014RE1qY1Jtam5jRXBnaXdkL1R2YnFaUmh1LzdYUUdFZ3ZOaUI5ZGZzdkxLTHM4Y2FIOXkxblB0NWJVaC9kejZHKy9NcThMSzEzY2tVaHRZZTh2ZHFvTTJVbExCVzEvenBmTVlLK3VLU0J0amtZSWw3UFpBVzBDNkpKMkpsRGZrTVIvVTR0N05VbmRJckZRbU85ZklNOU1nNm5ZUEdhMlBROFZIbWZNUDdJMGx5bWdLS2UrdHNYblpHUnVlQnRhRUVRb2RqVkp4VE5yck9WV0ZxM3p4WFExOTFFRXJHSzBPZW02T2xsaVBvZ29qVDJiRDJhZkJpckd4bm1IMU5XMlJ2Y2JFLzJqVnpYMlhLUDlpOExQckk1cWJFT05pc3p0RWFkakJsL0YraFczZFhXLzlrU2hkd2RiR0U5OFZ3Y0ZrcVo0UnZTdUhIdjVWNFZORVBQTlQ0TE5tY2lPTXZpNGNwYVZ5blErRDZIay9jR2l3SVgwRTlKNlI4OEo4cGJRNTkwU000eXZ6RzFJNVVmeXRiRXRLc2RrYUhMcUw0WGxLNFpPeXJXNXRqa3gvQjc3MlFOQ3hFUDYwK3VxLzNhYzNldjZjSGtKZ0ZWSlQ5YlUzcnZ5dGVZaWJBY3FmeXFvNzR0TjRLc3FCMWY2OGpTWEoyczlNVWdtMnJsZUFwNmYxdXhLdVpiWis5Uzc1cW5JN3E1Z1ZXYmZPT2JVVDhIbkFtTkFYbHJpdjIxQzd4V0tjcE0zd2pmbXZsTERjWGtEUFJpU1RSem0rMzRlSHhHZEVSVGxwNVZyVHgzUUJlbVBrRVNwUDN6SFpkOXdud1VuekhPZ0haWHlsNFNtUVRQd2NYbnVMYXZ4ZnVOc2R5QmZQUkZuL0k5cHVRUHhoRFUraGJlMkwvZ0ljYVFYOE8rUEc5Zmh1dlJUaHFCYnZKS2VXa2xzOFI2dCtrSjZDdW1OcWZyMU52YkliTjJvRjJKSE5oRHZpeGhjWEpLNzZJYU9DeENEamYzYlExS2RqZVNTT2NxWkUzYUhNcDFtc3VvWEV3b2pVT0xEaWRTVTFNVHNGNEUrNk94amVjVE84YnJjMHluR2prdkx3dkN2K3hJNWNDRW1HK1AwNUFYZ1phNUNUWUQxb1oycU5vSzZEUGYwcnBRNW1HTzFUWFpjL3dPb1FQeUcyVGN5dmZ3R2M0WmdqMGlvZ3pySEZqZTR6TUxaNTBWZGk3ZWo2SkU1WG0wazRSc1VveFBYL2pyaXBjd1pDK0dHN3puSndMbFByK3FSOUp5RHp5UGhha3BXT2F1M1NIZnN6azFsMGJLNnlybnNRNFJtUkZhRjNSRDlnTGE4alIxVXJ3UFpIMTNwdTc0alU3ZnRDUjZ0dWo2UzdFZlMyTWxKekQrTTkrTUozdDd3WWMycDJ3dmFFUlVHQ2VDczk4QnN4SHpMcTBYbXhvMkZhVDZlcWozN24rekV6bS94enB3ZlZ3VzZNOVFydHVUUkFMN0QvUkt4cHRnUHJTTStoMXpVZXhwNDB5ZWJKWkIyRncwSXhNNWtZcjNFT2pNMVhsODFqZjRYUmN5THA3NUJtQllxcWlRbCs3WTNSYzhHNThGVTFSUG1ONk1TTjFJNHFRbkNaUEUxb1NUTkdMMkJvdE5JVG5CSmlFZDU0c1NUL1ptWHNsZkNUVjRLcGp2RjdyaGlNaFB1bTRoYVZOSjlGR2JOWHl0VS9BV2VFZmtSUDNzN0JtL05MMHEybXY5VmtOSDVDYUpyYXNuTCt6dFRIMit0MnQ4Y2Fvcit4b1BMSFFQYk5ielRsN28yaGUvWDlwVjRxRFNrNkc5RGRwQk8wQ2dYNnF6WFR1RE9lWjE2dHJLK2JXclQzS29mYW50TWJScXdYc3luakIyMUFOOXVOQkZidGRuQ3BtaG5EQ2ZrY1RKSHN0dU1tYmxoT1V5bGhuejgvZjUyeGNxdzU2eFRtNnpUT0tWWjJkVjZKditQRkt4SFlRcVhmU0k5K1FUT1lmZ3JFdzVZbVBxVk81SnJJejFPN3hQajNTUHR1YWk0RUZNYUdybTNvbFdXY21mZ0Y0Mk8wbkFhdzI2QmVnejliVUJmRGF4ZnlqT0E2a0R3dnFuRWxnYWRGTlkyeXhEYkFNc0d5SjBzdlI1UTdlWmNETmY0OG9TeVo2aE1aaFA3cVpuMTE0V0J4L3pieWRXZCtUOFl2bDRzU2VWcmpLZVBWNjFLZGhnNytZOFMrdTZicEtkdzRqM2pRSHM1L29qRE1iaHByZkhjdHdWZ3dEVElkN1BsZGpmS0NJNk9iRksxbW96WVV6UlJXNGR4WG5CY3hhNDFvZzlZVVJFLzdhMEhsN0h4S1E4NGFKRk9mQmFOemMxZ2RoMllvQnR5TDBkcmRKaFJLQkpZTTNaUG9ONXFhMEo3eWJtaVVNK3NYVis3M0J5UW5EMnNCNmlzb1ltTTFDN0pvNUkyNTlGMTZlMEdsdERQbkU0bVRFWGc3VjhHdVV5ODVIUGhOQmRlUlpZZEhJNHZKOVAzR3dwY1lWdWFXdDl6SU1UYkFQUzg0TFhOOGM4R2RNSjVvOUxUZTA0RVZwaisxSUZmYnJpSFV0cTE4eWJNbUp0YUYzZjFBT0NpWHIyUHJ0NFgzN3dqWGlEOVlBTzVZOW5zcWFYbWJxU1c1cDhxbW9DRlorc0ZjSHJNb2JZcGtkN2QwRytDVDZJcysrZEkvaTc0aE05QXlXNmVLV0xMSGpHWVQ4WlM2MXN0Zmx1MlovNkNXL1RVbWdYV2hRZWUxTkNQejJiVzJIYkgxSFpPc2V5d01SOFFGZFAwcWgvTUlFLzlmUHBrTnhyc01KT0V1bThGMVd0NGxMcjc2QWxiOGl2blVpbE92STk0MVpsbSswbDhLM2F1bUw1Z09VdTNnOUpiT29zMDZoY3ExcnRIck8zSTlTeE9XbUgxOTBxL0VWbG0rNWVxVXYvV0V3T2pmbEdnNTAwbkZTLzY0MDl3M0owYTNQZ0h5SzRtL1FzRXhpWUJoK0U4MW5JYkt4REVwMVhaWnk4MG8zdGNzMEdXOHBQZllDSjBlU09QZVF4NzZob1FDdm5kZlkrQmx5MVV4aHJKMnYrTnNoc2prSlRVRjIyL0kwZEpJWDkwdUpEb2Y3UDR4dVdNZTRZeTFjK01OblZudnkvb0UwMUgvckpuTGh3KzNodWJPSDdjM0orVC9nVDFmdkFaZzBDYzhnSEYvdUlkV0ZkT1UzRHhHL2wzOUZ4YjdCcEtvM2RyYVhKVzhMZmVwaGY3NDFZM3R1aWl2VzRqUXZ1N2VJY21aalc5aTZoUHl6VFNGbTVpSGFmOG9yMTltVVlkdnlGMXZXMTAyQTNXeHE3bWZvenZ1QithSXY5Y01veWdhVjE5MWlXMjVHTGJMRWZUeU5tSTUwR1IzazlTcWFVbnR4WU9VbkRnTFgwU2NmVmhKVGdJODU5ZHp3SnpNaE1qSnpIOHJqajZyTkVFcFhBWVlQUVpvWGNIR0w3c2ZJM21JTnRodWNxQ2VsaHVwWk8welhmMEJNcWY1aTh0eGY5cHN2LzByZTBoMzBJKytEQ24zWUtYZjY0Ti9OZVpnNW5oOWw2ZHNBeUdkWi9ESHVLYWVKZ2FDN1dxenNFNzNydXo1Yis0ZlY1QUg0eE8rcHpXSzY0V2kveGhsanZsdDlOa0UxcVdOQllLZi9xR0xENGZTS21DeUVGck1saDkwVWE4bWJKbzhEL3kvc0dwK2IyY0pCTmRYVm42WDdtc1AyMWhYbkpzTit4OWNHKzBITUxPcC9xd0k4d2o0S3hrRGFrQTd6bnFRMjQwYkFYOUxtZ1BCOEdZRkhMaVNtdUNsMm1aZ3RKalZhTVJGWUlwRVZyRG5LWHZodjRNdWFoREpiUmRCMTNsczRmOEpwUW04QnUwYzBMK2s1dDF2MEw5aGgwNmR4Y01CUnp0cGd6ckZXTk54RCtvbFF3SDZNbG1sVXdQUXYrK2R5SE9QUVQzc1QySFQ1N0hiVkxzYlpUWmRSYk52M1IwQktjTWNMZTJtWTcreWE4Rm5PeU5QYzBaYXZucDVxeWMvSk5VKzZHTUE4NGM4c3pPQXJNajZrOExYUkcwRG1IVVdOZkMxeG1NcCtpNjhZNVRGQ0ZhVjlCa2d5WmpSM1A4Sm9jTEhIVUJnOEdXS2tsbkVWemZzZ1RoY3dSajRqc2E1ZjZ3Y2g2ejFWM0tZME9uRFJTWi9PUWhsQUZlYmtjOGl0VG4yQzZLVzJPZWJrZVYrZ1c4eE9zRzdOZDhJZlErTUNGejBrU0R4d0o4Y3JiMi9lcDMrTFRucVEySyswTlRUb1pTNmY3cXNtQm9hMVlXVk9SY1ZJQzg5bEVNMWJxeUpGMGZGMDZ6RXlVT3EvUFFpaEhXRi91VXovM1ptL29lUDhQM0pRcjl6R3puNTJkQjdnQ20vdjN0T2lXSXB4ajlwTjR3MFViMXZJTU5xQTN6anMwWGJhelhQU2dPMVVyVEFhZWszYmNHeHBBeEZGSUZpbHpPRG1kYW5pZTgwZEpGSEo3blFRdU4zczBORGw3UllFeFZRTkRFL3hNZTA0TVRRam9ILzhSMDdrcm9zalNaTHovKzlwdkdmdzlaT0QvNWZQbDc0R2hWWEFuTmJpYUNYTGJhUm1QSnlNeFM2YUtXWVlWZGdUb0x5VmN5U0FFV1R1VXZtOTlkTHB2eGJ2SHM3RHFoRlBUblNPMVl5emE4QzhFenNrWmdNT1phaFdmbUlLUHJsZjRWekpMVTFKendaVHRqRi9EUVR3N0dZZlowR21lMGJwdU91UW5kbHp3Qlg2R3Z5SFZlQkdKNTBEYUJYTEg2b0g0VGRXVHFabU1QZVE1UzhUMkw5Z2JPMU1EdnhMNEhDcDRwUVBtZXh2b2JVRDVJY2hPYmU1WDZ6UTVTZUtFY2NHZjM0MWRyRXRnV3hKa1ZSQzQwY3EzZFRWMVJYVEEvTjY2NHBPRUdFYzB2M2J2M29nU3ZGWW5tcllST0dQU2U0SHc0KzdMY0RQcDFhQVFVMnFYMVBoTW4wRHNEYWx0UE9heHZ0V3ArUzlyUEpiQUYwbGlqYStMd3NZY2c4eEw2WHl4SGJTMk9hejN5eDNRTXhwNlBQVWxpVEsyb1RORHl4RFZMZmFGL1kyL1g2eXp6ZllRWU1xUXNhaXJUZkU4K0JWVG0rMi9RNXdBN3lPSkE2ZHVWUGl2NkZ6ajYrT2ZjRE5mVlNjemJCZHJXcCtac01jVTBtZTBPZWkreEU0aSs5K2lCeGYrRGNML21qWlo3UnhYZEZLM3hZYlJoZDVlbnB2YUdselluME0vbVpqRS93RCtSend1ZThFblRzNW5saTZUdkljYjVsNzQ4N0JzbGNRSnFtTGc2bVlhOGtJaEUrbFp5QXg5NDF1aXdJSWVlTmRjNTMxM1BHRk1iZUFiTVY3UDN2NWNwc05aSEI0S21Zam5zaWJ4R2JpM2lCZFEvODBFMjllQnhhb1FJeldhTXJZT3kxV2IveGtFSVR2dzNVaklMZkIxTnVLQnFjMnBteG9QQTNxYmNCTlU1SlRnYnlwNkVOZzZqMjEyOExGZ0hlSFZKN0U0a0ltRHBMRzNCTis5cGdNUitWV05yOVkxcklSb2ZONzZzRzYxWGp2WDVKMDBIS3lsa1V4OFZNMTlmMTJPcERyVytNL0lsNnB0LzNCUys0WjB5emlFNVVqYUtxSjZjQ0oxYmVnS01vZWI1bk0vSlRjcXVzTXlDZFp0Y1Q0dVllY3QrRDNlWjh3cjYydEorVkdJN1Y1VGsxT0QrQndnaGpIMWFmeDVvM1lOYUlPOUluRzZrZnVzTExjdjRMY2NnMS9neFRpemUrdnJYZWc0dGJOZFliU0w1Vmw1bE1aSzdtcXJXb3ZvdHY0TTlFL09QeFAvVUpOdkxrZlNUaG94a0liWXpQWHBQa28xZThaZ2ozdFhtKzlNdHI4MzJVTC9QYk5yTkJYMFU2d1Awamp2M3MyWmpvMzF6WEovei9jRTdjeERIVVo2NWl0a3phYktvdTdYZ0p3bWpzYmZVMHdYVHFNN1hnKzVZM2Z2UUc4ZVoyZXlHU0owY0ttWEZCM3FwRTFOTHZzdFl4RFZ3SW1PQ2ZoeXE4NmtUVnFoZkdBYXVYdWJkVk56UWZUdGxqTkJvU2dINGFKYS8zQjQ5dDI1MXV0SllyOWpRYjVhTTZlSitBQUovelhZWStCQUxDdEFUclRhRlQ3eEMzNmpKNHdUZmNHVytqbzkzYzFEdkZqRk51MS95Rm50NTRZbXAyQWppMzNHaEZpOG1SdTYzSEZpZGUyTzFkejh3bG4rSWsrZXpSc2RFRy9oZS8yMTliKzFsZ2gwaVRiZHJ5bkR4WDRraVlUblVMNVM5N2xEU3F1bEtjaUpaeldhTi9jdXdlbXpGM1c5N3p3ZkV6WDhoUzNyUTNLWDhKNFpySHB3eDdOOUxmY2dhL1pMN0ZmMG04c2Y4REExZjFsZ0hicjBmMUdkeEtUNWpHQkRyTEc4ZGlLMEozNVVyTnVEYmhoSVkvbGdpNmd6aFRSYngxZEd2V1ZwYzR4ZEVoOG5ldHJCMVNhcHBjMThMNEowN0dmSTA0RThGWG52UktEZmY2U1gxL2dSMFpGZE5raEtQeExwS3dObitvNzMxK24xL1AwN1NTQzVXQzRyOUlwWWhzMzJVcSswbWVBN05UdWptWjlsczVOL1lmc0E2MUpMamdkYU5MUWpmcjZLaTRCTytKR3VlUW5uYXRUaU1IYWtJdkNQRTk5cFl1VDhaRFVrL0pPc0M3WmJ3SzZDbU1xNXp3cmlUdUZzTGVXMXZKMlJzTEUxZENMNXRMeHVhcE10dGtFZ2JrWmlzeGUrSExCcGF6NmdVdWFFZzhOMExURXZSVTdQNXpHM2c4M09hY3hOUmpTWEZkbVJjckJadENPeFVLRlQ2UFhBdnpVM2gxaGpROGNGdXlVeFJaSkw0TEpxYUluOXZYVVJmKy81NTNsMUpwWU5tRmNTbitVQjhxa2hSam9KSUVaVDdqZk5xNHBVaVBzYm1ySXBiS3BDejZhNXNydGh1UDJYU25UK0NQTktGL0pHOEZtcU1FS05lRlBQbGNSNitOcGM0UFdiSGFmcndlNGwzTDRNRVpuanBUK1hPY3NYUnp2cGViQ2JyVmU3bDVDSEhrbUZUNXpHMXh2OFJYb2U3V2JMK2Z0MENQdkZTcUtaZUVQZXBuWUtpZGYrWER6ajRHckhkSHFhTTdQMXFJZ2pyYVVSeE5DYitRbzFXN3JJODFqZ3ZlTm1ML05GYzErcFRuV1JWMXJsVzVWNWpnMGFzbk9lczBSVXh1T2NTRDI2bW5yQ3RqM0UyMG8rQVR4eHRSUm1PMm1FU0p4OGZCYnZKbWVZY1liOG11UmhkUHltbjR6YTZpTGhPNVplK1JIc2tNOXNUdTVnR2VXdzZtbEt6akt5UlNOeldCVGJvQ2RoMmFra1pvVFdKS1pPNk1ibTFOZ2FkbjJWK1B5cG42Y2YwVzgwOGtPYjZ5SHZiVzFWeE14SlN3bFI3VXBpUDhlMmo4TXBaUnlObHZjVU1WbVNSeHZ5a0NzTWViN2ptUTk5N2tTcUExRDZOMEFuVjVDdFk1bGN5NFhDdjBFUE5jZkhaOHl1NWF2VXpoM21POFFueEpvUk9kZkIzdFhua0xkQm44RzhlNDkxU01qRmdMbGxrQ3N6VzNUOU9jamlXaDdLa0FjZWh1V0V6WmtKMVlkOVk4R3ZUWDNTc1RTc201UTZUQ0VmVG9EbFdvZDJyK0xxQWNqSWlBbElYak56QVA0TE5FSE9LTUE5Undoc0FPcS9JWDRMZ3AzS09LQmZOUGZXeWJ2K1FqTUsvbkcyNzBLSzlWWnp2TUg4TVhFNDVWVEUvNEMzNVR6eVJOUng4dTdMTEtSMGNTTy9wZlJTajBYak13SXhKWVBRUDh6SG83NnVJaTQxSFpibmlQb3RpSStRNXEyY3JXMzNaWlozZlRVU1VndmFxSkIxeFB1ODFGV2lZMFdPWC9McS9QSmNRNTR6MXIwb05uSTlabDdsbm5kZjVDR2hBWHkyYXJtL3hUcEJEN1dDdDh3N295Sk9SbmdCcTY2ZFNPM1VhUnJ5Ty9DN2g0TWo1VGtIaU9kWGVkUmFDMStTWGIyY0oxZkkwY3Q0ZGU5RXpoVHdsdHhtWmJ4Zm1FOWp1ZzNBRndmMFJuT3ZGdnp6dk5BMWRSay9qOWNoOU1vY1JHcUQxZDlGenQzSnprRVBMc1pPL2J0VVhvMWRaRVRCM21iVHRqeEYwSWN3djdERS9zblV1cjRaQ1lsTnp1dUJ0dW9oZEVTKzg1VnZVRjBFMjVKSG9pZnJTdUpHNm1tNFFaMWFMZ1hNd2Via2swVnlTa3BhMVZpSWFXUlZqVWtmYUhBSytYVkNiT3FUajJLZFovZEtlK0RqUXlZenRGNWdncTRNdWxkUTJRQjk4Qis2UURmOTFLVjhrK2J3SDEwTjVhWTIzdzM5eEd6SmhhR1l6cGhtWmdSU1BZUTRKT1NkcXFQajhvSUgxUGtYNFlPc3BZMzg4M0dTbkVRc0U1U3FSdWNpRjZhbTU2RmlYN0xUTklKdnlzVzdtamxMSkorTzZ0QzVxNjN3M09ZMjVHcXZmQlB6VzZyekcvcThaVnlRMjdGMzRna3lPQVhyd21YZU5ad3ppRGxVNTRPc0hZbC9MRWhOZ3VERUUyeWI2QkREcU5jTG5MYTBKZ3N3elUvWVpseW9nMGZNQTEzZ09YUGZCVnpzMWFNMGxFTHFZeWE2T0l5NW1TZmJ6RU9odWw3TnI0TnRPM2ZzSW53V1pzUHVhYmJvSGlndS9IRzZsbll6NEV0bG5BVjh5eWI0Mm9FR2NnZjhOTWZFSW5IN0JOdlZZSnVEcjFlR1ZrT0tQc2x0VG5xVUJIV3VNQk5lR2ExOFpTTk1saU4xVk1kOWw0YlMzMytjbnY3KzQxd1BERUdmU2V6WURHd1JZUnNVZW5FMlduTThiLzJGMWlONjFaRDYrNWRiWHdxbFI2d0htdHFSNU4yTEtMTXhuOGEwVU5TcmJCUUVzbUFJc1kwdGx1dXdoMk4zNnkwSXI3YTBycTl4UkNleGRQbmthdXBIWjVEb0dHeVIvMXpvamFPVHZKNnpMd3MrZEhVYXQ0alVrODBlV1pLUGpYbG5sVDlIYzcrNjNqam9ObHBJc0V6aWptcHpGd2VFTndJdHEzNXBzOUpuRGFJUEZuS2hzUE56VXl2emY0Ry9GVG9tb1Uyd3A0bXZZRnkySC9NTnJHT3ZqZDFNSEJReGpZVG1ZZVR1c01naFJKaWY5Q0JYYVZqNkU2aDkwZXMxMnJFVWU3VTRRQjQwcGZGSGJKT2IybXhYeXNNTm1yK0cvS1NnZ2VJTXY0YURVSUorbHdqWkl0RUJMSTNKc016Q2VveFJ5dlRlSHN0MTZQTVo4bnVEbFJrbkxPd1QzbTkrWnhCSzBhQ1FYVHVibTRNdWlOZktGT3ZubVMvNklid000NE8vWU5XZU5ENzRLbWxmOHlTTnluaWUvemJrUjZZdXI1MElIV2lNNUdrWUg3THBvcE5OZGZyM2dua2lmNU0vYjhQcTM4WHYrRHNHTGIxZUZtM1l4b2ZTVHNmL05zWlozeGp5VDlLUUwrNnYyK1dCS1NvUzFoMUlQY3VWWndWaW01STYwbEptYjh2bnhBa3lJOUM5c1oyeElib2gxdEY0Zk80Yk5RbDFXOUxTaUI1dHNPRFBvSHo5cWVIclB2TlJsalphc3dhMXRNbEFCNTFxUlhsMlVYZDBrVSszTDJTMXJRbUhhUzRIcGpqUExGRU5UQksvdmJKV0RMWWJzWDVTK1JEeWl6WlpUN1g0N0pNazhuKzhhUVAvYlRqdzN3YkowMWx1eWM3UUZCci82Ky9VUWsva1p1RExjRWVsM0c3Y053Y1oxTnVVZWtiSVAwbFFLd3Q4L2trU0NjMys3RGVydG1QNG5aTzl6UjR3N2RKK3NwaTNIUENmbDdmaEYrVndEUDErbjBGSGlaU2FyWHZBdW1sTzZPamdHME1wL0ppR1cvZmwzQTY2V0tNcHA1NmNrT2EwRGZ2TisvVVoxWlVtWDVrbjBiTlZHV0c5M2gwbGV5TWs3YkV1NXphaHVjS3JMODJSUEtzdVNTOW41Y1ZtcFYyOWxlajkvT0NPNzFTdExaL3h1cGg2MExuOFhoclNIdU56SjBJczFEK3dxdUJBcmgvZDczVkNlbDB2RHFIQkNnZERteVMyaURvUTUxMG5mMGlSa3R2Y0lIeEZhVGhmSFdjU1l2cFR5RkcrM2pkYVdpZVFoNDd2STMyS2Uzc2I0ZnZtNFdzTWVsNHF4YVFIczZyTHlBbWxSOUtUV2txbFdFWUc2ZlV5ZDZJK1FGbkFPR0tsNTRpcjhEV2NMRnl0Qi9rdFN1bmZtdlRKT2VmeEdqRk9oRHJlZ3RBTHJBdnhQeGM5dHd0N3I2ak5xT0FnN3VNOVZiOTd2TlpSZjI4VG5rTno4Ty9lNS9QV3IxZjRDcStDSFUxcUNiRGREcng3SmNoenJEdGcyWWx0WnF3VGxQT01ISklYY3RjNVVydnVlQklvV284bGZQV1lPQnpJVDE5akdEaVhaemxFeUk3TnhJbjZPNXZJRnRiUUp3bm9kL3FzeWcyNWF3eVFiOHM0a1ZxMGI4WGZQN25qQ2N3SmowWGE0SHNPNVB4ZThUVkxZdkdlbGUvUWRzQTFmOXc5ZS9SdTZpMWpDUHVNdzBsN1creXZEZTJ3UC9mWFRka01lWXV2OExLeVA5RVZ1Y2JQaW5hcmhaK3M3amV1eTVyS1ZzNU85NDBCV3FwZXpybCtmL2lWdWRYOFlLcU1iRkZkdTJJLy95YWVXZVI1TGNzV1llSDM2QWFPS0hRTTFyOHFuNHU4bmErKzE5S1l3R1JYTzFORXNhbVROVGlUV1NkTEhPWHkwbmcwbHJOOEpvNlltU2l2WDVkQ2FENlBHRE9hNSthekdSbExjMk11VjEwam12ZGV4ZG5SaU9hc0xFbzlZMmxHcjB1Sk5kaFZQbU5IN095WjM3dytPd2Y1ZWRhUmwyb3d5Nyt3bHpISnU1MUdLRE0wRnhWL3Q0eTlKZDgyWTR4b2xWVitPZ1owQVpOVmQxL1JvODdYMFJtcnFTM3dlMXRFYTY5RkQxbG81cXZOS1hNc3Q4RzMvUjNmak5UWWdqaDVDNitJSjhoa0ViN1dLOXNDZjhlYXgwb0FjenFibjdzZTdlUmg5L1F6ODdJL3MyL0syaWJ3bllYbWdzZTJUZUgzUGRCYXBYL1pyT1NmNlVkZm1HK1ozOUxTMHZ1NnJxelFlNlNoaSswWmlHRVZyZUVuT2RROGdIMzVwZldKK3BzNkQ1dUdrN1o4aEpQVVlpdlkyTmJXL2Evb24zUmRld2ViVmZoZllRY1Y4M013L1hKVTF4U0ZrOU81SWhPb0hGaVJXTVVHMHdIRTByVSt0T0xIZHFjQnNVN3lmSnNmbDN3VDRObDhLK3FIMG5EMnRURkRLKzdMZFpBSysyQWhQUUt2MWt0ZHBrVldGdVB4eVZpRXlYQysrcG54RkxvOHJGMW9zLzJVbktQQ1gzVHc1MFdmUnZvdHFFZU4rcDB2blJXc1MzTXFyRDNFYVVTMVM5YWhWWmU0VzNlZWhMVTRCSzI5a01iODNoeC9jWTB1KzFiaWNWRlpUblJQTDUvYzFMdXdab09VTmw1cGV4Q2RKbndOcFpET25hL09XTGNlTTJyeXJzcG5GeFM5REwrNkwxL3VtWGlOYm5TMVkrY01lYjZXZDBYcXZNaGF1dlFkUDB0VGwyTXZjN2F1NkVKVmpoemdpclNNN2Z2SDlER1BtblBxQ2E5M1BXL1pLR2lJdHF2LzJsaVVQYjZ2MFZvZDIzWGtyTm42bC9sd1VQTCtSZFFQcjg2UGp1UHI4djdzTzNFZEsrNDc1Y3I1ZDI3alZWSWtwTGJZNTFialNlSkdLRFUxRnltNnZEYTBJL1hIU1k5RTd1TnpmdDYrV0hyMDhzbkdpZm9IYVozWTBrYVlMWWNUOTIxeENDRVdQdXJ2N0RGYTJHeS9vK0IzNjNJUDI5TjJJU3Z3ZmJHNm0rdnlxODMyNEw0TFh3ZWpua3hkQ2wvWEJpTXZaL2wwT01HOEUyTDZXQzZhK0wwTEdBZmt3VXJyYmJpS1ZZTGRzeXI5MU9FYmxVdXIwczlUeE1waFhVaE8xaVdmQWxvRnJCbmlVNzZIZmttTGFjaXhKN3oyOVhuZW1iRmYyTitxbnVDWCtHYy9ickYrNmFlNGJ4M3ViQkgrczJlN21rdkpGMWRpUHlmdmhQd2lyQ2QyNUdmNXArYmlGckdRTS8xelhvdTNmTXd6ek1qU2VrQ0hGektaSzNTbzZoNFNleFYycnJqSjZzODZzWnFTdkxoK1VlT0tzSDVoc0FFeXgycEthM0gya3RqYm02SjZ3dnJmS2xLakJrVHNKWmJrM2hUN2F5ZnY0M1ZabXpyZm9mOXU0Z095d2dueW9FTG1ZTFB6akdDSlBLMXI0OHZ3dUtmYTViaWxLNzVCeUtkZ2locnBOajI4M1I2aCtYdVh1V1pRZTRiUDd3emF0TmV3dDU2YmVGbGwva0tSMHdIeEYycURuVXlLYVdQcGttOXo3azRhYmpPSDdTWE9tRWZ1ZVE1MmZ2QnREdkNuT0l0aWNaRDRLdGtuQSt2eW9ycVRoaysrT1o3czhUdk1zdTRQODd2SkNlcmFJSCtvVHpIUjZ1L3YrZ3A3M0J1UmtGYjE1QXJGUXFEeG9RNFRPRU1TNHdXZnBuZ0FXOUVCbXdwOHJHMTBmMVlUZGMwK1BiOFAweGRnYmVGNWJXbzV2TTE0OStnTTQ1U1RmRVVVQURkakJUWDhWL1Jjckl0eElKT2dCdU1jYStYYStia3lSNndYbmdCblFPdkYwMmlDTEZGZ3NVMTFyNjhNNjgzRTk0L1AvMVgvTllrSGZNVEx6dVpuYTBKM1ZXQUE2Yk9HREprdGhUdm14aVEybXVBMVR3eFdnUDBrT2RZSDMzaSs0ejB4clpVZXlYTlZWVHRZL252MGZLMUU4RDNzWEZHSWliNWE4bGhtSnQ0K1oxY1VjcE5WTzB0TnpXeHUwbE14Yllub2tkTFkzTlFuYTFQRHNwajR3YXA1ckE0Mzd4RURPWThweWRXNVE5YlErT3IxOCtDbU5qc0o3TlpjVjhEK0xIdzNOSmVXdkcrcENRZnlMY0RiSlBoeExlZG1HcGJ4ZU4vV2hCNGRYMkJwM1NMdnBtTkNyUW5FK25hU01FRm0yUDFmaUQyMzdrR3hKamY2VlBqeis5cDhZRFNuc0lrSFJiN2pYT2F1bGIrNW1hRVBkdTAwWCtPYm8wWk82Ylc0RVE5eWdwdjVCclY5TEQwcHZsZldFdGZYQi9QN0lqZThjYjJldzdwTXF6eHpHb2VZRElQNXNxTlE3RlI1UGwvSndzdmk2bG9YK3VycnRSaHRneWVUdWRSd084cWN5Yk9jOVlMbWVuaXRQN0RuYXZlaFVnYys5em1BN2lHdHQ5M1o4RkRXNzcrdTU1MVpvZnUwNUprRDNqS3NTWVc3VmwvUEdpMmtsaTUzVEsxSE1QcytIZWUzK1hXdXIxbDhSYlpSMmxGRk5YTkViSE90U242RCtVT1JlM05IRGdITmMyZFdKVTlZbEdkUU5uVCtDbDE4K002TnBjdmc3MTNTdkJLRnhJSEF2OVB3b1lobVlJOWxFcThWeWx6MzgvTll2azhhRlJpWHpScVY0anZTU0UweHY2VzVGQzM3cU95Y0RqMjcxM25LRDRyaEZ4RDgwQW9uMFZ5VXRMV1J4UHE3dXEzN1pZcTkwNnFNZVY2Y3JlY2l0MUdKVU81d2N4cEhwZmlKMk5ZR3U1UGdSUlY2SVQ3amxkMWdKazRzZDZDV1p4VHNIVTU1eGJvbjV2VllocHUwUG9uVXdROWl3RW9hRlQ3OHRLamRqYWNoUC9TZ3BzNE1YTzNZb2JuZ2FTMUhma3RxRzhwbjA4S1BUSFAzbUFyenJlUUo4TXlFbTBFdDJUVGt5eHhObDBXbld1M1JKUmF0bUNGVEg1UjVnU1FQbS9BOWlMT3o0TjhtK2ZLbjROUVlGNGtybjYydG9tTVp0aWptUDd5eVh5V2Q5aWJLOVJ3QWdjUWFZTDc0dmpKbm1kcFZCZllWNDRpQXJaT0NySzV3TFFqK29pNlh2T3FNSHhGK0NWaWlrd1RxUm1nZGdySGdUeTYyaTNRZmNnd203QkVabW9LYzBQbHNQaXQxZExqcWoxUEdOYnkxQlorUy9EYkpOMnZuRm1pUDV0NGFCUTZwaUdCL3pRb3ZrZUJDVWJ0aE91VFJOSEoya2pnNHlycnNUMEVuNVRPRDRGejVNeTN3cCtGZ1crYVNQRy85MllrL1haRlhoYzdja1BtMUdvUkN2Mi9uTDhNUDN5bGJHZ08ybkpGZjlhTUtCZDZWcmFFTWNudllHV0FrR1FzZS9GcFREWkY2SmZFWUdDenBnVUI1ZlhIL0R0c3R6b1ZOM2NSSnNqVzBkcUwreVdiTnpwUmxFbHNEdjl2Nm1zMVR4T0JVc1grdzJlUGU1QkR2c2tKdXFwTzlTM05RdnNCM2k3VTVTWUt5ZDhSK2FyTnVUeG9KSE9SWUM5VzdxM3FmQTlBMTZGMnNpMmdOTDhHZ2F2aDZHemhjdFJySlM5K0NXODVwazlsYWYyTXVPeUhZQXptMkI1dTZEL1U5dHE5Um1hL2p6aDF1Y1BVc3FGQXpDM25kWGF3WEFPOFIrT1dLWUx4MThOa2d0Y1BFNzA1NEU5U1B0dEtYTjFaeVl5WGtKamY3d0hmVHlPVUJqRnppdzhIMkR1UzB4eFIvbm1MRllEdUJ6TG55VVRBRmJudlRWekZhN2JCOGdod2dqa2NHaXlKdmNkSFBZYm5xSE01cTNWWjE3QnZtZzNYdE9KSHdmT2I3YkxHWGVONFVsYVNRYmVmNlRsc09UUnNtR1phOTA1QzBNN3BldzNnRVA0RXRLb0V6WkhibVdTNzlaNytUL2p0bFRmNFZYZUt2ek5FaTMxcG92Y1FkbmVtSlE2Sy93cmtXTXBmb0VJMTdhdGlaZ0VPVXUxZy9LSGc0a2RXQk14NmM1K01WL3FEQWliRXQxZjFvLzJXYlZSamdGZTE3WC81ZXF6T0Q5OU5ZSXFuL2ltdStJSkF2UmI4Ym1tZEI5NTNVZnFpbmFVendUVWtmZ3BIdnNBVUdFR0FzYnFDWGo2aGlIVDAxTmNDTDdVa2lzemZIYXZyaGVWWE52VDFXTTNQRlFEenJ4djFsc1I1a2E2b01jYXp4N0NvTjAzNFBOZnRMK3BERzFLaWY0dk4vNXpoT1YzMXJZMzUvYlQ4dFVRM3NzYktkc3dFeTJFd0N2ZSthL2o4cThiVG8rVVU3czZ4akpPK1JSSGxyYXZJNzFFclN1bjJzQzlMNjNOQ0VWbTVTamY2SlBMSnBuZjJWR3YrZHpTcW9odWNGL3RvYjY5THhkM05YNjVGYXpxcm13Mi9YajFVZmFPWXFId2lRb1IwNzFvak1jNFgxa2hiZGNjclMrOFpic25ZQ2JZbkhGaldpOVBkaGlWTmZxM1B1K25QQU80UGFYK1FBaHRvRUdheWF1QkhCTHlpd0dRRGZ1dkJqMDNySHh2dkgyOHdoTVk2RG9VK3dUdDBoV0k4RTM4S0ozY0NKeXZOSTFodmJRZU95NWhueU1xeXI5SVBYRU90a3dzblVyL0duTXh1bjhvbVVHQk5ReTlwODE3WDFwM1lQeVN1NjdrL2xGNll1TUJhcGlTVXhQUEMzRTkxNjN1bE5KSEVTT0ZBSDFNUVJxRER3Q3ovVFlPdHdLdUZoT2IrM1NTMTJVVHNlZWd0U2syOW9TdmF5T1BqWWhzSjZEL2tHMUpPQ2JVVDNvY0RjeTdCZTcya3FQaC9QZ0IxT01OOXJHRlMwMThYTkdLOW50ZnlrWnVzMFBVbW4xNlZFc0FSRkJqbVJDL2xiTGZ3UXhrbGlZcmY0ckNzZGVjTEN2c3d4UFg2VzR3WDdETmlhOHgzMTIrd0lCbVREUjl5bFB1SzRkbjljNHM3U3VOMG5jNER6NGVROW9udm43WEcrczdFWDk1S3pkWjBHeXpxSGRyL3ZIVFJQYk9zcjlGN2tlWDRXaTcrM2RxVjRyN3gxb3Y3ZUhYNzFlU1V4V1pYSS96TWU2TEJCTUZ1djJOZG96cGhyUDU4dDNjalUxTUE0emJ1dnorN2FXQXZJZkphTzVscmlqSlBFeWljRnljc2dOSmNEMW9qbVhYTzlPcjQrSzJ0RGs1R3huQVR5R2dWR0pFVHlLZGdZN0lkMUpOaUdpczFGYjJOcEx1YWZ6OVlZYWlKYWNqamtyYkdVR0htOXpXZWF4TWphS0RmWGczeTJsSVBaTWdoZmx5TjJ0cHdFcitMczhQcThPc3lXQm1jdUJ3ZGpHYURaYVg1NlhRcVIrYnpxeWN2UjZWVWJjYlBuSUhyVlpnZjUyVVV5TytwK0ZPY3RjbGpwM3kxNTN5Mll6WTE1VGo3Zm41aG5iUEg0UVU0L2lwWlJ2N01DZkVxc3A5N3lUdUIxMEtKMWhXbG5aQ1pZMS9QQXI5cTUxeVl2OWlvM05SZmJiSGxiN25BdHozZG5uUUxJODd4bGJTOXlTTzZySHluSFZzczNPWXU1RFk0M1BOK1NsOUlqT1NtWGZzSzJtcHNiOXVSNlR2SnNPZHJOUHFZVlNtY3l5VGx0ZVErbFA2b0hnbzhEOEh6Qjd6QXVNRXV3dkNRMVRkNkMrZ0dxUGo4N3dJL2p6dnBoaE1TSFVOMVhqQUYwb0JoeVljVWdJN0lMK2p6dGFXd2xsVVRpRDcxNGx1Yk1GbjRPOEI5U2ZGZXNONUxjTitpOWd1eDRubDdvNnlSZmhOb1puNDMveXI0M2U1QU92VldaUTNiRkwxTmhQcFEyZm9mbThCTDhYQ0p2aGtGUXQ2c0pWajdXMFNCUGdkWVAxOGV5MmQyMDUweVZlM2FsdGkweHdJY3BQV3BNSjVYTzh3SFd5Ujl2VU5kVyt6YWltQVByYlZpYzJSWWMrbkE2bkpTKzZIcU5YSlZyWHVXRUFVYjZRbnFVSW1vcmhvZlFFWVVjcjQwTE5hM1NvOGN4L2JxdkMrcjN5RjZSK3U5R0Q1YkNyOVBmRlJnODVxTEMxSnJUUGE5eTZWZTFuaEowN2FEWGhFRDYyR2dNNDRwRUo2S1lDQ1EvZzJCZkZOajlHMGtVSXBmRWdjcnZUME5lTnhmOHhzNko3bFQyRWFVNWtnN0hCMUMzM3ZMOTZaRHZtZm84bGNieUh0dkdaY3dBNGIwb3huSitYUjFhUlIwejFPR1hXRU9iNlcxMHZhajZGMkc3QVFYTzFWd3RuaTkvcjJFZG5kTTYxb1ZwRFNiQm00QmN3cEtYYkV6Z2pVWGZRUVg4Y2RpdWRJdStVcVFlRy96WUx2aVhNTjBTdnkyaG5TNzQvTXhZVGFtdmRtUHFKckxGL29INmFacCttM0haMTJwZmEwbGV3MXc3dzlDUDFRN0JiMUdZQWlmY0Z0Rjc0NWxtVDJEZktHTUZpaStKTHNMZnJOVlo3QXVjSE13TFRXeGJhSWRMSGtFd3d1NCs2NzhncitmanMzUDMrQnA5QmttdVE0dCs4QkYvcWZuSUtoN1BudnNQNm5LbmV6MFhURHlTdWo1Q08yZHpoUmhQQWhod0l1bTNoVzA1bSsydG9iYVc1bkFVc1JVWDYveEM0LzkxSEo3UTFHQitrRjltZ004UTg2dEJkb2JabHhHNUpQdkFnN2dpRHRGeXhzN21RbnBKR2gvbGdpUjJYdURxeW1DTE9tUGxWUFZaVUU5VHJZR0JXOHNYZVZvM01PNm9YbkVuVDZua3duVWJkR0tHUE0wTHJ2WURmS3o0M0lwOXhoM1crcVBTODdMRXZFQWJGTGd1cHhLenJlYjNhRHRqWi95NjNqTzFKa2ZJR1hZaUZjNlJxYzFMZjVVVFVjd2FrY0huUFFIL1pTMVdlUDdOTW1kbnZmVy9FV08wcWczTTVTb09YT3ZaV09nNjdicDFjNHlyMnZuK3ZGYXpxazlvUDMrZitBNCsrRGJoNzUvcHJrUVB1MzcrNzZiUm1sL3RBMnlSMFFqTHhKMUZjcGJxbUdEMUhvQ2xqNWhpa1cxTXdBZm9rNzRPbHpHN0NpLzBiSjBLdmxMM3JlSjNXQlZHM1VYUElvZFRzd0tmdjUzK2xiMUoramcxK3VJYVRYOTBZejMrUTNqTXU2a3B3VFFTRHBaYTRmcGMydHNaTXNYUnptSDl2YnNXQW52TWI0M2w2Q00vQTMzdmwvTkU2ZlB5M21hUDBGZDRKYXE1cGZVM3pUekcyZUdqZkVtTFZUZkc0dXM1cHZUNXpOQ0RoYW1USGgxbnZyTGo3SWJuTGExMzlmbFAxeURtOTdTL0tlbVBFcHVCM2ZRSG5tNVlBM3lXT2pZM1FhclkvK0ZFQ05zSWdTMlVlYTdQdE9ib1RsOVhRUmR5Z05kM1dlQUQzNm83ZlRodmJQdTc4ZlU0NnJYNVF1emxndGNwb25xd3hYNlA2TEwxR1BmSU4wWktBTDBGa1l4Y2NRQTUxa1lqNzFxNU12K2Z3MFpvNHpmTmNRTFBIeG1hbXRsc2J3bjZEdGdyQlI1aW95Nks0QWlMcEc3QkhmSmJRemVyUHJTa3p4ZmtzbHVhMlpQRVl1eUQ5Wlc1Sldha3JqMkN2MzVaQXhYenVhbGltaHFFcjNFYW1ucUFERkxiVk1YdDE0a3RoWDNPMEZCbnFzdGJWMWZnTEV1STZSZTFSUXVOQVV3d3l1TjNaZDRhN1ZkTitLNjdOYlh1MVg0N0pJNEg4YXlOcVIwUnlkVXZzRWxCdmtTbUp2Y01GdXNVVUZQN0tBa2x0akorRHZwOWt6cW1nKyt5Z0tNUE5ac1FCeUg2ZTAzblVwQVRNWWxOODVVVmJvTHR6N21wVHhLYlZaYWtaN2xTNGluUFRvRHBqOGU4SWJtNWc5UHNlWkJLSXZGZDEzcS9iSnhJU0NnTzR0NE1tMnNDdVZRa3p5cXlZRytaeEk1SmpvZzBLdnZ0QktXTngvWjNka1J0L0Joc3AwME5xd3ZvcGNCYmhWeStvbGUwcU9hMmhuWUVvOVhORFkzWWhjU25NcTl5U1RVR1RVTitaZWM4TWlPVDJwWnE2aTM0RHZRSUVvV05Hd2xGbm51dEY2YUpJRGNzV2hXOWpaNXJ1Y1oxM0Z5SVpVSC9LalpnWEZIWnUydzNnem8xRGZSWDJMZTZqVEJienc4RUg3Q1dvL0k4T21ENzVVcjlUSXJYMHNaMHhXRDdkSUpxbUM4ckM4NVlBUDNXNi81TitRTWVaRU4vMlI3V25lWk8xQS9OQlltektLemFJVFdhZmh0K3k5YlVoTlFWZzhlUC9MZWZ2UHVpZm02MkhPVHlVdm1BaHgveG51MndEcmNhVC9aR3RDSXhwNUdMM0dHdjZCM1Q0aDhQVnFvdytFZ0hhRmxYdE1QNmtLRWRSNloyRER4VlJxQzdqYy9yTmZpN3h1dFEzV0JWbmJHbWpCYnZXcytUcThsci9INVZETERjM0dJZDVQWTZrTXZ4bGZRcVhKbnZSN1NrQ1YxOEZzMFJsdFBxem1IVmFUditENUZweStMK0llZ2JDUEQzeEF4NUJGTVcrQy90MHpBMnRmN00waFUwd3pJR01CSnBmSGs0cTl0VUllM1JHbmlZMzBSemtsdDBrZzZ6NVdZL1cwcjcyZExmRXp1UjVFelo4VHdyOG5VZDZEbkRCQWI0Y0dVOFhsTGZwdE8rVEpxTGJQYVl1T0lxbjBMK29oQVNmMm9yVGJYMG5aN2ZHMWVwOVYzK3lubXA5VnNXKzdrN3VvWk5WTjRYM2ppV1dwOWxlZUZxUnpTTjZuYk9zZFFsN3F2ZHFvMjMzdnVZbVRDMnVQb0pqTCtQMzF2VVdMYm1QWHk2RnRmNmVQL0UzTytzMTEwU2ZSUExyTWxxQ0hVMHBmOEVaQ0FiSkFicjEvdjhucWFhMmdXYUVCdTlVNG52cXQ2MzkrdjFwR1dPS05RZDBWd1BPRWRWajgrOTFPajVpZzdYZGJ6VzlVay9vN01LYS9TcXI3UGN5L282MVB5ZFYzaGQwWC8rZzM0aGlQb0UxQW5sTC9mVVc3Zk85Nk9hNStQc1dXTGtqK1JIMjVnSlRtQ0x6S3hqM1U3dUcrZW5QZDN2cTJ0dkczZlZ2LzduYXVZL2VmZVg3ZkZQM2x2UTNNTFV5SnJRR01qUDBVZHQzY0dQcHNzSHJBL2ZXUXYwU2EvL2I4R2grL2diOFFSUkRLM0VqdHk3Yk9wUDF2MWtjSlBBRWRXbWYrTE0vcDZkK0EveHZ6NzVSc2ZRSjdHcEszVVplTE5jc2JRZTcySzdpc1lmTDNVdlhyYTBYbUxyYWlhSkFtdG9LS1Y0OWdlYlZZcWN0c1FPK2JuTktpTkxsM05YSjc3RGVheHVUQlp5MVVhbVprS2V1cWtoWXA4UDNmTnZ4eExlMXlHMmN3TFZqdXJmY3FDSEtlbjFEcjFMcjhTRVNIMnlvU205Sy9vdXFlMFZlZUozMG9STnBXZkxQczBKWm0wV2JTUXhTNGh2eVFIN0QvSlFOUlA2QUdBYm1HRElrMjlkcTdtNDVsdStQUi9ucjhkU084ZEthNHZydC9oaTkwNHVQVXJSRWR2Y1hTbW1zaER3Ry9oU1pwTGNpTXRjL1NxV1F1cjRwZnpML2wvb1FlR1NHdkRNMU0yRXhsUDNCbUI3dUx1cHp1L05JUU81d2RPcnNyOS9NS0hYMUJIQjJZczN1M3JlKzZvRjIvZjdjKzIrTW9aelBKMGUxQnhwSjk1dHlSbmlsNlBEUjN6NUlpLys4eHJYM3NlNHcvZmxVWDNwKzJkNHhsZnh1TDV0elJzNHlRMWV3OHJMMVdsRzZnRlhwQTgwNUpmRnhCZFgrTXNnUHl6RnoyRythSkVjM3NpSitwa0UvWDM0a1BUb281aWRJcjgyT1dsbmlpb0xmUk1nL3FZR1RqVGZPOFFXV0J0WDhxNXRqa2RZRHRtaUN2TFFXelRxdTZzNjVCVThoN3p4SEhDc0lVOExjbzNNQk5zdjE3QnEybkNTN3R2Zkw5dXRMZSs2SjlmVTRPVDFvR05vczRPOG5IT21ObWRsY2M2OWFsTHZWWnozWnV2UmFYYVNUcks0WXVWb2xodW5JREEwQmMzWTJkRmN6N3V6WnhTWjJwd3hOWFU5MDh4UVpvM2ViQzJGWHgwdlBxYzJlNFM4cnArbDM2L2tpMTdTU2VjNFhVdk1kRDM3MnB4cW1Lb3RmS2lXdzlsN2Z4MkRmZmZGNzF6TFo1UU9zL1g4OFBvOE9rMDFxVGM3elU2ekpiLzVVT2U2UEN2WE1Pb3Y2NGZ1ZTI4Vnk5WHZ0T0ZqZm0rT3ZqRVhwMFUyWDdXUDRkdDN4bmcwcFc0SFF5NTduYjlLSW9OY1VkZ1l1aEpjL2Fid2k3QVZQc0RGdkJkZjljclljNXNMc0Y3YVdkUjZhVndadDA1NnNVQjlXdGxuc05hRG85UkZIVmJkRlQyTW5FaUl6QWl0NmQ0R0Jwc2hFbXNCSE1lOHVNL09yOWNWTi9Xcy9pVWVOS2ZrcHJiYWsvcTBRZ2NyNmlCVnJJK1ZXQWdscGd1dFk1aHFBYWxGajYrdHN4cGl1OHNTS3I5SUM5WkhaU05YMkg0SFExZTJTODVFVGp4SlRMR0pIWG9McmtxWngxckw1Nno3dHNBMkdabUtNdW9XL1lob0hWVlpHMWIxQ3EzcSt5TkxVMU56MlBYbmpYNmZCNmp2Si8zOWlod3R0TVA2c2EyVk9EL1Erd3ZPWm9YalUvbFJDRlpDaVh0UnhxcXdEakJXVDJVdko2ZzFMM0ZPa0RSQzgzcE5YRlZiMXR1YmtDOElPSjhia2d0RmM0OXVpeStXOVhKWDhrQkpUMkJkM3E1cS9zWlBlelNNaXY1cGc3aUZQb2pOU0dLNnQzN3puRmF1WTVDUzNoeDQ3MWxUbitSRmI2Wnl6Y1k4WTBUSHhHSDlPdllzNEF0WjBCZEwyVXNqaG5Gb1g2UWZEVnllN3Y1SDZmOVQzOEJXWExicmJVQW5tRDVxY1pPeUg1K3FiUEcrV0dJL05jOXlIejZRb2FDblc3OG9EdGMyM2xyY3JLaVJxc1dNUm9mWmV0WDUrbmpCN211MXRSZUNzdnJRbjBqcVVwSnZqOFcxdlRmbWtSTWhJc08rNVgweVEyTkhWMk94SDhYUDJ2YnBaK0p4VG9FeHR5cXhsMitMQzhhVVI0MEFVM0pTMXBTTzBPR0RITTZob1UvUUZITDRDNndBR2ZQTEdyYXZtUmlMc21mcWljVEVhUTNvMTdITU5xYk9wemEzMlJ1UmtKdjArOU5jWmkxdGxHRytNTldDdmNQTnEvekplci90U2pad2tHTWVIUU03U24wRDZqY0Jsd2I4WTFpZU9EbS9zL05hM3o4UllpaW5XazVFK2Q3cHFoMzNDSEIrRm0wNGNtcjlQWmZZUGVkNUhjTk9WdkxmSVZQRGlEWlRRM01LVEkvRUR2bVRLd283VXhSeTZOVXM5aG1UNU4wenpuam1tMklmT2JSV3dkRDVnejNlWEtPbHNnOEIwQWV0YVo1RzhzRnRPZWV6NWVCZ0x6NCs1MVUrRU5hNUJjYlU1WTZUOXpKVFkvYXR2U0RXbThOUzIzeGtpNXdNdG44d0YzZld2WEx5R3RzQm4vbmlIRmJlTytMcU50OTZFMk1PeTZEVTBwaWt3RFU3d3cvcTJLZWZ3b1VyNWwydk1XbjJjbW5IUlNKOVBNZGsvblY3LzhleTQ1ZTQwR2Q5a2x5MjZqbGdrQjZGMVZ4MXdLNUEwdGdGWE8wNkRoVDlIZXN4ZTRkZCtXV2ZETm9iSGV0YUVLZWtmZTdiNTlMMUZhcVhGZjA3emFpLy82Rk5Bdmp0SEY5R1l3N3VlSk5pVzhiUU1BK3Fqd3Q2VTllL2M3cWlLOVZpZk45ZWExSEZlSWZudWx3Vlc1WUVHWkYrajlmR2hYWmxIUFZzakFhdG5UK1BUMS9QODZ2ZWRXR0RsbnJWRmQyb2htWHRqS0VuV2NkbVpYcitXblBKUjZZbXA0YmV4RFdCL3QxaWY0M3ZyM1RpS2xZc2pTQ25oK1FZd3IvNUpZbWRLWWhpb1JSbkdhOGQ0MkE3alZWQmozYUtmaHU2bEJYNE9wWTJ1MWdmNGg5WEVPVFIxM3FsRzVHd3Rsam9JMzZvNXRmOXhYRnk0VUR6WDBuZGdvN3RFV1Z2RUY5VUMzK3Q1U1hVTWF1djhTc0JjTUEySkM0RWZlOXAvRmNDblFINlFXc0hmNkVPZ0Y2bzdWSGFhOWlPTCs0NTQyMTFHMmxGY3Uxa2dpUERHdmplRkdRWWlkM1NHckVhanRPNGxrTmU5dW1tTllubmZYRVhYUjl3aHNYK3ppQjhxME94a01wZXFFV3VEK0F4NjhyVzVsVEEzckJGdGQ0N0hLOEY3WU5SN1h1ZDluL3RYc3RibXlWNnhWUkhlMWVYTXB0emQxTU5IYVphWlN0K2N2NEtHU2dCRnVlbjloeVpJOUhQUzN4TjZEbHJoM3hvYzRBTDA4NEw5S3J2eXVmOGszNXZSZlM5dThZbHpFZ2NXRlIzcFA2cmk1L3RXRmY1cG5xcTdOSHVyZXQxZysxNzIvY29adm5HaHV0Z0V5ZDJaS2F1cGdLMlNHdnRxcWdtRklPTjhKb3JmWGFxbXBFeUQrQWUzbHlUT1hmTisrYXozbGlIWnExbURST0lvZldZamZ6MUcyUndKUWNXS24rdFZuVUdNWGRZVStKTGFmQXVVdS9iS1hHMmJwZkZGemxTdjZJK3B0cXJwM1Z0dlROTDUwK2Y4ZnZxL3VPcThFRmV4elF0OU5XYWJLMzFRQzc3UDFaK3VKdjFGUmZ5dndmaGt2UjVEQ2tPSHRUc083R0pwSEZaTXpWWmtSclpvdWMyK0NUTDJtbkNneFAzUGhuYk1YVDUzY243Tko5emxvRjlBNWpycEthM2xJdGh2K2g1bE5YWG11U2VNbUdaenhVK3JSMkNzWUgzWm1mbURENFArRDJKcWZVNjA3SUdqRW1jNFdjMGZGMWYrd2Fkc282N2RYMlBvSDh5MW5mNnViZW8xNkhkb3YrVnVOMUZ2OTBONEpqcms2U3MyeXh0bmVQZTFlWi9vZnlzcmExMjNCdmFQRE1pSVRVMC9CN3BNOTVZVzd0Zm9jUFcxdmEvT3V6Tk9teE5CLzFMOU5uNlBmL1ZaLzhqOU5uNnViekx2M01IVDZ1ZHR3bXlOVFhEYTFER1ltbHZoSit3dzBrUEdKSG9VN1U2M2QwOTlGK1Q3NVBWdGZ6Q0Vja2p4VFJKK3ZiY2tCdCsyeHBoblRhbzVRbitpdHIyYWoxenVhWnZNSWt6dm85T3ltZUZRcWVScitOb0ZkamFOZjNXSFU4Q016SVRJK2NQeFhPdHZQd0RQOG1LWUdUdXBlRmtSdnIzVSt6TVVwZW94VHNoSHRpSU4ySTVjSEoxZ21WSGNWNDZkK21jbkJJNGJIYWFzc0lhOHgwblo3QmNTd2xtTU5yYkliTXVzTmVuYk5HYmtLbXZlMnF6d21hcVZiMjlwcmw4Z0I3QXNFLzRYR081eDZ4dEVTRTdubWNsOW9jR01ZT2JhZHZTZWRIUW1NUW1tREhOZk9oOE1sbU5qWTZFV3VzZW91cTV3ZFpjUU53VDdwOE80Vy8yWlFHOVdoS1Q3VFg2ak56SzYyazlJSW5qQXQ5V1Q2NVc0RGVSZkViQTc5VFZqczB5SlBkTE82YmVndVNNVVJ5WWNxM3JQS1hFY2lkeFNvSnRXcXpGR0ZHYVJYN3gvVjloYzVoakZlLzF5UldGdFpVL3JldjIvUjFuTG5GR1ptQnJLUFhVNjMya1YvaWNzMGUwNHBUQVlGTXFzeWZJS1REc3lqaTh3bUJkM0NIMytRWXJIQXlLVDJacEZRN1J6VHF2d084eERVQStMcFc3Qlc3eTJaaFMwQ0UwRXprYlBJYmprcXdMeUlnU2wxVEJheWJJSFVPVDM2Y2hMMEord1hqbUd5STZLSkdRV2RveE1YWEFkY0Z5MksvckxzYVEzNWc2ait4b0RyNE1Fc011ZElFSys4V01FTExGK2EvZ3N4dE12MU9kamorWGEvTDhIdnZsck81bFUyQ2VYYk0xUVNmMzZ6cDVnVlZ5TDI5Vnlia0tJWitJeExZYU5pVEZLSVllSTZTK0d1b0phellkbjlnNkQ3bGlkbHppd2Uwckg0eXdLL0dZejk4ZjF2cHYvR0lmd0tVdCtpRld4bzM3OUlIK1BGTGdMR0pkM2RUbWp4ZjY5Tlc4bGUvYnQ3SW12TWlsaVRDL1BWSVplRWxEWjdZcDlOSUdPUVkrUTRMRFJPcUVabGp2LzlWNkM4ak1MOXFkOE95OGZIYXlwTEhYaGFIMTRxdTFpcGgvd2w1aVdpOWsvZDF5cnVwRnBrT2VMcmJ4bnhjclpVSHhIR2tPanJEekZueFpJMWV6b2NKR1g1cndIdnFFZklONUhlLzNnL2dxK1BRb3RoN3BBMEpvbGZaMHVaQUpraW9vODdwOVRYTzJVbE16TzVLb1pzNVk2WlY1V3hVdG5mY1pnTDRlQnB4cGZnODFOUEZrYnkrYS9jQmNnbGxOTU0vSHBIYlhnVDZvcTd0MGZWTC9nWjlYVHRPbzhwbC81NXFzOHJxL3Yrc3ZOTU8zUlRVQ0hEMmQ3M2lMUTFFN1d2VURhZEpQOVMxTU4yd1BGWGdTSlc1SVlUdHA4OEllb1hsSHBEYnlKK2lrWTVEZUlPMzFuL1Z2aWFEMzB2NG5CQmUwNUZXQzh0eUllOFFVcDBJOElqT2VWM0hrczd5L0N3d202QmtqRSt4RGZLL1d1WjgrUm1VZmkwZHByS3lkNTYwdkRRZmQyYk4vZUEwQmo2TTdHMzU1dlJoei9CM3JwWTcrTTlkTDNkRDFZbWFuclQ4N0RRN3k4aTc5bGVLTjMxZEhldVZkSjVQR2J1Yk5mc0N0ZHVjSzgyc1c5QSt3T1cyU0ozMnZUMHAySWU0eFFWVXNhUkF1by83T1hFZ1FONUkyY21wcDZzN0ZNanprRXhPZW4rK3d6S2NZbGlkcXI3N0NXUTd2OGc4Um5UbUNHTmYrVEQ2eWxqN3BnTTRKdGQ1Z1k5QTVNL1U1MzA3YlJlOVNnZkRJTyt0UXI3Mnp2U2E2NkRkRTZtM3UzWmRSSVJQck1ybkFnd0hmNFhXYUFweHA0MWY3WjdraWZ4WnllN0s2bmxPTmhZR3gzS0IzMXV5ZmMzMGxEUmNxejhyRHlZV3ZhcUVPZkxQMjNJdEllaUdSK3cvazc3QnBiMWQ1SzdVWTFrZTZKNG5MMGx4dzhHY3hEcWZTM29FMUhFa1IrdVJtMkRZM1dHcm5SOElKWkJpMjFjdjRVVnRmYXFIc3ExS3pCWHRGSE00WVZybm8zNzZuYk1ObTNrczFHK05UM2VQQzU5RENyNUNjMkpHYm1pcXhHMmt1MmNMVUN6eHVwZWduMkxBdndVL2VxSWU4TzM5a2JuTjQzeUVXelJaNkt1bHQxaHpUZE1qUG5VaU5USDB5d21PZ05qM3d2MVdrSGwwTjVlYXFidGQzZlFYc2JPVWtpWHpwdzdBMDlXUkEvKzg1UHA4VkpvSTRnRDRmQktlcTdPWENVbXpiT243VWY2Sy81dWR3TTBqTjk5VjljdkpQOHcvTzdadXJtUFdVdG1iNGZrbXMvSStTV09LNTNobVhWazlGajUweUxsbkcwaWEwL3hLdHR4N3lRWnVkYVpIYUdzRG9MZngycEI4OHhFOERPenlMZTFheHVsck55YStPdVZ6RVBUL0VnLzFnYnlhcjYzMDFSM0Rtd1krc2JsNURmT1pXR1o2anBZR1A5YnhtNS92M0NteUxIdEJ2aFIydXB0VGVUeS9vcG1iRGdJOWh3UjlnekdXdlFjY3Y2bmFsRVpyL0pYNmR4dmcrNXM5dy82aTZmMFg5N0N2UWhhL2l0aThndHpwQ1FOTTBIK0ordVVsN3VFbGlWVU16NzZEUkNuUi9VbS92NUh4Z3g1dGEvVmJsSXpMK0gzdHYxcVVxc3EwTi81ZDkvVllkR3NsYXZtT2NDMEZCVE1HeW9iMmp5WVVvcUxWc0VMN3gvZmQzeEl3SUdsTlRjeTEyWloxOXZOaWpkbVZsUWhBeFkvYnplUm96VjNkMUJQajZ4aVczMEhVNW5OVGpnbHBNc1NZOVIrOXN6UHMrdDM5cTNQcytKL0tCbnZ5NWZXajIxZjE2SElmeDlmSE1mTVZsUi9uSDE3UWZpK1FwY3NocHpUOG5ENkdpWjdmN1pCclBoNzRmbkRPRVBhanJIbVBLOW1yZkRsakh2NW9UWWp6RlBQeUVITWh2Q3VaQ25NUWk0L0M5RjFYcVJSTVU2L2R4SER2cDl6NjNSOWFzalQweVovSS9jbzlZZDRqM1NGOW9MMnBmeTdTK2NkZS92YzlWSms3eE85L1pxWGY1UTF3RExHT21zZ2ZqN3AzZXZNL25WWE5aVTBiajdxK2ptYk9ER0thY3JZU1lDUHF2N3Q2cFZ2TVREL3J3Ly9uNWlZdWNCRDduSy96RitPZTBYd2wwZHIyT1FuQWczczBLM2JkbElBOXdwMGw4ZkRmbkhDcHk3bkltMDdDM09ENjRzbWFLajBWa3RGNkRyYmdVR3ZiaCt2eEdzOStOY0JzdWc2Rkk2dk4zNWZjVy81Ylc5R0ZwVHhqTzYxeWRKL21vZitNZm5uUHgwTm1abEh0S24xVHpUTVpuY1Z1S04xdGZoY3I1ZGg1dHFBc0Jwek1mNFVjQlJzVW5hbXVoSWhjZXI1MmcxOTBTZGppblV1dEo0Y2s3cGRyUHJ1OEZzcHNQNDNCT0g1MkhHczVXZ1VSOW1LRE1TZnVXZktPM0JmMitRSDBlM2JIRnl6TzVNOS8rRHJPaE51T09uczNXWld0Vnc2UCtvK0lob1RweXVqVUczWUhOQ09MQ01CZkdRTzdQNXRkblBHdFkyanVmRTRaQktxOWM4ODZNZEZGaXVDRjloTTRQNytjYVkzRWJsM2pIWEEvdnMrMmVQR3NhZVZ5eTkzR3NodkhyS3N4dkh2cG9VNFBnTXF3ak5SY0JuMTBkbWhtTy9WekFEa2RyRHJGZlVldGh4cGpzaFBlZHhJaWtiL29HUGx5b2RQY3U1ZVc0eWRPTi9hYkwzOFgxTmR6WGp1eWRnL3lCb1VsNy9FN1k1MFh4R2NWeWwzZVFKL3Q1Zk5WM09jY3hSM0tYTVp2NTNQU0FmYWh2dDdERUdaOFhUNzdTM2J5WjBNdTFkR0ZXR2NVVlpHM1hZMG1qL0x1NVdFQ1BnRFVsM0NONHp3bHZ6aDc1QnRDckNyelBKVFlONCtmaXpnV01ub3JYUGxTNm1jK2RUeTZQWXNUdUFUM25kYWp0a0YxeGJCU0h5Q3VQeGplNFQvWTRqaituWitvMWZHenpvUitpR1BPQU5YTUNubnA3aHY2NTk3bFFHTnRrWHlTNFkrak9MajNnRnIrNXA4Z24vVGZvSDNQOU9mMkRmdi9mcFgvUXMvOU4rc2NXMXlnK01KQWMyYlBFeGJubnEzdG40clZrcmlJektDNUZaeE1xNW9aZ2gwTi9JL24vSUYvM3VDcHVuQ2Z2MkxPVlYvRUwyYlRIbXZLaWZZb0xNcWZmTWlONllIa0s3ZWs3WGl0VnFmY05kMDVYZWEvbVpmM2l6ekExOHdCeVloVUhHZWdqaVRuZ1dlM29VTU5OS1B2RXh4WjlIOFlNcVB5aWk5ZytSVFpoSkx6enY4bjNFaGtzZXo2bTVXeUIwUENaYjJBcmliWGZ3WGwyUzJDOGVjUGZ6a1ByWE9wMzdCZEJMcStPTHduM2hXTGwvRFJtSmZldUovTUdWcVZlV3grTDFuMjRzbTZRcVRMbk5hQVlVTk1qOUlqeWdFZUoxdjVaN1BDcmV4MGkzUVg4TnNpZWZnYTd1RHhYeWJIMEg2NGxyTWNwMUw0S2g1UEJoZ0dtZnNYQmN4R3pqajY3dG9kNWhoN1pPeHE3VEZuUk5OR1pLVlJ2Q1ZQWEhxMGdUMitGU1hQTlJ2YXo3MWtndmNHUGhGYmZkUWZYOHFZL1hzTmZJL2MyZVJ0T3k3a2Z5a2xYbS9lcFkwd1dINXpaTDhwUE5mTmlEUFhiZlZ3eVlLd3MvVmlzOStsTkRiWkhPUHlSL2NYOE1yWDVGZWk3K3VqZHlCNU03ZEhtZmgvSEIzOVA3T3pDa3JNNzJOeFg5Kzl0T01zZHd6eUdOMzNKSmplY2F3bWNaNDlPRkhjM1RPWGNzK0FNeXJwVVNMQWNyc2dReFVXK0tXTklqb0pVdG56dXpQcVdxUU9QMWgxODZnZWVjd2VmKzlyK3RzYUhmMjNmS1Y4MytlZjdYSG41VFNVbUg5TGQ3RnBmTmZGUnIzMTd5VWsrTlBlK2ZMdS9mVzY1RTUrZlRXRkdBdW1COU1FOStRd3YrM3Y4MFkvMjR4ZTUyVDljTTJEdUx0THVFZFo4YzA3eThXZmR3dTl0OGh0ODlCd1VyK29uMzRiNXpkU3p6cmU1RHBJUjYyOW1POTh5eXg2ZHg3LzlPc2FwTnUrdzk1L1JCaWZiVlIzZnhEQzkvZjUzL0QrZnhiRzdka2V1OEJTQlArUlo4bjZtbUh2SFRpcmVzUXVPeEo5NGR2YU95K3dDeSs0bm52bFpYcVZyOSs0OXB4U1dzVk5vMzFycjNidjhBRC9BUi9MMjFYajgxOVowaTVPby9OMlkvdTc5Ky9SMzRQTmZmZS9KVlM3d3RpNDVDTlAzT1IyZjErSkpESE9nN0pzMGF0VGxLbXdzd205TzlaTFN0UGYvQUt6K2EzS2ErZHhNZkl5WFJiejhQWW9yc0hTVkdaM1R1L245d2YxMWFKL3JkUUtNM3pKdmdQZTRobk1mQTEvUTBsVmt4dmtndmtOLzkyLzI0d25meHdmZi9nN1hNOG9tZmZHZWpzbUNORGtSM1BsNnZ1Rkd6OEVIOS9FcWx1Y0RmSVUvOWR3SE1VS1ZuM2oySFp4UTNmcVpaMzRXSy9UUjUvNnlqY2xwWEQ3bHVxeS8rZnlhYWp5dm40KzlmcDVQN2RxMy9EeG1VR08rRGI1bEdjTDhmcktpdUNaVkw1TlkyYWgvSnBmYW5iMzVKZDZ5ajU5ZDhUdE5yK21qZTc3WkE3WGVQcTBKenMxZS9QRHpETUJnUi9KOUpQUGFnSkZydlB2dk04TkhmeHYvUkV4VGZidUlZaEgwL0hGSzUrdmJldDVEMlBmWHpvZ0JUb3UwYnArdmNBdmlQcHpMMzMwNEQwdHhnR2hkNk4rZmwvMVE1djhEYWw2d2Y4ZWYwQ0dnTTZCL2xOUzZncndMZGNMYU9nNEJMd0syOTlocTdzdjRnN3pTUDZGdTR5ckxxV09QbHY1TlAwVVVrZThZY0FhblMyemlwL29KK3RrSHM1Mkw1R3JPcXE1MTN2dVdmRlNINGpJQWpOOFo5SVdTZVpHVlkzVWdCbmM1NklQRGZaVzRudnVpS2lMd2pnUzh2bGVWMlRaUTVOeXhtRWp2OXdROTd1Vi94cjBUNWdnU1dGK0JPdytZRVBwcUZsMjNDLzkrSGdpMDFyRTEyNDV0L0wzazN1QjhrU215dm5KR1BrVHUyamZ2eFovQmtIQTdTdUl5Mkl5V3BCL3Mrak1xUHhySGpaRDNBem1vNTZaV1FXcXVYVXVBZk1GUDk1TFU1Z2FKZnFqbHZkVVQ1TzhrbHVUR1dPVHpja2gyeDNiRmpVTmx2bzczL0FoUFFmMTNhSTZtd2plY05wNDNxY1UyaEcvOWFLVG0zclhrd3AwTHpib3RzZ3ZESnVjS2pWTS93OVZVY1FHYk1DUGoyZEh0bnIvaEtISFRwRVBpVU9pWEJZd1NQUDlKWnlVeGhuSU9lT00zZThBcVc0N09WRDhodTNXdHIzOE1mTkNIUkpXVHBaL09ramRKN0JPTWdJTmpyeU5Qa1RrVUgwS3Z2MjN1Z2hUUFlsQzc1SlR6cTlnMkJxbTVjZTBJWTBGUVRNRUtDLzM5akFDZWM5MVUyT3h3TDNJVWV6MXN2NGVqMkxFMGlobCsvMHhTay9Oc0hkMGxGZm1nUGo4U0ZrcHk4T3pwVlU0Q0EycjlJenpUUkg2UDZzS3JQczVQOWlUVTVzWnY0bUU2bHI2Q1dvTDB3ZnZiOExHR3YrQlBEWC9hZC9wd3Z0d2M2Tk9HejgrWnd0Z21HQzVEY2VuWm82SVYvYzZOOWo2bk52VTdEMXgxQjVjM2thNDV1Zll5OHdsdmVham8yZGkrN05VUURxNVUra2Nmem9HYnh1eC81SGY5Ni8vL1AvL2Z2elplK3Zhdi8vdXYyYURYMXdhL3ArSHYwZmFRN3BKLy9aOS9oZDdCKzlmLy9kY2J2NDlDeFR3RXlua1pLa2FrcHZyV3NVZk1PQ1dNU0xFYWpXT3grMzI2ODk4eFRzak10bWFKU25ZS1lKcHZlbUpYMkNyVzlXNlFpdzU1MExEanVtVXJXU0VHd25CdUNJNnF5SVdxREVCYklFM3B3dlJTdDBNN0o5NmgyMFRiMTV2ZnVrRldDalNPNUZpempUc24zMndmL2xDSHM4UzN4VDJ5aUtvMFdubUtuSWNTanNDbXFieDJPU05XcFU3MDNXYi9lTXRGeGdVdkE5M0NYdXh3eTJVQU4xN016TlRNb1h0NlBWcTZTcGlvY2Urb0R0bXVGTzBNUHhkWnpDNEFHYmZvYXBmTFlodGhGcnhscEE3MXpMVktOS1FhQXJKNHhSc291NmVQWk9ydFJWV3d4T0ZwemlyamlDdXJnRXBZUDV0NkJlV0kxb3VuT2ZIZWdhYmhaK0M5QmtQdGdwR0puclZJbUVrU3NFNHdKYW9NSW91cHk0Z2V2a0lrMUx2cTFiek9hMmhoVFlZUWY2NlllOTlzeU9MV3RjNkg4VWJmdnM1RjVGMzh3QXlWN05KUDVZMXJxK2c3YnA1WFFLZGlDUW96WkMraENrdnZ3dlpWemJWb3hwa01JTTBvMzlCK3BYNjJmWFVVaklnWWNOMjlPOTNCT2pEVEZXR1pVOTZ4R243Z3paVWFCRVdDN3pTR2xDNFRYMkV3NHhlU0lRVlpLd1BXSUVYYmxacUxJeFM1QURQRkFKK1hGRzMvZWwwbkI0d21MQi9EL3ZhdjExZ2s2TlB3dkFKUGMraHNBTk5UczhUdDNmZ3V6SWF4UkY2OHhZN2t4Y0FVRGNZa0xCM01GVG00OWcxaTVQUzJyeWJ0dHJLZ2d3Z21pbEcwQTU3VXhkL1Vwb3liT3FLQmJOcDVYeFdzUEdGU1ZlKzhTa2wzNFZwR1pMMkxxb1h3VmRMZmRaYSt6c1hZdGM2bk1CZStTOUh1dThHWmlTb2ZMdmJqVEdTWlJQVklQdWRDNFVrMEdvRjl4ajgzdXp0NlJ1TjhYWFdTbC92UVhZVU5SQzcwWGpoYjAwK3IvWjlpMlgyRi9jU01ReWRmTVY3eHUwVzIvcnRYem9ySURMbmJ3MUhpVzEwT0pzcVI3RnpmNjVOdkk3bkJuUk5JVC9tY3ZuTXdTeXhHZXlYZUV0YVpJajNYdlZ0T1BvRkhTano4K2xsZ3VRNVJkRVQyeHA0dmE1WVYvdnN4NENJYTNlUDdEajludjlmLzdyTjdHaWhoN2hBMnRYdDdTbjRYbmY5OFpwemxxYW5McExzelZPVkRmejZRNTZiTVJPTTVXNjZIeXJ2TkFvdUpmL21zVDMybkxTTFBmTzNPdiswcTVrajJBRkdKZ3FMQXhtVDIwYzVBYjYzVUFidHorUkh0SUNMVGlUcEIydTJTdThxVzl3N0xCYUM5UWhkNk9BeFBTSmZDSGVOa2dXUjFEcDRWUXRhRDJHVnlycFF4R0JESFlsOHhUa1R2VloyWXRCUCt2VzU4N3pjb3ZZam82UmNwMnA3SHNhZ2crN2NndXZTV1R3SElGbHc1L1hrRTFITit0TVBJbEZtZHdZSEtlK0xZK3M2RkxEaWJoTXFTc2dtaWIvV2JzaG10R2pKbllWMzdTckpidUdJK1NuekZYQVlRSmFDbzhkRDRlOXpoSmFOSW5OeVhOV1UvVEVMYzVmV3F6VEhqajZyb3VVZVFPSnFNQ3dsR1MrVm1MS2xZd2hSK0NGMFFHS1ZSSGU2U0lQMTJjSlV1anpzOWpEM1kvTG5JQTdQbk1GeEN4NVh5N1VXS2U1RXE5ZEFlKzNPNlBwblpxbHlwU3c3a0xIWnc1cVNTcmc1dVRHeEZnRVlVYVhpU2FJM1dnN3p0TjZ2TEJyRTRXQ1JhSFdXMlBqVUxGYUYzVEZGRWgvaXB5VjlFMksvb1BXcC9jRlFINTFPRGdaUk1XbDVqeXdoeWNSM2FJNUs1eFprdVQ0RnA4bE9ZbW5sOVA4elBudjlGQmdDeWtmUDZ1cFpMRkxXSEdDVjFEZGxHbUJERzYvWHM2YXUwUnI2YVFjK1VxZC9KZ09zZTNMbTQ5aXczZGUwUlpGY3dncXFab2J1TzJUcmYyVGlZTWdtSFllSlNlem1jOFg1T2RQWlEyMFBHaHROenp4cFJsTUs1WjdGb3JiclA2UW02TTU0TnJKNnd6dmthL1RPbzdLODBhdWhVZE0rditJY3F0cC9FcDR6RndyWDBpZ2xFUHVoRXQyQUVMb3lLMWZ3YjR0T09yVXIycnI2ckdiUGtuc1d5QWI4OUloOTB6TlgxSXN2NE9mdk85M2lkZDZLcFRSRlp4U3RSM0tVT1cwYlZHa0VHZHY0R2tGYVptczkyNnc0aVhaY0EyaXR2NWtFS21ZWHFqSEZsTWNaZDRaamh0UEpGSHZablNwc0JLSDRWd3cyc09jZzdyMUtNYk1hN3FzT3JsR0FiTnEzWWErbmRTYWkvcVE3S0thYlNGMFhydkdQbmRuQlg4aTRib1Axa2lkM0xkY0k0ek83ZUdxd1RvSU1PVG1xbVBqOUtrQXdRUHd5dFp6ZU9SUlJqRmNpM3dDeHR0Vy9CQ0RvbmtyMHRwNUpjeFdRY0s0RXNJb3BuSWV1TzdzUFEzUVZjd2pSOW03QlE1UU5GNFRtK1dmSUI2Y2x4M0czK1RGcnZnUTFtT0dJeE1ncDAvRjVCVEtLK3lxeVlSTGRpQ24zcjh3R1pjc0M2LzY3dDdPMGlSK25oODh6RnFjL05CcDZ0NTZFdHdudW5HM1B0Y2lZalJidUp6ODhTV24yQjg1VEZrenVZN1FKK3hKSzlra0lVSzJPMjRCTDlNdVNTdlMvUmVHSkUvTzhFMEtrOHk2bVFTWEQzZko5a3k1Q3UzUkQyRE1peW9UalM1NFJrM05zbE1GbWhvRDBQVHlFZ1RyTkxENnJLVTR4QVV5RWhvVHVWaEttOENuRW1iRWtRRmlocm5POXlVZVRaZWhGYVJxUVd3VmxiaFExZjNlVVN4aHVhOFRqVlQvNmMrbHYwTG5SM0FhK2o4enpweFNEWFM5K1NoVzR2RDhXQTlMN2swRzE1Y08zWjFrWDZjVkN5RTcxS3lXTU1tUTRuSHdtekp2S2ZtOCtyMkk3Mm1JVlpUOEloMW8rWDZHbkF1SjhtcTZBMkNlSGd6aDZhSFVUeHNPdnpCbmtuNUNFdTNuZUZjUVhmQVdDTDl5eGdFSzBRWld6OTNscHVNZ2s2VXVkMWFwM3hWTGM5MjRWUVRjeEFmcEN2Z09KL3lzQmtJSC9BTXRGZFlvTmMvRFBBTEt1bklNN3c3MktXaUlReUlGUVpWL2JrcHdrRFdYSitsTkRwcnMrc2UyRjFqeDY4cTc2dm5XaEt1aDlDNlIwN1FybFh0UXEyN25QQ0xsUzYrVGl0ZDhHZmFiZldzZlNsRjB3Y05MNTNGSTFqNkZnbS81M05HbWNXaTRXbmRGbklFVkZHU2JCYnVCcDdpVFJSMm16d0ljSG5UVUs3eHFabFZYdjJLaEY5cWtBT1p4VXFXZVFDdW4vNVhRZjZYUmZQTzBBbWRJN1hDc3dudFhlTnJhN2dXT3hlbGRoajgrLzA2SFZLNHBjck9SUmlhd09iTDFsc00raEt4djllbEJPcDBmYlZHSTZRMzNJS1lVcU01T1UySlhJejlmdlFuZHRDZGZzS3kwV295TWcyL3VWSTEvVDNhTzl6Z0x4R3UyUXdZeTRmUkQ0M0tuenVuQ0Evem9VTWNubVBVaVJyUGg5aStTTnNKcVNTZEU5WG9Gam9nUHh1VmQ1bjQ5V0FHNi9rai9SYU04L0V2YmNkVG5vK09UR3V4SThaZlF2SU5CYnlwWVdESzJtWnRuRE9yeVVxa01zRWVXOGJwa2tlQWhJYlllMnRzMmNSOXZmWHViaDJiSDNycE4xbGtFNVIvRmpsRzZ6cDZ4anB4VmowTmFtVGEza25hL29KdjVSUjd4TmZmdTl6d2RHM3BpdXRyeGFhVkNINm9ETUZlVmRnV2dMNTJMaDYxaDhBNGl6dVBCQk9JU0JxbTBmUGpwRGZ2ZkpBN3NQRTJaUlR6OFQreVJ6eUlZaVBnWjRIeUVDK0Fpek1SeFJQV0pXT1lpRTJWSFEyU0xOb1BHZFpQMDA2WTFzL09kd2hDYVhlS1ZUWWJNeVJiN09wbk9Qc1AwYUQ2SzY4SEZjZzBKa0R5b3gxaHJPZ2YxZmVEdzVQRlhuV0xMbGExV3AyZWtKSEFrWExRbmFYUEJ2ME11U2ZiWjArcC9EVEpBc1VrNkV4Z2NXOTk4MnBmUHRLZC9NM25ER3VlS2JHZ1haQlUzWnBqS3hkNlFhY0g2bTZ4MllEWWFGV3JQN1I5REtIR0cxZnA1RFhsWStxZkpCTGRKckJiR0t3RDlkSERnR1hiSUs4VzJjYVdmc2JiWGN4QVZ0Tk93d3VPdFZxeURMVVp3U2ZzN2Rybk9zRXhlQ1ZuU1l4ZnJNT0VCUmJIRDlMdlRxNnlzRlZoR0tjeXZ0QVdTN0hWN3E0Z2NrY1Y1cGZWS1g1ZmE2OVhBSzd3QnpPOVVqellIaS9aZHZJUlUzUFJYa3hVR21uMU1KZ3NzaHNJREYwWHFWMXVSODM1QmJwRStRYmgwZWNEOEUxZ25jNXAxemM2OGhHMkxPVjkwdDFyRzdzSzkxNHpNbXh4ZzM0U1Q5Wk9aYWM2Q3N6Y1MyTmNhd3A1eTcwV08rN3NiWlk4L3BDalBWK2RIWldidXh3eG9ubXVjZWN6QWQ1ZDYvWGtmT3RqQjl2a3FWdlpidWZPRlBHc1VjYjE1NWh4TFRhbWNLMzlra1hTUS9uWkZTcHJGdzJmbjVSTGFjNW9mcjdqazVxTXM1Y3VGSjdRdDkwaFRISDFndGZZbGV1UFdJbXNiZ00wczZMWTRmRkpKVlgvbUxuV0JMcldQTFNHWnZSQy9vbi9kOEV5ZmxtdG5OVFlDNU14bXoxMzhZbSttZDBnSDh2Lzc3Njc1WWNsZDlmNjZTTVhYdDJWWmJSZXE0dzVoMnFybk8yWW92cmIwc0VveGIzSnlQblZpRU5SZVZaMVh6blVSSXFnK09WenNGbGlPejVOYllNVGpqUy9NcllTdGErWWh4Q0pUbTRWcGNOKzl0b1ZHaWMxdTl0THU1b1kwSnpYa042WHVCYXExU3Z0WkpPTWN5dVQ1R0ZPVE1OclN3S1Vid2Zpd0tLTi96VWhMd1N6am5VVVlnQU5iaU8wUCt1T3lYSXhUaTBJWjkvSFBIZ1N4d3gwNmE0ZFd3M1VSV1c5WWV6WGFDY2I2TkliVFNjSjd2eHUzUkNBZm1URUpNMW1UTlIzQ1ExV0I2a0VnbjdBdWxnU21QanpPY1N1czUzQ0ZaWFdGbEsxTkN4aEw4WHhVRU8xODBEOEx2UHdvVWZUM05KMEtYblcvSVBkNDU5aSt2TUpJQlF1S1BJWmFZNTBzamZZeVkvcFh2Q2lHQWlPa2VvQmZ0RE43bkZwdkYrL1dHaHl1WjhJWFZlcFFROU53U21lZGVpTEowUUorSHp2K0lIMC93RzFuK2ZZOFJ6ZXJ1Zlk2ZnJiVjhCQVJOUUxBbWlsOFZBRjd0dkpVWEFWY3lCSDM4N3llZGh4dVBZblpkMThNU1ZPdEdzdElua0xsaXlvQ3JMWlpnYTBXZS85VStiVE1BcUl6YVV4Q1B5MXk2bWlRclhudTZwVFlTT2ZBN3FNL0M3WmIwQXl5aGFLK05ZaHdScXBPbURiSlFOVzZGSDZ0QmRCaW1nV3pmcWdhVGJyRUxRQkhrTGN5eW5hRytSblMrWkRIQ09CZmtJeFJiWDRvWmdFMThiWjd0QzlxM2hBMkZiVjYydnNsMUsyU0g0b3NMa3NGSGFocHYyRHYwdkYvdUVIYmR4N292MVdhci8zcS9ZbDREVHQ2N0ZKcE80RjlmZUVUK3lqcGx4bGw2YmJFVzdpNy83RmJ0UnlSMnlkeHZZdDh0MWlmNW1YU0pBTi9ZeXJuVU5LK2JLVjJTY2M0QWFSb2ZXbjB0VVMxS25HMDRaNDBXS2RwR2ppSkFYa05LTHVEZXU3ZmVDK0RnMS9UYXBiR1o1VnlZeFp2U3U1S0Y1LzZ1LzZVRkg4aFRuaHk0WWE4L1NPQloxbng5aGU1RjJjNSt3bHplN3dQUzl6NXZyY1JxZWZDNmsvdTlGWE1NbTRKK21SbG5uOWZuZ0VDcmZUclh6dlR3VHBCOWZxM1gyVnVvQTc5bWNNUnA1RFczZU9lczU3WXVTbWJJK2h2ZWxPVVdUaGo5QXgrVGRLMzRKVEkyL3FOSm9WT2tnOWRvYUVzY2U3VDNMek5WaDJWdFZYTWdLMFFQQ3h1ZTZHMTh4aUwvOS9rNkV3eVJ6Rjl0SVhkZjJQOXBldkJkWW1DaGJXYk92Q2NmWFdQOFNkbUpYRXJldVBVckdFY21KdjljM0w2RTkrb2xZNnVmbDZmTTZaTWVpbVBZZmNsZi9ESkQvcnFBWUdYY3l6eTBoRFZLNUNJY2oxdUZuYUsyZnY4cy9xNU1IRFJsL1JPK2RIRzc5Vlh0cFFKMzRpdTkzWWNOUGJpd2VzTTdCZXFXZWMyOGd3bGN5bi9xOGVYVDcyOGhpNm43Zkpaci9xTm16MUNLeSt3YzZMQW5pTmZLaHhUTC9oWDBTaWw0SU1ZVERtVWZISHUzOEhPSUk1TnZqSE9sY0xBTGx2QXNsbHZNc2sxY0hzNGxSeFJ3OHFZL2pQcU9oR1NPL1hSM3VBREZuQ24wNjBIKzA4dm5ST3NnLzlzdnJyQWZZUnc2M25sWG1rY3FwaWM4OHY4R1djL0g4aWhFN1hMN05hUzJqZS9TSGF4b3p3WHRxY2NhUFpuOFduVFpGdmxRM0ExbE1NWE5MclM2Q2ZNS1BmTTMzREFoS3I2ckRLRUxpNHZ4NG5VMnczaW1QNGdXSXErQzhMbk5XYWUrSSs2NGF5SENpcTdDN2dOZkJIelU1TS9aUURBSjFNMXliZlovTFlTODY4cW5ONlVTYTFNbjErWjdtZU8vVzNQQ1VPOVRjTURPMDFZbGNTMWdIU25lSGEvSkxQUDBLZm4wMUhlSE9HejR1eEMyZU5jTzlCSHlZT09ueTVIT0hkN1VDUjdyc3EzTVR5TSttUnNtTUhPSzZmK3hZMC9wNWs3NnFVVUxZelN0V0V1cG5VNFRZYVB2WGEwSVpWTTFsT0lSN2dlNVNoV3lsaklSNnJ5VHl3NUZPMGFST29jMDcyVGplL2lWRk94dXp1TC9MNXg0dWVuTjJmdHpMeGl1VkhjZmJDQkFtYzVJVEovWDFwbjdwbmNlckFmT2FaL2k4WWhFbWNTd2VyeG5YYTgxZnFtZmdLYWR2akw1UXoyVWRLUmRWcUtFMytoVnFzVFR0OHhqQTJSWFNldEE4VitKVHZlOHJyZnF0YUo5alU0YStOZG5HOGZST0V2QlRpREdCOVZjaS9TR2NFWm1EODJJY2l5TlNKNytzZDhNZER1MWU1SkErREZWcDVzbElyTDdHZWllcDVSRTZrVzkxaTFBU1Y0NnRKMEdld1YxMnJYTTZ0a3QyYU1qVGVSYlM4eURuUkc2NnJNdEZSMVdtYkFpZ2MydHNQN1grVUtteEg0WFBzUW10bVNPZkQva1FiNUo0Q2xKOWk5azVhRDk2dUlXK0pGS1R4YjJTSFRJNXFUT3VMUllxc3FkemlvaFdzdklnMzJvTnZkMzhyTllMQmFnV2dMU2xEdEVkRTZwK2xkcTlLOW1ubFc3cXhtS0pFZ2w5RytSdmtPNzJjNUgwWXNDMy9ZQmVtZFhncUE0R2NHK3JQcFFzQWgyV0UyWlhQTjBFOHd2SXJ3NlZKTVVNNUFaOUxtRVFBTFNKWTMzeXJheFBnNDBjSFJ4N1N2WVE3Um5JQk5GRG1EVWRZb0NVNUc5dzNnSVFRMEtNS3RVOFc1c3dGeEw5Y1hIdVM1K2kyQ2dZMFE3SkM5NDdkRC8yeUY3dXdxRjJsRllxbFlzSDlTMlJsMW90R3U2SXJVTXZLWkovL0QxTG9WbVh5cXA3aFBNV09FZEkrbFl1OXZZb3JiU2pLcnRMWDBuV3RKY016bm5Bc3RoK0NSdW80Nlg0ZTk3ZDZ3MWgyRkxJcEZXOVpsNzFuaCtsMVJUTGdJTHVWdFg3Uy9jSm96aFQzYUtMRGZhSG9aNDQvQ2hCZDdLVWFkemZ3YmgyTDlMSWZBczZiNGRibHZyRnZLS1hGcmJKME84TXFSM04zOWVyZzd5YzdFWHlDV2hQU0U4anVRVTJFeDdramZSZU1kR1VHVkJmRXhnVEtETVI2VUdrTVZqdFdmamVCUnhHN3FKckovbGRhcTk0MXhwdGZhNzc0MXFmSXZhSGtMNVlJdC95cUNvVVBRV1FhV0R5RThzUmZzL1B2SVA0SWlpVzNCTS9tZkZzTndteUhkSzlaUzhGL29adUVYQUo5SlNVc2lvZjRNNk1yWExPNUFReUtFRi8zZExselB5ald1Zmw3NDQ1cE1lbkI5K1NqNDRWSWw4WjUzN25aUXh3Z3Z3aCtKMzZ5UithSk43RlBmeGtJblE5anJhdjFwVmVtRG83UDJiNmNnNGw0NTg4MDR6OG5RNm82eStTbjAyVzJON1Uxd2s5aWNnbU1MVTVuY3RjN0xMeTh3U2Jua3VRZzUvSkxNcG5OWHFXS0tzYzZNaGdZeWJvMnd6bG5EaWdLOHhqd0ZPZlgyYXVyQXQ2TzN4K2xMdVd6aUJmdU95N2huc21VMVRRa3FGblhOYUU4VXpDekI3bEtEWXhjUTJqM3R2NlF1YXlqblZtKzBrc2p2d04xam1VMFg0UzkySTF3amxtN0VmTE9QZlo2Sk50OUtFUVgyOVE1WFZRYkdmUGVOY3lqMnEvZDlTS3dWRWpNeGJhdkpPUFYzZ21yS3l6UUc0NVRHQU9JeGFUWUROQ01UdWVMc2I1WUJxYkE4SzN6NTBUYVczbVFkck5KN0ZvR29Od1BqVm1zanB3eGJseGxtZjliZFZMTmUvRmZ4YmYvdXZQNHR1Rkg2aUNQK05aQWpxM0hZcEJBMTVNbkZ4WTFaQktYdFJCY3NSKzFaU2lOcitva2hwUDRnWXo1YzYzUUU4ajJhVng4OEMxa1MzSW9MYmhJYnVPejVEM2htdWlxNU9qS2grSVQ1SVVBVzhtSC9ZYmdJL1JwZjNQMUc4OGE0WERBTnZtQnZrQlNKOEF1czgrQkQ4ZHprb28rK2RJNzlmYmNObDVhNkRMZEErZVBhdWh0SWdFU1E3THNsUEZyUGh2VWF4RmZkQjZuSS9aSEtIL0YvUmJ5WVFDc2dueE5Na1Z3R3drMWduSXgxYTU4VXFNYUUwRDF3Q2dkNWIyRU82UVBubWJZNVEzbWs4ZzhjWHhyUlpUb0RpUG5OVWUrcUNKakU5aUZKT2JxM0ZhWTRqc2IxRjhoMldBM3VIRk5sSmo5WVd5UWhKVWo0T1BiQmJrNW52VXBoOTlZSzhUTnJodlhsK0ZNRUdQNDVNR0UyVi9TeWFXc2UzeTB5NW0xeG1pdlpvbDlENS9NQWNLOXpOZ2RjS1EwQ0d6blV4am1qWlllcHZvTGRsRy83VjhTOUxmZ3FYMzQvQWI5enZML003OG5vYlZiSzJhaS9WK0ZPajd4REZZZ3Z5MHRjL3BMT2tySm4zSmtPdkJ1cm5xLzRKNWs5Wm5iL0hjVVIvckYrcFRWek1xL3NZOG9HZGcvVzFDTEd6eGVvSjBLYllYWlY1MzU2ZGhmWGF6Y0MwVytwRjhmclI1bmROKzJGNCtYZzJ5OGFyM0tzWGJ5TW8xZHRLZkZyL1UrOE9Mcks5a0ozMFJNVnEramt5Q3ZxSXF1eVFjemhLSGkwNmsxN0MwKzJNTFlxT05DM09xZ0dDTDF2UFhiSVB1ZWVPOC9ucHRJbTE4dGk5azVYTnNoblRRbFhqMG9NVWRZYndhSE1leDhQNjdGdXBSVy9TT1dtLzczNC9JSGZ1VXUzdHlkMjdLWFNDMEpIZjhaRjZYTyt3akVKMUs4bUJPTmw1cERIci9heXo2YW1Gd2VpRzNrY3RnOVZWd2ZwMkx1b05zdUZJaDJPSysyVkVaWTlPY0RtVnFvWGtzeUZOWThocGlLVjREZmUra1gzWWZ6cHJVeWNaeDUvaitiNW55REIrN0QrenpQdHk5RDRQcVBpeDZXVHYzWVoxcDBqcXFVSHZFYlhOR0MrcEVuQ1oxQ2wzcW5QRXN1c3ZTK1dYYUQvb2FieHVvYUovdVhjYjVrTnlkZDIvb1Z1UXJkNDdqOUlZY3p0SGEvdnRCM2NzOVplMnVyS2sxV1RQT0xja2FxODNYMFhSakhnS3BqSk53UDZkVStiMWZLbVB6RDJVc2YxekcrS2VNM1pVeGpjb1lwL1cxVGlzeXR1b1ZFK21kakZVeGxTeUs1a0JYdjFURzRnOWxySGhVeHJpbkQzbFB4dkthRDRsa1RHaE54cEFlZ3htQ2QzT3BWMmJOeW5tN3VXdmhPUzYvbHZNdG1Ya0lrbmUxM2luVDBub1pYVnBIc3pUcHFISWlMZ3hBUXp4QzNqbmJ2cjdHT3lXa2VEUGx6TkQycjE5RHhvSTg1ekpJamROdDMxRDdJSlpTSDQ2bHVLZnYrTUE5R05UdVFjQzJKRmU4UGw5SEJwOGNuZnpTYndTTWhDTkdoSytRUEw5Tzc2b2YrNC94NC80ai85Uzc5K1N0YU9yZGRkR1N2QWxhM29oVmNGd3k3MlRWdTZLc3BYZDFJQzdpMGQvclcxWEJqRG5rbkg1TWh0clI1ZlFjbUlZVU9ZVVplTmxkRXVhOGdjOWhySjFaZXQ0RnZTL1RzZm5IK1NydFlSM2JlY3I4UFpsbkdqSy82TFZrdXdjWnN0MExLeW1jWEV3OWUxa3lTVjZaanl0clR6QWpuNW9NeUtWeVNGd3JJLzBVemJsdW54Y0JHUjM5UHZTMlVjd1dydk4xT2FYOHc1d1M4MmhPU1hqSzdEMlpaWnQ2T3VMYjBwMTZqdjFqdk40NklqbGhBQ3o3Tk04R3hWTXlxcDZBWTNQZTZSWVNNNjViZloxUE1mM1Fwd0M3OUtCUDhmS1UxWHV5eWpYMXE5R1dmbVdSZnNVNG4rSTloZ1ZTKzIzaWxuMlZudFRuSCtwSjdrRTkyWDJLM2gzUld5TTNpWmFDK01uQ2JLY1VWS3paMTdsb29uVzdTSHlHNnlpd3phVVA3Vy9tK3NMbFhJWnBkK2RDaTluNkFHMzFHTmJvUzhUUEhIUUhpL3ltNmhNZUZyMW41SDVYOUthbDZIVzBsZDZLNkUzNmF2RTZGMFZYbVNLUk81RU9ST2hNZnJQMVZhaWNBV1hRNFdTV2ZwdHJqM1pPTGxKME5EclJRUG51TXNvVkM1MkZ0bGJ5SEFWNWI0dlhydTIreWxKUFB0U1VzTWYzclRRSys1K2E4Z054UlVGL1RWTTZaLzFqb0xaSHhaWFRGZzRQbWhJREw1YkYra3ZRNzY5ekJKM2JqaUFLWmg3Umh2eXpHZW0rZkZYTlNKRE1IbzVPSVdtV0RsS1RBQk5Eb3lVR28rUm1yQU1Bd2drMFhPcDlhTGpFemZheXVBeVZwUUcwYkFPejQxZzY4elh5bzMya25zcHZma3grbnViMHZ2d002dktUNExQQ2cyZWVCUU5wNjlDaVRacTliTHlhbnNlckhnVTRxb0U5aWN2UW5tMHgxWk5lQWt0OVFhS1B5c2lOUkorR0c5TWVNM0hQeHJUN01sUTJwaGtWSGRQWXRXWkxkU0N6b2RJdEhFNEd3Tnl2MGlkdzN2T2I5dWlzUFpxWTRKK05XWS9KUTFWYzB4ZTlsb3ByUmdiRnRkUThCU2tremxSak1HZ0E5eEpLTzdTWEFBWkJCelZuWE1Jc2VCR0dlSHdPQUpXL0prbEJaTzBEMndaNzk0Z2NQcHNkN3NwaG85bEJYd3hhU3BBWlp4MDNDQjU4M3FVTnMzbEZObE1EcmNlMG1BQTY4SFc2Yi9DeDdvc2YxMzNQUXU5ZG1TdWFNdGRXdzRwUk5heGNwNDhIWGVoamFuZk9zVWM3YUw2WmZwbi9sWC9zZnoxWWFPV2ZoZFlIWks1UmFOWDdUa3ROWFZNT04zV1I0Vms2bUY4YjRzTFVwMXBGVGxRSGZvZmg4NUpXK092c2JmNmh2V1VlalNXZnhkTzdjc2cyZFYvRXRhVDdPbnBNZEo4VUhoeDdlZkFzWWIxUWtwVnJDWVZySEpLM2VZREJuQW5BTUF5MEU5QkZBajc3WmZLblN4L0tIL3U0L0Qzamp2dnlWOHRsa01hN3NVM2ZDOERLcXkvT1M3QWYyMFhqNGJ6RXMwQitWeDRhQlhKa3o5clJSM2lJZW1yTjFxNDF4Y0RCZ3dwZ3NEWlVUT3hpclhHanNwMWZwNC9tblRQb0l6Z1RTdFRHRkE4WHlFSDJucnJvdnV6OWczVFI5Yk5HZWdpVEF4R3lONnlEbklkMTBCOVBIWFJQRG5pcWc2b0IyL2ZFTCtHcWQ5VDdLcWtWZm9Vc0RHN0lRdkJ3blBidEtRdjNaS0hUdEVkUlN3TmVUZ2NHdkVpY0ZxYmRmV2l4Q1FHNmpWeUx6Y0poTXZBSW9mQUZ5RjNtYzdQQ3RYUTJTQlBtelJaUHZwS3MzcWJidjFSNXY5SlhqcUNadjBRc2tTRlpIaGNPTjFrTWR1b2dPV0JBRGdCUXlnbVkxOG1OS1FoWnJURnk4M2QwOGtEdXJpVGZBL3RJNDhYMzk2VHpxSDE4ZHBEZHZRdkM0M3BSK3lxOTJMbHRJOWVQNmtYdTJjTndUeGJVcktFWEM2MmxnWlVBU0pObXlqY0Nva01BNytZNFY0cDljNXBMblVtT3BmOXdJV2VWcElUc29BVHRHbitOanliY2xMOVY3eFB5OS9UVjc4c2Y4ZFhmeThwNFpzeEUzSUN2THlrQnlVeVJFOS9xSGczT0JITFoxMWhVUER1SzVvdzVtTTVGVG91QlRHWG5wNWhzNW0rby9WeVhFZWpCZW1mamNrMTZjTGlQLzUxNzlqL2NsWjl6VTM5RkxRMzNCUjB0TDRlcTJZQ2ZuZno1T3pCMXRJOExoNVAzcmpYN2s1RDAwSDVEWGwrMUF0TEQ2WVZ6eHUyeHBMY01XbVFwV1RzRno4VkQzbE5MWHhGQ1hBQjloZDhod0lNMEoxdnRsZFBTZ0UzQTZYbXRKanNvQWRYbVBuZE9LQWh2d09rbjVCUDd2RmlCVEZaRUt1VytUZnBtUy9zV3NmVSt6UWVBdkRBUTUycHcxT2QvQzdqTWRiMHh2NkUzSHUrVDRaNzlDWGYxUnFNL1lkTHY1ZTNjaFNqVFNINlNnblVTMEtJYUtDZ0dXNmpwbFlFSEpLZkdBZlpDWVpkK0xLSVlhZWxiYU45R2hhcTRPMTh4NkIzcGFPMU1mWENUL2dEZEVkRlh6cWN3cjBpK2FpMzJOZkJvb25PYUlHVmZFU2ZtWlIvUE83OE5uK3NqZCtUWlQzSDNqaFNQeDRuVEw0b1QxZnkybi81d253UDM3SE80S3d1TlBvZkpvdGRTL215ZDRmd1o2TXVUUHpRUG1EVGhXK1FxWnVyWTVqNEVzaGNhSDg2U1FEbWYzbURHNG90MHo4MGNsZnBvUHdQMzdHZTRLMjlzVTk2TWxuelZOYXVYZnIwY2U5WjVGdzRKdVRNdkpnNlhwRzl6NktVLytWYVg5VGV6eFR2ZldwNmRQTTc4b3JoeWVqT3UxRC9oSHo3cjEzZmxqMnZLWDB1QXI2czFBTDVTZWFtVFdCcTRkNThDMUdOUURjdGtnalJaQmRtWDJGYjJ0bTExSHJhdHp6cmxYVm43UkozUytDby82M2JOZXZWd25aSjcxaW52eWtMbndzL0sydkt6TUlCVU9TT1V2Q2xKUVVhdHB3WXJGbDlqejRLYjltd2lQVzdQbmpXL3UzSWxOT1ZxMnM1Y1VOSExOZXEvSzRRa01NYWorNEZpcmp6TEZWUmxkM0ppY2U5WW84UW5ZRkFsOFlmQm52dzBZWHhlL1JKZmZpTGQ5T1dGQjMzNVp4cmhudWhwOVRIOFhPdnI3WXpocjNyRjYxeWN1NWE3ZEhqQU5VWEhYR0N1a1c2cUtvZmtiVjRpUk5SZ0FFWnR3UURrRkxVQ2kwK0pkM1lLaHBnUEN1UHpFQzdJZVltN1d0VGIrQjFiaXhacGQrMmFNTDVVcm5QU0YxdGFaNVM5em5HSjdHS2RkZjZrdVd1N085Y09MWXBOSE9SaTdscjQya01acmNRNmFtdkVZUUFqRGhnSGRpWUV5amRva1hFclR2c3NTTHRvejdhdWJSYkFuZmRsbUozYVVmdXdsZnpoVkJQL3JBamZWeGZUU2wzb2k2UWxkV0VJV0YxUXFxOW1GcnQ2MzdLdDkzWG90YU1JSWI0bDV4NDNPNFZjQnlDUHZZeDJlcW1zeHJiUzZaWHJDMjJueXRVWjRhZ0JPaGJvdTRxMjNxVVYyazRkeUd1M29VcmVkYmtsR2xCY21VWFkrNnJPZiswalJKVGl3YWxmL3RsTmRQZnUxcnVKZUsyL3psdnlNZ1V0cmlyTWxMS1NVaWpTTEo3UE9TVzlLVXdrV2VldHorc01yb0tiSFRvSnNDQ1RjOGowVnJTNnN5K0tnTmEzSXFCQ2V6d0M0cCtkSW5kbHMrb1VLWUt6Vm9TaCt1dDZudGNXR2s5MFlCSGFZdWJ6SlUxTlNYZUthWkhNcjVHdm9uZGJ2aDdQR1BQUGpvSzc4cFUzNUd2Umxud05xSHhkZGg5QkpEMlhSZkZyNUdwd1c2NGVSelhnbitIelhia3E2bktscjJZdHlaWERxSEtKa2tHK0VmYU4wK2EwUy9FcjVFcTlMVmY1NDNMMXJPamZsU3VtSmxlNXZuRGJrYXVWd1JGOTFhQ2RkOU1rOFpVNjNibXc5QzJ6Q0JRWm9MTWRycHU1MXJTQktGUlJySDZWN2RSdXlxTCt1Ry8yRk1WN29qaHRaQWoxVlZzaHVOT3BONENHeXJkSWt6cU1Kblh5SzQxc0VYcjNwQjk5MVhCd2Nac2RRenQrUXR5ZXZTWDN4TTI0RURleExYSExhcjJVS3N6VURRZ0JFUVpxeC8yZVZ2TGl6cHNaazVBelkwL3Bucnc4TEZSRlB2cHBsOEY0R2tJeGxrVEdzOWpFNTAzRzRNeVZ6d25ySU04SS9vdWVPWmFlR0p5NUIwSjZYdDJyU2pmMlVuTVZ5anJheDFXb2RITktUTzlpRXMyZEQvM2o1NVBERVc4eSs2ck16UFNqek15aitCeFBlSTRIUkw2V1ZKMjBsbFJkQ3pkcUN6bE50SDVWdmw3L0VPcnZZYWlQWjZmVVBkRnk2dHEwMEZxYTN0Q0tIa3ZMYTFVbnFMajNMSUY5azhTano4M3FXdStyakRiN29kRitQQTUrTmtuZEU3T2dLV1lMdHlVeEczQ3ZjM0VTb2xBbGxmZEJMdTU4UEpndlhxUmIwTS9Qb2RWbDRIdHlEZjN0cnpWUmNFa1I4R1lTNUxBTzl2WExBQU0vQkl6bkh6VENmenlOOEgwUm50WkVlTldXQ0tzY05jSytrbkF1SWVQSE9LaWp4TEZtT3g4VHNtVkIyZ1Y2RE1lZWJYRUlORnU2Rm52eU4zb1NVb0xpTDZ2U0JYZkU4S0VxM2JQRjhKNFlSZzFOMmhLQkVLZFJBaUU2Ym9uNS9sYWVoSjh4dHNQRVNaY25uOXNmSE03TVF5Vk1nQnJCa2pkdUNYbWk4WG83eGVsQ0x3SmNuRmJNTllRNjFreHlyUFBTVC9Va1NQUlRhSTlXcmptaTU1dVduSVBBQTVkRnZqS3F1SThMb3lYNE1vM1Z5L0ZBUFhGNE0vZnNtUUFGYzhYc2hOQU9QbU13VTQxNDh2RW8rekswemt3Sk4xc1c4cWRaUy9Bd2pOWWY3TlNCdTN1VFlFeVJDZEx1M2xmTXZOR25aQWxIbjU5aGFvRk4yVS9GdE5YUHBmZWhuMnVFeC9ibC9XVjJ4cW5GRGw4V1UrUUV2dTJxK29vZTdRRjZkcXZlVTFGMWpqT0hhWWxvaXROclJGT3pLcWFvcHNzR3krbVVUUDhFbkw3MHY0NlNISXZUYld2NFdIZHE1L2NuQU1tSG9zWUFTUlJ4eXZUQ0tIU1RpWDVkb3dhc1ZoaE5adWc1RUM5RjcvN21TNFk1b1BSelpaZ0RrbkdQZ1pPQWFEM1YyRjNaV3BRbE5xR3QwdTJrV2JxOXNOaDBuWjBTekFLM2VmemQ1VE9RSmVGS2MzMjVMNC9KMkZOLzNaZXhBWld4amw3bzdjaFlQeWpVQWJ2ME9MTWdJRE8rWTR1Wk1SeWRRcVc3OHJsend5UTM5Wkd3OC9NdUVHK0FIa0llOTNCV2pIbnFUWnBJVHlYaE1Ed0Y2V0hucDhISjVrVzBMOHc0MTVmQlVOeVhKRll4aTRKV3hrZlBrZFpsR1ptQ3lEaFdkdndpMlQ1Zkt3MEQ0UGhxOEFrZHlqM2wrNjU4cTVVT0xaWXQ2ZEJBVU9VYWFRd2xXTGdvdnVFa2liejJyUVNUK1cyMGFKNTI0eThZeUtWMy9hYmQxcUx0Z3pMSFAyWHVyc3hwUk9haVRPdTNJbk1kcmQvcmtOYVkzTFhPU3ljMTl5VFMzL2x4MDQ2UDdWSlhIdERhUTZXYi8zMWtDbGQxV243Ymxtc1AydkxPVSs3dXl0MjBsRHQ5SmJja2Q4NVpsVTB5R1lmUDFsVzZLN0ozbVEvWktmQWxTejVsdXMrZTFZbU10U25PQnF3OFR0bjFsOW5hL0thdFpSNjN0Y0pUL3U3S24wSGw3Nnl0eEhia2I2Rm1xdFNMYWpITHhzYzZMdzh0NFZnU0ZnM3JZMHNRdDV6THRTeVNsdFl5RUM3V2dzNXZROXBlejNyZTRhcDNMdHQ2WndlL2M1VDRWcGREc3VYYXlBWWdIeGV5MHp0bk0xb0dhWklFZVJhRkpRaEVsL0ZRVEFmL0hXZGNKLzNCV1dmYnlGR2c3d3NpdEM1Q2tuQnlGUlBBRUYxN2xQczh5WDdENzVsdDdRTUwrMEFKR2JodzYxZzYrUEdUV0N4Y2UwcGFRL1ZUc0JrbERqK05Bc1hNUzk4TEQ1WnZIZHROVkVWZW9UaUM2ckRRMXJlcUFvU1VPT2VDS3dvZHJiL3UySFB4bHpQM2szNVBtS0MxUytJR0NteXBERmw2VmRiVktRRnJtVEtEeU9lRS9kc2NOMW9SdTE2bUYyMWVMM3hKMlBoNTd3Y1Fkb0dmbHhRb1Z2YzVKekltcjcxZFJOY2R0Ylh1RGxrM0ZBaG4xbXdYU2lMaktVbWhEa1VBdllSUlJMeVBHQURRa21IZFFTb2ZIUzRpY3RmanRhUVZ1Y3YwUXNWeVp5OHpuOWNUZFJBbVBwTk10VmpzSXgvSXM0VEVoNHgvZCszT3hXV1FOMGoxeVA0NDU1YjJoOVBtc0Q4UXI3NFMyUXp5OVF2U3ExZHNKcHgxZld4MDB1K3hFN21sdlZsRXNEZlRqWGtJSkxINUhGN1AzTlVBWW1xa0wxVEZ6WDJPaWJSNUp4K3ZCcmkvZGQ2QmNRRzZMcjIxZFUwYjYvSzU3c1pYaktQTGRmY285aG1uM2R6TnU1dGdJNjVxNjJLMGVTZUQ1c2YrZ0lMSmsvTXoyam8vbHB6ZjBsZVNEWkxiMEFJQ2RqeUtSVWhvM2RSY2hrTXpkK2RpN3RveTY5bzZBNFRibkp5N0dBVGxoNGNCNWs0T2J4NWNTeUF4WUlmdUphTzNKZjk5Qi9iU29Hc0VoSUFrZHkwazgyWWVLa21LOHg5bW9VclJDdDQ5WDFmcmFPdE0rL2hNZ3hLNE56aHIvVFdTN2NUaDlsR29KQ2pHMktBNzZ1Um8zL1NUUDRUeHkxM0E2eVdxQWxwVGE3cWhqM1VEM0RXMmV3aXRNK1BaNHQ0MXV6dC9vek9PSmF4Y1cvL3VjMEppY3lYUThIZms4M2ljeWRoRndPcjkycnJNdHRZMXFOWlZiSkdQMkZHSGdGcXdjUUZNeDF5RjltenBwR2N5Mm1EUU5iUlVVNGd5clREd0hlUzZCL0JMSlRFT2JWMVFsUzd2cDJZZVpQUnVxVUpMZHl1ZjRMc0ZKYk9BbitXdUpSL0d0bjcwYkRGRDl0cXh0Y2laZzk1T1BTdlVIYnVIZmJsQlBZL1NLZk4xWlV5OTBsdUtiZFFDK3hSUXZhWmpUQkRMZXRhWjVCREYxRmZrVFcxLzJ0STlPZEU5QTgvV3lkbFhCTEcrMVYwSEhKS0wwUzRjSnQrRGpibEhza3ZpaTUwYmk0Y0dBY3ljTGZ3MHlRTEZaQUFjZTZobnJxWHYzRFJKM0ZKdkR0bzYyek01VzBEK3FObjlLdTRodlcvRVQ2RHlmRzdMMW1uRTFobkRVUklBSUpBUitmeG9qZUlCNUE4RnlwbEZmd01rYm1sSk1GbXVvN1Y3dFNEM0NrQ01oQ1FFa25JVSt3cHJaQWR3akRVN05mS0FzVmdDaVYvbURFc1pYOHhha3ZFQkF6S09jMGQ3enhKK1VHUVp4Mkl6Rkk5aW4xMk5Ba1hldUhQeDRGakN6azNOSXBSRWVxYlZ1dnBKVy9rc0hFdmh6cEVpQVBCcXNLWFg1UWdQSVRBKzN6djRpc201Vm9aajdjcU9aSzNKVmorcXpoVGlTamwyTFhTdUljbnBOZ2h6RHdFRnBMSktRS3JqbXlVZi9QTGU5WXFXN2wybTVYRHZkTThTVGtFczdueGJ6Skg5cGJtR1Y4VTlCU203REljQStML0hhOVYzQVQ5TC9GUVhYdWV3djhRZW52ZXFFcktlTlV1cTgyMHJiOVE3bDdxMXY0MWM3dHZCNVVlWms0c0RuOU4vdVBZbzlheHpRblB6azNaaWRINnlXR081VXBLRFk0VUpzcmNoUUxic08wSE9GcUVpb3ozZGpORmU4OU9EWndscGtBNU9McWZIWTJ0MmNyaERFc1RzeHVIT3A1QVFDK2pGV21qSGYwUGY2WlMrd09UeS9MQzg4Sk5GMUlxODZNVzZRK1FGUThuTXhaWFBtM0RuQWFnZDZTTmVUSHlsSnR1NFhuYzVMdjd1UG80anV0WkFhR210L0tUMHhXRUlDbUw2aTg0eFF2N1QwS1d2UGtmekRZR2d0d1ROTUZrRWZFMXZGZ0YzL2g2azVsK3VwVE0yNU85bWhhZklQMGdPcU95MEkxMXZTVkR0RDl2Vy91aGtmNUEvNVN2bXhyRjBvVkd6cDdtZm9aT05Wd2IwaktDNGp0am1WVDFmU2VTNnBiZ2M3VHYydmVrYTZ1QzA2dERNcVArSGZaems2QkY3L0VYMUNPWjJQY0o0c0I3eDdaa1B2cHNQam1nK09KOHNXaUcwNldpcjlma1Z4ZUVXQzJTRTZEbnFjTFowY3pIeE4wN2tia1luSCtrNXBjdTZLTWF4a24zcC82N2FJVGFmOU5XSzJIelF6VnhMTUZ6cm5BRGc4bVlkQlZ5eWRpMTlHZEFPNWZubE9nSytwWFh3SlNBNVhzZkNZSnhvaW4yM0xFaUJxSFlGY0VXcHZLNzhjSlZ2QjhZcnluV0E4Y0t6S0NyNjkvNkF2b1BUMjNySEtxQlFZV25BaERteVlTVkJ5anZmdWlMcENmTHVYejZuSGdKRlpoeU9RcW5OcUMrYnQ0VG0yTkZXZ09aSXV0Zk5OZmhjcWNzU2tzd2sySXhPQWMzTnJveTJaQkM2d2QwMDZVeWcwMXNRR2tPNXVjaDdaRkFqVE9XOVo2RjQyMlE4aVdXRE5HdmExV3B0UlZ0cnF3aXdCaGQ1S1lpTlVqK25pSmJVZjFjTFBXbEhYclRDMmFuRGNtTGdCWFFkcnAyd0FRZHhkSUZyRmdiTktlVGFLbXhKRmxTK1BzbmdLMGtjcEhMdVdaUjBxMXdYSlk2aTM1L3Jaa3ZmdnpKMkpLZXg4OU9hLzcrWkhuQXNreDBja3J0MENQd1orRlZETWZjNU5nbVZaUkxhV2dVZ1gyd2ovSjNMNytWNzJXNmo1OEJHKzJHYlNjQlg5MHRidGFYelZhVHpCMzR1SG4xK0dtRjVubEZad3V1QlhqT2NydzB0NFllZmRubUljNGlNcW9xK2QrQ2ZGejA1alZqY1BMcERFZTB0VTM3RFFtenBHd2JaNjF5VVFvdk5WS1Y1cjRMaDZJVDIybE5NTnNpN0sxOUpFbjh6KzA3ejQ3V2MrTG1lRTljVzZsR2pOWTFWVDJqcDdtWkFNdkRaWEgxZXo5VlBxMXo5cXNlMHRTNmRna1VQWk5BbmpxVXo2Z0E5Qy9JYTFabTFNMVhTSVNqQm1DQ1M1SFBLbkNUbjFORm1sMzQ2cmRmQ29JWTN0dGlsbjhvYjExYWpjR2d5UGovYU9WWkc3M3RMRXpqb2V3Zm92aWVPUGQyV2R6WmZ2eUE1ZHlVNnNBZjVFMERFOVRtMFZzaHBZSlRoWVhWM2tWNE04U1RUa3Rad1c1cjQ3MmdMbVBpSE9xRzdNWThPRHptdnBYK0plandjSmU3UVhMbHo4UmhhYkV4emV2aU9kTmRCTHE2QzFGd1NBUHFsSDR1eXd5MVBNd1hGdGwyaEZrdWpkN1prYndjQzJOdDZEaC9wVDY1N0RMaWtDQlhJcVRmN3FSdTVQWnA3SExSRXpJM09aYkFyZTNNRzRRbXRKK0JuUzEvSlNKd01JQ0daYTUzMzVWbjIzWmJPTXVKZUwxQ1dYN2t3ZHl4MzZhZURFa3J6U202TTdrTkhiMnNmK2dieUQ3TUE2VzlKUkhFTjFPRElGTnpCc1djclQ4cVFyVURudEhRbElDNG5NUVRJRUtuTGR2TWdaNXU1RDVyM2I0bkVaZElmOEhYOTJ2eG04T0ZCaGh3ck9icjJxQmp6STlaUE5STFg5TTRRVjRHT1FmOS9VT25aUlZDMHRUN3F1K0g2OVVWUEs5eFB5QkY5TU8xSHlJN0t0VGx0clkxRGF5dUpUbUFkdlhXUW1tZWJTOWJxVU53N2xwNTRTbmZ2d3YyYkpRR241NTdkcUIrZFcvUDdNWXA3aVhvT0VHVFlwMTZwQ3BLakpIVnRuYWxreUdoTGhsaVFJWHBHUS8za1d5Z1dOaytlM1VQK1VlNVpRSUJkRUwxZnkwL2h1S20ySnJhdE5lbnpkYVFXUWE0WEExd3o3MjhqeDNaUG5qVTlCTW9zSGx1WW5CbnloellRdXg2dUViV05yZGt1NEFpQnQ0WFd6K2F1amZ2Nmc1emRoQkpUOW5icGJlVVZGZ1lRNVdMeUxyUkdmZWtyWjBGVndzUlB6UnozVk9HcFVyQUI1ZjVOMjVKdEJ0Kzc4OTduQThqYklkdmlwc2ttdEVkUUcvUVZXVkNWVVlKMCs3djdwNWdkejU1VmZWZEZXM3BlUTNvZWNvNmxEbWFvTDkwZzdZRGVTOXFmcFVwTUJGUEh1VWh5Y2JPZGt5Wjd6NTRKMUUrdmRMcXc4aFc1Q0hMeGh1NVYyN0xoT2VSdEtyOE53NkFtb2ZGVnZhbjYvR1p2YXVmaDN0VG5HTWpkVkdSRXh6U2RUanR0SFFFMzZRK3VqR2tPd0ZYOUI0eHE0dSsrS1Y3cVkybnU1N1RIWGRIS3FHZ0ZXVHZkdFFHdjlZTXJvcVgrczBRcnZpVmFEMDUwUEJ2cTc0bVdYZzZYQjR3bXR5TmFlcjkzUmJTMGY1Wm8zUnpZZUxBNDkvSVVyWHVpVlJyRUtHdW5KelRvYVAzcEZkR2EzaEl0cUkvcnEzWjZlZlhDWWJXNXVLaG9GSkpzbHNvSHp6b0xodEpGc1lOQVlxRmRNSENYdnBYc2NVN2UzYm5XZVUzNjdSdkFxNlNuZ0orME04dkI2OFc2b3c3TWpzL3JLOGM2SjVNWTU4TG04c3d3SlBSdWVSOHF5NVdubU1odlB2Z2M3Y3RCYTlEYldrTlJtMS81Q0YySndybWZ4NnZCRjlYcGpWdnpxdHpEdnZFZlQxVndUeFdVRHN3NjE5cHhZQVJ0cFYxUkJjYUhxbURTNzNIdHFJSW8wMk8wajExSVI5SDJZY0tzc3ZNM00zUlZscjdVVGQ2RzlQK0xlNStUMTA0cTczR2J1QnFGd3lSejUxVWJ5eGVGaU55dFZoVTllM0JrdS91OEFuZXV3SVE2V3F1MTBFNUhsQ05NRnVvOXFuaE1hem9zdTlxUWRvVkpDY0NYczdVdjByckJMYTByUEtoMW4zeFM5MFJ1VUdLVVRmclRUa3NGSVdaU1FmR2hmWTRjZnBUUWdxVm5kZEJlNWo3WFpkU2h2Z3JTSktNSmVyM2ZWbkZqQ3NVTnAyS29wME1WTWVaTlRBNXVMaktPaFJPY25zVnVWR1hFZXBDWXhrbEJ4enBubmlVa1d0NDU2MUk1VU12b1JTdkVEdWhiTzFDRUpBMGFUZ29XQ2pkcTJSVDVWTXg5Zm5aeU5tYXFLdUhKdDdycmNoMnJ0dFlCQkJNS2tuZVNLRVh5ZlhUNTZCaW1jajdlNk1nUlBOQWtaWkNhYTg4ZUpRNC9XempvMmxwR0ZLSjNTK0JFSHBBS0NUazVkeVYyNjFyeTJyVkhoVHFFSkh0a1Nhemk4eVBlc1VkcjE1b2VNQkRQdHdqdW9NVm00WkFPaUUzWmxwcHdHSDNoN05SQmNnaVVjMElHams1T3VvUEJYRmN4azBDQ0p2U01ZbkNYN3pmYmVyK3hxem02YTljV0V6K0ZKdmhkTlRRd1pYVzVyZmRONisvYm9YZTlTY0xCTGUvWXRLV212eW1qNTJ2d1R2eGNURDE3dWZQVGdINFAwOXI1OVIycVM0clFDamV1clRNd1pGaHZISXRaRFBvd1ozbWZINjNIMW1qdmMvb1BYMG1LU3JkTW1kYStXMXJqNFV6TSs5TWNoQi9PVG9IUzNmdGNLQkQ2WmhUUUpXK0tEREpZNmhmZXpJTVV5Nk9mR3VXK3RkUVF5ZWo5a3RlMExuTUNzaWxobWlSaGpuN21ub0pVcnpmOWQvUysxdFkrRldpZkhHdUc3bnJrcHlhdktqSWJLdEVoVk03RjJHS1hvYUp2eDVaK3ZONmdNTTNia2lGdGhXUm94UHAyTDdyUWs0M0dBY2dIV1N3TTI2R2ZxLzBlNXZLQzV2cGVWdU14KzRwbThjNTFEM3p3R0dRcmNvZWVCWnE3N2xCRTNTR2owMUxmTUR2cGwzM0QvYWtwZmpmWVpHRXp1bXFzdTMrYW1LNXVZT1RkcWNIMm9oQWRmU3dlWGN0RTE2WTBENVBXekVORTF3TDVLYUNSTlpINmNsUG9MMnN5b0NCeFhQb1dlaTQxalVhdXRYTXRXVzJsbGlycS9ad2RwaDl0NEVsdHl0Nk9vNjkwbCs1Z3RQUVYrZWh3Wmo0M2UrQmFOdGIvSlduajY1U1N1dFE1UDFqc1lwOFV6WGZ2YVVuUlBKNzM0cklQWjFDNXVRdnM1a1poYXVha3YvWUNtOHc1aytmRVg1RlFtY3dKQ3ZkNytja2VoRVZtbjdqSWo4akpvSlNUYWk1TlBBWDhOQXA0TS9hdGhLbFEydGM0N0ZMMHZXdkpSM1ZvWnFvVXJiVEZJTmRXZzUwYWJmOVNKU1pTTjZQRWhabVdibDcvVzZDSEgycFJnSFhuaVB6dGVkS1BxcjlOU3RkOFZPb1ZBK3VWK2d4ZGszNmVoZnkzSm5YT2F2UWxPaTI3aWJXODZEM0dRZ1h5K3ZRLzdzc3J4Z21kY3NzVFd0TWtGa1dDQ1ZQRFdCQkpiNmJPQkhrdkxYdWRGSGJwV1ZYUEpwbEpXb1ZERTNxYlEwNUlnbzEySkhMSlRQcTlIWG9YeHM3Q2NveDdVeUVEaUhVbW5sOURiakxuV2JNa2lJSDA3NFFaRHBDZHhxRVdmYWEyVU9HWnJqWGI0UmtrYkFkcnoyVThXeXlxM3gvQTc5TXdnY3prNEQ1WU95emVyNnUzVll2QldlOFBzdGZwOWkvU1c0N0N2aDl1Q3ZPNlZROVk3Ynh3T3FYQ213NGw4bzdOYU9tbitwYXNwOUFXQWF4bllabTV5eGtSVHBQVThIWWs3YXd0VkY3UFNZZ3cxSkZOT2JyYzdtWE0wWHN4d1BkaWp0ZXFGUU1HMWxwYnp3WFRISGxXYmIzTmRlVjZFY0c2ZmxXSG9XY0VxUWt6QzhBV1F0Y3hGeG5vRWMzQjUyUFV3VHA2aFc4ZGRDWVNwR1hLV2FKNWRWOG1KSzNHMGQ3VFMwd0N3TUJiME1hbnI5QmJnOXQ2NnpHc1dmYVpScjZydDg3VUgvczc5SmErTWxxL28zb2Z1TXYrSXFrbTBrTmF6VEZnbXd4WURGRXdISjNDTkZsanpNY1p3YllGSHpQMmxlN0t5K205WCtON3I1aHJEOCtpRXptc25oc3FTUlpVdjErVU9nMTBaM0owMDIrMEtzTUgrZnQxNFR1cUNScStvOUFmRzNMZDNPUGNzbitYM1BHU3paTDBIMVNwWjM1SzNqSEtIVXRZZVJKZFQ5RDVkYjNsdEtDM2VqK2p0L2hmMTF1MFBQSVZla3U5b2JjZVQvZXd6L2pnQWIyRjQ0TmZpQ0cvcWk4RlpqQnZ4SkRuaDRqbVFFYWVQdmw5R1ZGYmtCSDFxMlRrZkZ0R0hzcEhjVS8zNTQ2SXFMU0tYbXY3Zy9UbHVKNGlVb2NnQ2dMQTRYQnlVY0lCbEduZTZLeTFrK2J0YUl2ZVRwV1JTd1FtaG96Vm8vZFg4S1dUZnEvVFRxVW55aWE0SXNaaGJuWTVkN2dJeHIrYU1KSlIxbEpWdGFQQnFDV3U2SGpGc2hpbnlXbk1IWkE4bnNLVlNzY1U4L0hLeVVwWTJiakRBelVVcnFCMzJoclBubURTdjlMTkFLZ2pvaFpJVlo5QVlNajdBTGwwYzVHRHJvS29QSWU4clhQUVl1aDZPQVdwOFlMY1hzemJUODY5Um1pT0lSWjA5RDNrYkFLaHBSSURQNmxLREp3MjcrUzZSRWJ5aHdCMUZ2bVd6QVJwMGlIbndFL2FvVUh1Nk1XYWU1MkxxV2RIZE9SY254cjY5d1dyMVVZUjZWM1FvZHJvNUN4dWN5VWpYbnF4Ym1tTUxoQzB2TkdCZ3ZUZDBoK0tPejgxRGlFNmo0VkQ5NzZ0emhzZWQ5NWNyWFFXNFhDVWhJcStEZUl1dU15ZTVRbzE2QVIrdkRJby9IS25nbDhPK0xia1FpK2lIUXI1Zkg2VVRPSUtPZ21GTWs1NlRzYWJXZWRhU0lIQ0xZQkpMODhvYUdsVU5PRDErVG95S0hRd2tva2FQTGRldERYS0hPQlI1dWFvOVFtZ3dXMTVQN1lBSHFsV2RWYUJOa0FIbVVFNmJBQndZUFE4V2lxLzhYcWhsckxpODNyaHh0M0M0YnJReVJDazB3T0Z0YS9EZnRRZ3VzRjlLTmRrdHJXbUFZV01pZEhQWEJ2cEN4eWVJcjFCZFlaZWlDM3BqQ0NqYkpvdzVxb2s5ZkpqU1ZzRFVJMnBmZ3BTOHdSam9oeHpDbGVEYUdxS28zSk5xNlNsTlRrQ2hmdUE3aHJLZzYxVTBLbkVmMXE3dHB2NFNqZHpiVFZ5ZVhQbktxV2N0QVY3eFFQc2xVSkNYOXhEblZOSVB3aVQ0ODZaOEhBbmdYSSt2WUVQcUVXbU9kS3FPK3UwZFdjNWZmNlp1d1RsMkZ5UDYzZUorbHNCMjlwZFdxZzM5VzZnT0djdFIyNzZLSGZtMWJwS3U0aisvN3lUbFhMVTBpaTVYc0FvK1hXb0gzNld1L1pzNVEzVkU1U3RGR2dFcnRhV2QvSnliWG1IcmRiVzFyMHpNanpPRFdreFBHNXRDU3ZYWWhPL3BDU0FhYk4yenFmZnE4dHc0U21EeUYyTUVseXlHN0YrS2tCcHcwK25rV3NoRzlXQXorem9oZGFTcnh3VXlGY3VRMG1BNnRjb1BPWVBkeTd1UWtsRVB0b083alNrNVlTVHo5RzBxSHVpc0tTaFltYXFNaEtRM1hMdDBsNFhiZDE3clFoMlpjbkVtbUpmMXNKd3R1cFEzenFsbmRTNHR2WkdqOWRSd0ptTXFwelhZNHRsQXk0RDJEeXZWNzZyTFp0Y0lKdE00U0Y4SzlrRUtaU0c5cVJyRmZrZlZKZmdFaGZzUC9hZks3M1dGaVJBQUpBQVRRaXVFcHJ1cFE1ZGFuUG5aYWlZUjRkUHZnZWN1Zkk1WVYxYlQ5YldlalJwSFUyNWRSUlEzVDRzWTRYenBDVjdyeTNXTzFVdUtUU2pCUzhtZmpMRDBEbjJMSDlEZDlXYUpRNG41NnEwSk4zYnBGeE9vSlZmU3prY3ROUzVHSndCNGd0M3JTY0UwcklJT0NjS09QQUJWbzQ5b3AzWXZOWnZxUk83NkhVZWhtYmoySVBQZFdpY214RTZaT3liU1oyaWJrL2FpblAxQXVKY3NqNWlaemZheVZWTXREOXIxeEpXYjNNMmQyMTM1OXJCRmY4UjIrQnFYVzNadWQ2Witrc0JCem1JcFMrSnpKc3Ruc3A3c1ZxM05GbmdDSlA1bWxKbmJJRUdERk9MUUV4RlNpdExLR2x4S0o2U2N4ZjBHWjc1S3J0c1YrdE9hK3VSU245b1NhRE1pakhBYTNlWHJzUXVnODFzQiswcVVpMit5RHRuYk44MVRLMk16NFNiTE5xQm45UlhhLzZhckNEZEh0cTlnOHQ5cStWbzFLT0dZNTJDNU5Mb0hyRnQ3VkhOWjZ6MmlKdWRRazZBZWJ1eFZZUHlvL0tLZmNhaTJwdFpXM3ZEVkh1ajU0NjlFOFlXdTN5VHVodVA3bFhNcmpFOHZYcHdOdWJPVjJhZFdoekdqVmNxdnV0NXAvaXE4c1BORWxYY3lSNGMwT0tlRmFyN3FXVThFMmg0aWhFRjNIS3BLdDFVVmRCNmpVUEltYkduZEU5ZXpnTFNvOHVaUjJvV1Zja2hUSFJndnBnNk1qUkJmTjFqSkZpQ3hKV0x3SVF3bGtRZUdIR2FxYXVqYXdmazc4eWlISlpTZ0JHRHBEVlpuTmFNcXhSclc2bTlTUjlTZTJ5SmJBeXVtSkNFZVcxZ0NsMlQ0VFFLbGU3YXNkZGZjU1h5bTExeWFFOGV1eEw4czlweTUwcG9qMVpianBCOUJxRGFjQm5rOVdnVEdoQ3lRT25tdEJFTWVUQ0IwdDM1bTJrVWNHY2dlRWRpYkZ6ODNyeGhkWEEyUkVPUlBMYjgrTityZDVJc3A3bXVyb1RZMXBWQUVmVEJzOEtjZ0JDZTZzREI5Vyt3aW5XbXR3T2VLbWg5UTNnbGdBMmwrdUZRdER3RDRrMnNvc3BJZStsdW9HbHc0eGVEODJSQlFOa1h2WmJtdzlZWnpJZko0akpJNVFPY1NacTh1SE1hT2VtRlNzalJmZlRmY2FRZ2FJdVd3SUFYQXdBRGhnYktJUkJibDVsS0FncUxRZGRqV2dGaVdYODQyOEVjMkNYaDBsZE05Y2UzaXNQYW8wMG1uYWU2dXFPdXBsUmRpYTR5dzFpMGw2cEhTUXJIR3UweHp1bDVGNmJtRVdPRmcwcEJRZi9hc3dSMHJMZ1lrcHAxL0ZPMWdYZW9qQVIxSUI2OTFFU0JTZTRBdm93R3N6RXRYTGRjS3lMYVovYnllcFB2WUIwNTFtam5LOUR6aDg0U09IUnFQSExBa2VyYVM3cGV3VW5OL2NJeWYzZ1kvNmFOcTltQkFxdWs4ZnJLeUZXSktaTnVyblN4WjdDWFp1SE9SUVo1V1M3eUduRGhtaFFMWVorcmhOQTZHYWhLa29Mc1lzNndsV2U1TzllYUhzbjNLS0U5WTRQVTFCMTd4dURrZUF1cWQ2RmhrNVNhUjhkaWszYzlhNXk1ZGRMdXlZTy9OUm5vQStURms2OGtxN2U1SURnV3V4L0hZdncyRjNzelRsNTUzTGUyNU9Lc3JiNEVKYUs0NVhIcDBzTkJpUEJzZ2JxandndzZGa2tvbnhJOHRSeVhiYUN4YTdtbklEVXE2bXBvcTEyemVvRmJOeDF1WGFlL0tGeDBQUUFoNEh3Zytldm9WZElFdmQ4akxiTVlSaDVicHZXTE9pQVFyNm04OTRkclFxV0d2STdwQVgwYlVLd1JPam1rTGkrb0ZUSU12UTFyeXZWaWpkdEpOeWhZd3UybjFib0pWTGVGcm16M2lONkZSd2N3Z2dHaDlzWml4aFBxRitydDJCcWh6c2J2bVN6d3QvOTgyNWh6MUwray9YUjZDL21PZmJCbDdPWHBGZHkvVWhqdWlqQjJ3MWJ2SmpHMHJ3Q3pTR2daa2NlWkFvN1JSNGxqelVvUUR0Y1NsazU2Qm04Q2tOSUdGY01EWEtQVkZFL0h5R2JtOHFPbGkvYVJBSnBBeW04Um9DdmQrTzhseTBkL2NOUncrOGNnU0xzWmJ0c0J6K1VVZkJnTTljN2psUW9XQ3JPTUwrRjZ2eTRvMHpDOUxpVW9BbmcycFpWVmtGV2pYaEFFRkxwakNVdVhNM05na0Y0NGpQYUxIZDE2amxPZHRPeHpwZHh3OExrWjYyTkdGOGJGd1JWTTVLRjkxZnBPanRXVGp2WTdmNXNqcnlmWmVNUHBJVlM2akdOZE1CckY0czdsaEZPUTRtNStkVGlDWndQUUNvZUNOUTJmVjZFS1JPM3QzaTdaRzRaaUVVaGhvUTdka3o4RUlKWVZaaW9PeU4rU3N5WWdHYTd0SmtFcTc5VUJWbTJXSWVzTHFXUzdwbUF0eWR0d2xqc0dlM0tINXI0RW5GSE1UamdjTGVlV3NBc0hzSDlMOER3M2RKMDl2RTZDVERpaE1xSmNxSzkwaWVRVjNZdG9ESk1aNFNsSTk5RnNFTUYwcEdNeDRBMEdxY21NWTFDWG5MN0Fhcm5CbmlGMUI0NWxIbnhPV0xqMjlFVWRuSmZJVTBSQkhkbzd5dTdnS08rOHBpTmxGbkdrRGxtN2hzOXVzSnhPRjF0Z29TSUlpQ0RiNFdvVXUvWnNxVjBBZW95aEZRWFMySmxuMWxnT29mMkJsbWdwWS9KTW91anhXR2FEUXNPczUxQ2U4Q3hoNWZNajlHem1BdlFDQjZqNFhyQUJUS3lZUzM4dWJoMWIzNUk3Y2ZKVGQrZnlaa01tOWRXQWY4VTV3bCs3RjE4UWdPcnpUbjQ5QUhVZURVQmZuaW5rTzZiR29TbGtIN2JaWk9vNXJWVm82NHpQTVJIOWQwS0N6Z2FwZkFPdHNFYW9DU0llTVhxOGJnYTRxVm40U0V3NWc2SVhOc2xKMFJXY1gza1hKUUhpdXZzd05TTFAxb3ZRcWdpMVRNWE1nMVJPZlg1MHFBYUh3RHRCcW1EcGNnWmNDZWpJcGVidjU0YXQrUytxcW5BM0E1ckhVOGgvUEwydk8xY2lvRGtaMk9ZSjBjNCs4Z1kyTjcwQlBIL2N4Q2RaRStzRStRMXNaZGI1aGVoaHJUYlVUcThZeS9hSGE1a1pic0RHTUdSRTg2ODlXODh3dDRhODk2d1FlRnhBbkJmYXVXNjVUQno4TEFPSzZLaVloU281Nk94MkxySWtsbnowTEJkNHRJaDFaZW5zcjZGMDF6TWxLWUtOaVFPcTlZaDFsVENoZVF4Vk9TTU52NnBtcGVIdkJhMC9MZWUwYTN3YmVJYjZnaHZac3pvZnZBZWUxOUg3Mmk4R1I5RVh6ZVk1dDhnTStBZHhPLzU0V3F6NzEzTmFwa3dUM0U4eE96azU5TDRtdGRUbkFWa0k3QnhoYTBBRHA1THVheTdVTEJldTlVOUxiTjNSeU1EaXlHaDlQS1lLZ1lGVUJTNFlPUFY4Y2l6azJKMlhmcW9ud1pyUXpvRDFNemd0cHFPMzFZaHZ3QzFQSVY4V1ZpdjBOeGhwN1dVYWNYWi9TZnluWHlIK3dTMTRJLzdCa2NNL251bTIrK0lmL1pvL1A1RTYrWmY0OC9tdGdsTHdLTnJDdDkrWjMveTNnL2YwWWU1SVNYVFVKQllpVm9xOTRIRHJLbUdLTXdrTkhvRW1IZ3BwenV0UGN5Mm1aVXFZKzgrMGxjYmpiQVJjOGhkVk5ndDMzanRXUU9yQ3hMSFlKT0RGSmZEc29YTW8rZE93VDJCUUJXeVVmSXZZejdIMXpDR2hnN2JvNVhvZkswSUxYR0UyckVlNXdHZXFsSmd1dFhEQmlEeWxXNFFENUNmSnNKOHc4OThmZEVpR3FBeDFBc3puVllVczcza0V0MEhhWlYwdW9wZ0NUS0Jra1l1VllhbXdKOFQvK1htRnZiNDhyNzg3dE9Cdk5XeE5wRTQydGtaSnFEeU1MZkR0ZVQzdlgwOGNZcXk4K1VVaWxDVG1waVJ5cmRVZVNHOWlKOUw3YXE1Q3ROdk42VlhSQ2d4TkJHSkt3d0JKbU5PWnp2RmFXUHFXV1FRWWxYWVoxQ051SEs0czZEVllXTjJqWjgvUXo0NzFxNHl2a2NwTTVzMXIxS1FBUkdGUWw4Y2RKNDNydXZWNW5abGE1eDMweU9kRW5Td2lrb3crd0Q3WWN6RUQvNmxCMWRrTUlVSmxtZnU4dWZFb0ZNdHdsdm1TbUlBUlN1azZleDM5RnhQQ2sva1hKYjd5VzRtdjZQRXIrQXdqN2w3Qlg4eUxUdWFkODVlZ1EwcTNrRDJpUjlIMnZqM2Q3UHZpZ2Qzc0VnaXBPYldmWVVPc2pGZy96bUJhYkZ4cW81S29DSmZmSkJGNjM3QldNaktTRC8wVnNTdStTT3pPTjhYdVVmZjl5ZFI0Vit5eVg5Wkt6QmVKeDIyajlSZ0pVUGZwTjk0Ump6WHhHM3NIVlJxVmMrbFZkVUlvTzFzck9HeFRwM1BxNC9RaXZGR1NJL1UzU1NnUVV6aGM1SXUrS3JpZ0d1VHJGOUlDQnlHRXI1Z3dDMG1KZ2VyNEdUQjNkb1V1dTV6L3hqTzg1WHZJZTE4cXYxRlB3aUd1RktFejlUa290R29YdWJtSno4MFNRK25tNFpDR2Q0Nmc1ZXZ5dVJaZm5zVkJtM2NFZXk2bXJpVXp0V1lLNkZkeWxlNHFoRFdWUmZtbGszYlpVQ3JuS3lQSEhtMm92NnF2MXV6clhLVm44Q3ZYbFAwYXVON29WditPOEdDS3V2djBMZTlmMDJsNVRVc0hJdVRNV0ZYZU93WXczcTNJZUVTd3RyWndwV2JhU2p0cks1VWJMK1NsWGd6T1dvb2NpRmJFai9zYThWdmZTaEVMajZTSWYwL0QzNlB0SWQwbFQvbTdMbi9pSDI5NTc3aElUUjdlYldBTGJWYlpwKzczNmU2UHQ1d01IVWdDWkFGcDVpckk2WDlub2lCRmUycEVZL2liN1YvcThQQ0hLbldpN3pieitzYnZEekJRSXBYUFMveDBDdi90NzVVcEZyN1h3TVExcDlEVzRYdHcrbVJtbFhkZ3lIYmZleWZzQTN0MTRibkUveFZzTjRjZjJ5UjUrL0diRjZieGZoOXZONzhka3YxdndkdVB3MitwdC9HaXR4Ky9uYnprK0xiL1BmZlNtcVEyalBWcSs2cEtnSmU5QzNnNFlidnNrUy9RZit0Rmw1MXVrMmdid2M4aDJZRWsyRnhQWXBFSk5tWWl4YjJxc0xVZ2Z6K2NDWUZpdktnRGZSL2FPZ05GcmQ1SFh4UWM5NGR0K2x1OGlYNjg3ZmRCNHUzM3YzMVB2T2lCTCtHaGpiYk1mT28ya2krZk41a3BkMTRHdlBhaURtZDVhQm5vZDh2enhmOU5uNWQ4Z25UbHVNUCtSVlYwTnVCbkozOWUwbkRDRHBBZXg4VHRiNk53T0dMZEtmazVkVDB1ZnQ1WWI0SkxiNU80RjFmd2NCZnZrUzVhV2VQL0NyMjNkTHZadngzSUpnWGJ6ZmM0ZXZpZzhTaGllVENqSkZDNkJXVFpOdXNYdGRhaTF2VG91bzFrTVRwa1ZRSnV1aGVDWHBPTnJWa1NSdlR6RStEQW1zVGlFVjFCOVBzZWN1VDcyMmlteUlsdmRZOEdaekxvNStCZDhlSENUNU1zVUV4bTJzeXl2YWdLMmlZOXdiODdJOVhVN3RHa2MxMjg5a0xXVXhmRzFMSE9CV3g3bGNHanY4ZTgyV0l5aWNXK1B6U0xVQUZpbGxkNFBza2dVZ0VQYlQwWjIyTHU4MHNCLzNPR2dvODlPakk0MXZuZDQ5bHN3N2ZkOXNmaDRRUDY0VmtDK29CNlQrR1hIdHhQYkRwYWIxbk5LRGR6bUdUdVloc3QwdTdhTldIZ2pkNnhrNnVZVTU4Zk1hWEdRYit2NkZtbGFYcVIybDluV3IvM292YTFUT3V2TS94K3RCZm1PdWhYZjZkS1BVSHI5ODZUdUZkby9aNkFmS0R5V2ZRWjBxaE1PNDk1Z1B4N21mUjdIVTFTWDZWTitUejZuTGdLSlRBczNXUVZaWk4rTDM3WDdGUVhnTGZ6NFlmM1c3b05qOGsvKytBZnZDSHErNFpjOHZ1OVE2VW8zdzF5bHdkREJycGZ5b09UZWxHUW1odlAxaG40bHVFb2NibWtDSWNqWVp6dU8wRXU3UHlzSmdCa2FId1NpM0ZvNjRLVGRqdjFaNFdLdkpuRTRoNGNDSDU2KzJZdTM3enc3Y2YrZjlXVmpBQ1piVUJibnN2ZmRjYUdtenNXbTR3TjBqQUZPbmVXK0hCeVFLclJlVFAxSkx6K3Q2ZGdFeTZEZEphNEVqc04waTdqRjJWeDhFTTFNT1hPeU5RbHdUcVpmbmlONHMzaDdjZkdTMzVML1A5bEovYnd2WVM3Y1VULzdxZnkvcDU3aG4rL21ZTnBLTnJxdlVjbk5SbG5MalJUY3VDb3lIeVFzd1NYcEtJNEcxdTFkVHhpSmY5WDJzZVBqclpLS2IzM2tLdHQyMjFEYjdQWkhyeER2TjM4cjlOa2JCSU9SenZuK3U5OU5neUpZRkJqY1AwK05ER3RoSjJmZHpQSG5tMG5jUTkrSHFUSktzaHUveTV5YXRBOWdEYVN4VFFtNjIweWVxTDd4Qk1HNHdYUm5yMmJ6eXdjZnJTRTc1Qkc4SzFxOUlHZ0hJTGRiOGR3OXhzT0V6UnZwM3ZwMjM3bkJXL1BHM2ZEeVdFY3ZrZC9oL2J6Nkk0dDF2dUpYcXBwR3RnTDFoMSs3bStreld4Vjh6S3pqNzNNWGZuOENUUm1iaU0xTForRndUSDcyNDdXajdLSGhBRXBYQ1FIZi81NCt4NmZuNEp3TlI3ODl4M1FLOHl4REtBVFpocWtKa1lEbDBZWUorYVJBM3llMk45N1loK2Z5UE0wZnZVMGZ2SVUzanh5Q3VIYmQrK1lQSjNJcXlkeGM5ZlN0OE9QT0hoNmoyMG1zYXZkM2UyZm11R0daaEJQcnF3bkRtL21uajBUREtXNzl5eGRBSitiRE5pNzFyUk0xTi9jNGV6TlgyNjM2OSs4VGZpL1pyYy9LNS9JMTFnYkZhalIxT2ZPTzRkZnc3T3ZsQy8rKys1dVAzZjVFUzJ3UzdaNStyWTUvT1lkRDl0OTRDWHhKdnJOZjF0NnAzajdpYkpjaVBhRjA1YysycGV5SFBmK2p1Q2ZqeEpQa1RuUDZ0WkxkSVhEeVh2WG1KMUNydFBNdlFLblNiTDM3QjJ1dGlUaHprOW5wNURWRTZpRUREV2NiTy9WYzBNWXFzbXp6R2JPU0dMS3pKNmhkTmRCUFc4cjllak1HenFyZXFJZVBTOEowZ1RyZy9LZGd3NjhzNDZQazlCdXhrUDUzcnIwdXFtOER6ampsektPMTgvc0gxOVl1OENJK0ZDYy8xWTNvOXpPLzFtRnlwOHBBcUtyQ2xOQXJINzBiREZ6N1prSWRCRmtFanNvR2lKNnA5cGV1OTYxNHVldnE2S2ZyRWorSjJaVzRaMStXWW1jMVpSWlBmK0Qvd2VoU1g4YmFVVXZteXg2VllYU21sMnBVQTVvaGZJc1JidnlXZlFaSDZVRnl1ZlI1M3hRcGJ4OXloL0dRbW91YXE3bE1xb3kyanVXOEtQT2VWWWJqK01jNjh5NnR2YjZUeEtIWDc4QWpZcHN1VkhCZG5QdzRzM2JqOS8yYndIODI5djU4QSsrRmcvbnRaVWFPRkpTK2R0VHRCN0Y3SVMwYUU1NlhvM2hhQmVteWQ2MXdtUm1nMEhCZnNHcW9ieitSOWVBYjhuQ2Z2Y1d4Ti9qNEQ5WUdEQnExc0xxcmtQcm5GU2RGZ3llZVYxczMyT0xURXVkMlB3Ky9MUGN0Y0pkd00veXQ4VzJmb2hIMnMxVVB4aDY4S295WWdNK2lYMCtxajhMZjdNQ3BERkZXRHFjbElzZE9OY1hKVWU3QVlLZHZBMm5EVUVpclVUVElFMDR6em9uTG1mSzJIbkdWcmhtSng1VkVzK1QvN3RQL29PVCtXemZ4ck0vNDkvWW4xRWR5ODgwYUR3Yk1iNm9FYU0wdW5ob3BhRS9RU3o2MjBqdlQ0dDNQNGZBUEtwMTNjMldRUm9tb1h6cFA2TnZ3dDNoYW4vS2FObmx6OFZpRXZjNjJvYzMvYk9aNldjRyt1bzJQa085anczS2R2ZTJPYndsYjBqY2NoSWUvM2lMNGozNjEzLzhuajN1QUx6engyL0wzWWVhL2llN2pwN2RSZjloM1VVMWlmaEUyZVdmZmxGK3ZWUlNia3NMWFZmUDdxci9JZDFWNzAvOUo5dXJubTBnLytZMnF2Y245VHlhTDdray96RVc0ek56UlQ4N1QxUnQzYy8yT3p6N0dqNDAxblJiSWZFMzJKd2VkMndmUzU3ODVFWlVxWGJ6R0c3cWtYcVZ0NXV0dTM4MjB0KzB6SzY0cDFyYXZFck55elBaWUtmMS9Cc3U5U3kyVVQzekdpZ3k0M0JSOWM1SDJuTGViZWlQdC8zMitDTjQrK2RzNkNwSXpXV29tQXZYMG5QWG5yMzZuRnA5SkVaMVo0TlVUK3FEaUtvazdqMkwzVjJtUytCNVEraHB5UHhwczkvQnQ4eUR6NCtFU2R6THRRSDcvOWo3OHQvVWtlWGZmd1hsdmgvZTB6MGsyTVE1QWVsSUQ1TGd3QVVTVm1OLzUycXVsdzUyOEhhOVFPQnAvdmNudDdmMkJqYVlKRFBEa1dZVXdFdDNkZlducTZzK1hhWEg0aDBmQWpYZm5mNDhyMlpRSitCRy9EWDZneHptUEc0bS81MkJNU0llQzVpV2VSUG1CL0FFWk42OGExeFZaeTFldk9GbDI3U0FZV2d5K04yNVBDWTF2ajdYQmZpV1NMR3FrTFd3YmYyejIybUxBam5VdWsvNm1wWmEvMFJhTk9Id0QvbEJIY3Zjd2d2S3VZcG9kVFByOGpYK3krRmR5ME9nTmUxUGZOV1Ivc3dHVk1maTRNb2JLbHgvMHRhRlIyMEpFMXBUSHl1djVwMDMyV2RMZWhJYVBqT2xZVEtUdHM1STdYalNvblJXeHBid0NuTVJXMXJwdlBlVjRaYWhPaldHYWkzZDdCNStZTlQxMXdxSThwNzAvS2tXZlRiWjJVRU5lSTZ1QkN6WjJZM0Q1RUV4VWhac0E4YXBvN3Z1WTVTaFUwd3pPRWtWSkhWNUxnVVpLYkxOT05OdG85Y1lDdHU0YVdpQ3dVVUVkeHVXazY0UDFxelNrUG9MOTlsOVBIam0xbmttN1Q5ejZ4WVZmRmpxME5RS0ZWQjJwdVNPSlJzWVI0NlduTktvZFVsUCtKTzJtTm5HN1VWNWNpaFBxWGpTZ1hQZm1mTVc3MFVLM2FiV0lramFYNFFrd1Q3dTNJdDU0bWxBbGVpcnNQeXRzL0dCZFNmOFo3QUx4Nm9aYWx4OWJqSVBiWnVyajVaMHZTZkRITXJrMC9LQ0dZV0d2V3l3Z0tNL2YyQXBZc1ZTaEhyS2F1S3MyUXpWMHprRnBuWTdkalc1QUVKeHpUQ0JzWlo0d1BLOFpxdFdlY29SNUJkczAvaHdMVkJFN1NRRjhZMHNxdlB1ZGZaWUpRbnlXSStvNFR0WG45dkN3MUdLc2tzK2gvRDNNY3N1S2U5UWtxaTdoMEpvTWRHa2EzYUc0V2w3L2JlRC9zL0MvdnRRR1BFeE9jcXdHRHB0aXlSdDZidkY0SjZRWkdlSlBRSHN3Nk8ySExUU1YrSUk5Q2JiczJRcGVrbVgyQy82b2EzejI4Zys4Wnd5Uk44ajhuV1lXZ3VkYUZhWEZFVytObDdUOWJuRlVFUXR1bmR6MitQbytZdlUrb2hNM3NXd0Q4OWN4Q1l0aDlOM3FmTUV1WmRaZERDYTJzVEh5b3RHd1J5VUl1UDBiMExBWE95eDZ3SW5Rakw1SElaYWIvOUtuenVJMVpYU1RyK3lHbDl2eXpRdUt5dzFYM2tPamRKMEFUcFVQQkRtdmN4VTU5QUQzM0Z6UUU0V3hKb0hiRWVYTmRkR3FIN0p1NG1ialN1bVZ3M2xSVXJCclJaNnI3UFhSNmt0cmNCaHhENXF6cjYrUmxOalVTQ2YzTDZPTXM2QkpJdGhXbEZURGpwUExSNS9Pa2xuQkxKaE1OU3RlMGhpaTFtd1ArNml2V0lYUTllM1VCNHV3L002SE9XTTlUZ3B4ODU0emVKejI4T2JDSlk2T29mUWhXS0ZTdFBQd2ZSVmIrZWpKdnZmVnpxWVFEYmMvcWJJWis3SzVTNjJkdnhaOENpWG5MTXd5amVFa2dZTW1vRVFSbTRWVnEreWd1QVJEL2NiTFJGd1dMNUs3Y2N3VXRseVBzTkV5Uk55TGpMa2ZNdW5iM1dqQTA5NWhTdHdUT1FoUUl3MWh1cXNtRVZ2ZCt4ZVp1U2RicGxTblUyWGxKVmtWVnlVaGpqMERBeG8zT3pjQTN4NUxOTngxMjhuNnZVcVFjRTJEK245alBwNkVMbG5MQkNyWUJ6d3dxQWYzaHQxcXRMOVdjZm02bU9OV1hTdFVYMitjeVpnZitiSjhsMWJ6bDN3SzhrQ2YwSVhBcDJ2V1RxbmpPSVRaczI4YTVFeFA4ZWlQMXZOQitOWlp6cWVZQytqR2RicFV5bmc3c3ZEMFF0WVZOL1Zqd0x0V2RHTHNkaVhsOWFJSXRZQ0tjcThoRDE2cFdFdGYweXkydWpMUHVlazF3M3RZMXZPdEI5Qmh1NmtIVXlKOVAxSk5EbXlmd2lOb3pvYi8vQVo2NnZkOFI0dEYwNXFEcHlrcm5rcGJPS2pJQ0NWbGR3bENZd2pONlZ0UUEvYUJhZjAxK2xmSzhmYXJMcGpNOFBudFd4WUNKSzZlanJRdmV0MjNPU3ZuNzd1b2pJNWgxM1g2WFdtVC9QMnJEYXpwcXZPY0R6QmtrbVVxVUFlcnZ3bko4SkJIR3FYV1czelpCNExzbWZEd0FrelA5MVpHYTNoN0ZPWkxIclJ5dWxseU5EdTFxZnZFaUo5UmQ0bDg0dTV5TVh2ZVhZczFlVWQ1RmFTSFhma0ZMaURpMTNucDBSdVQ4YXpqODVvUHV6MFowUjdPcHRaS1R1bWFCaXVvR0VnNEhLTmZXaUhSaGcxOGpSbHZrczNqSHhqekVNN3NxTzdWY0RDY2M1bFFNU09GN3ZYQ0NhSDkwVHVBZHM2cTBLZit0QTVTcTcxSFJTa2hpS05pN0t6YUhMMUllUjdjdFRjb3ZIT08wdk9WMzNWK3JtbndscmpiVUxzQkdWZ1IxT2JFN0NpQmZmUVJaRks1Y2lHUkZNYmkxY2NIY1BjS1BFRFpqRVU5azVUUTQyaFJoWWtYVG02TW4zYURxYm9hZjQyeHVNemk2bnJPaDlQZTUydWx3ZDB4VVViQnY5WTAwckg3Qzk2empoYUhDbGI3R0prUldSQWlXdStQc3JTSmJUOU5rU2wrWEEwbWcwN2ZYV0kwOXY0b1lxUE5ZMTN6TUpJcE9RYVEwaE95ekpTdXU5UEg0UDNwNC91TWo4eWV3WmFLUHRXQnZwbDhIa1Q2QmZrdGlxSWZwRThIem5RRHkxTGZnVDZqVVdHd3RhY1BKUXovS293LzRpNzEyNUphTlp4WDdyNzk5eXVPUjE1eitlamJDeDN5cDhDWmRFMit5Z3I4b3JneXVXaHZleFBNSS9nTUxNQ2x2c09jLzBoVlBxV0xiaHVTd1RraU9KK2xPd3hUVjRibkFLdzAvT01aTnV3eU9xUWhSaXdqSDBmMlFmMDFlR0dvUVoyY0s4eTMvS1l1VmxNQ0VkMnU0UXU0VVNOY1cwL3EwOTU1S3dKRnRSZGVxVTh2ODR4NDBYQ3VrUG5ITFBjdnZhc3FnRnAxNmE5TDUrL25WZ0xUOEZaK1YwVzBrTC84NVlJTFlZSjRZNmpncHl6VjRmY29GT3pZYTJtVFdMdllndWtpd0Y3NVRrNkhCZUo0Sm5uNjNUZTZlNmJSa3Y2b1dZbHJFMUhYM2VZOGZJOHNGbnFQcVZRREJiV29TZlR4elM0cCtiV2w1OHA4eDFYbjIvaEVjV1U0aFkrL29ZRkxwS3VBWllpYW81bFFsTWJxV3lkS05yZUY2bWRUejc3MTRMZzJIcGl6K1pqOUxNNzM4TjFjbVo3K29VZWVkOVJ1N2JRVnpwYnBqNUk3UDNnZ1cxbkwzenFXTGVPMHpjK2xPWFN0Y3JHNlpheml2QVF0NFRIUFN5NHp5NkMzYW52RzloMHZZMjlTQzFzOE5pMnN2UWw3Qk8wQktFRngyOEp4NEowU1lHUHM0L0JLdUFyWnVESmZvdXRDSTVrdE9lZGY4NWEwMlA5TzJ5OUZsbUx0a0dCbk1YQTlzZmNXU3M1cW9Fa0RZam4vUEprZHB6dFVPUHE3VFZITmxRd2FlLzQ1NTVNVTI2OVFiNCszanJ6UkhnZXBHS1ZRRFkySFA2eFp1cnkxTDF2N093QWQ4Snp6NUZ4cmFqcnR3anVISHgzRkJlc3JsZmpjSWJQVFlZYTFyaDZOelplempzd0dPK1praDJKb1Q0UzY1Um5rMno0aDdSajRoNEIvRUg0Q2JadG5WT0dwa0NONWU1REwrbWZjVzFHeVN1eXBTYmFBWEd2dmVrcmtjSmpQczdzQkhnRTNYOVhzaVIvOXhscjlEWkYyZzZMYnEwNXhWMDdJMWdYOS9XRWN1OHppOVZkOTNtODVzbUd5ZUVDa2RaZW9EUnNKc0ZON3R6T2NFc1dkaEZiM1gwK0xzcWNQTGQ1dkZOakYwUEZxemQ1MSszQUU1WXd3Y2FJSWdnQjd4Q28zUHArbmNyT1VPYkkrYnRBb2puNmdqbHB1Y1dydkhxWDhiWGp3Y09jNTFaOE42OXoyd1owMGI5SUxSWFV6U1ZMRWUvYzgzekZURnBTRXZ0ZGQzNVhhdG5GeDBKMjVwM0lLY1BnWFgwNUtDUm5UNVdPNVhvZCtDSnRkK3Q1NG9TN25rWG5VZ3pud3ZHYzRIUENXYStUYlJUWGZIMmNGckt3NklVNFpmRjVQZW96aGIvVldYSnV6eWxpUnkvR09vOHpPclNwcDlweWhnODFoaHBqSERsdmM2cGNweGVydmZiL3NYaDdFRE15Y2lvbTUyZHR5YmtZTVlWZW9mcDQ3UkxlV3luam5BTlRjdWxkTzRFamFiaVJYN2NTZTlQMDl1L0JJcmRNY01OMjkwbnRGTkorcTNUczhHVUtPa09EV2ZESmZKZkg2dHBEVVN3SnNLeEc0K0xBcTVGN1YzeE0vSnhlQ2J1OThIaEUxb1o0bkdCVVdPL3lZNGFYYUNpd0kyYVdES2JhTXVXWjBNT2FGdDg0eDdnVzlIRzVoVExKanNJb3NzMHV4a1JHK0Q3NDNkdHI1NDNaWmVUcnpRanhLNHpPS1hJTlJCTkRiVGg4M09iVXNUNmlHSVdsQ0YxNFhzVnhjT3ZnSTd2b3ljelRHT01WMldhd1lPMTBNS1RINE1TYVYrYXI4Yk5ia0hTOEVHVzZQbmRUZUNYMVBKL3RGRmxmNTdjT3ZucmNuajJZNXp6YjFaVXNuYzdVbGRDUHQyR2c1N3F4ZlpIYVBXNjU1MXJQaGs5Zjk2UDQzcXRiUDUwNVNlTWZHRVBPbGwwbE1UL2RPTjJrNnhaT1RWMlBBend4SU43bHdPVk0vSEN3cHQ2V2VhVUQ1ZDk5a3UxOTEvcVJscGQ5OG9CdEsycGo1TzBUWWxPMlBuLzg5dG13eDlzNVplOUhReXpKaUZnaytzbVRqZFdJSW1yc0xMdzNkWXlkK2JlWTYrZzhEekZTdHBtYXJISktZOHRRNHlkaEFmY29IZUNzZFRDRHltM1dPbFlBQ3lMcll3Yzh0Nkh0NGlYclBUaCtyRHNtZTIyaWZlOHRyRnVvM0JlRHU0UFA5bWhCdVcyeW5IaUhyT0gvT3ZUK0luaFFiUDU0YmMxdFE1U01DUjYxaWlmblczb0JiZXZsaExvOTJPYThtSmNiSTQ2emE0N3pMVS9hN3g3VkN1WllUYmM5M055c2ZYVXNNbWYwclhnSkpXMHYxNnNGSnBqSkxzWTFqcHlGTkxQRldHUTJXYjVFcjUzS1dHZHdtTGZDc2IvRXdmc01mMUVZa1o3MlZvUHBFbjk1RkpUaGJsQjdtYTVxOURzak1ZK3lQTmkxQ0dZcWlNUGQ0SFk0N1lrdmo1MzN3YTR0RDZqdUxmTk83d1pUR21PVTRXcEkwaHQ2MnJvZDRyTWRqWS9Pc2w5TThjKzVCNXF6L0hCcHVYV3ppcHlIOHI3akZpdUxJK1dhUUg3SUNIZW5SbE5DNjl4eTJ4K3BEazUrRncxVk00dTJ5ZFZsU0t2S1E4ZGp5UG1HSXh1RUd3N0xSNytMVGluay9pOElJMGY2KzFVTTBDaWNGWk9adi8xNUhDeDV4ZmxlZnFjWDZXN2Y0UGVaUzQvelFsQzV5RG54ZTErazRMNVRUS3V0STMrV0dvclpaVEVHZWJhRE1rOStySUVYNGtOQ3RlSHpNODRpUnNxSW5CQ09qZFdhc0xQcTMyZm90czNWeHgxQXltbXBJbUp3MTNQNnF0TjRaNWNuYklEcXQ3dGtpV3RoTVRxb0t5dytYOUdUVThMVDBmdnpoNXZudDJ5SUhabmhRYVQ5eCtsSFNiclJKVHMyODVDazJERFVXT3dyZm02WXNSZlNRMHJTSERncGtQWHVaSmJjTXVUK2FUTC9KblNYdncrRkpXdit4eWtSdmh6NlZDQ2JoaXNQZUpRMnhhUk5rU0hwbXJZbzNoMHpEam54OHZHenFRVFpNcHFWTlIvaXA1d2dOZU9WMm1PU0l0bXM2WFM2WDNEUENQOXc1djhrQ0ZWUGlNajczSk1nM3RIcGgxNCtpb1JQbE4yUFp3WGJNTHZya3ZuNnZCL1hQcDI2ZE5MNEhUZWZQNWx1Y3FHUS9Ha3BKR202RTRiMlZvN3NITHhhdWVNMnJQR0tzODVsNlZMb2hwMTU5NDBpMUpPaWVuWG9lZEgxOWtJYk9CdHRBS0VWcGJTM3JxODVKVFkvOW9YL25nV05vWWc1cHc1RmdaUjNqQ0xETmZSRmFrOGg4Zjk1YmpLempnMFdnaGpWOFh5aCtqeGgzTDBocXFsV1VzZ29jeXgwWnk3UkZQRWV2Q3R4S0dWV21FNlVQNFIvV25pM1hNcFB5WmgrR0RQU2NieVVVT2srVE1tbmR3a2NhUlVPOVVkMEsrNXJLazVweUU4bkt3MDdEdEtQVHFPWFhXZy9KZEoreUpTd0Y5bllDV1RLVVpwempPdVJOZzRkVWk0eXNoNzR2OHNGcWRjWm9WeXZzSVZBeXUxME9zZzV3cnpGZFh5OEVEY1FmM0MzZUZaMkdQTDBzTzQ1S1JBbjIyYWxobmlMaEQ5emg2MnR3cFRobkgxQ01lSHp4KzlNR0ZSMk9ESEVqNXoyUkI2NkY1b2lXa2JuZVdBWE83bzhvUVNicXlPVXNOcjhscUdHbUZkKzlGOVo4elUzRmh4SC84cEpHOGhhRno2WkRsR0FvcGtUNzBLN2EvVDFkSWpjZGwvSm1QQkpWSjJER0hFVUxleFlXK0xjZEk4TGhlTkM0WkNCVVJWMXRpQjNvenQ3ZXNxVFhrRGp5YWZDYVFVNDkvbnA5bk5XN0x0d1BBaW01dHZSZUFldWZXSDhOS3l0OGRrWndpWmtZOHN1ZE9nNzVqclFyZy9haVByU3ZtSHFnVmlHdTQ3ZGZSSkhvOG5mUGRaOWNrYTlJbkw5dnFrMldnZVNuVWpxMGdDbXljdXNhVlpaV1dKTlVEVGZXeThhOUJ2QVZJOGNLWXM4UHMrVjZ5MVFmTndOcFBVcEJ4ZzZPOGRRT1NiMzlDUjI1cjFMQnMvN3ROeHJYSXBjSE9Da0hhQjBnOEx1aHZXaEYrUy9oVExiZG92bkhZRFBIY3FGei9QbWVXYmluSzRmMEhSbCt2bjUyM3dqZi9nSXovaHZ6cEdiTjliSFEwWWtkWnVwY3hFeUJrWFlYTjE1UDh6cnZrem9mWm96WWpHd3dtSnBYbDREdkhodWl1QVpoUmZybUx5eE1ERGNWNEo1RlEvYVJYVjZjOHl6ZzlwNlgyY1V4T1I1RHVKb21Qc1pZa05Sc2lENkhwRlRpTFhnNkRyVnNIbk1sSTdXcjIxUE9GM25sMUY5VndkSDRCcDZmOUY4R1YrbHQzdksyWk1ZMGFjWWtWT0dSSjlDcjd1OWcxaTV4Y1QrNHF2eVluNEJyaDQzbjZKNnZpV2N6Yk5DVThRN21HQ1Izekp6OUpPZFhaOTZzcngybGJHV1IvU2pBS25xKytZWUtzMDIrRFk1aWM1eHNDQ3VGK2ZZS0daZ1V1NkErajdTUURnbjh1bE9HWE5sUXk5Nm9vTVp6S0tYa1dsMEQ3NnFiWkYzTUdaeFJLN2lyMW9USW0yT1BwOWV0UFZ4dmJjV0ZpMmZEQ2tEc21QeDVJY015V3dvbHBMK1JqRjQxd2lWSmZwY24zekFMRVIvN0N5TzdQN2RiS2o5YzlBbnZKT2RyZk44QVpZbHlKbGpoT3hzMkptdzVlcnpqWTlQekVJVW5iMnVTM2F0SlFJQS9obS9RQ1pZUkMrU3BLZU1NVHd3QjJzQ2ZyOXZEM3phL3BKMDdMdHhuZHUyWlk3MDdJL05KODI5YmUzandPL2JrdXltYlRsMmt4dUFueWx6bFZrc2o5Vno1em80L29tMVlGdlRCb3ZOOWwrakFrNmVFNTA3ZVR6UGdUZWVkdTg1eGd1ZHZyRCtOWUhycUVVMXc0bDBrbkdKRm9IcUtrbm1lajV2NXI2SjdpZlRLY3J3LzdOdmVETFkvdys5bEpPZkhUdlJ0bTJRL0FiZE5DN3BJT0k5OURidXFleXlYWjhLbkNtV055ZnZ1cDJOQkoxQTg0MTB4SW1Tb01wL0pISndzbjc4clp3K1IyNFdvZzRHYXR0TDRHMGFrNEhmWXNHWStTZFd1bkl0NndTRXF4dVQ3aW5ZRk51b0Y5YXg2UDJsT3JjampxbkllSEtMbGNVb0hadXVyNnpJZGU5Sng4RkZOL2ZyWmwvSmRIaGxiWFkxZWpHdzZBbm10dWRnc281OVdCbTFaYnBLdnROWlhlbHl1dTZ2dFBZV1pxa28rMDdSRkhaSUhhKy96NUhOWVdGYkxyS3BMUkU3STgrTkZub1NlVkorNXBVR3hqLzZEcVg1TFExUGMwREhub1hLUGY5bXVPMHo3V1h3N004WHpLU1hmMkZuWDZ1d2syK1Q1UWphbDZ5c2tQUEpmWmFmSkRHUXhXeVA4MlRQMk8zZnNLNkFVSlFXMVIvUHh1MWNiQU9YVGxJNGhjME1VbGZtcXluZSt5OUREV3Zwbmt0TFpzaW5FNmhSc2Z2ekhaTS9TeFZjU0gyaXhxKzBvc3QwZmZRbm9rQ1ZNRmFPWWF1TXpraUIyei9PWDBlWnkySzJKS3U3eC9Rakk3Mk1iUHV5NmE3UWJLN2Qwekt5bnFWOFB3SkFLckEybXJIU05Wbml0d1dSNklWWmpPdGN2V2ZNeUliSlVrTWlEeXB4eXJ3bTRJMHRDdy9XeWU5Z2NteU5TMElXbm9VMXIxZ2pEdi9RNlhyNllhamdmVmp3dmhNU3JTVGVXVGpoU3JsMUwwdVRRZTVFU1B1ZTlXVTE3NU55K0NZb2ZxRCtwSzRKZ21RYXRtNUptc3Jad3JKd0xiWVJoNCtmMk1Wd0t5emEwSDB3VXVjcnhqRi9jOHhGbm15c0dGTGU4ZXA4QTdmK1NnOWpTRUUrSnZIZGpHeXN4dWl6VnY2elVyZVpRYktxRWRSM2oyUkxDcTV1TDdwTGdSUkZMdENCd3NuY3RwOWY1N3k5WnA3R09sL3ZZZnd6ZEFzOENOUlkvZWIxM0pJV1JTbmorQ0ZEOXhnY3cvYWFsN3grUHh3OW5oK2ZXRlk4YzA1bDVHSFBzRmdpeFBFbFRSR3J3L2RpT2llSENmRThiRmJkdHMyMzNlZXhSbE8zZ1hWYnl1R0R3d1IyUjdjbVFYSzVuYlljZlA2V05Cdm52bkdTeTRUTmtvMFJ4eDlFeVduQmM1UnN6NEtFZDhOUzVtbmVKSkdIZFRPcTk5OTd2aGZmVFhrNzhlZzg4bHhWakllOXZOU3VzV1RIRHR6a0IzWU0wVU1xQitlMGQzMUN6cGQxOG5QV3lYMkhpakxXQmxmUHpqRnY5eDgweXJ3K3VRNk1TanU4OCszdzg5U0VzY2RqNDVrOVk0Y09TcG5BV0VzOHFFcXFCUXlWbFF0dVNLYk1vb2V6MUZEdVBrTGlmRUNvek1HbjJmbjNvakdidmlxTEhMWDVsN09oNGV2ajRONkRwOWhJSk5iVmNjQ04wV2w4bHA1SjJ0bW9LL0k3TXlHUVdOVUpqZ0kxZUorTmtFcS8xRm5BU1cya2I4ZzRwV2JETzlEK0hCTW9RNmFKV0RlOTZNbjVzK29kbHV2ZXlaVngvNzQ0T2VSeXhkcU44Z1krT3pZKzgrVTZPa01zTVY1b1k0S2x4Rk1UaHhxRE9aNExXQlJnR1JKdm5vSXJVejlyOGtZUHM2Z3RBcjVkZE13WHdaaGJTTGJsNDV5T1pKQXBOeHlIOUpPeVFYYmp4S0pQZXRtTzh6amIwZ3RkUjNEb1hJc3ZhdXlFN1RpQUcxK2JSZmtzNFNHL3Y5OWlveW1GV2JNUE9oZTkrWGJzUE12bFFBd3gvcmo1bEg5ZFJ1S3E1YXpMQ05uOGE1MzQ1Y2dndDJGNjZIbGY1c1FQNWZDZE40S1IwR0NJaFEybCt6d21lSEsyN0s2SU5VUE9SMXk5Vjh2Z1dJVjJyaksvRGV6Y0lwdERSSStGWjNrVGNKblJkeS9MbVE5NTdTbllqcW0ybkNxTkZUTnZyM20xbEV3NmpreXp4dlNGdzhmeWpHeHNoZFJOalFEZVdGdTJxaHpMcjRBcTVLNGlGSEJ6bHlPbDg4N2ljNXQ1YVAwemx2RStkVCtESERDV2FHcG9NQlN4NmxPUis0NUs5SkRJM3VTdXZRSFBOV3huSVd6Y2UvOVgyQm14U2tCdzdnUXlmZXFKTkc3Sm5ESXFZbHNjNnVNWEJTeWp1dlJGZUJkeTIzM1p0TXFzMXVUUG8vRkRNQmZDYWorUFVDKzg4UnRzVGgwN1p4eHl2TS9SdzgxZWZjNTNrQTZwSEpQQkt5KzVtbEZLMy9JRm5sS2R5WHZuVkJMejA4WWhaNWFqNzFJWnllY1B0LzBLRC90MXRIaFZpWEowTlhjbGl2ejNjOVRjNHVvOUFqNWoyaHV5bzlQMVAxY0ZtajM5eWRvUERhZXREVGY2MU9vWWZyV083QW9acnN5T3cwVWtpNk1qTzJmdU02NE5GUmI3MzJhdmMwaTIyQ24vM0pOcENsWUpDdTg5eUhkT3c0M3NvTkZSYlVna1I4aVJlVDVQVnZKRGhlcGhCdUcyemlsRFU2REdjdmVobC9SVnVXdWsxSDI0TFZ5UklGTEV2bWkyNHB3WjZkUHN4VVBWRHBBS0oybm5uKzQ0bklqN0cvWmtMUzlXeVA0eXpwODN6cGVxRnBlcUZ1WG9Wa2JtY1dSdFN1cy9VQnAyYWpib2ZkVnhUc09VQXBXUThsZkx5WVV4QlRKcTU4S1IzQVhMODFZOFFzNDFoM3UxMDdOR1M2a3l6Y1NTSXlvZ0hXYzNrV0VsaWoyK0RqR29Sa0dkM3c2aU16TGY4MlJqTmFLSUdqdkxxSjV4aHF6NFI4eVJEbmlHKzZBZGpMdnV3Y1BUcytDZnMyTEU2WFpBcVJueGkyU0x6NTNsdjFhNHFsYk9QcUdZOHZuamQxWU1LN3U2WWppWDg1NHh6SU1ENTZtVVU5UTJPZzRYeXFxYzgwbFZGdkpYcXlxMVdzNG5WUURKYlYva3hYVEVwbXg5ZlFXUXZEYnRjWlV5ZnVXSUZZRVB5MkNydkthK1NVdUYxYzNqSWtielcrRzVKOElvdThMb1RBMFQrZWRCZ2NpUmV6OWszRGozNC9EK1l5TklqeHhPS0N3bERPbEZhNDlYMlgybnMwTmpGRm1kVXAxTlFGV21zRTFRTTZoOGo3SU1uc2RiZWhhUjFWMjNZd21mUlFWM1ZzYklXTzJMUUMzRUdxOTBFSm0yZC9RRHpPcmhQb2QwVUJpSjdueVN2T0pwNDd4VDZSWndhems3YmJYb1JjdUtXL2FRclpLeXFqbG9QNWhxUGtQczQvTWpaVWovV3VmSW5vRVJrZm4xVVBzb0VLWDJJbkhPeXZHVUZZbnpMSWFuWE9rTUkvTnVlNXorQ2MvQ090Uy84ZTVjTzZLME5rVEhveGFrZHVRV0s4aGtjdnJHVVoxTlB5NHZFbzVWaWdjUnl2Yk9sK2RnbFBmNTNRTFA3NGJQTCt0bzB6STN3d3pGWmZSZHJnZXIwNU1aZkg1N3JKNDcxMEdHeVh1S2pDYkxqN2ZIcnA1dlJjeEZKOHRZQ0JGcVQrN0ZMNlJ0SHJ2Z3hhbUtmem02Ukp5QytwZWtTbnc5TGV3b21nUXlObjZhb3pXdmpwWXZqM3VNTDRST3haT05yVStQZUhsc25jdUlDS2xvS216ZlhmZHh1U2xoUzczaDZyMmFWK2dNL3AwVjhuMkJHU3IrL2NlUEs5Zll2bXIrdjZ1UXhPcDg4b0RIK1pOVlZjMWlMVWxUVGVTWGF3NVk3UFhLNW9DaEFndVkxNUoydzI3TXFxeXhRcFZqWlZibGdWRzF0cm9EYnFyTVhmM3h4eDkvL0xoU1dGVjZBNloxMWJ5cVZxdS9xZitvVERUYjRFR3o0cVdScmFwTFNmMjRzWUNpeTZ3RjBzaTFMTTlydHVyaTRXOHFxMHR6WUppU3BqWXJhK3czZFNXcFFyTXljUzl0dVpmK3BpckFZaDNnYlA2bVZpb3l5d0haaEg5V0tpS1FsV3RUdk9GRjFyQml6YWplWG1QWU5lNWV5T3A2ckw4T2RNZnV5THBVVWszTEVVbk95OWQrajM2N3d0d21YR1ZkcXJPR1ZkWGVjajVZWVZWMkNZUXF0MjFXbm9Hc1pGM0hhNHF1cVVDMW1wVndBSnlMTS9yc2ZHM3FiRW9IV2R2U0ZHY1Fva015MVZaQWJWWXN3d2EvcWNWVklkZ2s3dFdDQjNqVmdOVXZDbkJPQmFnbXIwalhoV0FBV0ZuV05sVlRsWFFkV0ZVRVlad092N0d5Q1p6KzVsVUwyVFl0WUJpYURGSzB3ZUJZL3BxMUxWRXpwQjE4eWZYcTNwVnhxQ2Z1RThhYURDNmFzazlUVXJ0aDJESndSVlN0c0xwRUdwcXQreUp6dnZ2dHltK1NBVXc0bHVpdm9ic24vQTZvZ3E1SnFvVjhwV29DUUQ3cW1vQjhNZ0Z2Z01qVnZncDYzNjJCd2FFdmxTWFRDajl0V0lzWHM5dlBhNW9oU0NxcU85bmRrUUZybHZMVy9WSkR4QkYveXhKWXh6N1ZXMkQzUC9pSXZuZ0pyeVIxZVZCK25tNlYzNGI5UFFkckVLaGIvSjI4QVZnTElMcFhmbWR2VEl1MTdJejMyN3JndmIrc0Y4SmMvZVdMV0pCTVhsc0RZM3V3SGNFRWw2V2ljeFJwWlBIMWdaTlV3WkhUeWN0RTIzM1FaYlVvdmxwb01oaUROOWNNOEpSb2ovaWR5MUlXNll5SG16YjNEbmpMWDQzUzl3Sk9CeklsbkcyOEZEZFNUN0JJTHFiSTErNWFUck5wRHBrZkp5elJhZWJTQVdNb1prMTkxcEw2MXpBbS9sRjVVU1NyMG5XZlZISFg2WW9PREVVeUhXVTNLOUpiNVQvVnFydElWOTNmLzFPUlRHYzFaRGtaQ05jWFU2RkVtOXIvZmVoTXNXUnpQUVNVQVN1NE0vOUFvdzhKckRUYlB6UWl2OWc4L2E1R1duVFpQTTFRdTFobzMyTVJQZGJVK3hQWmVINkNsUTNnUkUxYjVYRktYMVR5azV5UlZWYndWdW45ZW1ycWdJZnl0N1k2Q0RZYTNWZm5LMTB6TEg5d3F0NzdSTXZTVFgvRWZiaHpMbXhXYm0vci9oY1dheXlCOVFxL2psM0w2dnFyb1ZrYXI4bmUwNXhmVENBRDN0S001dWVQY0lhQWo1NE9SMHdEMUFuc05yTndwTWxSVUZYbVhPMjhUS3V2OGZISEpsTmZZNFcyTjBqT3Q1TGVZUlZKM3I3QzVQZk55a1JTbHpLWVdDeS9RbjZXZ05tcytKT3UrN3ErM1RjVm96UHd2aFo4RHFiWTlPRTFiVmFpTnllbVpNcVV6NXpxdWQ1ay92Vm5mNWpzSXdVQVdGMDNFUnZ0TWJqMnNoNStyNGtiMDBURk1lcjc2S0FVa25aaGVSZnFzQUYwV2VKWnMxbkIzSTlyeVJtYVo4bTBOR1BibHhUSmFsWXdDQW1LcEk0Qksyd25nTmRVd1d4VzRMZStIdnVkUlRYUitTZEhPMTVBSXd2TDZRaEpGZExPNGhwYVJFc0xEbHlsRXVpYjgwOVFUWDlGOE15dmptU0VXMHZuWGxaU2dZR09oSS9OOFFlNy95U0ZYWUpteFFCTHliU0MzZTVORk1YQ1c1dHJWMWovMXhSWm5MaHJDc1RiUFk3OWZBT0E1Vy92NzMveUhBWUVISHZEZi9MNDNjOWJRTnh6b0hiSENmZHZCSFoveTdNOFlISDJyc0Z5N052UGU0RUhpYWE4MnJMc2Q3SDdOdFNzVndPWVFMWFFDMlhwRGZCYlhnYis0dWYvMHcwd3NUUzlHZjIyVWdFZmlBekRmN3ltS0t3cXBQeFNyZHhzV01tcW1xSnRDZHBHUmE5Z2phVVpmM0cxY3VOcXRpKzNkR0U3RjFhcnVzM0praW42UnVDdi8vVy9YMThlZngrMkJrK1QxOWJEMC8rNTJRZE0wVWRCQ0pJMHRTb0p2N0pkTytnZEtEbEVaazN6VjlxQUoyOEwrZ1h2eWJnb2NMcWUwcVUxSzBzQ2EwbnEwdDg2L0dyZUkwYkV2aXVyUERBczZVM2lXUXY4dXJGTjQwYldlRmErUWI0MjRZZGNEMXVCYmVaRFZtQ2JNaG9xeThsQkV0RmZMa0VEdWNvRXZHMUkxdlpCVXkzd1ljV1Z5TERWbGpuVTFMR21XVDdsSi9IN3pBU0dBOVZZOURmSUZIazFwTFVrZ3lWNE1ubFdocHVFWmlYUkN0Z09CM0JlRGUxTlNrNGkzeVFkMjZvbEtlRFI1ZHBHcitGWm5lVWtXYklrWUNhbWoyQ2tUTUZxcGRYdng3OWtCU0hsd3VIVDlQZDJkL2o0KytScFBPOCtQTVdrQUZqaFJaVzNqcFE2a2d6TXJXa0JKYVdmUUYwMzQyUGtJcUd2bS9GWHIxblpCaDFEVTFJUTRVMENzdUI3YVZKL2ZHVXRzUm1zak5mT3EvYS9IazZOczdjQldqSHBEZWsvL3Y0NmZ1cS90QjVUVzlHc0lOb3ZTNXp6bnlJcGpxcngxNllXUmVRMVVJRnB2aG9hbDFDb04xYVNiUU5NUlFPWW9pWUx6UW9SdmNBeDdrbGdKYnFsdzk3Y2lJQ1ZMWEdYK0JWdUdiQWFUdHpHZnpKNUVUZ2RmSjVPWDZPL1NhcGtTYXo4Q0dRMnRIQ3dXbXdaQVlha0Naay9temJQQTlORStoT2JqTTYwMFd3cmZBRDZzNk8vVWdGWjFmL0dza0szc25IbFJYZWw0WUx1MlQrdnNUMXVhQ0NrN0VDVHp6VVBQRGl4SE9WNmNzeTdsZFhvSWc5ZmE3S3RnSUZtcTVseVFwZkcrSE1oNGRURmpLeUZMbjZMRDcvSkJTcU1qY1RYTmZCZkc1aFdjcUhnZGR2Um1KcVNhQmRRTkdQYnJEUnFBOG4vVGRVRU1QRzNYTWdib29hMFpqWXJzcVRhZ1hWaVJqemV3K3h0aFFVTXhZdGdrUWJMZzllb1l0ZHJnVEs1UWs4enNiTms3Y2FhbTRsVjJBQnBMVUw5c2NXZEMyaEFNc1c5a0FodElyNEdMM3I3NE54NjhUYVU3RzJJdXcrUVBWVWwzUVl2UHZZcE5mczhGZmhINWZXeFhaSE1pcXBaRmRQV0hXUUZRdVZOTXlxUExGQTBkUUlzODlxNUR1SmY4K1ptS1ZtaXpWM3ptbklUOWhQOVV6Sk5HNWczV08wZXcyOXp0emJRYmQvTU5tK1NwbmZRYUE2OGFRYW84Q0xyUEdkWnNVVEpkSTJUSHhWZUJQeXFZb2tBQW94a0FBSEJnb3FuRG1pUG9zTWxhTHg1WTRBM1lBQ1ZCemNzWEtlcXJHMkpLdnovN2daOFdFQTFKY2VrRDFzZFN0dTgrWWR1QVBodVU3S0FHWFBqK1hkNE8rdU1FT3c4NkR2bGR0M2w0dHZ1OVFkOC81ZEpXV1JTSmpRdnl4T0l3Syt2bzE0UTFiM2EwMWR3RFMrLzltNk92aGp4Q2ZyZWpLZi8ydEthbFFOZlJzaWRjcGVRSkF0aEx4bkY3YSt2Y1BHYjFvZ2RwZW5BaUVTTS9Jc2V4ayt0NlZQMHU5bnJZK1M3Sk9NaGxUUGsyYTErWHp1c0pIdnVLMGtBVDI5dk1CSmRHV3FxWnpJRU1oNkR0UVEyaVY2RVBlQmxDYWlXT3kyYXNWVWRhVk9SRUdkNFI3cUxOMlpUaHdOd3M4WnVrSTVmL2JpQzJuSFYvSi9nZ0dxR0tsMzl1SEltL0ZYektocUN2L3B4NWJ3bGZ1Tit3SHpYdUNxa3I5eWtIUFc2aXB3ZU8rTFkxNEVwc1Y5d3lmRGtiMWMrTXNFNWQ5V3M2QWFvUWh5UjVSL08zN2ErTkZnQi9OQTEwd3AvY0Q1NHY2UTlxQ29BR1ZpZzZsYUhkaDdycmhWVjF3QXpBR3pFRC9nSmJrS0FBSVFMYUpZQW1vZFBxbDM5dUhLWldGZk4vN2xDUnR0UjluQzhuVS9JaVBzZi9WLy8vZU5LWmszcmQ4Tlc0WGxLaTNVc2x0OVpSNnZ4R241YnhXclYydjBVdzVwNHZWbTd1NzdEaUFiUitHY05hOVpxVnordW5ENDRDcEo1eDgvcjJ1MXR2WUVGZCtnaWF6b3plT0pyeTlVZlA2NWNMZnNkYXBrRVlJZlM5TXhEZ2xEVHJ2Nk5IRm8vaUFrSVovdEVRSWdmOHNwR2c5TU9mQjBFaVFzUS9PV0I0QkQ1ZTU4Sm5FMm5ESGNEM290NDFDSTJjNU5WdndDRWZsN1hmOTdYNjNnUkVMcXJZOWpkZHdNaGp4UmFIaGFoUE5YU0lDbWR1bnBCcGdzeW5mSHdGS3BMcDFCczR6dVNMS1A2UzJDc2NVLzhSRURwSUl6ZFgrTlluV2dRM3dIR1NqQ2lTcktlampHYkxudXJpMG5WUFA0b0dYS2tiYStKNUI2RytRSnN1Yisrdysvdys3c2kySEovWDY4VDN3WmJ5ckdOeWpXS1RyQ0dMb0J6c1pSS1BudjBOekNSR3RkMUhNT0ovQ2pXdUNadWIrOS9maUdLVlFQTTk4Q3NwM0VuZ3BqemwvdlVDVng1RGlBWkIyOEtVYXVuY1VYUXFocWU0RHdUYUYyZzZUdEJVM2hDNWdEM1BLL1dYSGpxWmZMVVU4T3BNYnI2Zmo1NlpHQnljOUdkQmtYNHZrdWdOdGZZOWUxMTNTZWxzM1c4eGhJMW5tOWduSUFSYndJdTNMMnhkd0lnN2ptaGNjOWpuSEIzeXpYWXU3Y0dmc2NEdk03ZTFXckMvYy9hYmYyV0lOajZVYVIwU0F1UFU3Q1NmWFNad3FKbVdyOE9CeXQvSEw3a09rNjF2amJYZlBLRkFXSW1xTm5KYTkxdEJMemwxOTRGT1MvUDlvdUlyZ2ZvMW9VbzA2VVFuck9veXhsVTczeFU4RHVDcU9ONytkMUY2TjBHZ0phUHIrd3Zhc2NON09lbTB5VjFwQ0J4TDZjMVY4QmV3NXRFNDdweDI4Q0xHR3oxNnpwV3c3L1FNZS9hV0dXYmEvQXZDbUZabmM5Y0N4SnNuR3l0WGJhU2Z5TjdUVWVUbzF6TXRXOWpya1hHNWE5cHJTVzY2TnBEZnZQekdrVEZMUzc0NHFwaVd6RHUvU3ZGL2pqQ0xrTWY3ZEh6UEZUOEZkTHpMaWJjeFlRN3N3bFhvdE90OFJQSDhvY2xzZnAxdmRiQThQclpqTGgvLzdqeThQNnFpZjI0Q2xRNGJxRmQvZkgvQXdBQS8vK2l4QVYvRTNNR0FBPT0=
  kind: Secret
  metadata:
    creationTimestamp: "2024-10-08T10:22:55Z"
    labels:
      modifiedAt: "1728382994"
      name: ingress-nginx
      owner: helm
      status: deployed
      version: "1"
    name: sh.helm.release.v1.ingress-nginx.v1
    namespace: ingress-nginx
    resourceVersion: "1219617"
    uid: 51a6c1d2-4721-4384-a65b-7d0f53c35c26
  type: helm.sh/release.v1
- apiVersion: v1
  data:
    ca: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJkVENDQVJ1Z0F3SUJBZ0lRQXhBZzgxcWVUdzg5Z3lpRjRDRDNSREFLQmdncWhrak9QUVFEQWpBUE1RMHcKQ3dZRFZRUUtFd1J1YVd3eE1DQVhEVEkwTVRBd09EQTVNak14TUZvWUR6SXhNalF3T1RFME1Ea3lNekV3V2pBUApNUTB3Q3dZRFZRUUtFd1J1YVd3eE1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRXhPcVhSZ3hrClJTdHhmTnI2bk40Q1Z1dXI5U1AxM0sxTUVUSmMyOUREQTN4Q2JsV1Z4TmQ2L2YzVldUcEQyNFVXYjFDUE9RVm4KSkJNeUxkQnR5OW5pZzZOWE1GVXdEZ1lEVlIwUEFRSC9CQVFEQWdJRU1CTUdBMVVkSlFRTU1Bb0dDQ3NHQVFVRgpCd01CTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRk0zcEZ6Z2x1dHFpMFVRR1BIdHlLZ0huClF1WHNNQW9HQ0NxR1NNNDlCQU1DQTBnQU1FVUNJUUM5b2pWTS8yRkdWTktHZFA3aVg2aGFENElhUE9INXY2M1QKMC9BZyt1UFhHQUlnYWlzbXVkRDJ0bUVNYmRYRjVPbFRyWFhUWGZIVy9FRTZFa1QybC9nWjhxVT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
    cert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJ1VENDQVYrZ0F3SUJBZ0lSQUxURmlPNXoxWDlmKzZGbnN2dzAzaWN3Q2dZSUtvWkl6ajBFQXdJd0R6RU4KTUFzR0ExVUVDaE1FYm1sc01UQWdGdzB5TkRFd01EZ3dPVEl6TVRCYUdBOHlNVEkwTURreE5EQTVNak14TUZvdwpEekVOTUFzR0ExVUVDaE1FYm1sc01qQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJHQ1lIN25iCmErZ0xPa2I4Y1Z4cEdKUkxLY1g5a3NUY2t4bEZXRGVBbG1LdDRKcmtKaTVhTkVQMm1rUURmVFRya0NXUTIvQ2cKVGVCWWFQeWs4ODBweFRxamdaa3dnWll3RGdZRFZSMFBBUUgvQkFRREFnV2dNQk1HQTFVZEpRUU1NQW9HQ0NzRwpBUVVGQndNQk1Bd0dBMVVkRXdFQi93UUNNQUF3WVFZRFZSMFJCRm93V0lJaWFXNW5jbVZ6Y3kxdVoybHVlQzFqCmIyNTBjbTlzYkdWeUxXRmtiV2x6YzJsdmJvSXlhVzVuY21WemN5MXVaMmx1ZUMxamIyNTBjbTlzYkdWeUxXRmsKYldsemMybHZiaTVyZFdKbExYTjVjM1JsYlM1emRtTXdDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWhBSTZDNUEwbwpsbnEzOG5LSVRNQ3JKSENEckk0TVc3NEZZMjREbTA0KzkwU2pBaUFDRGRmQkFJZ2o3ZjZQd0hiTDhQQm5icXIyCmE1Skh6M1BKeWZEelhqdktSZz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSU9rL3VCeVRVSWUvRWhZbVZpdFErc215aVZYb05nbkhFSERuN3FucnV2NUJvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFWUpnZnVkdHI2QXM2UnZ4eFhHa1lsRXNweGYyU3hOeVRHVVZZTjRDV1lxM2dtdVFtTGxvMApRL2FhUkFOOU5PdVFKWkRiOEtCTjRGaG8vS1R6elNuRk9nPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=
  kind: Secret
  metadata:
    creationTimestamp: "2024-10-08T09:28:10Z"
    name: ingress-nginx-admission
    namespace: kube-system
    resourceVersion: "1209367"
    uid: f583a00f-e0a5-4cb1-8113-4b9ef9a89bfb
  type: Opaque
- apiVersion: v1
  data:
    release: 
  kind: Secret
  metadata:
    creationTimestamp: "2024-10-07T10:09:40Z"
    labels:
      modifiedAt: "1728295781"
      name: ai-runtime-security
      owner: helm
      status: superseded
      version: "1"
    name: sh.helm.release.v1.ai-runtime-security.v1
    namespace: kube-system
    resourceVersion: "993810"
    uid: 4c50359c-282f-44d8-8d75-bf090168d88f
  type: helm.sh/release.v1
- apiVersion: v1
  data:
    release: 
  kind: Secret
  metadata:
    creationTimestamp: "2024-10-07T13:13:10Z"
    labels:
      modifiedAt: "1728295781"
      name: ai-runtime-security
      owner: helm
      status: superseded
      version: "2"
    name: sh.helm.release.v1.ai-runtime-security.v2
    namespace: kube-system
    resourceVersion: "1004888"
    uid: ee92355d-929f-43cb-ade7-17f158d5c0e7
  type: helm.sh/release.v1
- apiVersion: v1
  data:
    release: SDRzSUFBQUFBQUFDLzdTOGFYUHFTTklvL0ZjVXpJZnVpZGZtU01LNEQ3enhmRURZQ0dIQUJ6RGF4aE9PVXFtUXlwU1cwUUtJdWYzZmIxUnBRWUM4OU54NUhPSHVnMVNWbFptVmV5YitkOHNISG1yMVd3RGZScW1mWUEvZHhnaW1FVTZ5MWswTCs1dWcxZjkzYTRPak9IbXpVVWlDRE5tdGZrdmt4YnRiZ2IvbC8zZ1IrRDdmNjkveDdUL0VuL2RpUit3Slp1dW1SY0RIRys3NnduMWY2TGJGcm5Bbi9zSDNmdElOTmlJb1lVdlpoeGhHT0V4dzRMZjZyWFhvUk1CR0hBeThrQzVxM2JUaUJDUnAzT3EzNGpSRVVZeHNaTGYrdkdsQkYwUUpSZGhEQ2JCQkF1aS9QNlZ3aDZJNFA0VnZDMjMrNnV3Qk4wYkU0eGhnYmhORTNGTnFvY2hIQ1lwYk55MFFZclVDc0JQWmsvRDBSQkRhWXBzK1RiS1FvUkNHQkVQQVFQOTUweUlCM0xiNmZrcklUU3RCWGtnQWhkci9SNFZ5OWZCSENQeGI2T05iR1BnYjdIZ2diR2ZBSXhSYlJtUkx5YVExa01sUmVaenZMTThNVFY1dzRWQUtZU1lKVUZTM3luaTVVK1RpWFVmTnpKWGtLdU01c1dRakFYTHZhTXQwamVSYVdIcDQyVzRkb0hXUHRqeUtMWG5FQTYyWFRwMHdBbHAzKzR5bEIwdnNla0N6NTRZK2VESjBLVlE5TllNaTJWbnZnV08vUHo1Wm1zb2IydEsxNWNmN0lSNDRsamRLekpmQWdmSW9uV3J6Rkt5RTl4d0dmRktHVW1wb0FvRWR5VFhFOWIweVR2NVFobDNOMEE2Q3FjOVN0bGVmN3cxdFRwU3gwQnQ2SjdnNXpXdG53WGNuaXR3bDl0amVRUzkyRExHWG1oN3hiWDNpMmpMWldWamlyVXh5VFhuaDJQSlB4NVpkb295bDJOYnMwTUxTTzVCSDlQOTBIVEcwZWFESTNaMHByMU5sbU1PSEhZa1lJbkd0UWVBb3c1bGplNlBZMXRTaklwTlVHUzhEb00rcU01V3hIVnJ5M2pHOHRXUG9LbStKQXNYaDNkQU9NVnBKZTZzakNaU25wclpJQ3hwZUxGRWd5bmp1V3JvVW15dHBCOGZMMEJLN1IwWHU4VUJXTTNxR29kM2xlTXRMWW5vandSb3ZuQ2ZaM0ZueVlXZG5FbDJYS1BLa3F3eGhQTW1rRHQxSDd4aU9wUmhvYzlmd0R1UnBkZmVrREFmdnluRGdGTC9ZMEtVOTBMcWVKZlMyUUZmd001YTJRSjhRbzdQY1FYL3JXR0o1THVPSlk0c3VnZDY2ZHBmU084VU5paU94Zmg3anU1UHpxM2JlOWU5WTJwbERLYlE4YzZmSW85UWNTa2ZHRC9td016dXpWSG5zRWxOYkhuUDVuZVI4MGlodlp6VWN1bDFERTJLMmYvQ3RNMTBMQys4V0ZsSlRORHRUbjdpV3RpL3VvN2JPTTBQb3FSMTZkOHA3NEZneU9kcERhV2RpeWFNOHNzVlJiSTNyZURCOU85bzZ2ZWNKRDdTdVA4V1NYSzM5Q2pkNWxGcGVqemQwZXY5M1Bzd0dQM05aVy85L3lqZm9nbFJmeFZGc3k3M1UxSmNkcXpPSllOWjl0MFIrWjNva00zWGJ0ZVQ5dmZKd0VKbCt2VnpKdzhXdlJQVmliMmgzaVNIZUpaWm5lM1pXNC9YdzRyNnh0TGZFaFE4ektWOHpkSGNRRDc0Nm82Ny9vVEtlQjFaSGpjMmhoTTJWRkFOOVRuWEZ5ZVg1UzN3bjlsQktUVTNkd2t4S3JBNlZsMXgzTExGTGxMSHBXbU9WS0hJdnRjWmJKc3NXbGhKYk8vQWcxNzF6V3ZkZjhQeHg2WnFhc0xQSW5OaERTbnRkVGlkQ1lWUGNVbmVlNU83T0h0TFA4NTFGOTJIcGFJaHFhdWlUME1xMkRmSW4wSDM0R1Erd0tZK0lwZlZTS0txOGdnY0poUWs5d2JXRzBnN0thbGJJakdOcHZhMjUrQVJ2ZjBrTWZiSzFPbmJLNE9SNDBudm1UVzJVVVpsVjVPWE9MbUd0N3B4RlRkZW1XdGMzZmVoQXViZFZaUFVPNk12akZkNmYvRm9keFlHZHBRdjk1WEU2bEVKN0tIVUExUzk1SHB2YUtMWDFnY1AwVFNhcDZmMXM0TWx5RDBVMXN6M3libXBkYWdzb2Z4eFZkcW51MFY5Mi80cE1QRVZtL0hPb2ZWYThPVy81U2dKRjlWM0JkODVLWDdEbmhXMWpOc1VTamZ6em81cWFZMmtIdEM2dmpPZFV2c2wzYWF4d1cwbGJVNWRpcTBPSU9ieTJ1K1pZT3ByNlJLU3d6M3pjZStCTVY0VXZaNy9VL2kwY29CbkZmVkFhQjlqb0xGT0loYU9wemZBVU03bW50UFBVWDUzQmszc2UxUUZ6Slkwc2I3bTNSSkxhMU1iSzVQMVRPVG16bDNNQ2ZUTTB4TFZqeXVyZWtudmRrLzg2azYzTTBFd1BhUE9OSlU3K1pXcHpYaGZKbHRLMDZxalkxQ2ZVTGhHWVNRL1dXS1V4UjdaYUx3cC91bmFnTjBwTmNlM01WbncyZTFqY05laURpNmkvR1BVOFF5T3gxVEVKeE1xOU1wd1VueVZpWVlYeWovcS9WSkVGRjVWNktZK29QOFNtUmxJenkzbHZhb3VZK2t3b2o0NXcvMDFlTlB6V2JLdGplcjJzNEhkcTZybWV3T3pPV2NxcVoraHFiSStwelAzOHdvNTlkaGUyQy9URnp2QU9PME9NbVg4Mi9Ra3hWOUlSeWoxK2V1VnpKenVieG1jZTJacHFMN0hIVkYra1g5V3pWU0V6K2xKUXh1b3hsN1hTNTQvMlVENkVocGpIZ0xtdnZxSWxqM015aWNLbThzSFRlODlqeGl0Y0lsdWJFT2gxaVMyclJ5b1hxSkh2azZPcHpRWG9FUjZwdlpwL3lQY3NxSDBZU3p2WW1ZYzByc24xVnoxQ2VmUnVVcDIraUZFS20vV1Y3M2cwTkRXeHhPNkxxVk41bWROWUdKL3I4U0NnL3JtWkwvYnhESTlWZ3oyL2xKc1ZqUThHbU5va1c1K0U5cGhzNnJvTE0rVmVHY1dPNGlXQzRhMFQyQ0ZVWnhJRjd4M0ZaekhNRVRIL3lHTzlVWmNuQk1uejJOYVdSQmZQZUVSbDRKSEdHTlFXNUx4ZUYzZCtDR0ZuU2N3enY2d2VsYUVibWlMMU9lcVg5cDdHbE5TK2xENko2c0NrTTNNTXJadGFuV1VaS3pDZkErUVIveFhmTnBRMmVaNEM5UlRYNkdLUnl4d0RaelBrbjJyMytBZmJYNDl4eGU0cFIySDJRdGxQMzJmcGJLakVsMnNaLzFmTXBoU3hRRGRVOFA3cGdxODgwaVZtcTR0N2VMZThMWjZ5R0sxdXJ3NDdVK2pGcG00U2E4aGdiazF0SXBqWjliblhjZmdBVHp1bUMzRXZ0a1M0eTJXWnloM3ppdzFubldLRmt3OXFPRWM4N0d4dGtjY1VXbkpzb0cwTEszdXZNaG1vMFpuSHkvcGNOQnBvK015bktmN25lVjBUajZFMzhreVB2T3RpRHdOUGZiZEh2ZERNK2ZnSHlnYXBXdVJoVTI4ZTIxUVA5RWxvRHFYZXBvRnU2c3RObmZxSlNxK3dxUytEMlhCaVgvT1NwTlEzbVI3VmxYa0loL2w2aGZDZnd4VUYxOGcrWGx2ekUxVC9yRkxHVEI5aVpYUzludmszZnhLYXNycGg5cG55RVRmUWR1WmJsWHRsSEQ4MTZHVytUaXYwSm1OODNPaDhvaTYyNnNNTDM1VlhhM3V6M0pMWlVwVWs5ZEhkNk5kM1hQQ0g2U0tsZldQS0pNdng2dTNnZUxHaitqSVZKNkdGUDlxcjNobmlRV0EwTmRnNmZiVnZ4UDFMRy9tVmZCSCtITzc0ekdiMGhzNy8vRS9yejV0UEtpOHhpbllZSWdCaGtQckpSZmtGaUNRMUh3Sm5JUjRFYWo0aG1ld3NlWDFWSG9IZXhEV3lybXZyeThEcVRFTGtGZVVWTDc2RFdUZTBzcDQ0VzRTSnFTOWRVeDd4eGt0UWxVaWVxMVNzRzA2MWVXYUpCekwwSjRJbHE4ZG41bXA1YW5yRFpXZXlzM1dwZU1aSVRKU2hndlBya0RKVG4rOXNmVUxkd1AzcGl2ZzhWTm5YOXB5NzFZcGQwOVZKemN2MU5Kd3cvSE40cHFqeTlQTjBKYmxRSm1QbzlRUTRQbCtqWUNXSE81NFFLUFlFNk0wSlBBYjFzMWo0VnVBdW12b0VYN3dYb0V4ZHl2b3B4M20wQjJzN3N6cnFIaDREUjh1b2loMTJobmJnYVFxWWw0Z1NhakoyMW1waU4vR0VxaStVZTVuTlRHM3ZXSW5PMkNUUW14eVo2bm8yc1lkS3JBd25MRVdsYTZZclBobDZvejFRcWRyT3FldTdWOFlUYkdpemxJWklRTzVsUUE4TDk5ZU5uc2V6RkdnL2QvYjc0MU96L0toRG9IVzNOQ1ViZWdLeDVkSFcwSmN1dTljOFpibXZTaG5lTmpFNkV6elZ6a09Gb2MvZ3JFek5ZSHcveWNmZ083aFIyVHVWL1lxUWZlMzFZcFk2Tk9QQTVCNTIxTnhrRi9jOVhWVndYa3JaV1dqemQ2dWpwblpoZmh2S2hFZGpVWHRYcVBNemxpN01mejE4a0hxYlJaQk1WM3hqYWJMazg3cDBrZXZSdXlIMkJNdGZmS2RzbWVOVDE0dVh3RUdkMkptU3ZMUUFzMjY5bk9Gc2RQN3BDN095Zzdjb2pDL3N5YmR3LzhKTzVPVWE0V2g3czc5ZVpxWDB5eU5zYW9mS2p0QVFwUWsySzQ4eW5jekxYaWY5NUIwNG51eHN1ZmR1aWZ0N1phUStyaXRYbTY5OXhnTng5dURzSzVzd1hycVE2dFpJMmtGL2NhODhHUHZuaDBHemJzbkxFSXB6bHQ2Z1ZiTStMYlh1RnNxOTBQS1hMM25LKzIyZUplWnA3N0dTaCsvTG9LUElCOWZ3MUxqaWgweDFVODBzVCtVcHp5bXVwMUJOK1BEdURHMjVwV0UzRkpaZEtLL3ZsVWV5c044WFQ4eEduZlNyMkQvd0o0Vk4vb2ozYk45RDRNemZCM2V6UVVpcXNrQnBtN05hcVdBOGN3eHhsTEtTbGp6YW1ySzZWV1NhNGs2SXBmVm9DdTBZM29pbGpTelU5OVNEclpITTFBUkMrVmFVQ2U5WitVMGVpVFJOTjdSSmFNbUVSM2s1TDJGd3FmM3ZYTm4rQ3g2ZnlqTHcrTWgwSzVlWmNHZDUxekpkdjcrWnp0YWM5c2d1ZTM3eWtaSm5kU2FBNGxuSDRlUUgxdzFoWngyZlVVNGpEVFZLWDF6ZW02aWUrK0xQOE1TRjdBd0hEdko2YVlOOXFkOVh4dGFzVG51QVhMdEhScWU1ZzRUU2ZvWUR3NiswYjVlaDB4aytmc1UzL0dXSTlGRkxTaFpjeXlPZVNmMmtURkxZV2JxV2ZEZ1daUklxNzZkMjA1RDVFZFpPc2VWUmFIbHFOaDFLTHN5a2pxa2Q0aUdlc2RKLzBjS3AybFZRUGdpbVNOSkMzc3IyRXBYSkp5VXIyenFDeTN3cmxsekxXemkyMk11QXFHWmxlUlpvZDQ2eGtxWm5KUXE1VEMyVWRPZ2xvZVV0N3MvS3ZvT1F4amFhcVUrT05JNTd4cXdrZnB4MmpNTTNmUFoveFM2RG8zdGtxZUZEelZjdHdpT1UxWGUyaHJYNTFIZGI3bVhsSGtzYjhZYm96Z3h0UXF3emVhRnhxT0RDOGVBU3p5TE9VbC9zOFlUKzMwY3ZoWjZNQzdzMG9yNy9FRnFlcmRaaU1ocmJYVDZ2blNlNGFLU21obTY2UUR1d050VXpIaHpvZXhxL1FQbFFXeTlkMk82aXBIekJqOC9wS0VvVTlWTEVXZHhhdGhYSmtjcWRKZmRTTTVNNlFGOEdoYncrUUkvd1FKdTcxaU8xaDcwVThrVTdRYWFwZnRWeXBEanQ3T3dzblhsbk11Z2xsZXhiNG9MSnM3R1MzaXU0UTlhcVRDenhMbFprTllVZHRTakxFMTZSYldLUForY3d4MUlHTkJxL0xidktlUDRPWkhWcmE1VGZrTks1WlMwUVZ1NWVIcy9pN0V4eVdabk1VOHR5NkFXdXhNdlBWRVZUVjFnOER6T0pVSDlseStwMld1ZjNtUEhLdGNaTGFtdDRwbHVkV1dxSXZXUXFYc3BtZlYrRkw0RzQ2MXBqS1RCVzNiTXk0ZFFqdTZrNHAvU0ZoamlLcDdxMG83NTlrc0ZDdnVaN1U2dkxNTlZuOWNYVURua2I4NzF1enlXYTlydFQ3OW9YVzUzWnZVTGwxRmZ2VHJEY0hld3NuOHV5MHpPV2VPaXJwQmF2MFBpNmFMOTBMMnpzekhuUlJwRzVrbzYyUGlFMU9TeDVlVFJFbDVoak5TNzlaOTc2WVBnZnB4ZjIydFJNejlUbS9ET1duaTNoeExmek5MdHFCMUc2bmFYdWhyQlQ1aytWZk04TmZSSjlVd2FMa2phVm0zbGdha3ZCb25sUmRuZmhJeE9DWGdKbjBabUVSYnRiTXVYbHp2TG52eXp2MFAyck9FNVhFakU5a3hnZGFtKzd1Nlh1RXFPajh1WWl1R2duU1FSNkk5N3FLUGZLbzNwSGM3RlREaXZ0b1VkMnJJeThuc2VHUGorK2xERjlrUjlOTldiN2FkNVM0SDNTVjNpVkl5eWZyL0p3ZmU2ZThLYjNUVktnQ1NIeTFvNHA5enFXdnd3dGJlMlk0MUtISHgzbzllS2NoOVNtMnBtaExRbUxxZVFsdGRPc0h2Q2NTVHoxZDhyam1aeXljcnNwLzNTTTFRRFRlekhFOVZQdFhyZFU1blA3bzl3cnNzdmJZK240akgvdXprdEVyTTZ3dGNUNWNjcktxSE1DeDh2anRNTnk0OWdTUjF1WTlWamVQZTFJTzNQNGsrcDdabWtrTFVxNmlTVWFTZEhhcU00L1g5TWRRMi8wYnFyMGZzak9ITTBKRzVFWXorNlZoeFBPZFQ5L0VYZTlLNlBUYUVXNTVxUDRJUjhCbVlTV044cUFwbDdLTy9QM0g0MkpLTElaV3ZJNmI2Vm9vM2N3bEZKTFhKTHBCL0ZTTFZhcDVPQkN2a05MRy9rTnNkdTc1Wkg4WFMxbUszK0JKcmltcUM1czdSQ3Y1VjRNdEhuM0dVc1RjOXZkMlNOV295QTBUejBmR1dDdFpKZkZKYU1ZVDhXU1AvdWtOaDV4QkhtdElqRTBrbDZWd3VSRGFIcnFPOUxtc2ZrU1hKZmZNbWxvYXVhTytnb2drbEoyV2R2b0lrNGppTVlaZVlzdmYrK3BzZFdCRHFCeG1Yd2cwQWt1Mnk1NzZLa3Z0dHpiUDErOW83aXBkMmUyL1h6dnV5VUtpWkhYRlN3RjA1aDF6bE1iT3RVclc1dEMwY0hUdlBSTkRLMHJ3R0ZaOTZuZ0VNczNHczZZT1NwckI4K2ZWNnlkbC91QWFvd3FZMk5GMVptSzNFc1ZXWFVOMFhFc2o3WE9yM2g1eXRObzNFbzJMMXQxcmZLOTFVcm9GU1ZZMkZEK2xQSnhqYldaV1NML0NTL0tzU3hwYXVxa3F2azBqNW8wMUc0S2ZmaDRUMjdqcWJ6cnAxcmE1dU45TTRmWjJ4VWJtV0h5QU1jVEt2OFpXdVZ4KzZVT3NuYWl0cVE1cGdBdll2dnB0WHhVTm9MK1doMkoyVTVEMjZmS3lLYjVabXlMb3k3TkhReU44TXBZVFcyWnhKY2pXOVEzbThOQkFEU2pTZlpMdmdyUVU3ZFBLMm5IOGdkL3kvaVF5NExobUI2Sjg5YTh0S1UyMW1BdHREdG5wUm5uNXd3YWFLakZCVGJWcitFRnZ2V3hQYTIwWS9tNWhxZFNIYUQ2Um4xZFl1aVRic005bkhKWUtzdHFMbXM2MzVWZTF1c0dtZ2RsUy81ZUdTcUgyVkJ3N1R5V1MwM3ZFTUxPQWplYzBjUzcyaGhEYjgvOGtqZUtwMWlTVEovbFlhY1dHN1hyMU44eTM3VjNURm1ORFgyYnh4NDBCaTNHYXBwa0RNcmtIYkFSUjNVLzdVaVpSWDJXeUVic0tIODhOZ1lrQ3k3b1RGaE1YS3ZuWmFZMjJxTFZJRERMbHZad2NKemxMZEdkNVMyUFQ0dnIrN3JVNGZWV2xaWWpzbGsrcXJPRnV2MEdQNVhQN01KY1UzdUxGMzY1ZWRtTzVrdDF2bGlzNTZNbW5TekdFR1hvOVpKRzI1bVBKaEJMWG41aEM4elExQTdidFR6aXdVUGcxT3FnWi9ubjlmNlRUM3hSeVdiOTJIdjhVS2ErWjhNOG9LbXhPWm9ROHoxNCttVGNndEswTVBSbDhJeHJPZUVxcjcxZTJIYlJFZytDcGFselZtc2VOL2tTM3JFMEZ0OFZNQWM3TmhJN3ZHaHBOZnFuUXE5a0prOFlhSGVKS1pQc0w1eEJiSGxXbk5FbDlyQzdiZUpOeWVlODkwUFhDVnVnTjhwUnd1Z2NTYTR0Ty9mS3NCZFluVG5QY3JDOGRmejAwUWhlVWJ0Z281aW4vTWJjV1dNMU9lOFZNZDFXVDJQRlZjekJiTk5IY1ZPTyt5UzBjQVB1ZVo2Vjg2WWhSaWg1Um0zOFZLUzg3bEZlTjlmcDhydElUWDNSY0JjUzQwY2g2MDhOSTVSTUI2YWl5aHRaajlwa2xzOU92Y1VIWjMzQTEwL3BvYm4xYUErSGVlN0YydjZaZldUMWJDK3YwNkNWRkZ0aU5WWkpmeG5lVGZhdmpMRVk3a1BwQ09TZVlNbUxvc2JqMU95ZGZWU0drK3FPZFhFWlFxeFUvc25TUnZ2VENHMmpqOHJiLzlyeU9Pbk1ITVU3alNNVWRiZTlvVTk0Tm5KV0c1K1k2aE5pYU11dWdpdGRQRjdSTWE3a1ZUUjBaV2ZKUFgvYVlXZGV5MlMxcDZ5SDEvaTI3bVdMem9RWStwTGs5Y3AvM3JSMmdLUW9idlgvM1lJa2pSTVVZYnZWRjI1YTBNZllBdzVxOVZzT2pObzRLQXFadHpHS01JcC9BQnhWdGMzK1hadG4zdzVBdmgwRzJFOWlvZFZ2Q1h4YjRPL2FuYmJBbjc4N0JqNEZtOGEzZXhRbnR5S292eFZQTzRXTzBCYkYrN08zbDN1dDFnMHJ1Y1loZ1BURk5yWFFiWnpGQ2ZKYWY5NjBZdWdpRDVSZkk5aGdjdjRWZ3JhTGlJY2RQNGpRV1dtV2lpWlBVMEpZaExINWRNKzZuSXJGdGtaaU13LzFxZm1QRE0wbUxOMHIzZnA0THNDeHRJUCtrdjQ3WU9tcWJNZVdxSlRsUmVwdVk5WXFvS0twbTZTNDV2UDN1Y2k5czBuSGNxSnE2Tkswd0FPNlM4eGhVWDRiUG9aVExMRnlBZzIxV2VwWDBLQ01KUnBPeEVEcjByUXRYWTdtbTNWblNlbWgrRDdRTklHbWQrcDIvc0xVeko4OVRUMDd0SWMvOC8vTHhMZThYbVl1Z3RUd3cyeTZ6LzhQTkR1bDRjTVFkd016bzJ0ZHYvYnNhSHQzdXlHZU9RdXhsMWdVYjNuaUdtSWlRT2JLRGdUdWczOU4vWGtIRG9KL1RiMkpDOWpuWlpKLzdtVkFnMDlQUHVPcHhxYUFPK3BSZVNTUFMzMzJOUFdsekJKRFluUVdUMU9QYkUzdGNUZkVRV3JMd2g1NnZYOE5jVmVFNG54bnl1dmRaV2srSkttRC9jOUhGdjY3cmVyMTUrMVR2ZnkyaGZBT1dmczR6RmpKN3hnOE5ZMEhURmNEek5vbzEyTUJpU0xYMmk3N29IQXh2VzB4b3BDd2FieHgrZTlxa3VsWXRNbG9hSmVaeGRSeWZXeGhXa3liRDNIVEdFVTVxbkE5UGxFZlViZ2FqU2hIQmdvWXRzaE04dE1RODhsMGNkVTZ5QXh2OUQ3MVJvSk4zWWRIN290eVM4cEsvQjdaNVcyRnNnMVJUVDJ0TFBGQUZoNUptYjd1UDI5eFZ1bVVOczhNSjJSakpHdFA5ZklXeFdsODRqdjRVSm8va29mUHpzMUhWK2FDNFZINVptMjRSSkVMdWtiVm5VbUdPTi9aV3BmL1JKNEVtalkwdEdkWkNYbXF6N3NVSjZzWUNiaVcrUm8vbTg3OXZJV3p0OGFxVDBNK1c1L25wWTJMMFFCV2RsdFZVNXFVSi9GNXkwV3F0eWhLZUhtNzI3bVNEM0cyQ0U5akZFeU9GOS9XdTNKOFk2cXhTVUUyQ1E4OWxmK2FkeUdiZG56RzBpOG9qdzYydG42Q25TVXJaeTVQTXZid01sSmYxRWQxcGZQQ3IrVWphNWRPbjZrZDV0V1Z1aVVQeTVYeWwraXl4MlJmOGZDOGRGbnAyRlNyeGpjU1crNUZwbmIzWFg0d3VabnFjMkowSm9TTm9KeDkrK1pVeXYvbStlbXBuZG9nRzdudE9HLzF5UmVqT25tNDh1ZE5LLytPSDQxWHJvSU5RV2p6N1QvKytDRFdRQ0JPYm9YR1dFTVEya0w3dnZkQm9KRnZ0R2c0NFFFZmIxQ2N0UHF0Mjl2YlYvOXYzQ3BJSTRqNlhNUDNKMzk4YTB6dTFUOTlUYkxQN1lSWGY0dDl1OCt0OHFXRGZPbXJYMzVucy8vcWN4ejFaSDJ1Z2dyS1p5d0s2bk8xSU9qVi80OFFQZjhtSmQzLzR1S1lHN0xITXhCeU9PYlNHTmxjRW5ENTJqUkNIT0JpUkRhM2JoQW55S2JvY2NPNXdtRS9UZ0FoN0l1ZDdaSzhDdEkxL1o5UW1oLzFHYlhWUm9veFl1ZjdLTmtIMGJiQ2t5RkNFUWMyd3o5eEVaZkhCQngwQWZhNXdPY1FnQzduQnpacWN3eE9IQ0tJQWNrQjV5RXpoMzB1b1V6SjRYSjdUQWhuSVE2a1NlQ0JCRU5BU01hRlFaaFMxdHJ0Zk84cThCQVhBeThraUF2WTEyaGpMa2hjRkhHSkMzeUdpNDAySUNVSjkvc21JQ1RZMDJjZVoyWGNiemUvY1hzWFVUN24zNVMxQ1BwN0FiYjRlVzJCTU1UK0puaXpjZlRhNm5NMmpoQk1naWlqUkZIZ2xLWUNTc0ZVRGdLZmk4R3VBa3VST29ONjhSTUdOa2ZQNElCdmN6R2xod1JPM09ibUNOa3haYWpGS0VRY2lMbjY4QU5kL3luY1BML3duYzJlcmI4a2JZTWp0QWVFVUxvSWpoTXUySERscytva0twaHhHb1pCbEdEZmFYT2pjdE5IQndQZkR4Skc4Mjh4OTVyeWZBZXkrMlgvUk53bkNJZUFCSUFrUVNGZmNSc0czbzhTb2Y0MXJBOUJZZitLZHNiYjJuMVFwdjhXYyt6VjcwSDBNVnFWWHZ5ZGk5MGdKVGE5RGNvdFpIUDAxdHNmN2xRU3ptYzM2QVVSeXFVeDhGRXU3RnpnazR5S2pjOTVLVWt3bGQ0YXloL0NmQURJQy93VlNpaitwV3hFS1ZNeGtNdmk3MzZRY0lDRGdlY0ZQaGRENUlNSUIxZHk3UVUyb2hmLzJySVp6QmdscnkzdWx2T0R5QU9FQzBKVTZEVmIySVRQYXl0QklMS0R2YzgyVWl5b0JpTVFZZC9oNkhPMnQ4ME40anB0VE56UkFTZnhaN0tiL3dRUkZ5Y2dTdUliRGllNVFZQUVBVDhOT1VBSVU1cEx1dXl3OEFuMDRpaUJ1YUhGTWJzTURtOFlVdlR6YXdzbWZrU045bXVyVFc4THg3bEdVMVVMTnV6Zmo0WDc0bUtDSWZvQzRlSmdydnc3QkoraXhtU0s0bmY3SHlISXR2K3ZZSmxFWUxQQjhDMnczaEZNM3JCTmtUejlHUUp1bUZjMWxJZENraVBnTzRnVGJrWCs3dWVsaklGREdOaHZHNEJKc0VOUkxtN3NVNGh5b2NrMUFCeHljUVlSNGl4RXBZY2lpZXdienNwQ0VIOURVR28vcGNGZ2Z6NkJzUXN4bVl2YjNFUHVDS2plL0NXUWU0Q1RIeFlKNEpicTJTWkMxSDhGeVNYbktJMFJ0dEdibDZTVTF1ZmlNOFBDUzlMY3dlUGNiMXpZb2pQa21NdGpPMnlVSUZqNCtiT3p0dFdGMEpQK2ZVbk9hNnVNUmQ0cWFXRXJCNFJ3WVJESDJDSTFRWXJQUE5nM1RWRE1ISjExa3FUQzlGd1oyWk1KL2RoWW9yYlQvaGpyZnhRVWwxRko2NFo3YlZGa3k4Ly92R1lBT2tDUzJ1Z0Mwa1BnLzVadzdKajhYZ3BUWG1QRjczbjk2bU9wdTZidzVQUHk2d1hKaDBUL1NUOUJINzhWWHU0dGozYjYzUCs1cFcveW4zK2Yva2xKZ1g0WjBPVXF4TGM3YmY2MWRYTytxalI0T1dlZ2o2OVdKRm40eFFvU09HOEU3UkFwWEFPeVV1ZHEwVVZJOU5yNnNRUFJEeEk0TE5vdDNsN3RPam1jd2dKZHJZQWtTTzE4Q2RyR1Y2K3ZMSHRPQmhYVzIzZ0hQMTlmbWR0TFFicmdVSlB4ZTIwSlZ3dXhuNkJvVThubmF3c2xMdi9hK3VlSHkzQllMUHhza1FmZ2g2dnEwZG8vQ3RvMys5Y1dkN253MGd4UllCZExHcXpIdVdlbkM0cmNnRUY0ZTN0YVM0L0Q1L2xJa2Q5R3l2VHgxK0JsL1BaMkFiaVMxamNMK3pYeENNTGtCL1R4RHd2N2pUdWFWZlVmRjVSOWF0ZXVMTVEvNjF2L1BIMzQ4ejlNNEJvenpTTDF5ajNpTWlEb1BQbUtMQURiSUUzY0lNTEhQRjNiL296Yk9QanhWVm9XTVZoUlNsRE1YdDl5SU1SeUZLUmgvcG4rM0xLYnpUOUZLR2JVMU45U24zZjZWR05YOWF5Z3FYaXlRNUZWMysrZzVQLzk2RXVnYVdpREJGM0NwUkxmRlAxWDEzZzZoQzFseWNnbWlLdjMrVEgwSGNXYXVRZHEyTm43LzUzQ3d1ZDNleVVZRXZadDdEdGYzTHAxZTVaN1V5bFlvZzFiV2pMcms1UHBzZ2FKL0VDNDRwVFp1RksrbW9za1pRWjBXUnY1TDFkSDZsOUwrcUorOHlFSEt6L3dTVEdENHdpd0VDa0ZFb1RoNWQ0NFJKQzlwVEpXcnJ2bHdpaElBaGlRUHJkKytGVktNMTNTNSs3NW4zejVKQUdSZzVKZnRlZi9DVHZPUzBSbGlhd3MrK1E1UUFqODhrRmVjd2o4QkdBZlJUY2NpTGs5SWd3QU9DMGV6cFd5S0VOVDRhTEdFdmgwR1N2T2VJQ0tESHRKOVE5RmVUcEoxOWZELzZLcFdkV2RxbkR3L041QUdNWmZXTG0vY0ZIYm4vRnRkVmxzYTNWUE1TS3NJRk9zOUVBQzNXbDliOU51cnJCRHF5UUNDWEt5WWltTmovcmNNaUFFKzg2NnNsUWNGOVVmVlhBOWNGajdZQWN3QVJaQmZVNmdMOHJiTFBHcGswOS95RGx1emRpZDExSHFxM09odU9FQUNYeUgyK1BFWlRjOGpEQXJrQTFzTy9Ealo1OWtYQktRTW9XM0VBbjJOM1VnSG9pMmhXd0VOaFVUd01FQ0JBZHMremJ3Ynpqa3h5bEw1WEZDZlVGYzN4OUdPS0RDeThYUVJYWkttY01raDRXK09JbFBCcHNsZFJIS0U3bzZDTHloZ05FT1JRdzZoM1lZbG1XOVQrcEJUYXppU2pSUTFBWWtkRUg3Rk9CUWkxeVNkaHNHZHAvNzdiZDhYeVZDekp3Rk5scWRpeEw5c1ZCeUNTeUkreHpCZm5vb1Y3bEJuTXh6RlB0Y0VxV29zZ2JWRFp6ZjRBeHNFUmVudFlvaFkwQkpnODJLT1lRd25PSWFQMjQ1dE5rZ21QUzVlYkFxRnRlam5MeG1FMFI5N3ZHQTQvTUxtNEZvKytsOXMzUTVRcWY3UER0NGk3SitnNUI5Ny9RNjNvOEhCTlBrVzJpWE1qWWtJSTduekhMazV1R1dNdWEyeEw5Y0hwKzVybm1qMDJLY3dENzI4Qkd4Q2hXMXhKeWRpemtvMVp4TGk3OEFHVVFjK3p1Uk9QRC9meTVCaE5RTllSSndkc0FCR3BrSEVVU25BOG90TkN4MWt5U00rejkrbkl1UUhjRDRCd3g4aU1Jay9rRUZod1RBam4vUXNJbis1OGZmRWhSNTJHZXljeHRzYmxuNW9oS3IwenM1QWhEOVFoRU83QldOMSsyNHozWExkWlZMdUxZZnAzZlhYb1U2Q2d2N0lNTG9USUtvZWw5WC83a05KdWk4d0YrLytOemdsNDdxU20wNWpvM0U5TGx2VHNSYzdmeVZFdklySUJobWZVN1p6SVBrRnpVMVplUlM4c0h6QUhWVi8zaHQvYmhBcFIyN2ViVG9BWnFibkNVTkJHOFF6Q0JCL2ZNczVHK2NoRFpCaExndHpzV0ZjcTdtZjFFdTRqbEhtZW5sWE9EYkJFWG5jTUlJclpJZzdGL21PSFQvMWNOdmtsRlVSeThvUWY3dWlvYm1aZzZWNmdMMlI1ZGF2OWpoWEhtYlA3NW96OHVudHp3NXZNU2IxUWhIVWVBMVVsUzBySjVRVm9hNVRlWDNwbmJWNVE4elVOZGxsVXVxNTdYYWJoaGhEMFFaNDBKZG1JdEdWcEJHdGFDcGZjMi92R2liOTV3QWFYTWE0Z0RaZ3l4bTlVS09obm1rM3RCS0kyUnp2K1BOSmFUVDI3OVRpd1A4akNzaXVrMk9FSTZMT2lDeTI1eXlxVzI0QkZYNkUxWXByMkZSUTZDa2xxTUp2b2Zpa2cwWG9PbzNURy8yYlQ2WVBWNGVsOTh1SzVEd3QyQlBIYlMveWZPdWk2VmZjMit3b2RGbjFYVHlZeFRSVnpmVW5JS01lU2VjNUEyUEs2b3gzQ0tiUzhNZllSU0VnUU1TWkhOV3JxTWUyRExqWGtwUWhJQ2RjYitYTGNFT3o4VzU0Zno3Snd4WVBnNGVqTGVIeCtuQStJd0ZsMVNYSUdiRzI2L25COGJCMWEvQjhQR3Y2TWdHSTJKL3BCenM1UytRdVAwcXpteWZpbDFmNGZLL2prWjk3UzRncVlkbTFEWEgvVXZVUFBvNEIvQ0RSbE5uQlNPL3lTRFFxN1N3ZjJ2ajZFdGdLSUVNbUkrU3R2MHhPQjhsM3dKWDFqY2JBVjI4ektrKzk3L3Jvc3RmbXRuaFhHbHdtUjhRU0RGZ3lGeTRraHkvUnJiZGZrN2o1eEEvNE4xdE03bWZ3UHNiWFZ0MXVuK0xhNDEwRWhTMTlNQm51eTgzNWk2VUlsUjJZRm1TVjZyMGIvRmxTWnFyaGkzS0R2bWxqV1Q1dmgzWHQ3NjJXSVFUZ29qMXdhc1NlVzR4WGx2bFhUYXlxYW4rZmJZdXp5d2ZTcHFmbzJHRVdIYjVYeTZYMkRpR3dRNUYyWFV4cW13U3JzaDNxaWkzMWVET1gwblR6NkxjSWlDL2JTclJBTnVPVUJ5L01MWW92M1ozci82cDRGSktWNW1vTlJSZjZxV1hDdE5pVEtVa3RPcFBBZHVtU1JWTmI3eGdSMzBEaVBNc0swTC9TbkdFUEVSWDArcy9CajdpaXBRZUU1eGs3YUpVbWVON1Z1U3NUVWpsRCtubVBuZWFqTXFmdXJodThqWkJaQWIrbVVrb3lYMnREVlhscnVUVGM0WDJmYS94WE9zL1A5ZWk1OWIvVEgzbmsySHcveHNBQVAvL2Z5VVE1czFmQUFBPQ==
  kind: Secret
  metadata:
    creationTimestamp: "2024-10-07T14:16:15Z"
    labels:
      modifiedAt: "1728295781"
      name: ai-runtime-security
      owner: helm
      status: superseded
      version: "3"
    name: sh.helm.release.v1.ai-runtime-security.v3
    namespace: kube-system
    resourceVersion: "1015651"
    uid: ad810e9b-ec33-45dc-82a7-b5f6f21163d2
  type: helm.sh/release.v1
- apiVersion: v1
  data:
    release: 
  kind: Secret
  metadata:
    creationTimestamp: "2024-10-07T15:17:30Z"
    labels:
      modifiedAt: "1728295781"
      name: ai-runtime-security
      owner: helm
      status: superseded
      version: "4"
    name: sh.helm.release.v1.ai-runtime-security.v4
    namespace: kube-system
    resourceVersion: "1018586"
    uid: a1849a83-e499-4342-b412-2d86f4032338
  type: helm.sh/release.v1
- apiVersion: v1
  data:
    release: 
  kind: Secret
  metadata:
    creationTimestamp: "2024-10-07T15:33:26Z"
    labels:
      modifiedAt: "1728295781"
      name: ai-runtime-security
      owner: helm
      status: deployed
      version: "5"
    name: sh.helm.release.v1.ai-runtime-security.v5
    namespace: kube-system
    resourceVersion: "1018587"
    uid: 71c129f6-9758-44ae-91c0-7b8a6a52ebeb
  type: helm.sh/release.v1
kind: List
metadata:
  resourceVersion: ""
apiVersion: v1
items:
- apiVersion: networking.k8s.io/v1
  kind: Ingress
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"networking.k8s.io/v1","kind":"Ingress","metadata":{"annotations":{"nginx.ingress.kubernetes.io/proxy-read-timeout":"3600","nginx.ingress.kubernetes.io/proxy-send-timeout":"3600","nginx.ingress.kubernetes.io/server-snippets":"location /api/ws {\n  proxy_set_header Upgrade $http_upgrade;\n  proxy_http_version 1.1;\n  proxy_set_header X-Forwarded-Host $http_host;\n  proxy_set_header X-Forwarded-Proto $scheme;\n  proxy_set_header X-Forwarded-For $remote_addr;\n  proxy_set_header Host $host;\n  proxy_set_header Connection \"upgrade\";\n  proxy_cache_bypass $http_upgrade;\n}\n"},"name":"ai-ingress","namespace":"ai-app"},"spec":{"ingressClassName":"nginx","rules":[{"http":{"paths":[{"backend":{"service":{"name":"agent-service","port":{"number":80}}},"path":"/api/","pathType":"Prefix"},{"backend":{"service":{"name":"ui-service","port":{"number":80}}},"path":"/","pathType":"Prefix"}]}}]}}
      nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
      nginx.ingress.kubernetes.io/server-snippets: |
        location /api/ws {
          proxy_set_header Upgrade $http_upgrade;
          proxy_http_version 1.1;
          proxy_set_header X-Forwarded-Host $http_host;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_set_header X-Forwarded-For $remote_addr;
          proxy_set_header Host $host;
          proxy_set_header Connection "upgrade";
          proxy_cache_bypass $http_upgrade;
        }
    creationTimestamp: "2024-10-10T22:46:43Z"
    generation: 1
    name: ai-ingress
    namespace: ai-app
    resourceVersion: "1880043"
    uid: b8ff35da-5ab7-4ab6-b4c2-bec26f074fb7
  spec:
    ingressClassName: nginx
    rules:
    - http:
        paths:
        - backend:
            service:
              name: agent-service
              port:
                number: 80
          path: /api/
          pathType: Prefix
        - backend:
            service:
              name: ui-service
              port:
                number: 80
          path: /
          pathType: Prefix
  status:
    loadBalancer:
      ingress:
      - hostname: a8e5afe1fbff2457aa8a7d21eeb2943a-0ee7ac6d712fd784.elb.us-east-1.amazonaws.com
kind: List
metadata:
  resourceVersion: ""
apiVersion: v1
items: []
kind: List
metadata:
  resourceVersion: ""
apiVersion: v1
items:
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      controller-gen.kubebuilder.io/version: v0.9.0
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{"controller-gen.kubebuilder.io/version":"v0.9.0"},"creationTimestamp":null,"name":"cninodes.vpcresources.k8s.aws"},"spec":{"group":"vpcresources.k8s.aws","names":{"kind":"CNINode","listKind":"CNINodeList","plural":"cninodes","shortNames":["cnd"],"singular":"cninode"},"scope":"Cluster","versions":[{"additionalPrinterColumns":[{"description":"The features delegated to VPC resource controller","jsonPath":".spec.features","name":"Features","type":"string"}],"name":"v1alpha1","schema":{"openAPIV3Schema":{"properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"description":"Important: Run \"make\" to regenerate code after modifying this file CNINodeSpec defines the desired state of CNINode","properties":{"features":{"items":{"description":"Feature is a type of feature being supported by VPC resource controller and other AWS Services","properties":{"name":{"description":"FeatureName is a type of feature name supported by AWS VPC CNI. It can be Security Group for Pods, custom networking, or others","type":"string"},"value":{"type":"string"}},"type":"object"},"type":"array"},"tags":{"additionalProperties":{"type":"string"},"description":"Additional tag key/value added to all network interfaces provisioned by the vpc-resource-controller and VPC-CNI","type":"object"}},"type":"object"},"status":{"description":"CNINodeStatus defines the managed VPC resources.","type":"object"}},"type":"object"}},"served":true,"storage":true,"subresources":{}}]}}
    creationTimestamp: "2024-10-03T09:47:17Z"
    generation: 1
    name: cninodes.vpcresources.k8s.aws
    resourceVersion: "1741859"
    uid: 1634bbff-f52a-4dad-9f47-79b41357d724
  spec:
    conversion:
      strategy: None
    group: vpcresources.k8s.aws
    names:
      kind: CNINode
      listKind: CNINodeList
      plural: cninodes
      shortNames:
      - cnd
      singular: cninode
    scope: Cluster
    versions:
    - additionalPrinterColumns:
      - description: The features delegated to VPC resource controller
        jsonPath: .spec.features
        name: Features
        type: string
      name: v1alpha1
      schema:
        openAPIV3Schema:
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: 'Important: Run "make" to regenerate code after modifying
                this file CNINodeSpec defines the desired state of CNINode'
              properties:
                features:
                  items:
                    description: Feature is a type of feature being supported by VPC
                      resource controller and other AWS Services
                    properties:
                      name:
                        description: FeatureName is a type of feature name supported
                          by AWS VPC CNI. It can be Security Group for Pods, custom
                          networking, or others
                        type: string
                      value:
                        type: string
                    type: object
                  type: array
                tags:
                  additionalProperties:
                    type: string
                  description: Additional tag key/value added to all network interfaces
                    provisioned by the vpc-resource-controller and VPC-CNI
                  type: object
              type: object
            status:
              description: CNINodeStatus defines the managed VPC resources.
              type: object
          type: object
      served: true
      storage: true
      subresources: {}
  status:
    acceptedNames:
      kind: CNINode
      listKind: CNINodeList
      plural: cninodes
      shortNames:
      - cnd
      singular: cninode
    conditions:
    - lastTransitionTime: "2024-10-03T09:47:17Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2024-10-03T09:47:17Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1alpha1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    creationTimestamp: "2024-10-03T09:50:26Z"
    generation: 1
    name: eniconfigs.crd.k8s.amazonaws.com
    resourceVersion: "1738"
    uid: 2d080d83-e2c3-449f-82d4-265a5dc9af57
  spec:
    conversion:
      strategy: None
    group: crd.k8s.amazonaws.com
    names:
      kind: ENIConfig
      listKind: ENIConfigList
      plural: eniconfigs
      singular: eniconfig
    scope: Cluster
    versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: ENIConfig is the Schema for the eniconfigs API
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: ENIConfigSpec defines the desired state of ENIConfig
              properties:
                securityGroups:
                  items:
                    type: string
                  type: array
                subnet:
                  type: string
              required:
              - subnet
              type: object
            status:
              description: ENIConfigStatus defines the observed state of ENIConfig
              type: object
          type: object
          x-kubernetes-preserve-unknown-fields: true
      served: true
      storage: true
  status:
    acceptedNames:
      kind: ENIConfig
      listKind: ENIConfigList
      plural: eniconfigs
      singular: eniconfig
    conditions:
    - lastTransitionTime: "2024-10-03T09:50:26Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2024-10-03T09:50:26Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1alpha1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      controller-gen.kubebuilder.io/version: v0.11.3
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{"controller-gen.kubebuilder.io/version":"v0.11.3"},"creationTimestamp":null,"labels":{"app.kubernetes.io/name":"amazon-network-policy-controller-k8s"},"name":"policyendpoints.networking.k8s.aws"},"spec":{"group":"networking.k8s.aws","names":{"kind":"PolicyEndpoint","listKind":"PolicyEndpointList","plural":"policyendpoints","singular":"policyendpoint"},"scope":"Namespaced","versions":[{"name":"v1alpha1","schema":{"openAPIV3Schema":{"description":"PolicyEndpoint is the Schema for the policyendpoints API","properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"description":"PolicyEndpointSpec defines the desired state of PolicyEndpoint","properties":{"egress":{"description":"Egress is the list of egress rules containing resolved network addresses","items":{"description":"EndpointInfo defines the network endpoint information for the policy ingress/egress","properties":{"cidr":{"description":"CIDR is the network address(s) of the endpoint","type":"string"},"except":{"description":"Except is the exceptions to the CIDR ranges mentioned above.","items":{"type":"string"},"type":"array"},"ports":{"description":"Ports is the list of ports","items":{"description":"Port contains information about the transport port/protocol","properties":{"endPort":{"description":"Endport specifies the port range port to endPort port must be defined and an integer, endPort \u003e port","format":"int32","type":"integer"},"port":{"description":"Port specifies the numerical port for the protocol. If empty applies to all ports","format":"int32","type":"integer"},"protocol":{"default":"TCP","description":"Protocol specifies the transport protocol, default TCP","type":"string"}},"type":"object"},"type":"array"}},"required":["cidr"],"type":"object"},"type":"array"},"ingress":{"description":"Ingress is the list of ingress rules containing resolved network addresses","items":{"description":"EndpointInfo defines the network endpoint information for the policy ingress/egress","properties":{"cidr":{"description":"CIDR is the network address(s) of the endpoint","type":"string"},"except":{"description":"Except is the exceptions to the CIDR ranges mentioned above.","items":{"type":"string"},"type":"array"},"ports":{"description":"Ports is the list of ports","items":{"description":"Port contains information about the transport port/protocol","properties":{"endPort":{"description":"Endport specifies the port range port to endPort port must be defined and an integer, endPort \u003e port","format":"int32","type":"integer"},"port":{"description":"Port specifies the numerical port for the protocol. If empty applies to all ports","format":"int32","type":"integer"},"protocol":{"default":"TCP","description":"Protocol specifies the transport protocol, default TCP","type":"string"}},"type":"object"},"type":"array"}},"required":["cidr"],"type":"object"},"type":"array"},"podIsolation":{"description":"PodIsolation specifies whether the pod needs to be isolated for a particular traffic direction Ingress or Egress, or both. If default isolation is not specified, and there are no ingress/egress rules, then the pod is not isolated from the point of view of this policy. This follows the NetworkPolicy spec.PolicyTypes.","items":{"description":"PolicyType string describes the NetworkPolicy type This type is beta-level in 1.8","type":"string"},"type":"array"},"podSelector":{"description":"PodSelector is the podSelector from the policy resource","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object","x-kubernetes-map-type":"atomic"},"podSelectorEndpoints":{"description":"PodSelectorEndpoints contains information about the pods matching the podSelector","items":{"description":"PodEndpoint defines the summary information for the pods","properties":{"hostIP":{"description":"HostIP is the IP address of the host the pod is currently running on","type":"string"},"name":{"description":"Name is the pod name","type":"string"},"namespace":{"description":"Namespace is the pod namespace","type":"string"},"podIP":{"description":"PodIP is the IP address of the pod","type":"string"}},"required":["hostIP","name","namespace","podIP"],"type":"object"},"type":"array"},"policyRef":{"description":"PolicyRef is a reference to the Kubernetes NetworkPolicy resource.","properties":{"name":{"description":"Name is the name of the Policy","type":"string"},"namespace":{"description":"Namespace is the namespace of the Policy","type":"string"}},"required":["name","namespace"],"type":"object"}},"required":["policyRef"],"type":"object"},"status":{"description":"PolicyEndpointStatus defines the observed state of PolicyEndpoint","type":"object"}},"type":"object"}},"served":true,"storage":true,"subresources":{"status":{}}}]}}
    creationTimestamp: "2024-10-03T09:47:18Z"
    generation: 1
    labels:
      app.kubernetes.io/name: amazon-network-policy-controller-k8s
    name: policyendpoints.networking.k8s.aws
    resourceVersion: "1741870"
    uid: 68c03a36-533c-40de-a0c1-f65920675474
  spec:
    conversion:
      strategy: None
    group: networking.k8s.aws
    names:
      kind: PolicyEndpoint
      listKind: PolicyEndpointList
      plural: policyendpoints
      singular: policyendpoint
    scope: Namespaced
    versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: PolicyEndpoint is the Schema for the policyendpoints API
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: PolicyEndpointSpec defines the desired state of PolicyEndpoint
              properties:
                egress:
                  description: Egress is the list of egress rules containing resolved
                    network addresses
                  items:
                    description: EndpointInfo defines the network endpoint information
                      for the policy ingress/egress
                    properties:
                      cidr:
                        description: CIDR is the network address(s) of the endpoint
                        type: string
                      except:
                        description: Except is the exceptions to the CIDR ranges mentioned
                          above.
                        items:
                          type: string
                        type: array
                      ports:
                        description: Ports is the list of ports
                        items:
                          description: Port contains information about the transport
                            port/protocol
                          properties:
                            endPort:
                              description: Endport specifies the port range port to
                                endPort port must be defined and an integer, endPort
                                > port
                              format: int32
                              type: integer
                            port:
                              description: Port specifies the numerical port for the
                                protocol. If empty applies to all ports
                              format: int32
                              type: integer
                            protocol:
                              default: TCP
                              description: Protocol specifies the transport protocol,
                                default TCP
                              type: string
                          type: object
                        type: array
                    required:
                    - cidr
                    type: object
                  type: array
                ingress:
                  description: Ingress is the list of ingress rules containing resolved
                    network addresses
                  items:
                    description: EndpointInfo defines the network endpoint information
                      for the policy ingress/egress
                    properties:
                      cidr:
                        description: CIDR is the network address(s) of the endpoint
                        type: string
                      except:
                        description: Except is the exceptions to the CIDR ranges mentioned
                          above.
                        items:
                          type: string
                        type: array
                      ports:
                        description: Ports is the list of ports
                        items:
                          description: Port contains information about the transport
                            port/protocol
                          properties:
                            endPort:
                              description: Endport specifies the port range port to
                                endPort port must be defined and an integer, endPort
                                > port
                              format: int32
                              type: integer
                            port:
                              description: Port specifies the numerical port for the
                                protocol. If empty applies to all ports
                              format: int32
                              type: integer
                            protocol:
                              default: TCP
                              description: Protocol specifies the transport protocol,
                                default TCP
                              type: string
                          type: object
                        type: array
                    required:
                    - cidr
                    type: object
                  type: array
                podIsolation:
                  description: PodIsolation specifies whether the pod needs to be
                    isolated for a particular traffic direction Ingress or Egress,
                    or both. If default isolation is not specified, and there are
                    no ingress/egress rules, then the pod is not isolated from the
                    point of view of this policy. This follows the NetworkPolicy spec.PolicyTypes.
                  items:
                    description: PolicyType string describes the NetworkPolicy type
                      This type is beta-level in 1.8
                    type: string
                  type: array
                podSelector:
                  description: PodSelector is the podSelector from the policy resource
                  properties:
                    matchExpressions:
                      description: matchExpressions is a list of label selector requirements.
                        The requirements are ANDed.
                      items:
                        description: A label selector requirement is a selector that
                          contains values, a key, and an operator that relates the
                          key and values.
                        properties:
                          key:
                            description: key is the label key that the selector applies
                              to.
                            type: string
                          operator:
                            description: operator represents a key's relationship
                              to a set of values. Valid operators are In, NotIn, Exists
                              and DoesNotExist.
                            type: string
                          values:
                            description: values is an array of string values. If the
                              operator is In or NotIn, the values array must be non-empty.
                              If the operator is Exists or DoesNotExist, the values
                              array must be empty. This array is replaced during a
                              strategic merge patch.
                            items:
                              type: string
                            type: array
                        required:
                        - key
                        - operator
                        type: object
                      type: array
                    matchLabels:
                      additionalProperties:
                        type: string
                      description: matchLabels is a map of {key,value} pairs. A single
                        {key,value} in the matchLabels map is equivalent to an element
                        of matchExpressions, whose key field is "key", the operator
                        is "In", and the values array contains only "value". The requirements
                        are ANDed.
                      type: object
                  type: object
                  x-kubernetes-map-type: atomic
                podSelectorEndpoints:
                  description: PodSelectorEndpoints contains information about the
                    pods matching the podSelector
                  items:
                    description: PodEndpoint defines the summary information for the
                      pods
                    properties:
                      hostIP:
                        description: HostIP is the IP address of the host the pod
                          is currently running on
                        type: string
                      name:
                        description: Name is the pod name
                        type: string
                      namespace:
                        description: Namespace is the pod namespace
                        type: string
                      podIP:
                        description: PodIP is the IP address of the pod
                        type: string
                    required:
                    - hostIP
                    - name
                    - namespace
                    - podIP
                    type: object
                  type: array
                policyRef:
                  description: PolicyRef is a reference to the Kubernetes NetworkPolicy
                    resource.
                  properties:
                    name:
                      description: Name is the name of the Policy
                      type: string
                    namespace:
                      description: Namespace is the namespace of the Policy
                      type: string
                  required:
                  - name
                  - namespace
                  type: object
              required:
              - policyRef
              type: object
            status:
              description: PolicyEndpointStatus defines the observed state of PolicyEndpoint
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      kind: PolicyEndpoint
      listKind: PolicyEndpointList
      plural: policyendpoints
      singular: policyendpoint
    conditions:
    - lastTransitionTime: "2024-10-03T09:47:18Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2024-10-03T09:47:18Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1alpha1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      controller-gen.kubebuilder.io/version: v0.9.0
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{"controller-gen.kubebuilder.io/version":"v0.9.0"},"name":"securitygrouppolicies.vpcresources.k8s.aws"},"spec":{"group":"vpcresources.k8s.aws","names":{"kind":"SecurityGroupPolicy","listKind":"SecurityGroupPolicyList","plural":"securitygrouppolicies","shortNames":["sgp"],"singular":"securitygrouppolicy"},"scope":"Namespaced","versions":[{"additionalPrinterColumns":[{"description":"The security group IDs to apply to the elastic network interface of pods that match this policy","jsonPath":".spec.securityGroups.groupIds","name":"Security-Group-Ids","type":"string"}],"name":"v1beta1","schema":{"openAPIV3Schema":{"description":"Custom Resource Definition for applying security groups to pods","properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"description":"SecurityGroupPolicySpec defines the desired state of SecurityGroupPolicy","properties":{"podSelector":{"description":"A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"securityGroups":{"description":"GroupIds contains the list of security groups that will be applied to the network interface of the pod matching the criteria.","properties":{"groupIds":{"description":"Groups is the list of EC2 Security Groups Ids that need to be applied to the ENI of a Pod.","items":{"type":"string"},"maxItems":5,"minItems":1,"type":"array"}},"type":"object"},"serviceAccountSelector":{"description":"A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"}},"type":"object"}},"type":"object"}},"served":true,"storage":true,"subresources":{}}]}}
    creationTimestamp: "2024-10-03T09:47:17Z"
    generation: 1
    name: securitygrouppolicies.vpcresources.k8s.aws
    resourceVersion: "1741858"
    uid: 63e318ab-c460-4009-b24c-9de72c6601a9
  spec:
    conversion:
      strategy: None
    group: vpcresources.k8s.aws
    names:
      kind: SecurityGroupPolicy
      listKind: SecurityGroupPolicyList
      plural: securitygrouppolicies
      shortNames:
      - sgp
      singular: securitygrouppolicy
    scope: Namespaced
    versions:
    - additionalPrinterColumns:
      - description: The security group IDs to apply to the elastic network interface
          of pods that match this policy
        jsonPath: .spec.securityGroups.groupIds
        name: Security-Group-Ids
        type: string
      name: v1beta1
      schema:
        openAPIV3Schema:
          description: Custom Resource Definition for applying security groups to
            pods
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: SecurityGroupPolicySpec defines the desired state of SecurityGroupPolicy
              properties:
                podSelector:
                  description: A label selector is a label query over a set of resources.
                    The result of matchLabels and matchExpressions are ANDed. An empty
                    label selector matches all objects. A null label selector matches
                    no objects.
                  properties:
                    matchExpressions:
                      description: matchExpressions is a list of label selector requirements.
                        The requirements are ANDed.
                      items:
                        description: A label selector requirement is a selector that
                          contains values, a key, and an operator that relates the
                          key and values.
                        properties:
                          key:
                            description: key is the label key that the selector applies
                              to.
                            type: string
                          operator:
                            description: operator represents a key's relationship
                              to a set of values. Valid operators are In, NotIn, Exists
                              and DoesNotExist.
                            type: string
                          values:
                            description: values is an array of string values. If the
                              operator is In or NotIn, the values array must be non-empty.
                              If the operator is Exists or DoesNotExist, the values
                              array must be empty. This array is replaced during a
                              strategic merge patch.
                            items:
                              type: string
                            type: array
                        required:
                        - key
                        - operator
                        type: object
                      type: array
                    matchLabels:
                      additionalProperties:
                        type: string
                      description: matchLabels is a map of {key,value} pairs. A single
                        {key,value} in the matchLabels map is equivalent to an element
                        of matchExpressions, whose key field is "key", the operator
                        is "In", and the values array contains only "value". The requirements
                        are ANDed.
                      type: object
                  type: object
                securityGroups:
                  description: GroupIds contains the list of security groups that
                    will be applied to the network interface of the pod matching the
                    criteria.
                  properties:
                    groupIds:
                      description: Groups is the list of EC2 Security Groups Ids that
                        need to be applied to the ENI of a Pod.
                      items:
                        type: string
                      maxItems: 5
                      minItems: 1
                      type: array
                  type: object
                serviceAccountSelector:
                  description: A label selector is a label query over a set of resources.
                    The result of matchLabels and matchExpressions are ANDed. An empty
                    label selector matches all objects. A null label selector matches
                    no objects.
                  properties:
                    matchExpressions:
                      description: matchExpressions is a list of label selector requirements.
                        The requirements are ANDed.
                      items:
                        description: A label selector requirement is a selector that
                          contains values, a key, and an operator that relates the
                          key and values.
                        properties:
                          key:
                            description: key is the label key that the selector applies
                              to.
                            type: string
                          operator:
                            description: operator represents a key's relationship
                              to a set of values. Valid operators are In, NotIn, Exists
                              and DoesNotExist.
                            type: string
                          values:
                            description: values is an array of string values. If the
                              operator is In or NotIn, the values array must be non-empty.
                              If the operator is Exists or DoesNotExist, the values
                              array must be empty. This array is replaced during a
                              strategic merge patch.
                            items:
                              type: string
                            type: array
                        required:
                        - key
                        - operator
                        type: object
                      type: array
                    matchLabels:
                      additionalProperties:
                        type: string
                      description: matchLabels is a map of {key,value} pairs. A single
                        {key,value} in the matchLabels map is equivalent to an element
                        of matchExpressions, whose key field is "key", the operator
                        is "In", and the values array contains only "value". The requirements
                        are ANDed.
                      type: object
                  type: object
              type: object
          type: object
      served: true
      storage: true
      subresources: {}
  status:
    acceptedNames:
      kind: SecurityGroupPolicy
      listKind: SecurityGroupPolicyList
      plural: securitygrouppolicies
      shortNames:
      - sgp
      singular: securitygrouppolicy
    conditions:
    - lastTransitionTime: "2024-10-03T09:47:17Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2024-10-03T09:47:17Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1beta1
kind: List
metadata:
  resourceVersion: ""
apiVersion: v1
items:
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "2"
    creationTimestamp: "2024-10-03T09:50:26Z"
    generation: 2
    labels:
      app.kubernetes.io/instance: aws-vpc-cni
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: aws-node
      app.kubernetes.io/version: v1.18.3
      helm.sh/chart: aws-vpc-cni-1.18.3
      k8s-app: aws-node
    name: aws-node
    namespace: kube-system
    resourceVersion: "928511"
    uid: 486d5e10-a591-42f4-ac27-7c0f178f8bf4
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: aws-node
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: aws-vpc-cni
          app.kubernetes.io/name: aws-node
          k8s-app: aws-node
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
                  - arm64
                - key: eks.amazonaws.com/compute-type
                  operator: NotIn
                  values:
                  - fargate
        containers:
        - env:
          - name: ADDITIONAL_ENI_TAGS
            value: '{}'
          - name: ANNOTATE_POD_IP
            value: "false"
          - name: AWS_VPC_CNI_NODE_PORT_SUPPORT
            value: "true"
          - name: AWS_VPC_ENI_MTU
            value: "9001"
          - name: AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG
            value: "false"
          - name: AWS_VPC_K8S_CNI_EXTERNALSNAT
            value: "false"
          - name: AWS_VPC_K8S_CNI_LOGLEVEL
            value: DEBUG
          - name: AWS_VPC_K8S_CNI_LOG_FILE
            value: /host/var/log/aws-routed-eni/ipamd.log
          - name: AWS_VPC_K8S_CNI_RANDOMIZESNAT
            value: prng
          - name: AWS_VPC_K8S_CNI_VETHPREFIX
            value: eni
          - name: AWS_VPC_K8S_PLUGIN_LOG_FILE
            value: /var/log/aws-routed-eni/plugin.log
          - name: AWS_VPC_K8S_PLUGIN_LOG_LEVEL
            value: DEBUG
          - name: CLUSTER_ENDPOINT
            value: https://178AE1BF31E1B14F35D0CAFE8F59ED13.gr7.us-east-1.eks.amazonaws.com
          - name: CLUSTER_NAME
            value: 2szv4dtt-K8s
          - name: DISABLE_INTROSPECTION
            value: "false"
          - name: DISABLE_METRICS
            value: "false"
          - name: DISABLE_NETWORK_RESOURCE_PROVISIONING
            value: "false"
          - name: ENABLE_IPv4
            value: "true"
          - name: ENABLE_IPv6
            value: "false"
          - name: ENABLE_POD_ENI
            value: "false"
          - name: ENABLE_PREFIX_DELEGATION
            value: "false"
          - name: ENABLE_SUBNET_DISCOVERY
            value: "true"
          - name: NETWORK_POLICY_ENFORCING_MODE
            value: standard
          - name: VPC_CNI_VERSION
            value: v1.18.3
          - name: VPC_ID
            value: vpc-00fdb9083fc4969ce
          - name: WARM_ENI_TARGET
            value: "1"
          - name: WARM_PREFIX_TARGET
            value: "1"
          - name: MY_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon-k8s-cni:v1.18.3-eksbuild.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /app/grpc-health-probe
              - -addr=:50051
              - -connect-timeout=5s
              - -rpc-timeout=5s
            failureThreshold: 3
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: aws-node
          ports:
          - containerPort: 61678
            name: metrics
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /app/grpc-health-probe
              - -addr=:50051
              - -connect-timeout=5s
              - -rpc-timeout=5s
            failureThreshold: 3
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            requests:
              cpu: 25m
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
              - NET_RAW
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /host/opt/cni/bin
            name: cni-bin-dir
          - mountPath: /host/etc/cni/net.d
            name: cni-net-dir
          - mountPath: /host/var/log/aws-routed-eni
            name: log-dir
          - mountPath: /var/run/aws-node
            name: run-dir
          - mountPath: /run/xtables.lock
            name: xtables-lock
        - args:
          - --enable-ipv6=false
          - --enable-network-policy=false
          - --enable-cloudwatch-logs=false
          - --enable-policy-event-logs=false
          - --log-file=/var/log/aws-routed-eni/network-policy-agent.log
          - --metrics-bind-addr=:8162
          - --health-probe-bind-addr=:8163
          - --conntrack-cache-cleanup-period=300
          env:
          - name: MY_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.2-eksbuild.2
          imagePullPolicy: IfNotPresent
          name: aws-eks-nodeagent
          resources:
            requests:
              cpu: 25m
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /host/opt/cni/bin
            name: cni-bin-dir
          - mountPath: /sys/fs/bpf
            name: bpf-pin-path
          - mountPath: /var/log/aws-routed-eni
            name: log-dir
          - mountPath: /var/run/aws-node
            name: run-dir
        dnsPolicy: ClusterFirst
        hostNetwork: true
        initContainers:
        - env:
          - name: DISABLE_TCP_EARLY_DEMUX
            value: "false"
          - name: ENABLE_IPv6
            value: "false"
          image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon-k8s-cni-init:v1.18.3-eksbuild.2
          imagePullPolicy: IfNotPresent
          name: aws-vpc-cni-init
          resources:
            requests:
              cpu: 25m
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /host/opt/cni/bin
            name: cni-bin-dir
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: aws-node
        serviceAccountName: aws-node
        terminationGracePeriodSeconds: 10
        tolerations:
        - operator: Exists
        volumes:
        - hostPath:
            path: /sys/fs/bpf
            type: ""
          name: bpf-pin-path
        - hostPath:
            path: /opt/cni/bin
            type: ""
          name: cni-bin-dir
        - hostPath:
            path: /etc/cni/net.d
            type: ""
          name: cni-net-dir
        - hostPath:
            path: /var/log/aws-routed-eni
            type: DirectoryOrCreate
          name: log-dir
        - hostPath:
            path: /var/run/aws-node
            type: DirectoryOrCreate
          name: run-dir
        - hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
          name: xtables-lock
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 10%
      type: RollingUpdate
  status:
    currentNumberScheduled: 4
    desiredNumberScheduled: 4
    numberAvailable: 4
    numberMisscheduled: 0
    numberReady: 4
    observedGeneration: 2
    updatedNumberScheduled: 4
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
    creationTimestamp: "2024-10-03T09:55:12Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: eks-pod-identity-agent
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: eks-pod-identity-agent
      app.kubernetes.io/version: 0.1.15
      helm.sh/chart: eks-pod-identity-agent-1.3.2
    name: eks-pod-identity-agent
    namespace: kube-system
    resourceVersion: "928473"
    uid: 9ec4920b-a16b-4064-bcc4-f84e8c476bea
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: eks-pod-identity-agent
        app.kubernetes.io/name: eks-pod-identity-agent
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: eks-pod-identity-agent
          app.kubernetes.io/name: eks-pod-identity-agent
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
                  - arm64
                - key: eks.amazonaws.com/compute-type
                  operator: NotIn
                  values:
                  - fargate
        containers:
        - args:
          - --port
          - "80"
          - --cluster-name
          - 2szv4dtt-K8s
          - --probe-port
          - "2703"
          command:
          - /go-runner
          - /eks-pod-identity-agent
          - server
          env:
          - name: AWS_REGION
            value: us-east-1
          image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              host: localhost
              path: /healthz
              port: probes-port
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: eks-pod-identity-agent
          ports:
          - containerPort: 80
            name: proxy
            protocol: TCP
          - containerPort: 2703
            name: probes-port
            protocol: TCP
          readinessProbe:
            failureThreshold: 30
            httpGet:
              host: localhost
              path: /readyz
              port: probes-port
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          resources: {}
          securityContext:
            capabilities:
              add:
              - CAP_NET_BIND_SERVICE
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        hostNetwork: true
        initContainers:
        - command:
          - /go-runner
          - /eks-pod-identity-agent
          - initialize
          image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
          imagePullPolicy: Always
          name: eks-pod-identity-agent-init
          resources: {}
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        tolerations:
        - operator: Exists
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 10%
      type: RollingUpdate
  status:
    currentNumberScheduled: 4
    desiredNumberScheduled: 4
    numberAvailable: 4
    numberMisscheduled: 0
    numberReady: 4
    observedGeneration: 1
    updatedNumberScheduled: 4
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
    creationTimestamp: "2024-10-03T09:50:25Z"
    generation: 1
    labels:
      eks.amazonaws.com/component: kube-proxy
      k8s-app: kube-proxy
    name: kube-proxy
    namespace: kube-system
    resourceVersion: "928475"
    uid: 5177a3b8-d52b-4bd1-a71c-fa4ba61ffeb7
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: kube-proxy
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kube-proxy
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
                  - arm64
                - key: eks.amazonaws.com/compute-type
                  operator: NotIn
                  values:
                  - fargate
        containers:
        - command:
          - kube-proxy
          - --v=2
          - --config=/var/lib/kube-proxy-config/config
          - --hostname-override=$(NODE_NAME)
          env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/kube-proxy:v1.31.0-minimal-eksbuild.2
          imagePullPolicy: IfNotPresent
          name: kube-proxy
          resources:
            requests:
              cpu: 100m
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/log
            name: varlog
          - mountPath: /run/xtables.lock
            name: xtables-lock
          - mountPath: /lib/modules
            name: lib-modules
            readOnly: true
          - mountPath: /var/lib/kube-proxy/
            name: kubeconfig
          - mountPath: /var/lib/kube-proxy-config/
            name: config
        dnsPolicy: ClusterFirst
        hostNetwork: true
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kube-proxy
        serviceAccountName: kube-proxy
        terminationGracePeriodSeconds: 30
        tolerations:
        - operator: Exists
        volumes:
        - hostPath:
            path: /var/log
            type: ""
          name: varlog
        - hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
          name: xtables-lock
        - hostPath:
            path: /lib/modules
            type: ""
          name: lib-modules
        - configMap:
            defaultMode: 420
            name: kube-proxy
          name: kubeconfig
        - configMap:
            defaultMode: 420
            name: kube-proxy-config
          name: config
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 10%
      type: RollingUpdate
  status:
    currentNumberScheduled: 4
    desiredNumberScheduled: 4
    numberAvailable: 4
    numberMisscheduled: 0
    numberReady: 4
    observedGeneration: 1
    updatedNumberScheduled: 4
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
      meta.helm.sh/release-name: ai-runtime-security
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2024-10-07T10:09:41Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
      k8s-app: pan-cni
    name: pan-cni
    namespace: kube-system
    resourceVersion: "961818"
    uid: f64fb1ab-dfeb-4b11-88e1-613f2ba16c13
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: pan-cni
    template:
      metadata:
        annotations:
          paloaltonetworks.com/app: pan-cni
          scheduler.alpha.kubernetes.io/critical-pod: ""
        creationTimestamp: null
        labels:
          k8s-app: pan-cni
      spec:
        containers:
        - command:
          - /install-pan-cni.sh
          - main
          env:
          - name: CNI_NETWORK_CONFIG
            valueFrom:
              configMapKeyRef:
                key: cni_network_config
                name: pan-cni-config
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          image: gcr.io/pan-cn-series/airs/pan-cni:4.0.0
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /install-pan-cni.sh
                - cleanup
          name: install-pan-cni
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /host/opt/cni/bin
            name: cni-bin-dir
          - mountPath: /host/etc/cni/net.d
            name: cni-net-dir
          - mountPath: /host/appinfo
            name: appinfo
        dnsPolicy: ClusterFirst
        hostNetwork: true
        nodeSelector:
          beta.kubernetes.io/os: linux
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: pan-cni-sa
        serviceAccountName: pan-cni-sa
        terminationGracePeriodSeconds: 5
        tolerations:
        - effect: NoSchedule
          operator: Exists
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          operator: Exists
        volumes:
        - hostPath:
            path: /opt/cni/bin
            type: ""
          name: cni-bin-dir
        - hostPath:
            path: /etc/cni/net.d
            type: ""
          name: cni-net-dir
        - hostPath:
            path: /var/log/pan-appinfo
            type: DirectoryOrCreate
          name: appinfo
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 4
    desiredNumberScheduled: 4
    numberAvailable: 4
    numberMisscheduled: 0
    numberReady: 4
    observedGeneration: 1
    updatedNumberScheduled: 4
kind: List
metadata:
  resourceVersion: ""
10-07-2024 10:09:45.398541 UTC DEBUG: /host/secondary-bin-dir is non-writeable, skipping
10-07-2024 10:09:45.414771 UTC DEBUG: PAN CNI config: {  "name": "pan-cni",  "type": "pan-cni",  "log_level": "debug",  "appinfo_dir": "/var/log/pan-appinfo",  "mode": "service",  "cloud": "eks",  "dpservicename": "pan-ngfw-svc",  "dpservicenamespace": "kube-system",  "traffic_object_id": "1",  "interfaces": [    "eth0"  ],  "interfacesip": [    ""  ],  "interfacesmac": [    ""  ],  "firewall": [    "pan-fw"  ],  "override_mtu": "",  "kubernetes": {    "kubeconfig": "/etc/cni/net.d/ZZZ-pan-cni-kubeconfig",    "cni_bin_dir": "/opt/cni/bin",    "exclude_namespaces": [],    "security_namespaces": [      "kube-system"    ]  }}
10-07-2024 10:09:45.418326 UTC DEBUG: CNI running in FW Service mode. Bypassfirewall can be enabled on application pods
10-07-2024 10:09:45.612717 UTC DEBUG: Created CNI config 10-aws.conflist
10-07-2024 10:09:45.614613 UTC DEBUG: Done configuring CNI.  Sleep=true, Ready delay=30 seconds
10-07-2024 10:09:45.616489 UTC DEBUG: Monitoring "pan-cni" plugin in CNI conflist (/host/etc/cni/net.d/10-aws.conflist)
error: Ignoring /etc/logrotate.conf because it is writable by group or others.
error: Ignoring /etc/logrotate.conf because it is writable by group or others.
error: Ignoring /etc/logrotate.conf because it is writable by group or others.
error: Ignoring /etc/logrotate.conf because it is writable by group or others.
10-07-2024 10:09:45.192585 UTC DEBUG: /host/secondary-bin-dir is non-writeable, skipping
10-07-2024 10:09:45.204961 UTC DEBUG: PAN CNI config: {  "name": "pan-cni",  "type": "pan-cni",  "log_level": "debug",  "appinfo_dir": "/var/log/pan-appinfo",  "mode": "service",  "cloud": "eks",  "dpservicename": "pan-ngfw-svc",  "dpservicenamespace": "kube-system",  "traffic_object_id": "1",  "interfaces": [    "eth0"  ],  "interfacesip": [    ""  ],  "interfacesmac": [    ""  ],  "firewall": [    "pan-fw"  ],  "override_mtu": "",  "kubernetes": {    "kubeconfig": "/etc/cni/net.d/ZZZ-pan-cni-kubeconfig",    "cni_bin_dir": "/opt/cni/bin",    "exclude_namespaces": [],    "security_namespaces": [      "kube-system"    ]  }}
10-07-2024 10:09:45.210515 UTC DEBUG: CNI running in FW Service mode. Bypassfirewall can be enabled on application pods
10-07-2024 10:09:45.362351 UTC DEBUG: Created CNI config 10-aws.conflist
10-07-2024 10:09:45.364353 UTC DEBUG: Done configuring CNI.  Sleep=true, Ready delay=30 seconds
10-07-2024 10:09:45.366282 UTC DEBUG: Monitoring "pan-cni" plugin in CNI conflist (/host/etc/cni/net.d/10-aws.conflist)
error: Ignoring /etc/logrotate.conf because it is writable by group or others.
error: Ignoring /etc/logrotate.conf because it is writable by group or others.
error: Ignoring /etc/logrotate.conf because it is writable by group or others.
error: Ignoring /etc/logrotate.conf because it is writable by group or others.
10-07-2024 10:09:44.879518 UTC DEBUG: /host/secondary-bin-dir is non-writeable, skipping
10-07-2024 10:09:44.893544 UTC DEBUG: PAN CNI config: {  "name": "pan-cni",  "type": "pan-cni",  "log_level": "debug",  "appinfo_dir": "/var/log/pan-appinfo",  "mode": "service",  "cloud": "eks",  "dpservicename": "pan-ngfw-svc",  "dpservicenamespace": "kube-system",  "traffic_object_id": "1",  "interfaces": [    "eth0"  ],  "interfacesip": [    ""  ],  "interfacesmac": [    ""  ],  "firewall": [    "pan-fw"  ],  "override_mtu": "",  "kubernetes": {    "kubeconfig": "/etc/cni/net.d/ZZZ-pan-cni-kubeconfig",    "cni_bin_dir": "/opt/cni/bin",    "exclude_namespaces": [],    "security_namespaces": [      "kube-system"    ]  }}
10-07-2024 10:09:44.902702 UTC DEBUG: CNI running in FW Service mode. Bypassfirewall can be enabled on application pods
10-07-2024 10:09:45.059826 UTC DEBUG: Created CNI config 10-aws.conflist
10-07-2024 10:09:45.062744 UTC DEBUG: Done configuring CNI.  Sleep=true, Ready delay=30 seconds
10-07-2024 10:09:45.064235 UTC DEBUG: Monitoring "pan-cni" plugin in CNI conflist (/host/etc/cni/net.d/10-aws.conflist)
error: Ignoring /etc/logrotate.conf because it is writable by group or others.
error: Ignoring /etc/logrotate.conf because it is writable by group or others.
error: Ignoring /etc/logrotate.conf because it is writable by group or others.
error: Ignoring /etc/logrotate.conf because it is writable by group or others.
10-07-2024 10:09:45.180255 UTC DEBUG: /host/secondary-bin-dir is non-writeable, skipping
10-07-2024 10:09:45.227268 UTC DEBUG: PAN CNI config: {  "name": "pan-cni",  "type": "pan-cni",  "log_level": "debug",  "appinfo_dir": "/var/log/pan-appinfo",  "mode": "service",  "cloud": "eks",  "dpservicename": "pan-ngfw-svc",  "dpservicenamespace": "kube-system",  "traffic_object_id": "1",  "interfaces": [    "eth0"  ],  "interfacesip": [    ""  ],  "interfacesmac": [    ""  ],  "firewall": [    "pan-fw"  ],  "override_mtu": "",  "kubernetes": {    "kubeconfig": "/etc/cni/net.d/ZZZ-pan-cni-kubeconfig",    "cni_bin_dir": "/opt/cni/bin",    "exclude_namespaces": [],    "security_namespaces": [      "kube-system"    ]  }}
10-07-2024 10:09:45.243238 UTC DEBUG: CNI running in FW Service mode. Bypassfirewall can be enabled on application pods
10-07-2024 10:09:45.433510 UTC DEBUG: Created CNI config 10-aws.conflist
10-07-2024 10:09:45.435627 UTC DEBUG: Done configuring CNI.  Sleep=true, Ready delay=30 seconds
10-07-2024 10:09:45.437218 UTC DEBUG: Monitoring "pan-cni" plugin in CNI conflist (/host/etc/cni/net.d/10-aws.conflist)
error: Ignoring /etc/logrotate.conf because it is writable by group or others.
error: Ignoring /etc/logrotate.conf because it is writable by group or others.
error: Ignoring /etc/logrotate.conf because it is writable by group or others.
error: Ignoring /etc/logrotate.conf because it is writable by group or others.
Custom certificates added
apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-11T01:16:47Z"
    generateName: agent-deployment-5d56ddfb98-
    labels:
      app: agent
      paloaltonetworks.com/trafficobject: "1"
      pod-template-hash: 5d56ddfb98
    name: agent-deployment-5d56ddfb98-6hws6
    namespace: ai-app
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: agent-deployment-5d56ddfb98
      uid: b1346eba-e8fb-4269-91a5-b3237017c2ed
    resourceVersion: "1907867"
    uid: 793c21e7-b2b3-4408-afdb-fc2fab6a24fd
  spec:
    containers:
    - env:
      - name: AWS_STS_REGIONAL_ENDPOINTS
        value: regional
      - name: AWS_DEFAULT_REGION
        value: us-east-1
      - name: AWS_REGION
        value: us-east-1
      - name: AWS_ROLE_ARN
        value: arn:aws:iam::367521625516:role/2szv4dtt-eks-pod-role
      - name: AWS_WEB_IDENTITY_TOKEN_FILE
        value: /var/run/secrets/eks.amazonaws.com/serviceaccount/token
      image: migara/agent-app
      imagePullPolicy: Always
      name: agent
      ports:
      - containerPort: 3001
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      tty: true
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-v2wfr
        readOnly: true
      - mountPath: /var/run/secrets/eks.amazonaws.com/serviceaccount
        name: aws-iam-token
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-10-104-128-67.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: eks-pods-sa
    serviceAccountName: eks-pods-sa
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: aws-iam-token
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            audience: sts.amazonaws.com
            expirationSeconds: 86400
            path: token
    - name: kube-api-access-v2wfr
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-11T01:16:49Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-11T01:16:47Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-11T01:16:49Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-11T01:16:49Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-11T01:16:47Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://8799a7a961ff880f3f6473b49f73c12c4f724166e2e5f73f3648599e4b55d7e4
      image: docker.io/migara/agent-app:latest
      imageID: docker.io/migara/agent-app@sha256:059d7291369041f3b9cc1d5c240a83c4c3fbd3d0683c16989f5e0bf917fd55d4
      lastState: {}
      name: agent
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-11T01:16:48Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-v2wfr
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/run/secrets/eks.amazonaws.com/serviceaccount
        name: aws-iam-token
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.104.128.67
    hostIPs:
    - ip: 10.104.128.67
    phase: Running
    podIP: 10.104.128.24
    podIPs:
    - ip: 10.104.128.24
    qosClass: BestEffort
    startTime: "2024-10-11T01:16:47Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-10T23:24:50Z"
    generateName: agent-deployment-5d56ddfb98-
    labels:
      app: agent
      paloaltonetworks.com/trafficobject: "1"
      pod-template-hash: 5d56ddfb98
    name: agent-deployment-5d56ddfb98-gfz2x
    namespace: ai-app
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: agent-deployment-5d56ddfb98
      uid: b1346eba-e8fb-4269-91a5-b3237017c2ed
    resourceVersion: "1889286"
    uid: 3e6238aa-8442-4834-84c7-c83d88e22afb
  spec:
    containers:
    - env:
      - name: AWS_STS_REGIONAL_ENDPOINTS
        value: regional
      - name: AWS_DEFAULT_REGION
        value: us-east-1
      - name: AWS_REGION
        value: us-east-1
      - name: AWS_ROLE_ARN
        value: arn:aws:iam::367521625516:role/2szv4dtt-eks-pod-role
      - name: AWS_WEB_IDENTITY_TOKEN_FILE
        value: /var/run/secrets/eks.amazonaws.com/serviceaccount/token
      image: migara/agent-app
      imagePullPolicy: Always
      name: agent
      ports:
      - containerPort: 3001
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      tty: true
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-kq854
        readOnly: true
      - mountPath: /var/run/secrets/eks.amazonaws.com/serviceaccount
        name: aws-iam-token
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-10-104-0-135.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: eks-pods-sa
    serviceAccountName: eks-pods-sa
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: aws-iam-token
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            audience: sts.amazonaws.com
            expirationSeconds: 86400
            path: token
    - name: kube-api-access-kq854
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-10T23:37:18Z"
      message: 'The node was low on resource: memory. Threshold quantity: 100Mi, available:
        63672Ki. Container agent was using 1446120Ki, request is 0, has larger consumption
        of memory. '
      reason: TerminationByKubelet
      status: "True"
      type: DisruptionTarget
    - lastProbeTime: null
      lastTransitionTime: "2024-10-10T23:37:18Z"
      status: "False"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-10T23:24:50Z"
      reason: PodCompleted
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-10T23:37:18Z"
      reason: PodCompleted
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-10T23:37:18Z"
      reason: PodCompleted
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-10T23:24:50Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://a45025eb315d8756f8613651526a364bbc335db889cf0dc3628213700a5b059a
      image: docker.io/migara/agent-app:latest
      imageID: docker.io/migara/agent-app@sha256:823992b6a14f7238c6f8dca65d86da3b7f5f16384d561edf9319bd5a8369c8f2
      lastState: {}
      name: agent
      ready: false
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://a45025eb315d8756f8613651526a364bbc335db889cf0dc3628213700a5b059a
          exitCode: 0
          finishedAt: "2024-10-10T23:37:18Z"
          reason: Completed
          startedAt: "2024-10-10T23:24:51Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-kq854
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/run/secrets/eks.amazonaws.com/serviceaccount
        name: aws-iam-token
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.104.0.135
    hostIPs:
    - ip: 10.104.0.135
    phase: Succeeded
    podIP: 10.104.0.57
    podIPs:
    - ip: 10.104.0.57
    qosClass: BestEffort
    startTime: "2024-10-10T23:24:50Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-07T15:17:36Z"
    generateName: aws-cli-deployment-bb558f6c7-
    labels:
      app: aws-cli
      paloaltonetworks.com/trafficobject: "1"
      pod-template-hash: bb558f6c7
    name: aws-cli-deployment-bb558f6c7-v2zmr
    namespace: ai-app
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: aws-cli-deployment-bb558f6c7
      uid: f4c69f40-f816-494a-9d48-a36b2d55d057
    resourceVersion: "1015768"
    uid: 38776bc8-dd6c-4662-a4a0-0551fb543896
  spec:
    containers:
    - args:
      - -c
      - |
        yum install -y ca-certificates
        cp /custom-certs/* /etc/pki/ca-trust/source/anchors/
        update-ca-trust
        echo "Custom certificates added"
        sleep infinity
      command:
      - /bin/bash
      env:
      - name: AWS_CA_BUNDLE
        value: /etc/pki/ca-trust/source/anchors/Trust-Root-CA.crt
      - name: AWS_STS_REGIONAL_ENDPOINTS
        value: regional
      - name: AWS_DEFAULT_REGION
        value: us-east-1
      - name: AWS_REGION
        value: us-east-1
      - name: AWS_ROLE_ARN
        value: arn:aws:iam::367521625516:role/2szv4dtt-eks-pod-role
      - name: AWS_WEB_IDENTITY_TOKEN_FILE
        value: /var/run/secrets/eks.amazonaws.com/serviceaccount/token
      image: amazon/aws-cli
      imagePullPolicy: Always
      name: aws-cli
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /custom-certs
        name: custom-certs
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-fx7qr
        readOnly: true
      - mountPath: /var/run/secrets/eks.amazonaws.com/serviceaccount
        name: aws-iam-token
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-10-104-128-161.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: eks-pods-sa
    serviceAccountName: eks-pods-sa
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: aws-iam-token
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            audience: sts.amazonaws.com
            expirationSeconds: 86400
            path: token
    - configMap:
        defaultMode: 420
        name: custom-ca-certs
      name: custom-certs
    - name: kube-api-access-fx7qr
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T15:17:47Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T15:17:36Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T15:17:47Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T15:17:47Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T15:17:36Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://89f13412678ad4b5d31b5983699a85123d28716615f9c4f952cb2d4c51f7b1ab
      image: docker.io/amazon/aws-cli:latest
      imageID: docker.io/amazon/aws-cli@sha256:34ee73bf22c6b60bca156cd73e5dd486622ff994361c2ce7fe0410b24ec5540d
      lastState: {}
      name: aws-cli
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-07T15:17:46Z"
      volumeMounts:
      - mountPath: /custom-certs
        name: custom-certs
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-fx7qr
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/run/secrets/eks.amazonaws.com/serviceaccount
        name: aws-iam-token
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.104.128.161
    hostIPs:
    - ip: 10.104.128.161
    phase: Running
    podIP: 10.104.128.119
    podIPs:
    - ip: 10.104.128.119
    qosClass: BestEffort
    startTime: "2024-10-07T15:17:36Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-07T14:16:22Z"
    generateName: netshoot-deployment-7655b866d4-
    labels:
      app: netshoot
      paloaltonetworks.com/trafficobject: "1"
      pod-template-hash: 7655b866d4
    name: netshoot-deployment-7655b866d4-rdmf2
    namespace: ai-app
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: netshoot-deployment-7655b866d4
      uid: 897a84ad-956f-4e60-bdb4-d23c35bfebf2
    resourceVersion: "1005032"
    uid: 4a53ec79-9b87-49d4-a21a-9188816a68e0
  spec:
    containers:
    - args:
      - -c
      - |
        cp /custom-certs/* /usr/local/share/ca-certificates/
        update-ca-certificates
        echo "Custom certificates added"
        while true; do sleep 3600; done
      command:
      - /bin/sh
      env:
      - name: AWS_STS_REGIONAL_ENDPOINTS
        value: regional
      - name: AWS_DEFAULT_REGION
        value: us-east-1
      - name: AWS_REGION
        value: us-east-1
      - name: AWS_ROLE_ARN
        value: arn:aws:iam::367521625516:role/2szv4dtt-eks-pod-role
      - name: AWS_WEB_IDENTITY_TOKEN_FILE
        value: /var/run/secrets/eks.amazonaws.com/serviceaccount/token
      image: nicolaka/netshoot
      imagePullPolicy: Always
      name: netshoot
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /custom-certs
        name: custom-certs
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-5487d
        readOnly: true
      - mountPath: /var/run/secrets/eks.amazonaws.com/serviceaccount
        name: aws-iam-token
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-10-104-128-67.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: eks-pods-sa
    serviceAccountName: eks-pods-sa
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: aws-iam-token
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            audience: sts.amazonaws.com
            expirationSeconds: 86400
            path: token
    - configMap:
        defaultMode: 420
        name: custom-ca-certs
      name: custom-certs
    - name: kube-api-access-5487d
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T14:16:33Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T14:16:22Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T14:16:33Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T14:16:33Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T14:16:22Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://c5fd69e09835e6f6bbbe34628e8294c85f00254f6f2f15405d5d92f7798b0006
      image: docker.io/nicolaka/netshoot:latest
      imageID: docker.io/nicolaka/netshoot@sha256:a20c2531bf35436ed3766cd6cfe89d352b050ccc4d7005ce6400adf97503da1b
      lastState: {}
      name: netshoot
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-07T14:16:33Z"
      volumeMounts:
      - mountPath: /custom-certs
        name: custom-certs
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-5487d
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/run/secrets/eks.amazonaws.com/serviceaccount
        name: aws-iam-token
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.104.128.67
    hostIPs:
    - ip: 10.104.128.67
    phase: Running
    podIP: 10.104.128.153
    podIPs:
    - ip: 10.104.128.153
    qosClass: BestEffort
    startTime: "2024-10-07T14:16:22Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-10T22:46:43Z"
    generateName: ui-deployment-66bcb989f7-
    labels:
      app: ui
      paloaltonetworks.com/trafficobject: "1"
      pod-template-hash: 66bcb989f7
    name: ui-deployment-66bcb989f7-hflnx
    namespace: ai-app
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: ui-deployment-66bcb989f7
      uid: 867bf8a3-e1d4-4fda-99c1-5447f62fd374
    resourceVersion: "1879963"
    uid: fbf1337e-dce1-40c3-9f44-88c5a2cd322b
  spec:
    containers:
    - image: migara/ui-app
      imagePullPolicy: Always
      name: ui
      ports:
      - containerPort: 3000
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-fhqn7
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-10-104-0-39.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-fhqn7
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-10T22:46:45Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-10T22:46:43Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-10T22:46:45Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-10T22:46:45Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-10T22:46:43Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://6eb68c05e0653a91b43927e606c820d87e811e8046b0a4d417efcc5ae2249271
      image: docker.io/migara/ui-app:latest
      imageID: docker.io/migara/ui-app@sha256:b7a4c1b2fd1bb3dc968d21e699d32fb9caf9085fb37112c3d18ead37d1336468
      lastState: {}
      name: ui
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-10T22:46:44Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-fhqn7
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.104.0.39
    hostIPs:
    - ip: 10.104.0.39
    phase: Running
    podIP: 10.104.0.137
    podIPs:
    - ip: 10.104.0.137
    qosClass: BestEffort
    startTime: "2024-10-10T22:46:43Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-08T10:23:05Z"
    generateName: ingress-nginx-controller-9756f5bd9-
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.11.2
      helm.sh/chart: ingress-nginx-4.11.2
      pod-template-hash: 9756f5bd9
    name: ingress-nginx-controller-9756f5bd9-bwr2v
    namespace: ingress-nginx
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: ingress-nginx-controller-9756f5bd9
      uid: 92d54dd4-9c11-4d58-9072-ccbc0a28bd3c
    resourceVersion: "1219622"
    uid: 2f84f3fb-7415-40a1-8400-8b59d81dd9fc
  spec:
    containers:
    - args:
      - /nginx-ingress-controller
      - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
      - --election-id=ingress-nginx-leader
      - --controller-class=k8s.io/ingress-nginx
      - --ingress-class=nginx
      - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
      - --validating-webhook=:8443
      - --validating-webhook-certificate=/usr/local/certificates/cert
      - --validating-webhook-key=/usr/local/certificates/key
      - --enable-metrics=false
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: LD_PRELOAD
        value: /usr/local/lib/libmimalloc.so
      image: registry.k8s.io/ingress-nginx/controller:v1.11.2@sha256:d5f8217feeac4887cb1ed21f27c2674e58be06bd8f5184cacea2a69abaf78dce
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /wait-shutdown
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: controller
      ports:
      - containerPort: 80
        name: http
        protocol: TCP
      - containerPort: 443
        name: https
        protocol: TCP
      - containerPort: 8443
        name: webhook
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 100m
          memory: 90Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        readOnlyRootFilesystem: false
        runAsNonRoot: true
        runAsUser: 101
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /usr/local/certificates/
        name: webhook-cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-bhk4d
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-10-104-0-135.ec2.internal
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: ingress-nginx
    serviceAccountName: ingress-nginx
    terminationGracePeriodSeconds: 300
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: webhook-cert
      secret:
        defaultMode: 420
        secretName: ingress-nginx-admission
    - name: kube-api-access-bhk4d
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-08T10:23:07Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-08T10:23:05Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-08T10:23:16Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-08T10:23:16Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-08T10:23:05Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://26a6b1ff040517283064ee8774ca01cf2e15a2f776182590f2ffb2a54bfa1847
      image: sha256:a80c8fd6e52292d38d4e58453f310d612da59d802a3b62f4b88a21c50178f7ab
      imageID: registry.k8s.io/ingress-nginx/controller@sha256:d5f8217feeac4887cb1ed21f27c2674e58be06bd8f5184cacea2a69abaf78dce
      lastState: {}
      name: controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-08T10:23:06Z"
      volumeMounts:
      - mountPath: /usr/local/certificates/
        name: webhook-cert
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-bhk4d
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.104.0.135
    hostIPs:
    - ip: 10.104.0.135
    phase: Running
    podIP: 10.104.0.26
    podIPs:
    - ip: 10.104.0.26
    qosClass: Burstable
    startTime: "2024-10-08T10:23:05Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-03T09:55:18Z"
    generateName: aws-node-
    labels:
      app.kubernetes.io/instance: aws-vpc-cni
      app.kubernetes.io/name: aws-node
      controller-revision-hash: 6cf5b4754c
      k8s-app: aws-node
      pod-template-generation: "2"
    name: aws-node-8wdht
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: aws-node
      uid: 486d5e10-a591-42f4-ac27-7c0f178f8bf4
    resourceVersion: "1833"
    uid: dd13380f-842b-44da-bb63-acdfadff642f
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-10-104-128-161.ec2.internal
    containers:
    - env:
      - name: ADDITIONAL_ENI_TAGS
        value: '{}'
      - name: ANNOTATE_POD_IP
        value: "false"
      - name: AWS_VPC_CNI_NODE_PORT_SUPPORT
        value: "true"
      - name: AWS_VPC_ENI_MTU
        value: "9001"
      - name: AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG
        value: "false"
      - name: AWS_VPC_K8S_CNI_EXTERNALSNAT
        value: "false"
      - name: AWS_VPC_K8S_CNI_LOGLEVEL
        value: DEBUG
      - name: AWS_VPC_K8S_CNI_LOG_FILE
        value: /host/var/log/aws-routed-eni/ipamd.log
      - name: AWS_VPC_K8S_CNI_RANDOMIZESNAT
        value: prng
      - name: AWS_VPC_K8S_CNI_VETHPREFIX
        value: eni
      - name: AWS_VPC_K8S_PLUGIN_LOG_FILE
        value: /var/log/aws-routed-eni/plugin.log
      - name: AWS_VPC_K8S_PLUGIN_LOG_LEVEL
        value: DEBUG
      - name: CLUSTER_ENDPOINT
        value: https://178AE1BF31E1B14F35D0CAFE8F59ED13.gr7.us-east-1.eks.amazonaws.com
      - name: CLUSTER_NAME
        value: 2szv4dtt-K8s
      - name: DISABLE_INTROSPECTION
        value: "false"
      - name: DISABLE_METRICS
        value: "false"
      - name: DISABLE_NETWORK_RESOURCE_PROVISIONING
        value: "false"
      - name: ENABLE_IPv4
        value: "true"
      - name: ENABLE_IPv6
        value: "false"
      - name: ENABLE_POD_ENI
        value: "false"
      - name: ENABLE_PREFIX_DELEGATION
        value: "false"
      - name: ENABLE_SUBNET_DISCOVERY
        value: "true"
      - name: NETWORK_POLICY_ENFORCING_MODE
        value: standard
      - name: VPC_CNI_VERSION
        value: v1.18.3
      - name: VPC_ID
        value: vpc-00fdb9083fc4969ce
      - name: WARM_ENI_TARGET
        value: "1"
      - name: WARM_PREFIX_TARGET
        value: "1"
      - name: MY_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: MY_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon-k8s-cni:v1.18.3-eksbuild.2
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - /app/grpc-health-probe
          - -addr=:50051
          - -connect-timeout=5s
          - -rpc-timeout=5s
        failureThreshold: 3
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: aws-node
      ports:
      - containerPort: 61678
        hostPort: 61678
        name: metrics
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - /app/grpc-health-probe
          - -addr=:50051
          - -connect-timeout=5s
          - -rpc-timeout=5s
        failureThreshold: 3
        initialDelaySeconds: 1
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      resources:
        requests:
          cpu: 25m
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
          - NET_RAW
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /host/var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-cg68x
        readOnly: true
    - args:
      - --enable-ipv6=false
      - --enable-network-policy=false
      - --enable-cloudwatch-logs=false
      - --enable-policy-event-logs=false
      - --log-file=/var/log/aws-routed-eni/network-policy-agent.log
      - --metrics-bind-addr=:8162
      - --health-probe-bind-addr=:8163
      - --conntrack-cache-cleanup-period=300
      env:
      - name: MY_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.2-eksbuild.2
      imagePullPolicy: IfNotPresent
      name: aws-eks-nodeagent
      resources:
        requests:
          cpu: 25m
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /sys/fs/bpf
        name: bpf-pin-path
      - mountPath: /var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-cg68x
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - env:
      - name: DISABLE_TCP_EARLY_DEMUX
        value: "false"
      - name: ENABLE_IPv6
        value: "false"
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon-k8s-cni-init:v1.18.3-eksbuild.2
      imagePullPolicy: IfNotPresent
      name: aws-vpc-cni-init
      resources:
        requests:
          cpu: 25m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-cg68x
        readOnly: true
    nodeName: ip-10-104-128-161.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: aws-node
    serviceAccountName: aws-node
    terminationGracePeriodSeconds: 10
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /sys/fs/bpf
        type: ""
      name: bpf-pin-path
    - hostPath:
        path: /opt/cni/bin
        type: ""
      name: cni-bin-dir
    - hostPath:
        path: /etc/cni/net.d
        type: ""
      name: cni-net-dir
    - hostPath:
        path: /var/log/aws-routed-eni
        type: DirectoryOrCreate
      name: log-dir
    - hostPath:
        path: /var/run/aws-node
        type: DirectoryOrCreate
      name: run-dir
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - name: kube-api-access-cg68x
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:55:18Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:55:19Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:55:21Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:55:21Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:55:18Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://308759cdde663d89c6f1b38400b47fa9edcd22cc2c30814385620b2951e4ff4d
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.2-eksbuild.2
      imageID: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-network-policy-agent@sha256:9744cc538f8f7afa925ada8afb4b32f6c9c7fb225383978c8f2701df1220bb9f
      lastState: {}
      name: aws-eks-nodeagent
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-03T09:55:20Z"
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /sys/fs/bpf
        name: bpf-pin-path
      - mountPath: /var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-cg68x
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://d61284a7006db2ac397cdc411e0765b8a3a3ad603cb742e4e0254a0e03c28cd3
      image: 066635153087.dkr.ecr.il-central-1.amazonaws.com/amazon-k8s-cni:v1.18.3-eksbuild.2
      imageID: sha256:f65b58751c202d60e13020ac144c608728fd2fcea406d6cafac1e755d5839673
      lastState: {}
      name: aws-node
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-03T09:55:19Z"
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /host/var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-cg68x
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.104.128.161
    hostIPs:
    - ip: 10.104.128.161
    initContainerStatuses:
    - containerID: containerd://80aa03f69cdf1dfea61e64836518c6b1f58297200544973f68c75d8b684e80fd
      image: 066635153087.dkr.ecr.il-central-1.amazonaws.com/amazon-k8s-cni-init:v1.18.3-eksbuild.2
      imageID: sha256:addf38b09e5099344c33a451c35f4ae26b321549f05aa62c50b4e74fed9c26a6
      lastState: {}
      name: aws-vpc-cni-init
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://80aa03f69cdf1dfea61e64836518c6b1f58297200544973f68c75d8b684e80fd
          exitCode: 0
          finishedAt: "2024-10-03T09:55:18Z"
          reason: Completed
          startedAt: "2024-10-03T09:55:18Z"
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-cg68x
        readOnly: true
        recursiveReadOnly: Disabled
    phase: Running
    podIP: 10.104.128.161
    podIPs:
    - ip: 10.104.128.161
    qosClass: Burstable
    startTime: "2024-10-03T09:55:18Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-04T15:10:36Z"
    generateName: aws-node-
    labels:
      app.kubernetes.io/instance: aws-vpc-cni
      app.kubernetes.io/name: aws-node
      controller-revision-hash: 6cf5b4754c
      k8s-app: aws-node
      pod-template-generation: "2"
    name: aws-node-gfvp8
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: aws-node
      uid: 486d5e10-a591-42f4-ac27-7c0f178f8bf4
    resourceVersion: "285915"
    uid: f9913077-0be7-4e40-b9df-1d5b8a6c1714
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-10-104-128-67.ec2.internal
    containers:
    - env:
      - name: ADDITIONAL_ENI_TAGS
        value: '{}'
      - name: ANNOTATE_POD_IP
        value: "false"
      - name: AWS_VPC_CNI_NODE_PORT_SUPPORT
        value: "true"
      - name: AWS_VPC_ENI_MTU
        value: "9001"
      - name: AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG
        value: "false"
      - name: AWS_VPC_K8S_CNI_EXTERNALSNAT
        value: "false"
      - name: AWS_VPC_K8S_CNI_LOGLEVEL
        value: DEBUG
      - name: AWS_VPC_K8S_CNI_LOG_FILE
        value: /host/var/log/aws-routed-eni/ipamd.log
      - name: AWS_VPC_K8S_CNI_RANDOMIZESNAT
        value: prng
      - name: AWS_VPC_K8S_CNI_VETHPREFIX
        value: eni
      - name: AWS_VPC_K8S_PLUGIN_LOG_FILE
        value: /var/log/aws-routed-eni/plugin.log
      - name: AWS_VPC_K8S_PLUGIN_LOG_LEVEL
        value: DEBUG
      - name: CLUSTER_ENDPOINT
        value: https://178AE1BF31E1B14F35D0CAFE8F59ED13.gr7.us-east-1.eks.amazonaws.com
      - name: CLUSTER_NAME
        value: 2szv4dtt-K8s
      - name: DISABLE_INTROSPECTION
        value: "false"
      - name: DISABLE_METRICS
        value: "false"
      - name: DISABLE_NETWORK_RESOURCE_PROVISIONING
        value: "false"
      - name: ENABLE_IPv4
        value: "true"
      - name: ENABLE_IPv6
        value: "false"
      - name: ENABLE_POD_ENI
        value: "false"
      - name: ENABLE_PREFIX_DELEGATION
        value: "false"
      - name: ENABLE_SUBNET_DISCOVERY
        value: "true"
      - name: NETWORK_POLICY_ENFORCING_MODE
        value: standard
      - name: VPC_CNI_VERSION
        value: v1.18.3
      - name: VPC_ID
        value: vpc-00fdb9083fc4969ce
      - name: WARM_ENI_TARGET
        value: "1"
      - name: WARM_PREFIX_TARGET
        value: "1"
      - name: MY_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: MY_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon-k8s-cni:v1.18.3-eksbuild.2
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - /app/grpc-health-probe
          - -addr=:50051
          - -connect-timeout=5s
          - -rpc-timeout=5s
        failureThreshold: 3
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: aws-node
      ports:
      - containerPort: 61678
        hostPort: 61678
        name: metrics
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - /app/grpc-health-probe
          - -addr=:50051
          - -connect-timeout=5s
          - -rpc-timeout=5s
        failureThreshold: 3
        initialDelaySeconds: 1
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      resources:
        requests:
          cpu: 25m
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
          - NET_RAW
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /host/var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-25wck
        readOnly: true
    - args:
      - --enable-ipv6=false
      - --enable-network-policy=false
      - --enable-cloudwatch-logs=false
      - --enable-policy-event-logs=false
      - --log-file=/var/log/aws-routed-eni/network-policy-agent.log
      - --metrics-bind-addr=:8162
      - --health-probe-bind-addr=:8163
      - --conntrack-cache-cleanup-period=300
      env:
      - name: MY_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.2-eksbuild.2
      imagePullPolicy: IfNotPresent
      name: aws-eks-nodeagent
      resources:
        requests:
          cpu: 25m
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /sys/fs/bpf
        name: bpf-pin-path
      - mountPath: /var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-25wck
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - env:
      - name: DISABLE_TCP_EARLY_DEMUX
        value: "false"
      - name: ENABLE_IPv6
        value: "false"
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon-k8s-cni-init:v1.18.3-eksbuild.2
      imagePullPolicy: IfNotPresent
      name: aws-vpc-cni-init
      resources:
        requests:
          cpu: 25m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-25wck
        readOnly: true
    nodeName: ip-10-104-128-67.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: aws-node
    serviceAccountName: aws-node
    terminationGracePeriodSeconds: 10
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /sys/fs/bpf
        type: ""
      name: bpf-pin-path
    - hostPath:
        path: /opt/cni/bin
        type: ""
      name: cni-bin-dir
    - hostPath:
        path: /etc/cni/net.d
        type: ""
      name: cni-net-dir
    - hostPath:
        path: /var/log/aws-routed-eni
        type: DirectoryOrCreate
      name: log-dir
    - hostPath:
        path: /var/run/aws-node
        type: DirectoryOrCreate
      name: run-dir
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - name: kube-api-access-25wck
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-04T15:10:44Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-04T15:10:45Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-04T15:10:50Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-04T15:10:50Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-04T15:10:36Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://1a3c8789f6cec4ac8ce50ed08db0853ab9724619ff9adfc3fd0c8d8014e38b93
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.2-eksbuild.2
      imageID: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-network-policy-agent@sha256:9744cc538f8f7afa925ada8afb4b32f6c9c7fb225383978c8f2701df1220bb9f
      lastState: {}
      name: aws-eks-nodeagent
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-04T15:10:49Z"
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /sys/fs/bpf
        name: bpf-pin-path
      - mountPath: /var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-25wck
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://4b9018f81fc5ab0d645083c3268158ff2ecd668d66fe70a778289e924a60264c
      image: 066635153087.dkr.ecr.il-central-1.amazonaws.com/amazon-k8s-cni:v1.18.3-eksbuild.2
      imageID: sha256:f65b58751c202d60e13020ac144c608728fd2fcea406d6cafac1e755d5839673
      lastState: {}
      name: aws-node
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-04T15:10:47Z"
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /host/var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-25wck
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.104.128.67
    hostIPs:
    - ip: 10.104.128.67
    initContainerStatuses:
    - containerID: containerd://5c29663a5fa09b5421c5342ea216160e2ca46df50079f6d410f8e34d215a5f14
      image: 066635153087.dkr.ecr.il-central-1.amazonaws.com/amazon-k8s-cni-init:v1.18.3-eksbuild.2
      imageID: sha256:addf38b09e5099344c33a451c35f4ae26b321549f05aa62c50b4e74fed9c26a6
      lastState: {}
      name: aws-vpc-cni-init
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://5c29663a5fa09b5421c5342ea216160e2ca46df50079f6d410f8e34d215a5f14
          exitCode: 0
          finishedAt: "2024-10-04T15:10:44Z"
          reason: Completed
          startedAt: "2024-10-04T15:10:43Z"
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-25wck
        readOnly: true
        recursiveReadOnly: Disabled
    phase: Running
    podIP: 10.104.128.67
    podIPs:
    - ip: 10.104.128.67
    qosClass: Burstable
    startTime: "2024-10-04T15:10:37Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-07T06:58:23Z"
    generateName: aws-node-
    labels:
      app.kubernetes.io/instance: aws-vpc-cni
      app.kubernetes.io/name: aws-node
      controller-revision-hash: 6cf5b4754c
      k8s-app: aws-node
      pod-template-generation: "2"
    name: aws-node-vhgb9
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: aws-node
      uid: 486d5e10-a591-42f4-ac27-7c0f178f8bf4
    resourceVersion: "928510"
    uid: 55edb94d-1820-4731-8bf2-0ad318c4b026
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-10-104-0-39.ec2.internal
    containers:
    - env:
      - name: ADDITIONAL_ENI_TAGS
        value: '{}'
      - name: ANNOTATE_POD_IP
        value: "false"
      - name: AWS_VPC_CNI_NODE_PORT_SUPPORT
        value: "true"
      - name: AWS_VPC_ENI_MTU
        value: "9001"
      - name: AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG
        value: "false"
      - name: AWS_VPC_K8S_CNI_EXTERNALSNAT
        value: "false"
      - name: AWS_VPC_K8S_CNI_LOGLEVEL
        value: DEBUG
      - name: AWS_VPC_K8S_CNI_LOG_FILE
        value: /host/var/log/aws-routed-eni/ipamd.log
      - name: AWS_VPC_K8S_CNI_RANDOMIZESNAT
        value: prng
      - name: AWS_VPC_K8S_CNI_VETHPREFIX
        value: eni
      - name: AWS_VPC_K8S_PLUGIN_LOG_FILE
        value: /var/log/aws-routed-eni/plugin.log
      - name: AWS_VPC_K8S_PLUGIN_LOG_LEVEL
        value: DEBUG
      - name: CLUSTER_ENDPOINT
        value: https://178AE1BF31E1B14F35D0CAFE8F59ED13.gr7.us-east-1.eks.amazonaws.com
      - name: CLUSTER_NAME
        value: 2szv4dtt-K8s
      - name: DISABLE_INTROSPECTION
        value: "false"
      - name: DISABLE_METRICS
        value: "false"
      - name: DISABLE_NETWORK_RESOURCE_PROVISIONING
        value: "false"
      - name: ENABLE_IPv4
        value: "true"
      - name: ENABLE_IPv6
        value: "false"
      - name: ENABLE_POD_ENI
        value: "false"
      - name: ENABLE_PREFIX_DELEGATION
        value: "false"
      - name: ENABLE_SUBNET_DISCOVERY
        value: "true"
      - name: NETWORK_POLICY_ENFORCING_MODE
        value: standard
      - name: VPC_CNI_VERSION
        value: v1.18.3
      - name: VPC_ID
        value: vpc-00fdb9083fc4969ce
      - name: WARM_ENI_TARGET
        value: "1"
      - name: WARM_PREFIX_TARGET
        value: "1"
      - name: MY_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: MY_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon-k8s-cni:v1.18.3-eksbuild.2
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - /app/grpc-health-probe
          - -addr=:50051
          - -connect-timeout=5s
          - -rpc-timeout=5s
        failureThreshold: 3
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: aws-node
      ports:
      - containerPort: 61678
        hostPort: 61678
        name: metrics
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - /app/grpc-health-probe
          - -addr=:50051
          - -connect-timeout=5s
          - -rpc-timeout=5s
        failureThreshold: 3
        initialDelaySeconds: 1
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      resources:
        requests:
          cpu: 25m
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
          - NET_RAW
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /host/var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-nbsjm
        readOnly: true
    - args:
      - --enable-ipv6=false
      - --enable-network-policy=false
      - --enable-cloudwatch-logs=false
      - --enable-policy-event-logs=false
      - --log-file=/var/log/aws-routed-eni/network-policy-agent.log
      - --metrics-bind-addr=:8162
      - --health-probe-bind-addr=:8163
      - --conntrack-cache-cleanup-period=300
      env:
      - name: MY_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.2-eksbuild.2
      imagePullPolicy: IfNotPresent
      name: aws-eks-nodeagent
      resources:
        requests:
          cpu: 25m
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /sys/fs/bpf
        name: bpf-pin-path
      - mountPath: /var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-nbsjm
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - env:
      - name: DISABLE_TCP_EARLY_DEMUX
        value: "false"
      - name: ENABLE_IPv6
        value: "false"
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon-k8s-cni-init:v1.18.3-eksbuild.2
      imagePullPolicy: IfNotPresent
      name: aws-vpc-cni-init
      resources:
        requests:
          cpu: 25m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-nbsjm
        readOnly: true
    nodeName: ip-10-104-0-39.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: aws-node
    serviceAccountName: aws-node
    terminationGracePeriodSeconds: 10
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /sys/fs/bpf
        type: ""
      name: bpf-pin-path
    - hostPath:
        path: /opt/cni/bin
        type: ""
      name: cni-bin-dir
    - hostPath:
        path: /etc/cni/net.d
        type: ""
      name: cni-net-dir
    - hostPath:
        path: /var/log/aws-routed-eni
        type: DirectoryOrCreate
      name: log-dir
    - hostPath:
        path: /var/run/aws-node
        type: DirectoryOrCreate
      name: run-dir
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - name: kube-api-access-nbsjm
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T06:58:32Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T06:58:32Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T06:58:36Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T06:58:36Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T06:58:23Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://27fcf27d169f0a5f355aaa0905416ce7feb8bb8fb949a546078d0dfb1803826a
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.2-eksbuild.2
      imageID: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-network-policy-agent@sha256:9744cc538f8f7afa925ada8afb4b32f6c9c7fb225383978c8f2701df1220bb9f
      lastState: {}
      name: aws-eks-nodeagent
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-07T06:58:35Z"
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /sys/fs/bpf
        name: bpf-pin-path
      - mountPath: /var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-nbsjm
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://f7c223bac4b0b020ead3b2d95492a63ad97f859548e957d6bd50d775ad89f64e
      image: 066635153087.dkr.ecr.il-central-1.amazonaws.com/amazon-k8s-cni:v1.18.3-eksbuild.2
      imageID: sha256:f65b58751c202d60e13020ac144c608728fd2fcea406d6cafac1e755d5839673
      lastState: {}
      name: aws-node
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-07T06:58:33Z"
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /host/var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-nbsjm
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.104.0.39
    hostIPs:
    - ip: 10.104.0.39
    initContainerStatuses:
    - containerID: containerd://b1b0637a4df7e0453a25a42f90844da58d8826ae5e4a8c2371524f8b921a23d0
      image: 066635153087.dkr.ecr.il-central-1.amazonaws.com/amazon-k8s-cni-init:v1.18.3-eksbuild.2
      imageID: sha256:addf38b09e5099344c33a451c35f4ae26b321549f05aa62c50b4e74fed9c26a6
      lastState: {}
      name: aws-vpc-cni-init
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://b1b0637a4df7e0453a25a42f90844da58d8826ae5e4a8c2371524f8b921a23d0
          exitCode: 0
          finishedAt: "2024-10-07T06:58:31Z"
          reason: Completed
          startedAt: "2024-10-07T06:58:31Z"
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-nbsjm
        readOnly: true
        recursiveReadOnly: Disabled
    phase: Running
    podIP: 10.104.0.39
    podIPs:
    - ip: 10.104.0.39
    qosClass: Burstable
    startTime: "2024-10-07T06:58:23Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-03T09:55:14Z"
    generateName: aws-node-
    labels:
      app.kubernetes.io/instance: aws-vpc-cni
      app.kubernetes.io/name: aws-node
      controller-revision-hash: 6cf5b4754c
      k8s-app: aws-node
      pod-template-generation: "2"
    name: aws-node-zrq7z
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: aws-node
      uid: 486d5e10-a591-42f4-ac27-7c0f178f8bf4
    resourceVersion: "1796"
    uid: b5dc7647-e185-42b8-a5b0-520ea9747b97
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-10-104-0-135.ec2.internal
    containers:
    - env:
      - name: ADDITIONAL_ENI_TAGS
        value: '{}'
      - name: ANNOTATE_POD_IP
        value: "false"
      - name: AWS_VPC_CNI_NODE_PORT_SUPPORT
        value: "true"
      - name: AWS_VPC_ENI_MTU
        value: "9001"
      - name: AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG
        value: "false"
      - name: AWS_VPC_K8S_CNI_EXTERNALSNAT
        value: "false"
      - name: AWS_VPC_K8S_CNI_LOGLEVEL
        value: DEBUG
      - name: AWS_VPC_K8S_CNI_LOG_FILE
        value: /host/var/log/aws-routed-eni/ipamd.log
      - name: AWS_VPC_K8S_CNI_RANDOMIZESNAT
        value: prng
      - name: AWS_VPC_K8S_CNI_VETHPREFIX
        value: eni
      - name: AWS_VPC_K8S_PLUGIN_LOG_FILE
        value: /var/log/aws-routed-eni/plugin.log
      - name: AWS_VPC_K8S_PLUGIN_LOG_LEVEL
        value: DEBUG
      - name: CLUSTER_ENDPOINT
        value: https://178AE1BF31E1B14F35D0CAFE8F59ED13.gr7.us-east-1.eks.amazonaws.com
      - name: CLUSTER_NAME
        value: 2szv4dtt-K8s
      - name: DISABLE_INTROSPECTION
        value: "false"
      - name: DISABLE_METRICS
        value: "false"
      - name: DISABLE_NETWORK_RESOURCE_PROVISIONING
        value: "false"
      - name: ENABLE_IPv4
        value: "true"
      - name: ENABLE_IPv6
        value: "false"
      - name: ENABLE_POD_ENI
        value: "false"
      - name: ENABLE_PREFIX_DELEGATION
        value: "false"
      - name: ENABLE_SUBNET_DISCOVERY
        value: "true"
      - name: NETWORK_POLICY_ENFORCING_MODE
        value: standard
      - name: VPC_CNI_VERSION
        value: v1.18.3
      - name: VPC_ID
        value: vpc-00fdb9083fc4969ce
      - name: WARM_ENI_TARGET
        value: "1"
      - name: WARM_PREFIX_TARGET
        value: "1"
      - name: MY_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: MY_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon-k8s-cni:v1.18.3-eksbuild.2
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - /app/grpc-health-probe
          - -addr=:50051
          - -connect-timeout=5s
          - -rpc-timeout=5s
        failureThreshold: 3
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: aws-node
      ports:
      - containerPort: 61678
        hostPort: 61678
        name: metrics
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - /app/grpc-health-probe
          - -addr=:50051
          - -connect-timeout=5s
          - -rpc-timeout=5s
        failureThreshold: 3
        initialDelaySeconds: 1
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      resources:
        requests:
          cpu: 25m
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
          - NET_RAW
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /host/var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-z8hp9
        readOnly: true
    - args:
      - --enable-ipv6=false
      - --enable-network-policy=false
      - --enable-cloudwatch-logs=false
      - --enable-policy-event-logs=false
      - --log-file=/var/log/aws-routed-eni/network-policy-agent.log
      - --metrics-bind-addr=:8162
      - --health-probe-bind-addr=:8163
      - --conntrack-cache-cleanup-period=300
      env:
      - name: MY_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.2-eksbuild.2
      imagePullPolicy: IfNotPresent
      name: aws-eks-nodeagent
      resources:
        requests:
          cpu: 25m
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /sys/fs/bpf
        name: bpf-pin-path
      - mountPath: /var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-z8hp9
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - env:
      - name: DISABLE_TCP_EARLY_DEMUX
        value: "false"
      - name: ENABLE_IPv6
        value: "false"
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon-k8s-cni-init:v1.18.3-eksbuild.2
      imagePullPolicy: IfNotPresent
      name: aws-vpc-cni-init
      resources:
        requests:
          cpu: 25m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-z8hp9
        readOnly: true
    nodeName: ip-10-104-0-135.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: aws-node
    serviceAccountName: aws-node
    terminationGracePeriodSeconds: 10
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /sys/fs/bpf
        type: ""
      name: bpf-pin-path
    - hostPath:
        path: /opt/cni/bin
        type: ""
      name: cni-bin-dir
    - hostPath:
        path: /etc/cni/net.d
        type: ""
      name: cni-net-dir
    - hostPath:
        path: /var/log/aws-routed-eni
        type: DirectoryOrCreate
      name: log-dir
    - hostPath:
        path: /var/run/aws-node
        type: DirectoryOrCreate
      name: run-dir
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - name: kube-api-access-z8hp9
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:55:15Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:55:15Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:55:17Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:55:17Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:55:14Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://935f7000da513cc3e8c7a061d39bd9e75cf9bb1852434f9b7e51bce51a12c0c5
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.2-eksbuild.2
      imageID: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-network-policy-agent@sha256:9744cc538f8f7afa925ada8afb4b32f6c9c7fb225383978c8f2701df1220bb9f
      lastState: {}
      name: aws-eks-nodeagent
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-03T09:55:15Z"
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /sys/fs/bpf
        name: bpf-pin-path
      - mountPath: /var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-z8hp9
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://87d04820b923b5e3619687efb6b8b0940605c6eeb9594a9ae480fc85776bd86e
      image: 066635153087.dkr.ecr.il-central-1.amazonaws.com/amazon-k8s-cni:v1.18.3-eksbuild.2
      imageID: sha256:f65b58751c202d60e13020ac144c608728fd2fcea406d6cafac1e755d5839673
      lastState: {}
      name: aws-node
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-03T09:55:15Z"
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /host/var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-z8hp9
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.104.0.135
    hostIPs:
    - ip: 10.104.0.135
    initContainerStatuses:
    - containerID: containerd://bd8635855aa4b527340e297f1d0b468510afc896902b50565bc54d9b49480730
      image: 066635153087.dkr.ecr.il-central-1.amazonaws.com/amazon-k8s-cni-init:v1.18.3-eksbuild.2
      imageID: sha256:addf38b09e5099344c33a451c35f4ae26b321549f05aa62c50b4e74fed9c26a6
      lastState: {}
      name: aws-vpc-cni-init
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://bd8635855aa4b527340e297f1d0b468510afc896902b50565bc54d9b49480730
          exitCode: 0
          finishedAt: "2024-10-03T09:55:15Z"
          reason: Completed
          startedAt: "2024-10-03T09:55:15Z"
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-z8hp9
        readOnly: true
        recursiveReadOnly: Disabled
    phase: Running
    podIP: 10.104.0.135
    podIPs:
    - ip: 10.104.0.135
    qosClass: Burstable
    startTime: "2024-10-03T09:55:14Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-03T09:50:26Z"
    generateName: coredns-789f8477df-
    labels:
      eks.amazonaws.com/component: coredns
      k8s-app: kube-dns
      pod-template-hash: 789f8477df
    name: coredns-789f8477df-9cfrj
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: coredns-789f8477df
      uid: 2853e101-8a13-4013-9763-18befad9922a
    resourceVersion: "1656"
    uid: fc9d690a-31a6-45b0-b697-28abac5f330d
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: kubernetes.io/os
              operator: In
              values:
              - linux
            - key: kubernetes.io/arch
              operator: In
              values:
              - amd64
              - arm64
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: k8s-app
                operator: In
                values:
                - kube-dns
            topologyKey: kubernetes.io/hostname
          weight: 100
    containers:
    - args:
      - -conf
      - /etc/coredns/Corefile
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/coredns:v1.11.3-eksbuild.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /health
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: coredns
      ports:
      - containerPort: 53
        name: dns
        protocol: UDP
      - containerPort: 53
        name: dns-tcp
        protocol: TCP
      - containerPort: 9153
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /ready
          port: 8181
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 170Mi
        requests:
          cpu: 100m
          memory: 70Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-rhh4k
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    nodeName: ip-10-104-128-161.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: coredns
    serviceAccountName: coredns
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    topologySpreadConstraints:
    - labelSelector:
        matchLabels:
          k8s-app: kube-dns
      maxSkew: 1
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: ScheduleAnyway
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: Corefile
          path: Corefile
        name: coredns
      name: config-volume
    - name: kube-api-access-rhh4k
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:54:55Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:54:52Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:54:55Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:54:55Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:54:52Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://49b1080d706f62c15e7a4c9bf95ea20bd145e4c86970c22addfb5573d6a9f285
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/coredns:v1.11.3-eksbuild.1
      imageID: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/coredns@sha256:5a047e99333089d71ed61efa3aba76b4bc2bc581c801d3a661d1109d90c3e1e6
      lastState: {}
      name: coredns
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-03T09:54:55Z"
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-rhh4k
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.104.128.161
    hostIPs:
    - ip: 10.104.128.161
    phase: Running
    podIP: 10.104.128.44
    podIPs:
    - ip: 10.104.128.44
    qosClass: Burstable
    startTime: "2024-10-03T09:54:52Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-03T09:50:26Z"
    generateName: coredns-789f8477df-
    labels:
      eks.amazonaws.com/component: coredns
      k8s-app: kube-dns
      pod-template-hash: 789f8477df
    name: coredns-789f8477df-mwqbf
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: coredns-789f8477df
      uid: 2853e101-8a13-4013-9763-18befad9922a
    resourceVersion: "1661"
    uid: 4092f623-0ba8-457c-9bc3-35670027ee5d
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: kubernetes.io/os
              operator: In
              values:
              - linux
            - key: kubernetes.io/arch
              operator: In
              values:
              - amd64
              - arm64
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: k8s-app
                operator: In
                values:
                - kube-dns
            topologyKey: kubernetes.io/hostname
          weight: 100
    containers:
    - args:
      - -conf
      - /etc/coredns/Corefile
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/coredns:v1.11.3-eksbuild.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /health
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: coredns
      ports:
      - containerPort: 53
        name: dns
        protocol: UDP
      - containerPort: 53
        name: dns-tcp
        protocol: TCP
      - containerPort: 9153
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /ready
          port: 8181
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 170Mi
        requests:
          cpu: 100m
          memory: 70Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-v9vzm
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    nodeName: ip-10-104-128-161.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: coredns
    serviceAccountName: coredns
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    topologySpreadConstraints:
    - labelSelector:
        matchLabels:
          k8s-app: kube-dns
      maxSkew: 1
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: ScheduleAnyway
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: Corefile
          path: Corefile
        name: coredns
      name: config-volume
    - name: kube-api-access-v9vzm
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:54:55Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:54:53Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:54:55Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:54:55Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:54:53Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://cb4fafd24544bb9ec06da2b542fb56563324e1be9c6e0c9d3da220dd700212b4
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/coredns:v1.11.3-eksbuild.1
      imageID: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/coredns@sha256:5a047e99333089d71ed61efa3aba76b4bc2bc581c801d3a661d1109d90c3e1e6
      lastState: {}
      name: coredns
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-03T09:54:55Z"
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-v9vzm
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.104.128.161
    hostIPs:
    - ip: 10.104.128.161
    phase: Running
    podIP: 10.104.128.36
    podIPs:
    - ip: 10.104.128.36
    qosClass: Burstable
    startTime: "2024-10-03T09:54:53Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-03T09:55:12Z"
    generateName: eks-pod-identity-agent-
    labels:
      app.kubernetes.io/instance: eks-pod-identity-agent
      app.kubernetes.io/name: eks-pod-identity-agent
      controller-revision-hash: 7b747df5b6
      pod-template-generation: "1"
    name: eks-pod-identity-agent-5xcg2
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: eks-pod-identity-agent
      uid: 9ec4920b-a16b-4064-bcc4-f84e8c476bea
    resourceVersion: "1778"
    uid: b5bdfec0-cd9d-4ced-88ba-591ec3f5892b
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-10-104-0-135.ec2.internal
    containers:
    - args:
      - --port
      - "80"
      - --cluster-name
      - 2szv4dtt-K8s
      - --probe-port
      - "2703"
      command:
      - /go-runner
      - /eks-pod-identity-agent
      - server
      env:
      - name: AWS_REGION
        value: us-east-1
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
      imagePullPolicy: Always
      livenessProbe:
        failureThreshold: 3
        httpGet:
          host: localhost
          path: /healthz
          port: probes-port
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: eks-pod-identity-agent
      ports:
      - containerPort: 80
        hostPort: 80
        name: proxy
        protocol: TCP
      - containerPort: 2703
        hostPort: 2703
        name: probes-port
        protocol: TCP
      readinessProbe:
        failureThreshold: 30
        httpGet:
          host: localhost
          path: /readyz
          port: probes-port
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      resources: {}
      securityContext:
        capabilities:
          add:
          - CAP_NET_BIND_SERVICE
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-rzm5j
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - command:
      - /go-runner
      - /eks-pod-identity-agent
      - initialize
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
      imagePullPolicy: Always
      name: eks-pod-identity-agent-init
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-rzm5j
        readOnly: true
    nodeName: ip-10-104-0-135.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - name: kube-api-access-rzm5j
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:55:14Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:55:14Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:55:15Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:55:15Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:55:12Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://f1638eb93cc4c3f7830ac5955a6da9a3f8afed653cded399534eefdf8d68c39d
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
      imageID: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent@sha256:832ad48c9872fdcae32f2ea369d9874fa34f271b4dbc58ce04393c757befa462
      lastState: {}
      name: eks-pod-identity-agent
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-03T09:55:14Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-rzm5j
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.104.0.135
    hostIPs:
    - ip: 10.104.0.135
    initContainerStatuses:
    - containerID: containerd://5eee6be1356f404f340d92a8ae43497a5ec4452c6ceeeeebe48beef211ffdd52
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
      imageID: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent@sha256:832ad48c9872fdcae32f2ea369d9874fa34f271b4dbc58ce04393c757befa462
      lastState: {}
      name: eks-pod-identity-agent-init
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://5eee6be1356f404f340d92a8ae43497a5ec4452c6ceeeeebe48beef211ffdd52
          exitCode: 0
          finishedAt: "2024-10-03T09:55:14Z"
          reason: Completed
          startedAt: "2024-10-03T09:55:14Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-rzm5j
        readOnly: true
        recursiveReadOnly: Disabled
    phase: Running
    podIP: 10.104.0.135
    podIPs:
    - ip: 10.104.0.135
    qosClass: BestEffort
    startTime: "2024-10-03T09:55:12Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-04T15:10:36Z"
    generateName: eks-pod-identity-agent-
    labels:
      app.kubernetes.io/instance: eks-pod-identity-agent
      app.kubernetes.io/name: eks-pod-identity-agent
      controller-revision-hash: 7b747df5b6
      pod-template-generation: "1"
    name: eks-pod-identity-agent-mb8cp
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: eks-pod-identity-agent
      uid: 9ec4920b-a16b-4064-bcc4-f84e8c476bea
    resourceVersion: "285874"
    uid: f77d34ca-4807-4408-a4b0-c5857667bcef
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-10-104-128-67.ec2.internal
    containers:
    - args:
      - --port
      - "80"
      - --cluster-name
      - 2szv4dtt-K8s
      - --probe-port
      - "2703"
      command:
      - /go-runner
      - /eks-pod-identity-agent
      - server
      env:
      - name: AWS_REGION
        value: us-east-1
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
      imagePullPolicy: Always
      livenessProbe:
        failureThreshold: 3
        httpGet:
          host: localhost
          path: /healthz
          port: probes-port
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: eks-pod-identity-agent
      ports:
      - containerPort: 80
        hostPort: 80
        name: proxy
        protocol: TCP
      - containerPort: 2703
        hostPort: 2703
        name: probes-port
        protocol: TCP
      readinessProbe:
        failureThreshold: 30
        httpGet:
          host: localhost
          path: /readyz
          port: probes-port
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      resources: {}
      securityContext:
        capabilities:
          add:
          - CAP_NET_BIND_SERVICE
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-c7xv5
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - command:
      - /go-runner
      - /eks-pod-identity-agent
      - initialize
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
      imagePullPolicy: Always
      name: eks-pod-identity-agent-init
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-c7xv5
        readOnly: true
    nodeName: ip-10-104-128-67.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - name: kube-api-access-c7xv5
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-04T15:10:41Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-04T15:10:42Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-04T15:10:43Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-04T15:10:43Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-04T15:10:36Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://afb9dab5b267cb74be7064b0cc2403305153b8946fcae6397e7530f8c39ed90c
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
      imageID: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent@sha256:832ad48c9872fdcae32f2ea369d9874fa34f271b4dbc58ce04393c757befa462
      lastState: {}
      name: eks-pod-identity-agent
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-04T15:10:42Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-c7xv5
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.104.128.67
    hostIPs:
    - ip: 10.104.128.67
    initContainerStatuses:
    - containerID: containerd://5121291d1e7db7b7aa8bac207ca0fc433b86aa8b8e31d261e68b51ec7e9c899c
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
      imageID: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent@sha256:832ad48c9872fdcae32f2ea369d9874fa34f271b4dbc58ce04393c757befa462
      lastState: {}
      name: eks-pod-identity-agent-init
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://5121291d1e7db7b7aa8bac207ca0fc433b86aa8b8e31d261e68b51ec7e9c899c
          exitCode: 0
          finishedAt: "2024-10-04T15:10:40Z"
          reason: Completed
          startedAt: "2024-10-04T15:10:40Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-c7xv5
        readOnly: true
        recursiveReadOnly: Disabled
    phase: Running
    podIP: 10.104.128.67
    podIPs:
    - ip: 10.104.128.67
    qosClass: BestEffort
    startTime: "2024-10-04T15:10:37Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-07T06:58:23Z"
    generateName: eks-pod-identity-agent-
    labels:
      app.kubernetes.io/instance: eks-pod-identity-agent
      app.kubernetes.io/name: eks-pod-identity-agent
      controller-revision-hash: 7b747df5b6
      pod-template-generation: "1"
    name: eks-pod-identity-agent-mjsrr
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: eks-pod-identity-agent
      uid: 9ec4920b-a16b-4064-bcc4-f84e8c476bea
    resourceVersion: "928472"
    uid: e3170752-e27a-4479-bae7-1f4557f52106
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-10-104-0-39.ec2.internal
    containers:
    - args:
      - --port
      - "80"
      - --cluster-name
      - 2szv4dtt-K8s
      - --probe-port
      - "2703"
      command:
      - /go-runner
      - /eks-pod-identity-agent
      - server
      env:
      - name: AWS_REGION
        value: us-east-1
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
      imagePullPolicy: Always
      livenessProbe:
        failureThreshold: 3
        httpGet:
          host: localhost
          path: /healthz
          port: probes-port
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: eks-pod-identity-agent
      ports:
      - containerPort: 80
        hostPort: 80
        name: proxy
        protocol: TCP
      - containerPort: 2703
        hostPort: 2703
        name: probes-port
        protocol: TCP
      readinessProbe:
        failureThreshold: 30
        httpGet:
          host: localhost
          path: /readyz
          port: probes-port
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      resources: {}
      securityContext:
        capabilities:
          add:
          - CAP_NET_BIND_SERVICE
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-hvpc2
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - command:
      - /go-runner
      - /eks-pod-identity-agent
      - initialize
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
      imagePullPolicy: Always
      name: eks-pod-identity-agent-init
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-hvpc2
        readOnly: true
    nodeName: ip-10-104-0-39.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - name: kube-api-access-hvpc2
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T06:58:29Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T06:58:30Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T06:58:31Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T06:58:31Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T06:58:23Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://66659865ace11417152ab3b67946be46ab0d88738106092e15bbeb171f16b7f8
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
      imageID: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent@sha256:832ad48c9872fdcae32f2ea369d9874fa34f271b4dbc58ce04393c757befa462
      lastState: {}
      name: eks-pod-identity-agent
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-07T06:58:30Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-hvpc2
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.104.0.39
    hostIPs:
    - ip: 10.104.0.39
    initContainerStatuses:
    - containerID: containerd://c3390498e016fdf58feea0a3086d71e7425fbba6580b52bce7c39eb80f34a5ef
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
      imageID: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent@sha256:832ad48c9872fdcae32f2ea369d9874fa34f271b4dbc58ce04393c757befa462
      lastState: {}
      name: eks-pod-identity-agent-init
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://c3390498e016fdf58feea0a3086d71e7425fbba6580b52bce7c39eb80f34a5ef
          exitCode: 0
          finishedAt: "2024-10-07T06:58:28Z"
          reason: Completed
          startedAt: "2024-10-07T06:58:28Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-hvpc2
        readOnly: true
        recursiveReadOnly: Disabled
    phase: Running
    podIP: 10.104.0.39
    podIPs:
    - ip: 10.104.0.39
    qosClass: BestEffort
    startTime: "2024-10-07T06:58:23Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-03T09:55:12Z"
    generateName: eks-pod-identity-agent-
    labels:
      app.kubernetes.io/instance: eks-pod-identity-agent
      app.kubernetes.io/name: eks-pod-identity-agent
      controller-revision-hash: 7b747df5b6
      pod-template-generation: "1"
    name: eks-pod-identity-agent-tzhk2
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: eks-pod-identity-agent
      uid: 9ec4920b-a16b-4064-bcc4-f84e8c476bea
    resourceVersion: "1792"
    uid: dca8a3d3-14c0-4390-a8fa-2c3b1ee369d8
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-10-104-128-161.ec2.internal
    containers:
    - args:
      - --port
      - "80"
      - --cluster-name
      - 2szv4dtt-K8s
      - --probe-port
      - "2703"
      command:
      - /go-runner
      - /eks-pod-identity-agent
      - server
      env:
      - name: AWS_REGION
        value: us-east-1
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
      imagePullPolicy: Always
      livenessProbe:
        failureThreshold: 3
        httpGet:
          host: localhost
          path: /healthz
          port: probes-port
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: eks-pod-identity-agent
      ports:
      - containerPort: 80
        hostPort: 80
        name: proxy
        protocol: TCP
      - containerPort: 2703
        hostPort: 2703
        name: probes-port
        protocol: TCP
      readinessProbe:
        failureThreshold: 30
        httpGet:
          host: localhost
          path: /readyz
          port: probes-port
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      resources: {}
      securityContext:
        capabilities:
          add:
          - CAP_NET_BIND_SERVICE
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-d85qb
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - command:
      - /go-runner
      - /eks-pod-identity-agent
      - initialize
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
      imagePullPolicy: Always
      name: eks-pod-identity-agent-init
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-d85qb
        readOnly: true
    nodeName: ip-10-104-128-161.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - name: kube-api-access-d85qb
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:55:13Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:55:14Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:55:16Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:55:16Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:55:12Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://93224e1b700b5db5483f7d1c17872f6da4b6d92bec71d5065e942e0f32755129
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
      imageID: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent@sha256:832ad48c9872fdcae32f2ea369d9874fa34f271b4dbc58ce04393c757befa462
      lastState: {}
      name: eks-pod-identity-agent
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-03T09:55:15Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-d85qb
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.104.128.161
    hostIPs:
    - ip: 10.104.128.161
    initContainerStatuses:
    - containerID: containerd://c78b02e67281ea438f8b3c4bdc9cf31561565fe8544c4d320cb541e628b8f7ee
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
      imageID: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent@sha256:832ad48c9872fdcae32f2ea369d9874fa34f271b4dbc58ce04393c757befa462
      lastState: {}
      name: eks-pod-identity-agent-init
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://c78b02e67281ea438f8b3c4bdc9cf31561565fe8544c4d320cb541e628b8f7ee
          exitCode: 0
          finishedAt: "2024-10-03T09:55:13Z"
          reason: Completed
          startedAt: "2024-10-03T09:55:13Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-d85qb
        readOnly: true
        recursiveReadOnly: Disabled
    phase: Running
    podIP: 10.104.128.161
    podIPs:
    - ip: 10.104.128.161
    qosClass: BestEffort
    startTime: "2024-10-03T09:55:12Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-04T15:10:36Z"
    generateName: kube-proxy-
    labels:
      controller-revision-hash: 6cf9ccc4bc
      k8s-app: kube-proxy
      pod-template-generation: "1"
    name: kube-proxy-9bvsh
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kube-proxy
      uid: 5177a3b8-d52b-4bd1-a71c-fa4ba61ffeb7
    resourceVersion: "285871"
    uid: b944df56-9f09-4abd-8102-99d7e9e85da4
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-10-104-128-67.ec2.internal
    containers:
    - command:
      - kube-proxy
      - --v=2
      - --config=/var/lib/kube-proxy-config/config
      - --hostname-override=$(NODE_NAME)
      env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/kube-proxy:v1.31.0-minimal-eksbuild.2
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources:
        requests:
          cpu: 100m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/log
        name: varlog
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /var/lib/kube-proxy/
        name: kubeconfig
      - mountPath: /var/lib/kube-proxy-config/
        name: config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-pj2gw
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ip-10-104-128-67.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-proxy
    serviceAccountName: kube-proxy
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/log
        type: ""
      name: varlog
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - configMap:
        defaultMode: 420
        name: kube-proxy
      name: kubeconfig
    - configMap:
        defaultMode: 420
        name: kube-proxy-config
      name: config
    - name: kube-api-access-pj2gw
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-04T15:10:43Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-04T15:10:37Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-04T15:10:43Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-04T15:10:43Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-04T15:10:36Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://2c9622264f58b3bfa81dc98bb4ce77a22ee383e39605be0c43fb634d48c91593
      image: 066635153087.dkr.ecr.il-central-1.amazonaws.com/eks/kube-proxy:v1.31.0-minimal-eksbuild.2
      imageID: sha256:90cb402e7ebc61b5e0f195d0f212b4bc4b1d6b21ecb2613b6b26e2e9c9d09e0a
      lastState: {}
      name: kube-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-04T15:10:42Z"
      volumeMounts:
      - mountPath: /var/log
        name: varlog
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/lib/kube-proxy/
        name: kubeconfig
      - mountPath: /var/lib/kube-proxy-config/
        name: config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-pj2gw
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.104.128.67
    hostIPs:
    - ip: 10.104.128.67
    phase: Running
    podIP: 10.104.128.67
    podIPs:
    - ip: 10.104.128.67
    qosClass: Burstable
    startTime: "2024-10-04T15:10:37Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-03T09:54:35Z"
    generateName: kube-proxy-
    labels:
      controller-revision-hash: 6cf9ccc4bc
      k8s-app: kube-proxy
      pod-template-generation: "1"
    name: kube-proxy-nzsht
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kube-proxy
      uid: 5177a3b8-d52b-4bd1-a71c-fa4ba61ffeb7
    resourceVersion: "1552"
    uid: a5d1a5d6-cf04-4f51-a8da-88ed40012bfe
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-10-104-128-161.ec2.internal
    containers:
    - command:
      - kube-proxy
      - --v=2
      - --config=/var/lib/kube-proxy-config/config
      - --hostname-override=$(NODE_NAME)
      env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/kube-proxy:v1.31.0-minimal-eksbuild.2
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources:
        requests:
          cpu: 100m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/log
        name: varlog
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /var/lib/kube-proxy/
        name: kubeconfig
      - mountPath: /var/lib/kube-proxy-config/
        name: config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-bfnkd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ip-10-104-128-161.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-proxy
    serviceAccountName: kube-proxy
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/log
        type: ""
      name: varlog
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - configMap:
        defaultMode: 420
        name: kube-proxy
      name: kubeconfig
    - configMap:
        defaultMode: 420
        name: kube-proxy-config
      name: config
    - name: kube-api-access-bfnkd
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:54:40Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:54:35Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:54:40Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:54:40Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:54:35Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://5082f44a5eae4bd9ce811861ed5598be46b748f64943e5fb53e2d0faafb0ba0d
      image: 066635153087.dkr.ecr.il-central-1.amazonaws.com/eks/kube-proxy:v1.31.0-minimal-eksbuild.2
      imageID: sha256:90cb402e7ebc61b5e0f195d0f212b4bc4b1d6b21ecb2613b6b26e2e9c9d09e0a
      lastState: {}
      name: kube-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-03T09:54:40Z"
      volumeMounts:
      - mountPath: /var/log
        name: varlog
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/lib/kube-proxy/
        name: kubeconfig
      - mountPath: /var/lib/kube-proxy-config/
        name: config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-bfnkd
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.104.128.161
    hostIPs:
    - ip: 10.104.128.161
    phase: Running
    podIP: 10.104.128.161
    podIPs:
    - ip: 10.104.128.161
    qosClass: Burstable
    startTime: "2024-10-03T09:54:35Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-03T09:54:32Z"
    generateName: kube-proxy-
    labels:
      controller-revision-hash: 6cf9ccc4bc
      k8s-app: kube-proxy
      pod-template-generation: "1"
    name: kube-proxy-r6s6n
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kube-proxy
      uid: 5177a3b8-d52b-4bd1-a71c-fa4ba61ffeb7
    resourceVersion: "1609"
    uid: 38883bc8-b58e-4b41-a716-f43639323e4c
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-10-104-0-135.ec2.internal
    containers:
    - command:
      - kube-proxy
      - --v=2
      - --config=/var/lib/kube-proxy-config/config
      - --hostname-override=$(NODE_NAME)
      env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/kube-proxy:v1.31.0-minimal-eksbuild.2
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources:
        requests:
          cpu: 100m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/log
        name: varlog
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /var/lib/kube-proxy/
        name: kubeconfig
      - mountPath: /var/lib/kube-proxy-config/
        name: config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-ck4k9
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ip-10-104-0-135.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-proxy
    serviceAccountName: kube-proxy
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/log
        type: ""
      name: varlog
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - configMap:
        defaultMode: 420
        name: kube-proxy
      name: kubeconfig
    - configMap:
        defaultMode: 420
        name: kube-proxy-config
      name: config
    - name: kube-api-access-ck4k9
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:54:48Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:54:33Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:54:48Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:54:48Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-03T09:54:33Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://6e9092c6b4d4c874c6f0a24fb92b9e9a208836198c76bbf5e84c567695c1215a
      image: 066635153087.dkr.ecr.il-central-1.amazonaws.com/eks/kube-proxy:v1.31.0-minimal-eksbuild.2
      imageID: sha256:90cb402e7ebc61b5e0f195d0f212b4bc4b1d6b21ecb2613b6b26e2e9c9d09e0a
      lastState: {}
      name: kube-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-03T09:54:47Z"
      volumeMounts:
      - mountPath: /var/log
        name: varlog
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/lib/kube-proxy/
        name: kubeconfig
      - mountPath: /var/lib/kube-proxy-config/
        name: config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-ck4k9
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.104.0.135
    hostIPs:
    - ip: 10.104.0.135
    phase: Running
    podIP: 10.104.0.135
    podIPs:
    - ip: 10.104.0.135
    qosClass: Burstable
    startTime: "2024-10-03T09:54:33Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-07T06:58:23Z"
    generateName: kube-proxy-
    labels:
      controller-revision-hash: 6cf9ccc4bc
      k8s-app: kube-proxy
      pod-template-generation: "1"
    name: kube-proxy-w647g
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kube-proxy
      uid: 5177a3b8-d52b-4bd1-a71c-fa4ba61ffeb7
    resourceVersion: "928474"
    uid: 8432de21-33fe-45e5-85cd-435d2d05c4f4
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-10-104-0-39.ec2.internal
    containers:
    - command:
      - kube-proxy
      - --v=2
      - --config=/var/lib/kube-proxy-config/config
      - --hostname-override=$(NODE_NAME)
      env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/kube-proxy:v1.31.0-minimal-eksbuild.2
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources:
        requests:
          cpu: 100m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/log
        name: varlog
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /var/lib/kube-proxy/
        name: kubeconfig
      - mountPath: /var/lib/kube-proxy-config/
        name: config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-v8tnr
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ip-10-104-0-39.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-proxy
    serviceAccountName: kube-proxy
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/log
        type: ""
      name: varlog
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - configMap:
        defaultMode: 420
        name: kube-proxy
      name: kubeconfig
    - configMap:
        defaultMode: 420
        name: kube-proxy-config
      name: config
    - name: kube-api-access-v8tnr
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T06:58:31Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T06:58:23Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T06:58:31Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T06:58:31Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T06:58:23Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://8cc543ced44bfbb5cdd91d38b59b0a67f7f920c831295a124e3ea1c1a6ce253c
      image: 066635153087.dkr.ecr.il-central-1.amazonaws.com/eks/kube-proxy:v1.31.0-minimal-eksbuild.2
      imageID: sha256:90cb402e7ebc61b5e0f195d0f212b4bc4b1d6b21ecb2613b6b26e2e9c9d09e0a
      lastState: {}
      name: kube-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-07T06:58:31Z"
      volumeMounts:
      - mountPath: /var/log
        name: varlog
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/lib/kube-proxy/
        name: kubeconfig
      - mountPath: /var/lib/kube-proxy-config/
        name: config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-v8tnr
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.104.0.39
    hostIPs:
    - ip: 10.104.0.39
    phase: Running
    podIP: 10.104.0.39
    podIPs:
    - ip: 10.104.0.39
    qosClass: Burstable
    startTime: "2024-10-07T06:58:23Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      paloaltonetworks.com/app: pan-cni
      scheduler.alpha.kubernetes.io/critical-pod: ""
    creationTimestamp: "2024-10-07T10:09:41Z"
    generateName: pan-cni-
    labels:
      controller-revision-hash: 6b9d67c684
      k8s-app: pan-cni
      pod-template-generation: "1"
    name: pan-cni-2r4tq
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: pan-cni
      uid: f64fb1ab-dfeb-4b11-88e1-613f2ba16c13
    resourceVersion: "961815"
    uid: 571d7889-bd2f-48e1-864b-6a1e606556ab
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-10-104-128-161.ec2.internal
    containers:
    - command:
      - /install-pan-cni.sh
      - main
      env:
      - name: CNI_NETWORK_CONFIG
        valueFrom:
          configMapKeyRef:
            key: cni_network_config
            name: pan-cni-config
      - name: MY_POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: MY_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      image: gcr.io/pan-cn-series/airs/pan-cni:4.0.0
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /install-pan-cni.sh
            - cleanup
      name: install-pan-cni
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /host/appinfo
        name: appinfo
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-zlcbn
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ip-10-104-128-161.ec2.internal
    nodeSelector:
      beta.kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: pan-cni-sa
    serviceAccountName: pan-cni-sa
    terminationGracePeriodSeconds: 5
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /opt/cni/bin
        type: ""
      name: cni-bin-dir
    - hostPath:
        path: /etc/cni/net.d
        type: ""
      name: cni-net-dir
    - hostPath:
        path: /var/log/pan-appinfo
        type: DirectoryOrCreate
      name: appinfo
    - name: kube-api-access-zlcbn
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T10:09:45Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T10:09:41Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T10:09:45Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T10:09:45Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T10:09:41Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://7ec8b2aca7b675cb8a4fc2c075394056229c529a87a6f1599e1104d40d696ed0
      image: gcr.io/pan-cn-series/airs/pan-cni:4.0.0
      imageID: gcr.io/pan-cn-series/airs/pan-cni@sha256:724c998c3fdf52dce1ed9fac0cfb73111ee0ead72273fae74ee21f36f7972f56
      lastState: {}
      name: install-pan-cni
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-07T10:09:45Z"
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /host/appinfo
        name: appinfo
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-zlcbn
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.104.128.161
    hostIPs:
    - ip: 10.104.128.161
    phase: Running
    podIP: 10.104.128.161
    podIPs:
    - ip: 10.104.128.161
    qosClass: BestEffort
    startTime: "2024-10-07T10:09:41Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      paloaltonetworks.com/app: pan-cni
      scheduler.alpha.kubernetes.io/critical-pod: ""
    creationTimestamp: "2024-10-07T10:09:41Z"
    generateName: pan-cni-
    labels:
      controller-revision-hash: 6b9d67c684
      k8s-app: pan-cni
      pod-template-generation: "1"
    name: pan-cni-9mlqb
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: pan-cni
      uid: f64fb1ab-dfeb-4b11-88e1-613f2ba16c13
    resourceVersion: "961811"
    uid: 6787ec89-7fe5-4fdd-bd32-7fbf88922173
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-10-104-128-67.ec2.internal
    containers:
    - command:
      - /install-pan-cni.sh
      - main
      env:
      - name: CNI_NETWORK_CONFIG
        valueFrom:
          configMapKeyRef:
            key: cni_network_config
            name: pan-cni-config
      - name: MY_POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: MY_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      image: gcr.io/pan-cn-series/airs/pan-cni:4.0.0
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /install-pan-cni.sh
            - cleanup
      name: install-pan-cni
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /host/appinfo
        name: appinfo
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-td842
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ip-10-104-128-67.ec2.internal
    nodeSelector:
      beta.kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: pan-cni-sa
    serviceAccountName: pan-cni-sa
    terminationGracePeriodSeconds: 5
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /opt/cni/bin
        type: ""
      name: cni-bin-dir
    - hostPath:
        path: /etc/cni/net.d
        type: ""
      name: cni-net-dir
    - hostPath:
        path: /var/log/pan-appinfo
        type: DirectoryOrCreate
      name: appinfo
    - name: kube-api-access-td842
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T10:09:45Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T10:09:41Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T10:09:45Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T10:09:45Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T10:09:41Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://7c9ecb74bd3d8340fe21795849a7bcf88e4ac24287fd73ec1064d0b02a64e533
      image: gcr.io/pan-cn-series/airs/pan-cni:4.0.0
      imageID: gcr.io/pan-cn-series/airs/pan-cni@sha256:724c998c3fdf52dce1ed9fac0cfb73111ee0ead72273fae74ee21f36f7972f56
      lastState: {}
      name: install-pan-cni
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-07T10:09:44Z"
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /host/appinfo
        name: appinfo
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-td842
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.104.128.67
    hostIPs:
    - ip: 10.104.128.67
    phase: Running
    podIP: 10.104.128.67
    podIPs:
    - ip: 10.104.128.67
    qosClass: BestEffort
    startTime: "2024-10-07T10:09:41Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      paloaltonetworks.com/app: pan-cni
      scheduler.alpha.kubernetes.io/critical-pod: ""
    creationTimestamp: "2024-10-07T10:09:41Z"
    generateName: pan-cni-
    labels:
      controller-revision-hash: 6b9d67c684
      k8s-app: pan-cni
      pod-template-generation: "1"
    name: pan-cni-9s65j
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: pan-cni
      uid: f64fb1ab-dfeb-4b11-88e1-613f2ba16c13
    resourceVersion: "961817"
    uid: b08e228a-5bf6-479f-ae9a-83ca32ac54ac
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-10-104-0-135.ec2.internal
    containers:
    - command:
      - /install-pan-cni.sh
      - main
      env:
      - name: CNI_NETWORK_CONFIG
        valueFrom:
          configMapKeyRef:
            key: cni_network_config
            name: pan-cni-config
      - name: MY_POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: MY_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      image: gcr.io/pan-cn-series/airs/pan-cni:4.0.0
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /install-pan-cni.sh
            - cleanup
      name: install-pan-cni
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /host/appinfo
        name: appinfo
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-h4szh
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ip-10-104-0-135.ec2.internal
    nodeSelector:
      beta.kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: pan-cni-sa
    serviceAccountName: pan-cni-sa
    terminationGracePeriodSeconds: 5
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /opt/cni/bin
        type: ""
      name: cni-bin-dir
    - hostPath:
        path: /etc/cni/net.d
        type: ""
      name: cni-net-dir
    - hostPath:
        path: /var/log/pan-appinfo
        type: DirectoryOrCreate
      name: appinfo
    - name: kube-api-access-h4szh
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T10:09:45Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T10:09:41Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T10:09:45Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T10:09:45Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T10:09:41Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://5ba9980a921c0bd476917be2781ccb7dc3c258a9995ffe27fda998c550ffecca
      image: gcr.io/pan-cn-series/airs/pan-cni:4.0.0
      imageID: gcr.io/pan-cn-series/airs/pan-cni@sha256:724c998c3fdf52dce1ed9fac0cfb73111ee0ead72273fae74ee21f36f7972f56
      lastState: {}
      name: install-pan-cni
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-07T10:09:44Z"
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /host/appinfo
        name: appinfo
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-h4szh
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.104.0.135
    hostIPs:
    - ip: 10.104.0.135
    phase: Running
    podIP: 10.104.0.135
    podIPs:
    - ip: 10.104.0.135
    qosClass: BestEffort
    startTime: "2024-10-07T10:09:41Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      paloaltonetworks.com/app: pan-cni
      scheduler.alpha.kubernetes.io/critical-pod: ""
    creationTimestamp: "2024-10-07T10:09:41Z"
    generateName: pan-cni-
    labels:
      controller-revision-hash: 6b9d67c684
      k8s-app: pan-cni
      pod-template-generation: "1"
    name: pan-cni-rfmbl
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: pan-cni
      uid: f64fb1ab-dfeb-4b11-88e1-613f2ba16c13
    resourceVersion: "961813"
    uid: cd0723a9-2073-4f05-b00e-aae66bd9ba37
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-10-104-0-39.ec2.internal
    containers:
    - command:
      - /install-pan-cni.sh
      - main
      env:
      - name: CNI_NETWORK_CONFIG
        valueFrom:
          configMapKeyRef:
            key: cni_network_config
            name: pan-cni-config
      - name: MY_POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: MY_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      image: gcr.io/pan-cn-series/airs/pan-cni:4.0.0
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /install-pan-cni.sh
            - cleanup
      name: install-pan-cni
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /host/appinfo
        name: appinfo
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-frtvh
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ip-10-104-0-39.ec2.internal
    nodeSelector:
      beta.kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: pan-cni-sa
    serviceAccountName: pan-cni-sa
    terminationGracePeriodSeconds: 5
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /opt/cni/bin
        type: ""
      name: cni-bin-dir
    - hostPath:
        path: /etc/cni/net.d
        type: ""
      name: cni-net-dir
    - hostPath:
        path: /var/log/pan-appinfo
        type: DirectoryOrCreate
      name: appinfo
    - name: kube-api-access-frtvh
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T10:09:45Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T10:09:41Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T10:09:45Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T10:09:45Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-07T10:09:41Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://74a4022acb7d2dcc198123ec34f1b35900e62f53a699ffb0e386d5ac3fd09173
      image: gcr.io/pan-cn-series/airs/pan-cni:4.0.0
      imageID: gcr.io/pan-cn-series/airs/pan-cni@sha256:724c998c3fdf52dce1ed9fac0cfb73111ee0ead72273fae74ee21f36f7972f56
      lastState: {}
      name: install-pan-cni
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-07T10:09:45Z"
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /host/appinfo
        name: appinfo
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-frtvh
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.104.0.39
    hostIPs:
    - ip: 10.104.0.39
    phase: Running
    podIP: 10.104.0.39
    podIPs:
    - ip: 10.104.0.39
    qosClass: BestEffort
    startTime: "2024-10-07T10:09:41Z"
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"agent-service","namespace":"ai-app"},"spec":{"ports":[{"port":80,"targetPort":3001}],"selector":{"app":"agent"},"type":"ClusterIP"}}
    creationTimestamp: "2024-10-10T22:46:43Z"
    name: agent-service
    namespace: ai-app
    resourceVersion: "1879928"
    uid: 9314b420-53f6-482e-b792-056b83a8db90
  spec:
    clusterIP: 172.20.247.101
    clusterIPs:
    - 172.20.247.101
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 80
      protocol: TCP
      targetPort: 3001
    selector:
      app: agent
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"agent-ws-service","namespace":"ai-app"},"spec":{"ports":[{"port":3001,"targetPort":3001}],"selector":{"app":"agent"},"type":"ClusterIP"}}
    creationTimestamp: "2024-10-09T23:21:45Z"
    name: agent-ws-service
    namespace: ai-app
    resourceVersion: "1623994"
    uid: da93caaf-3af6-40ad-ad31-c91cdc8ca764
  spec:
    clusterIP: 172.20.128.147
    clusterIPs:
    - 172.20.128.147
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 3001
      protocol: TCP
      targetPort: 3001
    selector:
      app: agent
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"ui-service","namespace":"ai-app"},"spec":{"ports":[{"port":80,"targetPort":3000}],"selector":{"app":"ui"},"type":"ClusterIP"}}
    creationTimestamp: "2024-10-10T22:46:42Z"
    name: ui-service
    namespace: ai-app
    resourceVersion: "1879908"
    uid: 859d7b87-71c6-48ac-893b-7a268c7a3fc1
  spec:
    clusterIP: 172.20.34.76
    clusterIPs:
    - 172.20.34.76
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 80
      protocol: TCP
      targetPort: 3000
    selector:
      app: ui
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2024-10-10T18:11:23Z"
    name: agent-service
    namespace: default
    resourceVersion: "1829788"
    uid: a8f27024-ea20-4bf5-b8fd-0c6cafb70b47
  spec:
    clusterIP: 172.20.207.253
    clusterIPs:
    - 172.20.207.253
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 80
      protocol: TCP
      targetPort: 3001
    selector:
      app: agent
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2024-10-03T09:47:12Z"
    labels:
      component: apiserver
      provider: kubernetes
    name: kubernetes
    namespace: default
    resourceVersion: "194"
    uid: 7898394f-59b7-408d-a385-24caf016225f
  spec:
    clusterIP: 172.20.0.1
    clusterIPs:
    - 172.20.0.1
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: 443
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2024-10-10T18:11:22Z"
    name: ui-service
    namespace: default
    resourceVersion: "1829781"
    uid: cfc66d45-510d-4218-8829-9157829f3387
  spec:
    clusterIP: 172.20.127.106
    clusterIPs:
    - 172.20.127.106
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 80
      protocol: TCP
      targetPort: 3000
    selector:
      app: ui
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: ingress-nginx
      meta.helm.sh/release-namespace: ingress-nginx
      service.beta.kubernetes.io/aws-load-balancer-type: nlb
    creationTimestamp: "2024-10-08T10:23:05Z"
    finalizers:
    - service.kubernetes.io/load-balancer-cleanup
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.11.2
      helm.sh/chart: ingress-nginx-4.11.2
    name: ingress-nginx-controller
    namespace: ingress-nginx
    resourceVersion: "1219570"
    uid: 8e5afe1f-bff2-457a-a8a7-d21eeb2943aa
  spec:
    allocateLoadBalancerNodePorts: true
    clusterIP: 172.20.214.241
    clusterIPs:
    - 172.20.214.241
    externalTrafficPolicy: Cluster
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - appProtocol: http
      name: http
      nodePort: 30187
      port: 80
      protocol: TCP
      targetPort: http
    - appProtocol: https
      name: https
      nodePort: 31959
      port: 443
      protocol: TCP
      targetPort: https
    selector:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
    sessionAffinity: None
    type: LoadBalancer
  status:
    loadBalancer:
      ingress:
      - hostname: a8e5afe1fbff2457aa8a7d21eeb2943a-0ee7ac6d712fd784.elb.us-east-1.amazonaws.com
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: ingress-nginx
      meta.helm.sh/release-namespace: ingress-nginx
    creationTimestamp: "2024-10-08T10:23:05Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.11.2
      helm.sh/chart: ingress-nginx-4.11.2
    name: ingress-nginx-controller-admission
    namespace: ingress-nginx
    resourceVersion: "1219516"
    uid: da714fc2-79cc-4f2a-9ed9-3cc32dabc52e
  spec:
    clusterIP: 172.20.126.188
    clusterIPs:
    - 172.20.126.188
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - appProtocol: https
      name: https-webhook
      port: 443
      protocol: TCP
      targetPort: webhook
    selector:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      prometheus.io/port: "9153"
      prometheus.io/scrape: "true"
    creationTimestamp: "2024-10-03T09:50:26Z"
    labels:
      eks.amazonaws.com/component: kube-dns
      k8s-app: kube-dns
      kubernetes.io/cluster-service: "true"
      kubernetes.io/name: CoreDNS
    name: kube-dns
    namespace: kube-system
    resourceVersion: "787"
    uid: 5c2bd257-2fbd-4b47-9998-d10819636107
  spec:
    clusterIP: 172.20.0.10
    clusterIPs:
    - 172.20.0.10
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: dns
      port: 53
      protocol: UDP
      targetPort: 53
    - name: dns-tcp
      port: 53
      protocol: TCP
      targetPort: 53
    - name: metrics
      port: 9153
      protocol: TCP
      targetPort: 9153
    selector:
      k8s-app: kube-dns
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: ai-runtime-security
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2024-10-07T10:09:40Z"
    labels:
      app: pan-ngfw-svc
      app.kubernetes.io/managed-by: Helm
    name: pan-ngfw-svc
    namespace: kube-system
    resourceVersion: "961755"
    uid: 5fdbb2cf-dd2d-4ddf-9a49-adcd6aef3fcc
  spec:
    clusterIP: 172.20.63.90
    clusterIPs:
    - 172.20.63.90
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 6080
      protocol: UDP
      targetPort: 6080
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "2"
    creationTimestamp: "2024-10-03T09:50:26Z"
    generation: 2
    labels:
      app.kubernetes.io/instance: aws-vpc-cni
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: aws-node
      app.kubernetes.io/version: v1.18.3
      helm.sh/chart: aws-vpc-cni-1.18.3
      k8s-app: aws-node
    name: aws-node
    namespace: kube-system
    resourceVersion: "928511"
    uid: 486d5e10-a591-42f4-ac27-7c0f178f8bf4
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: aws-node
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: aws-vpc-cni
          app.kubernetes.io/name: aws-node
          k8s-app: aws-node
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
                  - arm64
                - key: eks.amazonaws.com/compute-type
                  operator: NotIn
                  values:
                  - fargate
        containers:
        - env:
          - name: ADDITIONAL_ENI_TAGS
            value: '{}'
          - name: ANNOTATE_POD_IP
            value: "false"
          - name: AWS_VPC_CNI_NODE_PORT_SUPPORT
            value: "true"
          - name: AWS_VPC_ENI_MTU
            value: "9001"
          - name: AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG
            value: "false"
          - name: AWS_VPC_K8S_CNI_EXTERNALSNAT
            value: "false"
          - name: AWS_VPC_K8S_CNI_LOGLEVEL
            value: DEBUG
          - name: AWS_VPC_K8S_CNI_LOG_FILE
            value: /host/var/log/aws-routed-eni/ipamd.log
          - name: AWS_VPC_K8S_CNI_RANDOMIZESNAT
            value: prng
          - name: AWS_VPC_K8S_CNI_VETHPREFIX
            value: eni
          - name: AWS_VPC_K8S_PLUGIN_LOG_FILE
            value: /var/log/aws-routed-eni/plugin.log
          - name: AWS_VPC_K8S_PLUGIN_LOG_LEVEL
            value: DEBUG
          - name: CLUSTER_ENDPOINT
            value: https://178AE1BF31E1B14F35D0CAFE8F59ED13.gr7.us-east-1.eks.amazonaws.com
          - name: CLUSTER_NAME
            value: 2szv4dtt-K8s
          - name: DISABLE_INTROSPECTION
            value: "false"
          - name: DISABLE_METRICS
            value: "false"
          - name: DISABLE_NETWORK_RESOURCE_PROVISIONING
            value: "false"
          - name: ENABLE_IPv4
            value: "true"
          - name: ENABLE_IPv6
            value: "false"
          - name: ENABLE_POD_ENI
            value: "false"
          - name: ENABLE_PREFIX_DELEGATION
            value: "false"
          - name: ENABLE_SUBNET_DISCOVERY
            value: "true"
          - name: NETWORK_POLICY_ENFORCING_MODE
            value: standard
          - name: VPC_CNI_VERSION
            value: v1.18.3
          - name: VPC_ID
            value: vpc-00fdb9083fc4969ce
          - name: WARM_ENI_TARGET
            value: "1"
          - name: WARM_PREFIX_TARGET
            value: "1"
          - name: MY_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon-k8s-cni:v1.18.3-eksbuild.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /app/grpc-health-probe
              - -addr=:50051
              - -connect-timeout=5s
              - -rpc-timeout=5s
            failureThreshold: 3
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: aws-node
          ports:
          - containerPort: 61678
            name: metrics
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /app/grpc-health-probe
              - -addr=:50051
              - -connect-timeout=5s
              - -rpc-timeout=5s
            failureThreshold: 3
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            requests:
              cpu: 25m
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
              - NET_RAW
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /host/opt/cni/bin
            name: cni-bin-dir
          - mountPath: /host/etc/cni/net.d
            name: cni-net-dir
          - mountPath: /host/var/log/aws-routed-eni
            name: log-dir
          - mountPath: /var/run/aws-node
            name: run-dir
          - mountPath: /run/xtables.lock
            name: xtables-lock
        - args:
          - --enable-ipv6=false
          - --enable-network-policy=false
          - --enable-cloudwatch-logs=false
          - --enable-policy-event-logs=false
          - --log-file=/var/log/aws-routed-eni/network-policy-agent.log
          - --metrics-bind-addr=:8162
          - --health-probe-bind-addr=:8163
          - --conntrack-cache-cleanup-period=300
          env:
          - name: MY_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.2-eksbuild.2
          imagePullPolicy: IfNotPresent
          name: aws-eks-nodeagent
          resources:
            requests:
              cpu: 25m
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /host/opt/cni/bin
            name: cni-bin-dir
          - mountPath: /sys/fs/bpf
            name: bpf-pin-path
          - mountPath: /var/log/aws-routed-eni
            name: log-dir
          - mountPath: /var/run/aws-node
            name: run-dir
        dnsPolicy: ClusterFirst
        hostNetwork: true
        initContainers:
        - env:
          - name: DISABLE_TCP_EARLY_DEMUX
            value: "false"
          - name: ENABLE_IPv6
            value: "false"
          image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon-k8s-cni-init:v1.18.3-eksbuild.2
          imagePullPolicy: IfNotPresent
          name: aws-vpc-cni-init
          resources:
            requests:
              cpu: 25m
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /host/opt/cni/bin
            name: cni-bin-dir
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: aws-node
        serviceAccountName: aws-node
        terminationGracePeriodSeconds: 10
        tolerations:
        - operator: Exists
        volumes:
        - hostPath:
            path: /sys/fs/bpf
            type: ""
          name: bpf-pin-path
        - hostPath:
            path: /opt/cni/bin
            type: ""
          name: cni-bin-dir
        - hostPath:
            path: /etc/cni/net.d
            type: ""
          name: cni-net-dir
        - hostPath:
            path: /var/log/aws-routed-eni
            type: DirectoryOrCreate
          name: log-dir
        - hostPath:
            path: /var/run/aws-node
            type: DirectoryOrCreate
          name: run-dir
        - hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
          name: xtables-lock
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 10%
      type: RollingUpdate
  status:
    currentNumberScheduled: 4
    desiredNumberScheduled: 4
    numberAvailable: 4
    numberMisscheduled: 0
    numberReady: 4
    observedGeneration: 2
    updatedNumberScheduled: 4
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
    creationTimestamp: "2024-10-03T09:55:12Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: eks-pod-identity-agent
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: eks-pod-identity-agent
      app.kubernetes.io/version: 0.1.15
      helm.sh/chart: eks-pod-identity-agent-1.3.2
    name: eks-pod-identity-agent
    namespace: kube-system
    resourceVersion: "928473"
    uid: 9ec4920b-a16b-4064-bcc4-f84e8c476bea
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: eks-pod-identity-agent
        app.kubernetes.io/name: eks-pod-identity-agent
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: eks-pod-identity-agent
          app.kubernetes.io/name: eks-pod-identity-agent
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
                  - arm64
                - key: eks.amazonaws.com/compute-type
                  operator: NotIn
                  values:
                  - fargate
        containers:
        - args:
          - --port
          - "80"
          - --cluster-name
          - 2szv4dtt-K8s
          - --probe-port
          - "2703"
          command:
          - /go-runner
          - /eks-pod-identity-agent
          - server
          env:
          - name: AWS_REGION
            value: us-east-1
          image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              host: localhost
              path: /healthz
              port: probes-port
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: eks-pod-identity-agent
          ports:
          - containerPort: 80
            name: proxy
            protocol: TCP
          - containerPort: 2703
            name: probes-port
            protocol: TCP
          readinessProbe:
            failureThreshold: 30
            httpGet:
              host: localhost
              path: /readyz
              port: probes-port
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          resources: {}
          securityContext:
            capabilities:
              add:
              - CAP_NET_BIND_SERVICE
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        hostNetwork: true
        initContainers:
        - command:
          - /go-runner
          - /eks-pod-identity-agent
          - initialize
          image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
          imagePullPolicy: Always
          name: eks-pod-identity-agent-init
          resources: {}
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        tolerations:
        - operator: Exists
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 10%
      type: RollingUpdate
  status:
    currentNumberScheduled: 4
    desiredNumberScheduled: 4
    numberAvailable: 4
    numberMisscheduled: 0
    numberReady: 4
    observedGeneration: 1
    updatedNumberScheduled: 4
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
    creationTimestamp: "2024-10-03T09:50:25Z"
    generation: 1
    labels:
      eks.amazonaws.com/component: kube-proxy
      k8s-app: kube-proxy
    name: kube-proxy
    namespace: kube-system
    resourceVersion: "928475"
    uid: 5177a3b8-d52b-4bd1-a71c-fa4ba61ffeb7
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: kube-proxy
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kube-proxy
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
                  - arm64
                - key: eks.amazonaws.com/compute-type
                  operator: NotIn
                  values:
                  - fargate
        containers:
        - command:
          - kube-proxy
          - --v=2
          - --config=/var/lib/kube-proxy-config/config
          - --hostname-override=$(NODE_NAME)
          env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/kube-proxy:v1.31.0-minimal-eksbuild.2
          imagePullPolicy: IfNotPresent
          name: kube-proxy
          resources:
            requests:
              cpu: 100m
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/log
            name: varlog
          - mountPath: /run/xtables.lock
            name: xtables-lock
          - mountPath: /lib/modules
            name: lib-modules
            readOnly: true
          - mountPath: /var/lib/kube-proxy/
            name: kubeconfig
          - mountPath: /var/lib/kube-proxy-config/
            name: config
        dnsPolicy: ClusterFirst
        hostNetwork: true
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kube-proxy
        serviceAccountName: kube-proxy
        terminationGracePeriodSeconds: 30
        tolerations:
        - operator: Exists
        volumes:
        - hostPath:
            path: /var/log
            type: ""
          name: varlog
        - hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
          name: xtables-lock
        - hostPath:
            path: /lib/modules
            type: ""
          name: lib-modules
        - configMap:
            defaultMode: 420
            name: kube-proxy
          name: kubeconfig
        - configMap:
            defaultMode: 420
            name: kube-proxy-config
          name: config
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 10%
      type: RollingUpdate
  status:
    currentNumberScheduled: 4
    desiredNumberScheduled: 4
    numberAvailable: 4
    numberMisscheduled: 0
    numberReady: 4
    observedGeneration: 1
    updatedNumberScheduled: 4
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
      meta.helm.sh/release-name: ai-runtime-security
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2024-10-07T10:09:41Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
      k8s-app: pan-cni
    name: pan-cni
    namespace: kube-system
    resourceVersion: "961818"
    uid: f64fb1ab-dfeb-4b11-88e1-613f2ba16c13
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: pan-cni
    template:
      metadata:
        annotations:
          paloaltonetworks.com/app: pan-cni
          scheduler.alpha.kubernetes.io/critical-pod: ""
        creationTimestamp: null
        labels:
          k8s-app: pan-cni
      spec:
        containers:
        - command:
          - /install-pan-cni.sh
          - main
          env:
          - name: CNI_NETWORK_CONFIG
            valueFrom:
              configMapKeyRef:
                key: cni_network_config
                name: pan-cni-config
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          image: gcr.io/pan-cn-series/airs/pan-cni:4.0.0
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /install-pan-cni.sh
                - cleanup
          name: install-pan-cni
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /host/opt/cni/bin
            name: cni-bin-dir
          - mountPath: /host/etc/cni/net.d
            name: cni-net-dir
          - mountPath: /host/appinfo
            name: appinfo
        dnsPolicy: ClusterFirst
        hostNetwork: true
        nodeSelector:
          beta.kubernetes.io/os: linux
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: pan-cni-sa
        serviceAccountName: pan-cni-sa
        terminationGracePeriodSeconds: 5
        tolerations:
        - effect: NoSchedule
          operator: Exists
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          operator: Exists
        volumes:
        - hostPath:
            path: /opt/cni/bin
            type: ""
          name: cni-bin-dir
        - hostPath:
            path: /etc/cni/net.d
            type: ""
          name: cni-net-dir
        - hostPath:
            path: /var/log/pan-appinfo
            type: DirectoryOrCreate
          name: appinfo
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 4
    desiredNumberScheduled: 4
    numberAvailable: 4
    numberMisscheduled: 0
    numberReady: 4
    observedGeneration: 1
    updatedNumberScheduled: 4
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "3"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"name":"agent-deployment","namespace":"ai-app"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"agent"}},"template":{"metadata":{"labels":{"app":"agent"}},"spec":{"containers":[{"image":"migara/agent-app","name":"agent","ports":[{"containerPort":3001}],"tty":true}],"serviceAccountName":"eks-pods-sa"}}}}
    creationTimestamp: "2024-10-10T22:46:43Z"
    generation: 3
    name: agent-deployment
    namespace: ai-app
    resourceVersion: "1907873"
    uid: f068e9e6-9f4a-4c11-bc6b-51ba8e721917
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: agent
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: agent
      spec:
        containers:
        - image: migara/agent-app
          imagePullPolicy: Always
          name: agent
          ports:
          - containerPort: 3001
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          tty: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: eks-pods-sa
        serviceAccountName: eks-pods-sa
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-10-10T22:46:43Z"
      lastUpdateTime: "2024-10-10T23:24:52Z"
      message: ReplicaSet "agent-deployment-5d56ddfb98" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2024-10-11T01:16:49Z"
      lastUpdateTime: "2024-10-11T01:16:49Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 3
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"name":"aws-cli-deployment","namespace":"ai-app"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"aws-cli"}},"template":{"metadata":{"labels":{"app":"aws-cli"}},"spec":{"containers":[{"args":["-c","yum install -y ca-certificates\ncp /custom-certs/* /etc/pki/ca-trust/source/anchors/\nupdate-ca-trust\necho \"Custom certificates added\"\nsleep infinity\n"],"command":["/bin/bash"],"env":[{"name":"AWS_CA_BUNDLE","value":"/etc/pki/ca-trust/source/anchors/Trust-Root-CA.crt"}],"image":"amazon/aws-cli","name":"aws-cli","volumeMounts":[{"mountPath":"/custom-certs","name":"custom-certs","readOnly":true}]}],"serviceAccountName":"eks-pods-sa","volumes":[{"configMap":{"name":"custom-ca-certs"},"name":"custom-certs"}]}}}}
    creationTimestamp: "2024-10-07T14:16:22Z"
    generation: 2
    name: aws-cli-deployment
    namespace: ai-app
    resourceVersion: "1015780"
    uid: 77c49a18-b406-4df7-a5ce-da924e8022cf
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: aws-cli
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: aws-cli
      spec:
        containers:
        - args:
          - -c
          - |
            yum install -y ca-certificates
            cp /custom-certs/* /etc/pki/ca-trust/source/anchors/
            update-ca-trust
            echo "Custom certificates added"
            sleep infinity
          command:
          - /bin/bash
          env:
          - name: AWS_CA_BUNDLE
            value: /etc/pki/ca-trust/source/anchors/Trust-Root-CA.crt
          image: amazon/aws-cli
          imagePullPolicy: Always
          name: aws-cli
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /custom-certs
            name: custom-certs
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: eks-pods-sa
        serviceAccountName: eks-pods-sa
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: custom-ca-certs
          name: custom-certs
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-10-07T14:16:37Z"
      lastUpdateTime: "2024-10-07T14:16:37Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-10-07T14:16:22Z"
      lastUpdateTime: "2024-10-07T15:17:47Z"
      message: ReplicaSet "aws-cli-deployment-bb558f6c7" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"name":"netshoot-deployment","namespace":"ai-app"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"netshoot"}},"template":{"metadata":{"labels":{"app":"netshoot"}},"spec":{"containers":[{"args":["-c","cp /custom-certs/* /usr/local/share/ca-certificates/\nupdate-ca-certificates\necho \"Custom certificates added\"\nwhile true; do sleep 3600; done\n"],"command":["/bin/sh"],"image":"nicolaka/netshoot","name":"netshoot","volumeMounts":[{"mountPath":"/custom-certs","name":"custom-certs","readOnly":true}]}],"serviceAccountName":"eks-pods-sa","volumes":[{"configMap":{"name":"custom-ca-certs"},"name":"custom-certs"}]}}}}
    creationTimestamp: "2024-10-07T14:16:22Z"
    generation: 1
    name: netshoot-deployment
    namespace: ai-app
    resourceVersion: "1005034"
    uid: fd2d20c8-411e-4b27-865e-36139493ffd8
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: netshoot
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: netshoot
      spec:
        containers:
        - args:
          - -c
          - |
            cp /custom-certs/* /usr/local/share/ca-certificates/
            update-ca-certificates
            echo "Custom certificates added"
            while true; do sleep 3600; done
          command:
          - /bin/sh
          image: nicolaka/netshoot
          imagePullPolicy: Always
          name: netshoot
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /custom-certs
            name: custom-certs
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: eks-pods-sa
        serviceAccountName: eks-pods-sa
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: custom-ca-certs
          name: custom-certs
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-10-07T14:16:33Z"
      lastUpdateTime: "2024-10-07T14:16:33Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-10-07T14:16:22Z"
      lastUpdateTime: "2024-10-07T14:16:33Z"
      message: ReplicaSet "netshoot-deployment-7655b866d4" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"name":"ui-deployment","namespace":"ai-app"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"ui"}},"template":{"metadata":{"labels":{"app":"ui"}},"spec":{"containers":[{"image":"migara/ui-app","name":"ui","ports":[{"containerPort":3000}]}]}}}}
    creationTimestamp: "2024-10-10T22:46:43Z"
    generation: 1
    name: ui-deployment
    namespace: ai-app
    resourceVersion: "1879967"
    uid: a0f0ad90-4d7b-4963-8383-b753e7280cd2
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: ui
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ui
      spec:
        containers:
        - image: migara/ui-app
          imagePullPolicy: Always
          name: ui
          ports:
          - containerPort: 3000
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-10-10T22:46:45Z"
      lastUpdateTime: "2024-10-10T22:46:45Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-10-10T22:46:43Z"
      lastUpdateTime: "2024-10-10T22:46:45Z"
      message: ReplicaSet "ui-deployment-66bcb989f7" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: ingress-nginx
      meta.helm.sh/release-namespace: ingress-nginx
    creationTimestamp: "2024-10-08T10:23:05Z"
    generation: 1
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.11.2
      helm.sh/chart: ingress-nginx-4.11.2
    name: ingress-nginx-controller
    namespace: ingress-nginx
    resourceVersion: "1219628"
    uid: 1b858630-46cf-486d-84f7-e4a2a96eab88
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx
        app.kubernetes.io/name: ingress-nginx
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: ingress-nginx
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.11.2
          helm.sh/chart: ingress-nginx-4.11.2
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
          - --election-id=ingress-nginx-leader
          - --controller-class=k8s.io/ingress-nginx
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          - --enable-metrics=false
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.11.2@sha256:d5f8217feeac4887cb1ed21f27c2674e58be06bd8f5184cacea2a69abaf78dce
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 101
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ingress-nginx
        serviceAccountName: ingress-nginx
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: ingress-nginx-admission
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-10-08T10:23:16Z"
      lastUpdateTime: "2024-10-08T10:23:16Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-10-08T10:23:05Z"
      lastUpdateTime: "2024-10-08T10:23:16Z"
      message: ReplicaSet "ingress-nginx-controller-9756f5bd9" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-10-03T09:50:26Z"
    generation: 1
    labels:
      eks.amazonaws.com/component: coredns
      k8s-app: kube-dns
      kubernetes.io/name: CoreDNS
    name: coredns
    namespace: kube-system
    resourceVersion: "1667"
    uid: b1e4162f-29c7-42ab-b6c1-d3904b789f3d
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        eks.amazonaws.com/component: coredns
        k8s-app: kube-dns
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          eks.amazonaws.com/component: coredns
          k8s-app: kube-dns
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
                  - arm64
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: k8s-app
                    operator: In
                    values:
                    - kube-dns
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - args:
          - -conf
          - /etc/coredns/Corefile
          image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/coredns:v1.11.3-eksbuild.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: coredns
          ports:
          - containerPort: 53
            name: dns
            protocol: UDP
          - containerPort: 53
            name: dns-tcp
            protocol: TCP
          - containerPort: 9153
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8181
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 170Mi
            requests:
              cpu: 100m
              memory: 70Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/coredns
            name: config-volume
            readOnly: true
        dnsPolicy: Default
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: coredns
        serviceAccountName: coredns
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
        - key: CriticalAddonsOnly
          operator: Exists
        topologySpreadConstraints:
        - labelSelector:
            matchLabels:
              k8s-app: kube-dns
          maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: Corefile
              path: Corefile
            name: coredns
          name: config-volume
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2024-10-03T09:54:55Z"
      lastUpdateTime: "2024-10-03T09:54:55Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-10-03T09:50:26Z"
      lastUpdateTime: "2024-10-03T09:54:55Z"
      message: ReplicaSet "coredns-789f8477df" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
    creationTimestamp: "2024-10-10T23:22:32Z"
    generation: 2
    labels:
      app: agent
      pod-template-hash: 55ccdccb8c
    name: agent-deployment-55ccdccb8c
    namespace: ai-app
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: agent-deployment
      uid: f068e9e6-9f4a-4c11-bc6b-51ba8e721917
    resourceVersion: "1887013"
    uid: 2bc75574-cbf0-44bb-ae3e-df60dd2e39f9
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: agent
        pod-template-hash: 55ccdccb8c
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: agent
          pod-template-hash: 55ccdccb8c
      spec:
        containers:
        - env:
          - name: BRIDGE_COLLECT_TELEMETRY
            value: "True"
          - name: CONSOLE_VERBOSITY
            value: Verbose
          - name: BRIDGE_CORRELATION_ID
            value: 2fc8ffbe-735e-43f0-a14f-8387a6b5b6971728320816919:5a87b5d76e6a:b3ee4cf4f6a4
          image: bridgetokubernetes.azurecr.io/lpkremoteagent:1.3.4
          imagePullPolicy: Always
          name: agent
          ports:
          - containerPort: 3001
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          tty: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: eks-pods-sa
        serviceAccountName: eks-pods-sa
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "3"
      deployment.kubernetes.io/revision-history: "1"
    creationTimestamp: "2024-10-10T22:46:43Z"
    generation: 3
    labels:
      app: agent
      pod-template-hash: 5d56ddfb98
    name: agent-deployment-5d56ddfb98
    namespace: ai-app
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: agent-deployment
      uid: f068e9e6-9f4a-4c11-bc6b-51ba8e721917
    resourceVersion: "1907871"
    uid: b1346eba-e8fb-4269-91a5-b3237017c2ed
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: agent
        pod-template-hash: 5d56ddfb98
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: agent
          pod-template-hash: 5d56ddfb98
      spec:
        containers:
        - image: migara/agent-app
          imagePullPolicy: Always
          name: agent
          ports:
          - containerPort: 3001
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          tty: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: eks-pods-sa
        serviceAccountName: eks-pods-sa
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 3
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-10-07T14:16:22Z"
    generation: 2
    labels:
      app: aws-cli
      pod-template-hash: 86bd569d85
    name: aws-cli-deployment-86bd569d85
    namespace: ai-app
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: aws-cli-deployment
      uid: 77c49a18-b406-4df7-a5ce-da924e8022cf
    resourceVersion: "1015779"
    uid: a4d360cc-58a7-4aaa-872b-3129e4a960ad
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: aws-cli
        pod-template-hash: 86bd569d85
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: aws-cli
          pod-template-hash: 86bd569d85
      spec:
        containers:
        - args:
          - -c
          - |
            yum install -y ca-certificates
            cp /custom-certs/* /etc/pki/ca-trust/source/anchors/
            update-ca-trust
            echo "Custom certificates added"
            sleep infinity
          command:
          - /bin/bash
          image: amazon/aws-cli
          imagePullPolicy: Always
          name: aws-cli
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /custom-certs
            name: custom-certs
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: eks-pods-sa
        serviceAccountName: eks-pods-sa
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: custom-ca-certs
          name: custom-certs
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
    creationTimestamp: "2024-10-07T15:17:36Z"
    generation: 1
    labels:
      app: aws-cli
      pod-template-hash: bb558f6c7
    name: aws-cli-deployment-bb558f6c7
    namespace: ai-app
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: aws-cli-deployment
      uid: 77c49a18-b406-4df7-a5ce-da924e8022cf
    resourceVersion: "1015769"
    uid: f4c69f40-f816-494a-9d48-a36b2d55d057
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: aws-cli
        pod-template-hash: bb558f6c7
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: aws-cli
          pod-template-hash: bb558f6c7
      spec:
        containers:
        - args:
          - -c
          - |
            yum install -y ca-certificates
            cp /custom-certs/* /etc/pki/ca-trust/source/anchors/
            update-ca-trust
            echo "Custom certificates added"
            sleep infinity
          command:
          - /bin/bash
          env:
          - name: AWS_CA_BUNDLE
            value: /etc/pki/ca-trust/source/anchors/Trust-Root-CA.crt
          image: amazon/aws-cli
          imagePullPolicy: Always
          name: aws-cli
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /custom-certs
            name: custom-certs
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: eks-pods-sa
        serviceAccountName: eks-pods-sa
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: custom-ca-certs
          name: custom-certs
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-10-07T14:16:22Z"
    generation: 1
    labels:
      app: netshoot
      pod-template-hash: 7655b866d4
    name: netshoot-deployment-7655b866d4
    namespace: ai-app
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: netshoot-deployment
      uid: fd2d20c8-411e-4b27-865e-36139493ffd8
    resourceVersion: "1005033"
    uid: 897a84ad-956f-4e60-bdb4-d23c35bfebf2
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: netshoot
        pod-template-hash: 7655b866d4
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: netshoot
          pod-template-hash: 7655b866d4
      spec:
        containers:
        - args:
          - -c
          - |
            cp /custom-certs/* /usr/local/share/ca-certificates/
            update-ca-certificates
            echo "Custom certificates added"
            while true; do sleep 3600; done
          command:
          - /bin/sh
          image: nicolaka/netshoot
          imagePullPolicy: Always
          name: netshoot
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /custom-certs
            name: custom-certs
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: eks-pods-sa
        serviceAccountName: eks-pods-sa
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: custom-ca-certs
          name: custom-certs
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-10-10T22:46:43Z"
    generation: 1
    labels:
      app: ui
      pod-template-hash: 66bcb989f7
    name: ui-deployment-66bcb989f7
    namespace: ai-app
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: ui-deployment
      uid: a0f0ad90-4d7b-4963-8383-b753e7280cd2
    resourceVersion: "1879965"
    uid: 867bf8a3-e1d4-4fda-99c1-5447f62fd374
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: ui
        pod-template-hash: 66bcb989f7
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ui
          pod-template-hash: 66bcb989f7
      spec:
        containers:
        - image: migara/ui-app
          imagePullPolicy: Always
          name: ui
          ports:
          - containerPort: 3000
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: ingress-nginx
      meta.helm.sh/release-namespace: ingress-nginx
    creationTimestamp: "2024-10-08T10:23:05Z"
    generation: 1
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.11.2
      helm.sh/chart: ingress-nginx-4.11.2
      pod-template-hash: 9756f5bd9
    name: ingress-nginx-controller-9756f5bd9
    namespace: ingress-nginx
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: ingress-nginx-controller
      uid: 1b858630-46cf-486d-84f7-e4a2a96eab88
    resourceVersion: "1219625"
    uid: 92d54dd4-9c11-4d58-9072-ccbc0a28bd3c
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx
        app.kubernetes.io/name: ingress-nginx
        pod-template-hash: 9756f5bd9
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: ingress-nginx
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.11.2
          helm.sh/chart: ingress-nginx-4.11.2
          pod-template-hash: 9756f5bd9
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
          - --election-id=ingress-nginx-leader
          - --controller-class=k8s.io/ingress-nginx
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          - --enable-metrics=false
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.11.2@sha256:d5f8217feeac4887cb1ed21f27c2674e58be06bd8f5184cacea2a69abaf78dce
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 101
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ingress-nginx
        serviceAccountName: ingress-nginx
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: ingress-nginx-admission
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-10-03T09:50:26Z"
    generation: 1
    labels:
      eks.amazonaws.com/component: coredns
      k8s-app: kube-dns
      pod-template-hash: 789f8477df
    name: coredns-789f8477df
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: coredns
      uid: b1e4162f-29c7-42ab-b6c1-d3904b789f3d
    resourceVersion: "1666"
    uid: 2853e101-8a13-4013-9763-18befad9922a
  spec:
    replicas: 2
    selector:
      matchLabels:
        eks.amazonaws.com/component: coredns
        k8s-app: kube-dns
        pod-template-hash: 789f8477df
    template:
      metadata:
        creationTimestamp: null
        labels:
          eks.amazonaws.com/component: coredns
          k8s-app: kube-dns
          pod-template-hash: 789f8477df
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
                  - arm64
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: k8s-app
                    operator: In
                    values:
                    - kube-dns
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - args:
          - -conf
          - /etc/coredns/Corefile
          image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/coredns:v1.11.3-eksbuild.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: coredns
          ports:
          - containerPort: 53
            name: dns
            protocol: UDP
          - containerPort: 53
            name: dns-tcp
            protocol: TCP
          - containerPort: 9153
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8181
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 170Mi
            requests:
              cpu: 100m
              memory: 70Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/coredns
            name: config-volume
            readOnly: true
        dnsPolicy: Default
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: coredns
        serviceAccountName: coredns
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
        - key: CriticalAddonsOnly
          operator: Exists
        topologySpreadConstraints:
        - labelSelector:
            matchLabels:
              k8s-app: kube-dns
          maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: Corefile
              path: Corefile
            name: coredns
          name: config-volume
  status:
    availableReplicas: 2
    fullyLabeledReplicas: 2
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
kind: List
metadata:
  resourceVersion: ""
