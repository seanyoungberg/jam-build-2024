NAMESPACE       NAME                                            READY   STATUS    RESTARTS   AGE    IP               NODE                             NOMINATED NODE   READINESS GATES
ai-app          pod/agent-deployment-558dcbcf7d-rxc6m           1/1     Running   0          142m   10.104.128.98    ip-10-104-128-124.ec2.internal   <none>           <none>
ai-app          pod/ui-deployment-5457f4d4d4-tkfmq              1/1     Running   0          142m   10.104.0.116     ip-10-104-0-216.ec2.internal     <none>           <none>
ingress-nginx   pod/ingress-nginx-controller-74dbc4858c-h7fjg   1/1     Running   0          143m   10.104.0.91      ip-10-104-0-216.ec2.internal     <none>           <none>
kube-system     pod/aws-node-hmvr2                              2/2     Running   0          35h    10.104.128.124   ip-10-104-128-124.ec2.internal   <none>           <none>
kube-system     pod/aws-node-ptpj4                              2/2     Running   0          35h    10.104.0.216     ip-10-104-0-216.ec2.internal     <none>           <none>
kube-system     pod/coredns-789f8477df-gvh82                    1/1     Running   0          35h    10.104.128.202   ip-10-104-128-124.ec2.internal   <none>           <none>
kube-system     pod/coredns-789f8477df-vx7f5                    1/1     Running   0          35h    10.104.128.249   ip-10-104-128-124.ec2.internal   <none>           <none>
kube-system     pod/eks-pod-identity-agent-cvpvw                1/1     Running   0          35h    10.104.0.216     ip-10-104-0-216.ec2.internal     <none>           <none>
kube-system     pod/eks-pod-identity-agent-sp7ft                1/1     Running   0          35h    10.104.128.124   ip-10-104-128-124.ec2.internal   <none>           <none>
kube-system     pod/kube-proxy-7bnxs                            1/1     Running   0          35h    10.104.0.216     ip-10-104-0-216.ec2.internal     <none>           <none>
kube-system     pod/kube-proxy-hdxt7                            1/1     Running   0          35h    10.104.128.124   ip-10-104-128-124.ec2.internal   <none>           <none>
kube-system     pod/pan-cni-l49hv                               1/1     Running   0          143m   10.104.0.216     ip-10-104-0-216.ec2.internal     <none>           <none>
kube-system     pod/pan-cni-rspdh                               1/1     Running   0          143m   10.104.128.124   ip-10-104-128-124.ec2.internal   <none>           <none>
utilities       pod/netshoot-deployment-7655b866d4-7qdzs        1/1     Running   0          84m    10.104.0.143     ip-10-104-0-216.ec2.internal     <none>           <none>

NAMESPACE       NAME                                         TYPE           CLUSTER-IP       EXTERNAL-IP                                                                     PORT(S)                      AGE    SELECTOR
ai-app          service/agent-service                        ClusterIP      172.20.212.15    <none>                                                                          80/TCP                       142m   app=agent
ai-app          service/ui-service                           ClusterIP      172.20.196.23    <none>                                                                          80/TCP                       142m   app=ui
default         service/kubernetes                           ClusterIP      172.20.0.1       <none>                                                                          443/TCP                      35h    <none>
ingress-nginx   service/ingress-nginx-controller             LoadBalancer   172.20.230.46    a1b395e76e8ab433c838b2faae084ff2-2d8550f4cddebd62.elb.us-east-1.amazonaws.com   80:31209/TCP,443:32175/TCP   143m   app.kubernetes.io/component=controller,app.kubernetes.io/instance=ingress-nginx,app.kubernetes.io/name=ingress-nginx
ingress-nginx   service/ingress-nginx-controller-admission   ClusterIP      172.20.181.224   <none>                                                                          443/TCP                      143m   app.kubernetes.io/component=controller,app.kubernetes.io/instance=ingress-nginx,app.kubernetes.io/name=ingress-nginx
kube-system     service/kube-dns                             ClusterIP      172.20.0.10      <none>                                                                          53/UDP,53/TCP,9153/TCP       35h    k8s-app=kube-dns
kube-system     service/pan-ngfw-svc                         ClusterIP      172.20.222.196   <none>                                                                          6080/UDP                     143m   <none>

NAMESPACE     NAME                                    DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR                 AGE    CONTAINERS                   IMAGES                                                                                                                                                                          SELECTOR
kube-system   daemonset.apps/aws-node                 2         2         2       2            2           <none>                        35h    aws-node,aws-eks-nodeagent   602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon-k8s-cni:v1.18.3-eksbuild.2,602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.2-eksbuild.2   k8s-app=aws-node
kube-system   daemonset.apps/eks-pod-identity-agent   2         2         2       2            2           <none>                        35h    eks-pod-identity-agent       602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15                                                                                                  app.kubernetes.io/instance=eks-pod-identity-agent,app.kubernetes.io/name=eks-pod-identity-agent
kube-system   daemonset.apps/kube-proxy               2         2         2       2            2           <none>                        35h    kube-proxy                   602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/kube-proxy:v1.31.0-minimal-eksbuild.2                                                                                          k8s-app=kube-proxy
kube-system   daemonset.apps/pan-cni                  2         2         2       2            2           beta.kubernetes.io/os=linux   143m   install-pan-cni              gcr.io/pan-cn-series/airs/pan-cni:4.0.0                                                                                                                                         k8s-app=pan-cni

NAMESPACE       NAME                                       READY   UP-TO-DATE   AVAILABLE   AGE    CONTAINERS   IMAGES                                                                                                                    SELECTOR
ai-app          deployment.apps/agent-deployment           1/1     1            1           142m   agent        migara/agent-app:latest                                                                                                   app=agent
ai-app          deployment.apps/ui-deployment              1/1     1            1           142m   ui           migara/ui-app:latest                                                                                                      app=ui
ingress-nginx   deployment.apps/ingress-nginx-controller   1/1     1            1           143m   controller   registry.k8s.io/ingress-nginx/controller:v1.8.1@sha256:e5c4824e7375fcf2a393e1c03c293b69759af37a9ca6abdb91b13d78a93da8bd   app.kubernetes.io/component=controller,app.kubernetes.io/instance=ingress-nginx,app.kubernetes.io/name=ingress-nginx
kube-system     deployment.apps/coredns                    2/2     2            2           35h    coredns      602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/coredns:v1.11.3-eksbuild.1                                               eks.amazonaws.com/component=coredns,k8s-app=kube-dns
utilities       deployment.apps/netshoot-deployment        1/1     1            1           84m    netshoot     nicolaka/netshoot                                                                                                         app=netshoot

NAMESPACE       NAME                                                  DESIRED   CURRENT   READY   AGE    CONTAINERS   IMAGES                                                                                                                    SELECTOR
ai-app          replicaset.apps/agent-deployment-558dcbcf7d           1         1         1       142m   agent        migara/agent-app:latest                                                                                                   app=agent,pod-template-hash=558dcbcf7d
ai-app          replicaset.apps/ui-deployment-5457f4d4d4              1         1         1       142m   ui           migara/ui-app:latest                                                                                                      app=ui,pod-template-hash=5457f4d4d4
ingress-nginx   replicaset.apps/ingress-nginx-controller-74dbc4858c   1         1         1       143m   controller   registry.k8s.io/ingress-nginx/controller:v1.8.1@sha256:e5c4824e7375fcf2a393e1c03c293b69759af37a9ca6abdb91b13d78a93da8bd   app.kubernetes.io/component=controller,app.kubernetes.io/instance=ingress-nginx,app.kubernetes.io/name=ingress-nginx,pod-template-hash=74dbc4858c
kube-system     replicaset.apps/coredns-789f8477df                    2         2         2       35h    coredns      602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/coredns:v1.11.3-eksbuild.1                                               eks.amazonaws.com/component=coredns,k8s-app=kube-dns,pod-template-hash=789f8477df
utilities       replicaset.apps/netshoot-deployment-7655b866d4        1         1         1       84m    netshoot     nicolaka/netshoot                                                                                                         app=netshoot,pod-template-hash=7655b866d4
Name:             agent-deployment-558dcbcf7d-rxc6m
Namespace:        ai-app
Priority:         0
Service Account:  eks-pods-sa
Node:             ip-10-104-128-124.ec2.internal/10.104.128.124
Start Time:       Fri, 11 Oct 2024 00:20:23 -0400
Labels:           app=agent
                  paloaltonetworks.com/trafficobject=1
                  pod-template-hash=558dcbcf7d
Annotations:      <none>
Status:           Running
IP:               10.104.128.98
IPs:
  IP:           10.104.128.98
Controlled By:  ReplicaSet/agent-deployment-558dcbcf7d
Containers:
  agent:
    Container ID:   containerd://b05948a65bf7f1c13bf7d22e920024ae49f6b5f13cbdf5162f2231b01164f28d
    Image:          migara/agent-app:latest
    Image ID:       docker.io/migara/agent-app@sha256:8caa61e4f8c13cea10ee3f2e0a07c041d4519afbaa7498cd096088f5daaf2fe5
    Port:           3001/TCP
    Host Port:      0/TCP
    State:          Running
      Started:      Fri, 11 Oct 2024 00:20:24 -0400
    Ready:          True
    Restart Count:  0
    Environment:
      AWS_STS_REGIONAL_ENDPOINTS:   regional
      AWS_DEFAULT_REGION:           us-east-1
      AWS_REGION:                   us-east-1
      AWS_ROLE_ARN:                 arn:aws:iam::367521625516:role/n6oy2vvr-eks-pod-role
      AWS_WEB_IDENTITY_TOKEN_FILE:  /var/run/secrets/eks.amazonaws.com/serviceaccount/token
    Mounts:
      /var/run/secrets/eks.amazonaws.com/serviceaccount from aws-iam-token (ro)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-s2r5s (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  aws-iam-token:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  86400
  kube-api-access-s2r5s:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              <none>
Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:                      <none>


Name:             ui-deployment-5457f4d4d4-tkfmq
Namespace:        ai-app
Priority:         0
Service Account:  default
Node:             ip-10-104-0-216.ec2.internal/10.104.0.216
Start Time:       Fri, 11 Oct 2024 00:20:23 -0400
Labels:           app=ui
                  paloaltonetworks.com/trafficobject=1
                  pod-template-hash=5457f4d4d4
Annotations:      <none>
Status:           Running
IP:               10.104.0.116
IPs:
  IP:           10.104.0.116
Controlled By:  ReplicaSet/ui-deployment-5457f4d4d4
Containers:
  ui:
    Container ID:   containerd://83af9d6a6e3d794c6c4748920ce797d1d5f526a0424d05687886bc3e45885f18
    Image:          migara/ui-app:latest
    Image ID:       docker.io/migara/ui-app@sha256:b7fcb5bd10bd616d71795e7a013340577af65062743875bb14c3d9e5c8d3325c
    Port:           3000/TCP
    Host Port:      0/TCP
    State:          Running
      Started:      Fri, 11 Oct 2024 00:20:24 -0400
    Ready:          True
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-4sdrd (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  kube-api-access-4sdrd:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              <none>
Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:                      <none>


Name:             ingress-nginx-controller-74dbc4858c-h7fjg
Namespace:        ingress-nginx
Priority:         0
Service Account:  ingress-nginx
Node:             ip-10-104-0-216.ec2.internal/10.104.0.216
Start Time:       Fri, 11 Oct 2024 00:20:10 -0400
Labels:           app.kubernetes.io/component=controller
                  app.kubernetes.io/instance=ingress-nginx
                  app.kubernetes.io/managed-by=Helm
                  app.kubernetes.io/name=ingress-nginx
                  app.kubernetes.io/part-of=ingress-nginx
                  app.kubernetes.io/version=1.8.1
                  helm.sh/chart=ingress-nginx-4.7.1
                  pod-template-hash=74dbc4858c
Annotations:      <none>
Status:           Running
IP:               10.104.0.91
IPs:
  IP:           10.104.0.91
Controlled By:  ReplicaSet/ingress-nginx-controller-74dbc4858c
Containers:
  controller:
    Container ID:  containerd://8880ec068fca55a7f2eb18a4c13ff843050ba720d2fdcb5745174c8ef39502a2
    Image:         registry.k8s.io/ingress-nginx/controller:v1.8.1@sha256:e5c4824e7375fcf2a393e1c03c293b69759af37a9ca6abdb91b13d78a93da8bd
    Image ID:      registry.k8s.io/ingress-nginx/controller@sha256:e5c4824e7375fcf2a393e1c03c293b69759af37a9ca6abdb91b13d78a93da8bd
    Ports:         80/TCP, 443/TCP, 8443/TCP
    Host Ports:    0/TCP, 0/TCP, 0/TCP
    Args:
      /nginx-ingress-controller
      --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
      --election-id=ingress-nginx-leader
      --controller-class=k8s.io/ingress-nginx
      --ingress-class=nginx
      --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
      --validating-webhook=:8443
      --validating-webhook-certificate=/usr/local/certificates/cert
      --validating-webhook-key=/usr/local/certificates/key
    State:          Running
      Started:      Fri, 11 Oct 2024 00:20:11 -0400
    Ready:          True
    Restart Count:  0
    Requests:
      cpu:      100m
      memory:   90Mi
    Liveness:   http-get http://:10254/healthz delay=10s timeout=1s period=10s #success=1 #failure=5
    Readiness:  http-get http://:10254/healthz delay=10s timeout=1s period=10s #success=1 #failure=3
    Environment:
      POD_NAME:       ingress-nginx-controller-74dbc4858c-h7fjg (v1:metadata.name)
      POD_NAMESPACE:  ingress-nginx (v1:metadata.namespace)
      LD_PRELOAD:     /usr/local/lib/libmimalloc.so
    Mounts:
      /usr/local/certificates/ from webhook-cert (ro)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-qkpwm (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  webhook-cert:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  ingress-nginx-admission
    Optional:    false
  kube-api-access-qkpwm:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   Burstable
Node-Selectors:              kubernetes.io/os=linux
Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:                      <none>


Name:                 aws-node-hmvr2
Namespace:            kube-system
Priority:             2000001000
Priority Class Name:  system-node-critical
Service Account:      aws-node
Node:                 ip-10-104-128-124.ec2.internal/10.104.128.124
Start Time:           Wed, 09 Oct 2024 15:37:11 -0400
Labels:               app.kubernetes.io/instance=aws-vpc-cni
                      app.kubernetes.io/name=aws-node
                      controller-revision-hash=7f748678d7
                      k8s-app=aws-node
                      pod-template-generation=2
Annotations:          <none>
Status:               Running
IP:                   10.104.128.124
IPs:
  IP:           10.104.128.124
Controlled By:  DaemonSet/aws-node
Init Containers:
  aws-vpc-cni-init:
    Container ID:   containerd://0cb8f0901974b7dca2a1919fc2bd02aebee1381db89764776e069b0f4fd517ba
    Image:          602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon-k8s-cni-init:v1.18.3-eksbuild.2
    Image ID:       sha256:addf38b09e5099344c33a451c35f4ae26b321549f05aa62c50b4e74fed9c26a6
    Port:           <none>
    Host Port:      <none>
    State:          Terminated
      Reason:       Completed
      Exit Code:    0
      Started:      Wed, 09 Oct 2024 15:37:13 -0400
      Finished:     Wed, 09 Oct 2024 15:37:13 -0400
    Ready:          True
    Restart Count:  0
    Requests:
      cpu:  25m
    Environment:
      DISABLE_TCP_EARLY_DEMUX:  false
      ENABLE_IPv6:              false
    Mounts:
      /host/opt/cni/bin from cni-bin-dir (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-pp8sm (ro)
Containers:
  aws-node:
    Container ID:   containerd://6b21050cece9cf3fe07ce24530582a95beeeefa42a24d729bc5051eff6dd582c
    Image:          602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon-k8s-cni:v1.18.3-eksbuild.2
    Image ID:       sha256:f65b58751c202d60e13020ac144c608728fd2fcea406d6cafac1e755d5839673
    Port:           61678/TCP
    Host Port:      61678/TCP
    State:          Running
      Started:      Wed, 09 Oct 2024 15:37:13 -0400
    Ready:          True
    Restart Count:  0
    Requests:
      cpu:      25m
    Liveness:   exec [/app/grpc-health-probe -addr=:50051 -connect-timeout=5s -rpc-timeout=5s] delay=60s timeout=10s period=10s #success=1 #failure=3
    Readiness:  exec [/app/grpc-health-probe -addr=:50051 -connect-timeout=5s -rpc-timeout=5s] delay=1s timeout=10s period=10s #success=1 #failure=3
    Environment:
      ADDITIONAL_ENI_TAGS:                    {}
      ANNOTATE_POD_IP:                        false
      AWS_VPC_CNI_NODE_PORT_SUPPORT:          true
      AWS_VPC_ENI_MTU:                        9001
      AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG:     false
      AWS_VPC_K8S_CNI_EXTERNALSNAT:           false
      AWS_VPC_K8S_CNI_LOGLEVEL:               DEBUG
      AWS_VPC_K8S_CNI_LOG_FILE:               /host/var/log/aws-routed-eni/ipamd.log
      AWS_VPC_K8S_CNI_RANDOMIZESNAT:          prng
      AWS_VPC_K8S_CNI_VETHPREFIX:             eni
      AWS_VPC_K8S_PLUGIN_LOG_FILE:            /var/log/aws-routed-eni/plugin.log
      AWS_VPC_K8S_PLUGIN_LOG_LEVEL:           DEBUG
      CLUSTER_ENDPOINT:                       https://260A3F90DADA104761D41ED5654BD337.gr7.us-east-1.eks.amazonaws.com
      CLUSTER_NAME:                           n6oy2vvr-K8s
      DISABLE_INTROSPECTION:                  false
      DISABLE_METRICS:                        false
      DISABLE_NETWORK_RESOURCE_PROVISIONING:  false
      ENABLE_IPv4:                            true
      ENABLE_IPv6:                            false
      ENABLE_POD_ENI:                         false
      ENABLE_PREFIX_DELEGATION:               false
      ENABLE_SUBNET_DISCOVERY:                true
      NETWORK_POLICY_ENFORCING_MODE:          standard
      VPC_CNI_VERSION:                        v1.18.3
      VPC_ID:                                 vpc-0eeb81c2d824cec68
      WARM_ENI_TARGET:                        1
      WARM_PREFIX_TARGET:                     1
      MY_NODE_NAME:                            (v1:spec.nodeName)
      MY_POD_NAME:                            aws-node-hmvr2 (v1:metadata.name)
    Mounts:
      /host/etc/cni/net.d from cni-net-dir (rw)
      /host/opt/cni/bin from cni-bin-dir (rw)
      /host/var/log/aws-routed-eni from log-dir (rw)
      /run/xtables.lock from xtables-lock (rw)
      /var/run/aws-node from run-dir (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-pp8sm (ro)
  aws-eks-nodeagent:
    Container ID:  containerd://71fa90a97459fb4c33d7c945e12e7150a4ee959c64a5c61ad1deefa2e678d76c
    Image:         602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.2-eksbuild.2
    Image ID:      602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-network-policy-agent@sha256:9744cc538f8f7afa925ada8afb4b32f6c9c7fb225383978c8f2701df1220bb9f
    Port:          <none>
    Host Port:     <none>
    Args:
      --enable-ipv6=false
      --enable-network-policy=false
      --enable-cloudwatch-logs=false
      --enable-policy-event-logs=false
      --log-file=/var/log/aws-routed-eni/network-policy-agent.log
      --metrics-bind-addr=:8162
      --health-probe-bind-addr=:8163
      --conntrack-cache-cleanup-period=300
    State:          Running
      Started:      Wed, 09 Oct 2024 15:37:14 -0400
    Ready:          True
    Restart Count:  0
    Requests:
      cpu:  25m
    Environment:
      MY_NODE_NAME:   (v1:spec.nodeName)
    Mounts:
      /host/opt/cni/bin from cni-bin-dir (rw)
      /sys/fs/bpf from bpf-pin-path (rw)
      /var/log/aws-routed-eni from log-dir (rw)
      /var/run/aws-node from run-dir (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-pp8sm (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  bpf-pin-path:
    Type:          HostPath (bare host directory volume)
    Path:          /sys/fs/bpf
    HostPathType:  
  cni-bin-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /opt/cni/bin
    HostPathType:  
  cni-net-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /etc/cni/net.d
    HostPathType:  
  log-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /var/log/aws-routed-eni
    HostPathType:  DirectoryOrCreate
  run-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /var/run/aws-node
    HostPathType:  DirectoryOrCreate
  xtables-lock:
    Type:          HostPath (bare host directory volume)
    Path:          /run/xtables.lock
    HostPathType:  FileOrCreate
  kube-api-access-pp8sm:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   Burstable
Node-Selectors:              <none>
Tolerations:                 op=Exists
                             node.kubernetes.io/disk-pressure:NoSchedule op=Exists
                             node.kubernetes.io/memory-pressure:NoSchedule op=Exists
                             node.kubernetes.io/network-unavailable:NoSchedule op=Exists
                             node.kubernetes.io/not-ready:NoExecute op=Exists
                             node.kubernetes.io/pid-pressure:NoSchedule op=Exists
                             node.kubernetes.io/unreachable:NoExecute op=Exists
                             node.kubernetes.io/unschedulable:NoSchedule op=Exists
Events:                      <none>


Name:                 aws-node-ptpj4
Namespace:            kube-system
Priority:             2000001000
Priority Class Name:  system-node-critical
Service Account:      aws-node
Node:                 ip-10-104-0-216.ec2.internal/10.104.0.216
Start Time:           Wed, 09 Oct 2024 15:37:16 -0400
Labels:               app.kubernetes.io/instance=aws-vpc-cni
                      app.kubernetes.io/name=aws-node
                      controller-revision-hash=7f748678d7
                      k8s-app=aws-node
                      pod-template-generation=2
Annotations:          <none>
Status:               Running
IP:                   10.104.0.216
IPs:
  IP:           10.104.0.216
Controlled By:  DaemonSet/aws-node
Init Containers:
  aws-vpc-cni-init:
    Container ID:   containerd://ea51c3f8d18e152567d5d3b910718afa2ddee7968e6e498907fab6529c70c52f
    Image:          602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon-k8s-cni-init:v1.18.3-eksbuild.2
    Image ID:       sha256:addf38b09e5099344c33a451c35f4ae26b321549f05aa62c50b4e74fed9c26a6
    Port:           <none>
    Host Port:      <none>
    State:          Terminated
      Reason:       Completed
      Exit Code:    0
      Started:      Wed, 09 Oct 2024 15:37:16 -0400
      Finished:     Wed, 09 Oct 2024 15:37:16 -0400
    Ready:          True
    Restart Count:  0
    Requests:
      cpu:  25m
    Environment:
      DISABLE_TCP_EARLY_DEMUX:  false
      ENABLE_IPv6:              false
    Mounts:
      /host/opt/cni/bin from cni-bin-dir (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-lh4w6 (ro)
Containers:
  aws-node:
    Container ID:   containerd://74336e97760aa93f3a2083d62c6da61632ccda63c1370134fc57532373c59f5d
    Image:          602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon-k8s-cni:v1.18.3-eksbuild.2
    Image ID:       sha256:f65b58751c202d60e13020ac144c608728fd2fcea406d6cafac1e755d5839673
    Port:           61678/TCP
    Host Port:      61678/TCP
    State:          Running
      Started:      Wed, 09 Oct 2024 15:37:17 -0400
    Ready:          True
    Restart Count:  0
    Requests:
      cpu:      25m
    Liveness:   exec [/app/grpc-health-probe -addr=:50051 -connect-timeout=5s -rpc-timeout=5s] delay=60s timeout=10s period=10s #success=1 #failure=3
    Readiness:  exec [/app/grpc-health-probe -addr=:50051 -connect-timeout=5s -rpc-timeout=5s] delay=1s timeout=10s period=10s #success=1 #failure=3
    Environment:
      ADDITIONAL_ENI_TAGS:                    {}
      ANNOTATE_POD_IP:                        false
      AWS_VPC_CNI_NODE_PORT_SUPPORT:          true
      AWS_VPC_ENI_MTU:                        9001
      AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG:     false
      AWS_VPC_K8S_CNI_EXTERNALSNAT:           false
      AWS_VPC_K8S_CNI_LOGLEVEL:               DEBUG
      AWS_VPC_K8S_CNI_LOG_FILE:               /host/var/log/aws-routed-eni/ipamd.log
      AWS_VPC_K8S_CNI_RANDOMIZESNAT:          prng
      AWS_VPC_K8S_CNI_VETHPREFIX:             eni
      AWS_VPC_K8S_PLUGIN_LOG_FILE:            /var/log/aws-routed-eni/plugin.log
      AWS_VPC_K8S_PLUGIN_LOG_LEVEL:           DEBUG
      CLUSTER_ENDPOINT:                       https://260A3F90DADA104761D41ED5654BD337.gr7.us-east-1.eks.amazonaws.com
      CLUSTER_NAME:                           n6oy2vvr-K8s
      DISABLE_INTROSPECTION:                  false
      DISABLE_METRICS:                        false
      DISABLE_NETWORK_RESOURCE_PROVISIONING:  false
      ENABLE_IPv4:                            true
      ENABLE_IPv6:                            false
      ENABLE_POD_ENI:                         false
      ENABLE_PREFIX_DELEGATION:               false
      ENABLE_SUBNET_DISCOVERY:                true
      NETWORK_POLICY_ENFORCING_MODE:          standard
      VPC_CNI_VERSION:                        v1.18.3
      VPC_ID:                                 vpc-0eeb81c2d824cec68
      WARM_ENI_TARGET:                        1
      WARM_PREFIX_TARGET:                     1
      MY_NODE_NAME:                            (v1:spec.nodeName)
      MY_POD_NAME:                            aws-node-ptpj4 (v1:metadata.name)
    Mounts:
      /host/etc/cni/net.d from cni-net-dir (rw)
      /host/opt/cni/bin from cni-bin-dir (rw)
      /host/var/log/aws-routed-eni from log-dir (rw)
      /run/xtables.lock from xtables-lock (rw)
      /var/run/aws-node from run-dir (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-lh4w6 (ro)
  aws-eks-nodeagent:
    Container ID:  containerd://546ba85d7014cf1eba4a45fd577de95ec6f140e74c1fb1bc71b6036ec30b87b2
    Image:         602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.2-eksbuild.2
    Image ID:      602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-network-policy-agent@sha256:9744cc538f8f7afa925ada8afb4b32f6c9c7fb225383978c8f2701df1220bb9f
    Port:          <none>
    Host Port:     <none>
    Args:
      --enable-ipv6=false
      --enable-network-policy=false
      --enable-cloudwatch-logs=false
      --enable-policy-event-logs=false
      --log-file=/var/log/aws-routed-eni/network-policy-agent.log
      --metrics-bind-addr=:8162
      --health-probe-bind-addr=:8163
      --conntrack-cache-cleanup-period=300
    State:          Running
      Started:      Wed, 09 Oct 2024 15:37:17 -0400
    Ready:          True
    Restart Count:  0
    Requests:
      cpu:  25m
    Environment:
      MY_NODE_NAME:   (v1:spec.nodeName)
    Mounts:
      /host/opt/cni/bin from cni-bin-dir (rw)
      /sys/fs/bpf from bpf-pin-path (rw)
      /var/log/aws-routed-eni from log-dir (rw)
      /var/run/aws-node from run-dir (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-lh4w6 (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  bpf-pin-path:
    Type:          HostPath (bare host directory volume)
    Path:          /sys/fs/bpf
    HostPathType:  
  cni-bin-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /opt/cni/bin
    HostPathType:  
  cni-net-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /etc/cni/net.d
    HostPathType:  
  log-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /var/log/aws-routed-eni
    HostPathType:  DirectoryOrCreate
  run-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /var/run/aws-node
    HostPathType:  DirectoryOrCreate
  xtables-lock:
    Type:          HostPath (bare host directory volume)
    Path:          /run/xtables.lock
    HostPathType:  FileOrCreate
  kube-api-access-lh4w6:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   Burstable
Node-Selectors:              <none>
Tolerations:                 op=Exists
                             node.kubernetes.io/disk-pressure:NoSchedule op=Exists
                             node.kubernetes.io/memory-pressure:NoSchedule op=Exists
                             node.kubernetes.io/network-unavailable:NoSchedule op=Exists
                             node.kubernetes.io/not-ready:NoExecute op=Exists
                             node.kubernetes.io/pid-pressure:NoSchedule op=Exists
                             node.kubernetes.io/unreachable:NoExecute op=Exists
                             node.kubernetes.io/unschedulable:NoSchedule op=Exists
Events:                      <none>


Name:                 coredns-789f8477df-gvh82
Namespace:            kube-system
Priority:             2000000000
Priority Class Name:  system-cluster-critical
Service Account:      coredns
Node:                 ip-10-104-128-124.ec2.internal/10.104.128.124
Start Time:           Wed, 09 Oct 2024 15:36:53 -0400
Labels:               eks.amazonaws.com/component=coredns
                      k8s-app=kube-dns
                      pod-template-hash=789f8477df
Annotations:          <none>
Status:               Running
IP:                   10.104.128.202
IPs:
  IP:           10.104.128.202
Controlled By:  ReplicaSet/coredns-789f8477df
Containers:
  coredns:
    Container ID:  containerd://1e0eb26efe3ae27720227581fa6bdb017e5673251169007c0c0948d721af5d3a
    Image:         602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/coredns:v1.11.3-eksbuild.1
    Image ID:      602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/coredns@sha256:5a047e99333089d71ed61efa3aba76b4bc2bc581c801d3a661d1109d90c3e1e6
    Ports:         53/UDP, 53/TCP, 9153/TCP
    Host Ports:    0/UDP, 0/TCP, 0/TCP
    Args:
      -conf
      /etc/coredns/Corefile
    State:          Running
      Started:      Wed, 09 Oct 2024 15:36:56 -0400
    Ready:          True
    Restart Count:  0
    Limits:
      memory:  170Mi
    Requests:
      cpu:        100m
      memory:     70Mi
    Liveness:     http-get http://:8080/health delay=60s timeout=5s period=10s #success=1 #failure=5
    Readiness:    http-get http://:8181/ready delay=0s timeout=1s period=10s #success=1 #failure=3
    Environment:  <none>
    Mounts:
      /etc/coredns from config-volume (ro)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-4tlkm (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  config-volume:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      coredns
    Optional:  false
  kube-api-access-4tlkm:
    Type:                     Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:   3607
    ConfigMapName:            kube-root-ca.crt
    ConfigMapOptional:        <nil>
    DownwardAPI:              true
QoS Class:                    Burstable
Node-Selectors:               <none>
Tolerations:                  CriticalAddonsOnly op=Exists
                              node-role.kubernetes.io/control-plane:NoSchedule
                              node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                              node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Topology Spread Constraints:  topology.kubernetes.io/zone:ScheduleAnyway when max skew 1 is exceeded for selector k8s-app=kube-dns
Events:                       <none>


Name:                 coredns-789f8477df-vx7f5
Namespace:            kube-system
Priority:             2000000000
Priority Class Name:  system-cluster-critical
Service Account:      coredns
Node:                 ip-10-104-128-124.ec2.internal/10.104.128.124
Start Time:           Wed, 09 Oct 2024 15:36:53 -0400
Labels:               eks.amazonaws.com/component=coredns
                      k8s-app=kube-dns
                      pod-template-hash=789f8477df
Annotations:          <none>
Status:               Running
IP:                   10.104.128.249
IPs:
  IP:           10.104.128.249
Controlled By:  ReplicaSet/coredns-789f8477df
Containers:
  coredns:
    Container ID:  containerd://3b3e376de9370dcc53753832fe1809da8d8e166a04ea36b1fc19f129e2ac93af
    Image:         602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/coredns:v1.11.3-eksbuild.1
    Image ID:      602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/coredns@sha256:5a047e99333089d71ed61efa3aba76b4bc2bc581c801d3a661d1109d90c3e1e6
    Ports:         53/UDP, 53/TCP, 9153/TCP
    Host Ports:    0/UDP, 0/TCP, 0/TCP
    Args:
      -conf
      /etc/coredns/Corefile
    State:          Running
      Started:      Wed, 09 Oct 2024 15:36:56 -0400
    Ready:          True
    Restart Count:  0
    Limits:
      memory:  170Mi
    Requests:
      cpu:        100m
      memory:     70Mi
    Liveness:     http-get http://:8080/health delay=60s timeout=5s period=10s #success=1 #failure=5
    Readiness:    http-get http://:8181/ready delay=0s timeout=1s period=10s #success=1 #failure=3
    Environment:  <none>
    Mounts:
      /etc/coredns from config-volume (ro)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-h5kvz (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  config-volume:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      coredns
    Optional:  false
  kube-api-access-h5kvz:
    Type:                     Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:   3607
    ConfigMapName:            kube-root-ca.crt
    ConfigMapOptional:        <nil>
    DownwardAPI:              true
QoS Class:                    Burstable
Node-Selectors:               <none>
Tolerations:                  CriticalAddonsOnly op=Exists
                              node-role.kubernetes.io/control-plane:NoSchedule
                              node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                              node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Topology Spread Constraints:  topology.kubernetes.io/zone:ScheduleAnyway when max skew 1 is exceeded for selector k8s-app=kube-dns
Events:                       <none>


Name:                 eks-pod-identity-agent-cvpvw
Namespace:            kube-system
Priority:             2000001000
Priority Class Name:  system-node-critical
Service Account:      default
Node:                 ip-10-104-0-216.ec2.internal/10.104.0.216
Start Time:           Wed, 09 Oct 2024 15:37:11 -0400
Labels:               app.kubernetes.io/instance=eks-pod-identity-agent
                      app.kubernetes.io/name=eks-pod-identity-agent
                      controller-revision-hash=bbfd9c4b5
                      pod-template-generation=1
Annotations:          <none>
Status:               Running
IP:                   10.104.0.216
IPs:
  IP:           10.104.0.216
Controlled By:  DaemonSet/eks-pod-identity-agent
Init Containers:
  eks-pod-identity-agent-init:
    Container ID:  containerd://144a320c9499c95237e5846fd7df993089612b270394ed05a8d0d4702eb648bb
    Image:         602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
    Image ID:      602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent@sha256:832ad48c9872fdcae32f2ea369d9874fa34f271b4dbc58ce04393c757befa462
    Port:          <none>
    Host Port:     <none>
    Command:
      /go-runner
      /eks-pod-identity-agent
      initialize
    State:          Terminated
      Reason:       Completed
      Exit Code:    0
      Started:      Wed, 09 Oct 2024 15:37:12 -0400
      Finished:     Wed, 09 Oct 2024 15:37:12 -0400
    Ready:          True
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-ngm6p (ro)
Containers:
  eks-pod-identity-agent:
    Container ID:  containerd://1c45ee189045aafb3dae868a1c5a3a2ae8651f3812cd6d144cb6d7881a0fa47a
    Image:         602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
    Image ID:      602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent@sha256:832ad48c9872fdcae32f2ea369d9874fa34f271b4dbc58ce04393c757befa462
    Ports:         80/TCP, 2703/TCP
    Host Ports:    80/TCP, 2703/TCP
    Command:
      /go-runner
      /eks-pod-identity-agent
      server
    Args:
      --port
      80
      --cluster-name
      n6oy2vvr-K8s
      --probe-port
      2703
    State:          Running
      Started:      Wed, 09 Oct 2024 15:37:13 -0400
    Ready:          True
    Restart Count:  0
    Liveness:       http-get http://localhost:probes-port/healthz delay=30s timeout=10s period=10s #success=1 #failure=3
    Readiness:      http-get http://localhost:probes-port/readyz delay=1s timeout=10s period=10s #success=1 #failure=30
    Environment:
      AWS_REGION:  us-east-1
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-ngm6p (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  kube-api-access-ngm6p:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              <none>
Tolerations:                 op=Exists
                             node.kubernetes.io/disk-pressure:NoSchedule op=Exists
                             node.kubernetes.io/memory-pressure:NoSchedule op=Exists
                             node.kubernetes.io/network-unavailable:NoSchedule op=Exists
                             node.kubernetes.io/not-ready:NoExecute op=Exists
                             node.kubernetes.io/pid-pressure:NoSchedule op=Exists
                             node.kubernetes.io/unreachable:NoExecute op=Exists
                             node.kubernetes.io/unschedulable:NoSchedule op=Exists
Events:                      <none>


Name:                 eks-pod-identity-agent-sp7ft
Namespace:            kube-system
Priority:             2000001000
Priority Class Name:  system-node-critical
Service Account:      default
Node:                 ip-10-104-128-124.ec2.internal/10.104.128.124
Start Time:           Wed, 09 Oct 2024 15:37:11 -0400
Labels:               app.kubernetes.io/instance=eks-pod-identity-agent
                      app.kubernetes.io/name=eks-pod-identity-agent
                      controller-revision-hash=bbfd9c4b5
                      pod-template-generation=1
Annotations:          <none>
Status:               Running
IP:                   10.104.128.124
IPs:
  IP:           10.104.128.124
Controlled By:  DaemonSet/eks-pod-identity-agent
Init Containers:
  eks-pod-identity-agent-init:
    Container ID:  containerd://469acea4c79ac3625c9515d5a13d2bb9cd851e4a115736cd5222778086091345
    Image:         602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
    Image ID:      602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent@sha256:832ad48c9872fdcae32f2ea369d9874fa34f271b4dbc58ce04393c757befa462
    Port:          <none>
    Host Port:     <none>
    Command:
      /go-runner
      /eks-pod-identity-agent
      initialize
    State:          Terminated
      Reason:       Completed
      Exit Code:    0
      Started:      Wed, 09 Oct 2024 15:37:12 -0400
      Finished:     Wed, 09 Oct 2024 15:37:12 -0400
    Ready:          True
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-gpbsg (ro)
Containers:
  eks-pod-identity-agent:
    Container ID:  containerd://5e01c4307be97eb852ad4cd7e215de657f6dcc0f9097fb1ac34342fa9946059c
    Image:         602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
    Image ID:      602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent@sha256:832ad48c9872fdcae32f2ea369d9874fa34f271b4dbc58ce04393c757befa462
    Ports:         80/TCP, 2703/TCP
    Host Ports:    80/TCP, 2703/TCP
    Command:
      /go-runner
      /eks-pod-identity-agent
      server
    Args:
      --port
      80
      --cluster-name
      n6oy2vvr-K8s
      --probe-port
      2703
    State:          Running
      Started:      Wed, 09 Oct 2024 15:37:14 -0400
    Ready:          True
    Restart Count:  0
    Liveness:       http-get http://localhost:probes-port/healthz delay=30s timeout=10s period=10s #success=1 #failure=3
    Readiness:      http-get http://localhost:probes-port/readyz delay=1s timeout=10s period=10s #success=1 #failure=30
    Environment:
      AWS_REGION:  us-east-1
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-gpbsg (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  kube-api-access-gpbsg:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              <none>
Tolerations:                 op=Exists
                             node.kubernetes.io/disk-pressure:NoSchedule op=Exists
                             node.kubernetes.io/memory-pressure:NoSchedule op=Exists
                             node.kubernetes.io/network-unavailable:NoSchedule op=Exists
                             node.kubernetes.io/not-ready:NoExecute op=Exists
                             node.kubernetes.io/pid-pressure:NoSchedule op=Exists
                             node.kubernetes.io/unreachable:NoExecute op=Exists
                             node.kubernetes.io/unschedulable:NoSchedule op=Exists
Events:                      <none>


Name:                 kube-proxy-7bnxs
Namespace:            kube-system
Priority:             2000001000
Priority Class Name:  system-node-critical
Service Account:      kube-proxy
Node:                 ip-10-104-0-216.ec2.internal/10.104.0.216
Start Time:           Wed, 09 Oct 2024 15:36:43 -0400
Labels:               controller-revision-hash=6cf9ccc4bc
                      k8s-app=kube-proxy
                      pod-template-generation=1
Annotations:          <none>
Status:               Running
IP:                   10.104.0.216
IPs:
  IP:           10.104.0.216
Controlled By:  DaemonSet/kube-proxy
Containers:
  kube-proxy:
    Container ID:  containerd://7f2e191355cd7b1de82b82bcf4447dd375301333e2ff717de3776bea469af2b3
    Image:         602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/kube-proxy:v1.31.0-minimal-eksbuild.2
    Image ID:      sha256:90cb402e7ebc61b5e0f195d0f212b4bc4b1d6b21ecb2613b6b26e2e9c9d09e0a
    Port:          <none>
    Host Port:     <none>
    Command:
      kube-proxy
      --v=2
      --config=/var/lib/kube-proxy-config/config
      --hostname-override=$(NODE_NAME)
    State:          Running
      Started:      Wed, 09 Oct 2024 15:36:47 -0400
    Ready:          True
    Restart Count:  0
    Requests:
      cpu:  100m
    Environment:
      NODE_NAME:   (v1:spec.nodeName)
    Mounts:
      /lib/modules from lib-modules (ro)
      /run/xtables.lock from xtables-lock (rw)
      /var/lib/kube-proxy-config/ from config (rw)
      /var/lib/kube-proxy/ from kubeconfig (rw)
      /var/log from varlog (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-f2npq (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  varlog:
    Type:          HostPath (bare host directory volume)
    Path:          /var/log
    HostPathType:  
  xtables-lock:
    Type:          HostPath (bare host directory volume)
    Path:          /run/xtables.lock
    HostPathType:  FileOrCreate
  lib-modules:
    Type:          HostPath (bare host directory volume)
    Path:          /lib/modules
    HostPathType:  
  kubeconfig:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      kube-proxy
    Optional:  false
  config:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      kube-proxy-config
    Optional:  false
  kube-api-access-f2npq:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   Burstable
Node-Selectors:              <none>
Tolerations:                 op=Exists
                             node.kubernetes.io/disk-pressure:NoSchedule op=Exists
                             node.kubernetes.io/memory-pressure:NoSchedule op=Exists
                             node.kubernetes.io/network-unavailable:NoSchedule op=Exists
                             node.kubernetes.io/not-ready:NoExecute op=Exists
                             node.kubernetes.io/pid-pressure:NoSchedule op=Exists
                             node.kubernetes.io/unreachable:NoExecute op=Exists
                             node.kubernetes.io/unschedulable:NoSchedule op=Exists
Events:                      <none>


Name:                 kube-proxy-hdxt7
Namespace:            kube-system
Priority:             2000001000
Priority Class Name:  system-node-critical
Service Account:      kube-proxy
Node:                 ip-10-104-128-124.ec2.internal/10.104.128.124
Start Time:           Wed, 09 Oct 2024 15:36:37 -0400
Labels:               controller-revision-hash=6cf9ccc4bc
                      k8s-app=kube-proxy
                      pod-template-generation=1
Annotations:          <none>
Status:               Running
IP:                   10.104.128.124
IPs:
  IP:           10.104.128.124
Controlled By:  DaemonSet/kube-proxy
Containers:
  kube-proxy:
    Container ID:  containerd://11a50c7b179fa65d980ae467a0aa9502aa95987a28d7f68be775310ef27a690a
    Image:         602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/kube-proxy:v1.31.0-minimal-eksbuild.2
    Image ID:      sha256:90cb402e7ebc61b5e0f195d0f212b4bc4b1d6b21ecb2613b6b26e2e9c9d09e0a
    Port:          <none>
    Host Port:     <none>
    Command:
      kube-proxy
      --v=2
      --config=/var/lib/kube-proxy-config/config
      --hostname-override=$(NODE_NAME)
    State:          Running
      Started:      Wed, 09 Oct 2024 15:36:45 -0400
    Ready:          True
    Restart Count:  0
    Requests:
      cpu:  100m
    Environment:
      NODE_NAME:   (v1:spec.nodeName)
    Mounts:
      /lib/modules from lib-modules (ro)
      /run/xtables.lock from xtables-lock (rw)
      /var/lib/kube-proxy-config/ from config (rw)
      /var/lib/kube-proxy/ from kubeconfig (rw)
      /var/log from varlog (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-vwrvz (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  varlog:
    Type:          HostPath (bare host directory volume)
    Path:          /var/log
    HostPathType:  
  xtables-lock:
    Type:          HostPath (bare host directory volume)
    Path:          /run/xtables.lock
    HostPathType:  FileOrCreate
  lib-modules:
    Type:          HostPath (bare host directory volume)
    Path:          /lib/modules
    HostPathType:  
  kubeconfig:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      kube-proxy
    Optional:  false
  config:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      kube-proxy-config
    Optional:  false
  kube-api-access-vwrvz:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   Burstable
Node-Selectors:              <none>
Tolerations:                 op=Exists
                             node.kubernetes.io/disk-pressure:NoSchedule op=Exists
                             node.kubernetes.io/memory-pressure:NoSchedule op=Exists
                             node.kubernetes.io/network-unavailable:NoSchedule op=Exists
                             node.kubernetes.io/not-ready:NoExecute op=Exists
                             node.kubernetes.io/pid-pressure:NoSchedule op=Exists
                             node.kubernetes.io/unreachable:NoExecute op=Exists
                             node.kubernetes.io/unschedulable:NoSchedule op=Exists
Events:                      <none>


Name:                 pan-cni-l49hv
Namespace:            kube-system
Priority:             2000001000
Priority Class Name:  system-node-critical
Service Account:      pan-cni-sa
Node:                 ip-10-104-0-216.ec2.internal/10.104.0.216
Start Time:           Fri, 11 Oct 2024 00:20:03 -0400
Labels:               controller-revision-hash=6b9d67c684
                      k8s-app=pan-cni
                      pod-template-generation=1
Annotations:          paloaltonetworks.com/app: pan-cni
                      scheduler.alpha.kubernetes.io/critical-pod: 
Status:               Running
IP:                   10.104.0.216
IPs:
  IP:           10.104.0.216
Controlled By:  DaemonSet/pan-cni
Containers:
  install-pan-cni:
    Container ID:  containerd://4e2d17e05a0339e122bb404446f34a26cf413b5b1f2689e099ca1c85ea2b0120
    Image:         gcr.io/pan-cn-series/airs/pan-cni:4.0.0
    Image ID:      gcr.io/pan-cn-series/airs/pan-cni@sha256:724c998c3fdf52dce1ed9fac0cfb73111ee0ead72273fae74ee21f36f7972f56
    Port:          <none>
    Host Port:     <none>
    Command:
      /install-pan-cni.sh
      main
    State:          Running
      Started:      Fri, 11 Oct 2024 00:20:04 -0400
    Ready:          True
    Restart Count:  0
    Environment:
      CNI_NETWORK_CONFIG:  <set to the key 'cni_network_config' of config map 'pan-cni-config'>  Optional: false
      MY_POD_NAMESPACE:    kube-system (v1:metadata.namespace)
      MY_POD_NAME:         pan-cni-l49hv (v1:metadata.name)
    Mounts:
      /host/appinfo from appinfo (rw)
      /host/etc/cni/net.d from cni-net-dir (rw)
      /host/opt/cni/bin from cni-bin-dir (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-d5xvd (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  cni-bin-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /opt/cni/bin
    HostPathType:  
  cni-net-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /etc/cni/net.d
    HostPathType:  
  appinfo:
    Type:          HostPath (bare host directory volume)
    Path:          /var/log/pan-appinfo
    HostPathType:  DirectoryOrCreate
  kube-api-access-d5xvd:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              beta.kubernetes.io/os=linux
Tolerations:                 :NoSchedule op=Exists
                             :NoExecute op=Exists
                             CriticalAddonsOnly op=Exists
                             node.kubernetes.io/disk-pressure:NoSchedule op=Exists
                             node.kubernetes.io/memory-pressure:NoSchedule op=Exists
                             node.kubernetes.io/network-unavailable:NoSchedule op=Exists
                             node.kubernetes.io/not-ready:NoExecute op=Exists
                             node.kubernetes.io/pid-pressure:NoSchedule op=Exists
                             node.kubernetes.io/unreachable:NoExecute op=Exists
                             node.kubernetes.io/unschedulable:NoSchedule op=Exists
Events:                      <none>


Name:                 pan-cni-rspdh
Namespace:            kube-system
Priority:             2000001000
Priority Class Name:  system-node-critical
Service Account:      pan-cni-sa
Node:                 ip-10-104-128-124.ec2.internal/10.104.128.124
Start Time:           Fri, 11 Oct 2024 00:20:03 -0400
Labels:               controller-revision-hash=6b9d67c684
                      k8s-app=pan-cni
                      pod-template-generation=1
Annotations:          paloaltonetworks.com/app: pan-cni
                      scheduler.alpha.kubernetes.io/critical-pod: 
Status:               Running
IP:                   10.104.128.124
IPs:
  IP:           10.104.128.124
Controlled By:  DaemonSet/pan-cni
Containers:
  install-pan-cni:
    Container ID:  containerd://930a316d2beb01d1142bc3696bb7d00ef93cbd7a67af9038b03260b0eef6dc36
    Image:         gcr.io/pan-cn-series/airs/pan-cni:4.0.0
    Image ID:      gcr.io/pan-cn-series/airs/pan-cni@sha256:724c998c3fdf52dce1ed9fac0cfb73111ee0ead72273fae74ee21f36f7972f56
    Port:          <none>
    Host Port:     <none>
    Command:
      /install-pan-cni.sh
      main
    State:          Running
      Started:      Fri, 11 Oct 2024 00:20:04 -0400
    Ready:          True
    Restart Count:  0
    Environment:
      CNI_NETWORK_CONFIG:  <set to the key 'cni_network_config' of config map 'pan-cni-config'>  Optional: false
      MY_POD_NAMESPACE:    kube-system (v1:metadata.namespace)
      MY_POD_NAME:         pan-cni-rspdh (v1:metadata.name)
    Mounts:
      /host/appinfo from appinfo (rw)
      /host/etc/cni/net.d from cni-net-dir (rw)
      /host/opt/cni/bin from cni-bin-dir (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-cg4hb (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  cni-bin-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /opt/cni/bin
    HostPathType:  
  cni-net-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /etc/cni/net.d
    HostPathType:  
  appinfo:
    Type:          HostPath (bare host directory volume)
    Path:          /var/log/pan-appinfo
    HostPathType:  DirectoryOrCreate
  kube-api-access-cg4hb:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              beta.kubernetes.io/os=linux
Tolerations:                 :NoSchedule op=Exists
                             :NoExecute op=Exists
                             CriticalAddonsOnly op=Exists
                             node.kubernetes.io/disk-pressure:NoSchedule op=Exists
                             node.kubernetes.io/memory-pressure:NoSchedule op=Exists
                             node.kubernetes.io/network-unavailable:NoSchedule op=Exists
                             node.kubernetes.io/not-ready:NoExecute op=Exists
                             node.kubernetes.io/pid-pressure:NoSchedule op=Exists
                             node.kubernetes.io/unreachable:NoExecute op=Exists
                             node.kubernetes.io/unschedulable:NoSchedule op=Exists
Events:                      <none>


Name:             netshoot-deployment-7655b866d4-7qdzs
Namespace:        utilities
Priority:         0
Service Account:  eks-pods-sa
Node:             ip-10-104-0-216.ec2.internal/10.104.0.216
Start Time:       Fri, 11 Oct 2024 01:19:18 -0400
Labels:           app=netshoot
                  paloaltonetworks.com/trafficobject=1
                  pod-template-hash=7655b866d4
Annotations:      <none>
Status:           Running
IP:               10.104.0.143
IPs:
  IP:           10.104.0.143
Controlled By:  ReplicaSet/netshoot-deployment-7655b866d4
Containers:
  netshoot:
    Container ID:  containerd://f35ecc1012d96cc9ea3b59d0ea57de3fb482c035b0b2c59c1ec77a138a28de72
    Image:         nicolaka/netshoot
    Image ID:      docker.io/nicolaka/netshoot@sha256:a20c2531bf35436ed3766cd6cfe89d352b050ccc4d7005ce6400adf97503da1b
    Port:          <none>
    Host Port:     <none>
    Command:
      /bin/sh
    Args:
      -c
      cp /custom-certs/* /usr/local/share/ca-certificates/
      update-ca-certificates
      echo "Custom certificates added"
      while true; do sleep 3600; done
      
    State:          Running
      Started:      Fri, 11 Oct 2024 01:19:19 -0400
    Ready:          True
    Restart Count:  0
    Environment:
      AWS_STS_REGIONAL_ENDPOINTS:   regional
      AWS_DEFAULT_REGION:           us-east-1
      AWS_REGION:                   us-east-1
      AWS_ROLE_ARN:                 arn:aws:iam::367521625516:role/n6oy2vvr-eks-pod-role
      AWS_WEB_IDENTITY_TOKEN_FILE:  /var/run/secrets/eks.amazonaws.com/serviceaccount/token
    Mounts:
      /custom-certs from custom-certs (ro)
      /var/run/secrets/eks.amazonaws.com/serviceaccount from aws-iam-token (ro)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-86gfg (ro)
Conditions:
  Type                        Status
  PodReadyToStartContainers   True 
  Initialized                 True 
  Ready                       True 
  ContainersReady             True 
  PodScheduled                True 
Volumes:
  aws-iam-token:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  86400
  custom-certs:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      custom-ca-certs
    Optional:  false
  kube-api-access-86gfg:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              <none>
Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:                      <none>


Name:                     agent-service
Namespace:                ai-app
Labels:                   app.kubernetes.io/managed-by=Helm
Annotations:              meta.helm.sh/release-name: ai-app
                          meta.helm.sh/release-namespace: default
Selector:                 app=agent
Type:                     ClusterIP
IP Family Policy:         SingleStack
IP Families:              IPv4
IP:                       172.20.212.15
IPs:                      172.20.212.15
Port:                     <unset>  80/TCP
TargetPort:               3001/TCP
Endpoints:                10.104.128.98:3001
Session Affinity:         None
Internal Traffic Policy:  Cluster
Events:                   <none>


Name:                     ui-service
Namespace:                ai-app
Labels:                   app.kubernetes.io/managed-by=Helm
Annotations:              meta.helm.sh/release-name: ai-app
                          meta.helm.sh/release-namespace: default
Selector:                 app=ui
Type:                     ClusterIP
IP Family Policy:         SingleStack
IP Families:              IPv4
IP:                       172.20.196.23
IPs:                      172.20.196.23
Port:                     <unset>  80/TCP
TargetPort:               3000/TCP
Endpoints:                10.104.0.116:3000
Session Affinity:         None
Internal Traffic Policy:  Cluster
Events:                   <none>


Name:                     kubernetes
Namespace:                default
Labels:                   component=apiserver
                          provider=kubernetes
Annotations:              <none>
Selector:                 <none>
Type:                     ClusterIP
IP Family Policy:         SingleStack
IP Families:              IPv4
IP:                       172.20.0.1
IPs:                      172.20.0.1
Port:                     https  443/TCP
TargetPort:               443/TCP
Endpoints:                10.104.0.178:443,10.104.128.106:443
Session Affinity:         None
Internal Traffic Policy:  Cluster
Events:                   <none>


Name:                     ingress-nginx-controller
Namespace:                ingress-nginx
Labels:                   app.kubernetes.io/component=controller
                          app.kubernetes.io/instance=ingress-nginx
                          app.kubernetes.io/managed-by=Helm
                          app.kubernetes.io/name=ingress-nginx
                          app.kubernetes.io/part-of=ingress-nginx
                          app.kubernetes.io/version=1.8.1
                          helm.sh/chart=ingress-nginx-4.7.1
Annotations:              meta.helm.sh/release-name: ingress-nginx
                          meta.helm.sh/release-namespace: ingress-nginx
                          service.beta.kubernetes.io/aws-load-balancer-subnets: subnet-042939e54a88bf6d0,subnet-0c8b880eb1a09a7bc
                          service.beta.kubernetes.io/aws-load-balancer-type: nlb
Selector:                 app.kubernetes.io/component=controller,app.kubernetes.io/instance=ingress-nginx,app.kubernetes.io/name=ingress-nginx
Type:                     LoadBalancer
IP Family Policy:         SingleStack
IP Families:              IPv4
IP:                       172.20.230.46
IPs:                      172.20.230.46
LoadBalancer Ingress:     a1b395e76e8ab433c838b2faae084ff2-2d8550f4cddebd62.elb.us-east-1.amazonaws.com
Port:                     http  80/TCP
TargetPort:               http/TCP
NodePort:                 http  31209/TCP
Endpoints:                10.104.0.91:80
Port:                     https  443/TCP
TargetPort:               https/TCP
NodePort:                 https  32175/TCP
Endpoints:                10.104.0.91:443
Session Affinity:         None
External Traffic Policy:  Cluster
Internal Traffic Policy:  Cluster
Events:                   <none>


Name:                     ingress-nginx-controller-admission
Namespace:                ingress-nginx
Labels:                   app.kubernetes.io/component=controller
                          app.kubernetes.io/instance=ingress-nginx
                          app.kubernetes.io/managed-by=Helm
                          app.kubernetes.io/name=ingress-nginx
                          app.kubernetes.io/part-of=ingress-nginx
                          app.kubernetes.io/version=1.8.1
                          helm.sh/chart=ingress-nginx-4.7.1
Annotations:              meta.helm.sh/release-name: ingress-nginx
                          meta.helm.sh/release-namespace: ingress-nginx
Selector:                 app.kubernetes.io/component=controller,app.kubernetes.io/instance=ingress-nginx,app.kubernetes.io/name=ingress-nginx
Type:                     ClusterIP
IP Family Policy:         SingleStack
IP Families:              IPv4
IP:                       172.20.181.224
IPs:                      172.20.181.224
Port:                     https-webhook  443/TCP
TargetPort:               webhook/TCP
Endpoints:                10.104.0.91:8443
Session Affinity:         None
Internal Traffic Policy:  Cluster
Events:                   <none>


Name:                     kube-dns
Namespace:                kube-system
Labels:                   eks.amazonaws.com/component=kube-dns
                          k8s-app=kube-dns
                          kubernetes.io/cluster-service=true
                          kubernetes.io/name=CoreDNS
Annotations:              prometheus.io/port: 9153
                          prometheus.io/scrape: true
Selector:                 k8s-app=kube-dns
Type:                     ClusterIP
IP Family Policy:         SingleStack
IP Families:              IPv4
IP:                       172.20.0.10
IPs:                      172.20.0.10
Port:                     dns  53/UDP
TargetPort:               53/UDP
Endpoints:                10.104.128.249:53,10.104.128.202:53
Port:                     dns-tcp  53/TCP
TargetPort:               53/TCP
Endpoints:                10.104.128.249:53,10.104.128.202:53
Port:                     metrics  9153/TCP
TargetPort:               9153/TCP
Endpoints:                10.104.128.249:9153,10.104.128.202:9153
Session Affinity:         None
Internal Traffic Policy:  Cluster
Events:                   <none>


Name:                     pan-ngfw-svc
Namespace:                kube-system
Labels:                   app=pan-ngfw-svc
                          app.kubernetes.io/managed-by=Helm
Annotations:              meta.helm.sh/release-name: ai-runtime-security
                          meta.helm.sh/release-namespace: kube-system
Selector:                 <none>
Type:                     ClusterIP
IP Family Policy:         SingleStack
IP Families:              IPv4
IP:                       172.20.222.196
IPs:                      172.20.222.196
Port:                     <unset>  6080/UDP
TargetPort:               6080/UDP
Endpoints:                10.111.0.72:6080,10.111.1.70:6080
Session Affinity:         None
Internal Traffic Policy:  Cluster
Events:                   <none>


Name:           aws-node
Selector:       k8s-app=aws-node
Node-Selector:  <none>
Labels:         app.kubernetes.io/instance=aws-vpc-cni
                app.kubernetes.io/managed-by=Helm
                app.kubernetes.io/name=aws-node
                app.kubernetes.io/version=v1.18.3
                helm.sh/chart=aws-vpc-cni-1.18.3
                k8s-app=aws-node
Annotations:    deprecated.daemonset.template.generation: 2
Desired Number of Nodes Scheduled: 2
Current Number of Nodes Scheduled: 2
Number of Nodes Scheduled with Up-to-date Pods: 2
Number of Nodes Scheduled with Available Pods: 2
Number of Nodes Misscheduled: 0
Pods Status:  2 Running / 0 Waiting / 0 Succeeded / 0 Failed
Pod Template:
  Labels:           app.kubernetes.io/instance=aws-vpc-cni
                    app.kubernetes.io/name=aws-node
                    k8s-app=aws-node
  Service Account:  aws-node
  Init Containers:
   aws-vpc-cni-init:
    Image:      602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon-k8s-cni-init:v1.18.3-eksbuild.2
    Port:       <none>
    Host Port:  <none>
    Requests:
      cpu:  25m
    Environment:
      DISABLE_TCP_EARLY_DEMUX:  false
      ENABLE_IPv6:              false
    Mounts:
      /host/opt/cni/bin from cni-bin-dir (rw)
  Containers:
   aws-node:
    Image:      602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon-k8s-cni:v1.18.3-eksbuild.2
    Port:       61678/TCP
    Host Port:  0/TCP
    Requests:
      cpu:      25m
    Liveness:   exec [/app/grpc-health-probe -addr=:50051 -connect-timeout=5s -rpc-timeout=5s] delay=60s timeout=10s period=10s #success=1 #failure=3
    Readiness:  exec [/app/grpc-health-probe -addr=:50051 -connect-timeout=5s -rpc-timeout=5s] delay=1s timeout=10s period=10s #success=1 #failure=3
    Environment:
      ADDITIONAL_ENI_TAGS:                    {}
      ANNOTATE_POD_IP:                        false
      AWS_VPC_CNI_NODE_PORT_SUPPORT:          true
      AWS_VPC_ENI_MTU:                        9001
      AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG:     false
      AWS_VPC_K8S_CNI_EXTERNALSNAT:           false
      AWS_VPC_K8S_CNI_LOGLEVEL:               DEBUG
      AWS_VPC_K8S_CNI_LOG_FILE:               /host/var/log/aws-routed-eni/ipamd.log
      AWS_VPC_K8S_CNI_RANDOMIZESNAT:          prng
      AWS_VPC_K8S_CNI_VETHPREFIX:             eni
      AWS_VPC_K8S_PLUGIN_LOG_FILE:            /var/log/aws-routed-eni/plugin.log
      AWS_VPC_K8S_PLUGIN_LOG_LEVEL:           DEBUG
      CLUSTER_ENDPOINT:                       https://260A3F90DADA104761D41ED5654BD337.gr7.us-east-1.eks.amazonaws.com
      CLUSTER_NAME:                           n6oy2vvr-K8s
      DISABLE_INTROSPECTION:                  false
      DISABLE_METRICS:                        false
      DISABLE_NETWORK_RESOURCE_PROVISIONING:  false
      ENABLE_IPv4:                            true
      ENABLE_IPv6:                            false
      ENABLE_POD_ENI:                         false
      ENABLE_PREFIX_DELEGATION:               false
      ENABLE_SUBNET_DISCOVERY:                true
      NETWORK_POLICY_ENFORCING_MODE:          standard
      VPC_CNI_VERSION:                        v1.18.3
      VPC_ID:                                 vpc-0eeb81c2d824cec68
      WARM_ENI_TARGET:                        1
      WARM_PREFIX_TARGET:                     1
      MY_NODE_NAME:                            (v1:spec.nodeName)
      MY_POD_NAME:                             (v1:metadata.name)
    Mounts:
      /host/etc/cni/net.d from cni-net-dir (rw)
      /host/opt/cni/bin from cni-bin-dir (rw)
      /host/var/log/aws-routed-eni from log-dir (rw)
      /run/xtables.lock from xtables-lock (rw)
      /var/run/aws-node from run-dir (rw)
   aws-eks-nodeagent:
    Image:      602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.2-eksbuild.2
    Port:       <none>
    Host Port:  <none>
    Args:
      --enable-ipv6=false
      --enable-network-policy=false
      --enable-cloudwatch-logs=false
      --enable-policy-event-logs=false
      --log-file=/var/log/aws-routed-eni/network-policy-agent.log
      --metrics-bind-addr=:8162
      --health-probe-bind-addr=:8163
      --conntrack-cache-cleanup-period=300
    Requests:
      cpu:  25m
    Environment:
      MY_NODE_NAME:   (v1:spec.nodeName)
    Mounts:
      /host/opt/cni/bin from cni-bin-dir (rw)
      /sys/fs/bpf from bpf-pin-path (rw)
      /var/log/aws-routed-eni from log-dir (rw)
      /var/run/aws-node from run-dir (rw)
  Volumes:
   bpf-pin-path:
    Type:          HostPath (bare host directory volume)
    Path:          /sys/fs/bpf
    HostPathType:  
   cni-bin-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /opt/cni/bin
    HostPathType:  
   cni-net-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /etc/cni/net.d
    HostPathType:  
   log-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /var/log/aws-routed-eni
    HostPathType:  DirectoryOrCreate
   run-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /var/run/aws-node
    HostPathType:  DirectoryOrCreate
   xtables-lock:
    Type:               HostPath (bare host directory volume)
    Path:               /run/xtables.lock
    HostPathType:       FileOrCreate
  Priority Class Name:  system-node-critical
  Node-Selectors:       <none>
  Tolerations:          op=Exists
Events:                 <none>


Name:           eks-pod-identity-agent
Selector:       app.kubernetes.io/instance=eks-pod-identity-agent,app.kubernetes.io/name=eks-pod-identity-agent
Node-Selector:  <none>
Labels:         app.kubernetes.io/instance=eks-pod-identity-agent
                app.kubernetes.io/managed-by=Helm
                app.kubernetes.io/name=eks-pod-identity-agent
                app.kubernetes.io/version=0.1.15
                helm.sh/chart=eks-pod-identity-agent-1.3.2
Annotations:    deprecated.daemonset.template.generation: 1
Desired Number of Nodes Scheduled: 2
Current Number of Nodes Scheduled: 2
Number of Nodes Scheduled with Up-to-date Pods: 2
Number of Nodes Scheduled with Available Pods: 2
Number of Nodes Misscheduled: 0
Pods Status:  2 Running / 0 Waiting / 0 Succeeded / 0 Failed
Pod Template:
  Labels:  app.kubernetes.io/instance=eks-pod-identity-agent
           app.kubernetes.io/name=eks-pod-identity-agent
  Init Containers:
   eks-pod-identity-agent-init:
    Image:      602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
    Port:       <none>
    Host Port:  <none>
    Command:
      /go-runner
      /eks-pod-identity-agent
      initialize
    Environment:  <none>
    Mounts:       <none>
  Containers:
   eks-pod-identity-agent:
    Image:       602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
    Ports:       80/TCP, 2703/TCP
    Host Ports:  0/TCP, 0/TCP
    Command:
      /go-runner
      /eks-pod-identity-agent
      server
    Args:
      --port
      80
      --cluster-name
      n6oy2vvr-K8s
      --probe-port
      2703
    Liveness:   http-get http://localhost:probes-port/healthz delay=30s timeout=10s period=10s #success=1 #failure=3
    Readiness:  http-get http://localhost:probes-port/readyz delay=1s timeout=10s period=10s #success=1 #failure=30
    Environment:
      AWS_REGION:       us-east-1
    Mounts:             <none>
  Volumes:              <none>
  Priority Class Name:  system-node-critical
  Node-Selectors:       <none>
  Tolerations:          op=Exists
Events:                 <none>


Name:           kube-proxy
Selector:       k8s-app=kube-proxy
Node-Selector:  <none>
Labels:         eks.amazonaws.com/component=kube-proxy
                k8s-app=kube-proxy
Annotations:    deprecated.daemonset.template.generation: 1
Desired Number of Nodes Scheduled: 2
Current Number of Nodes Scheduled: 2
Number of Nodes Scheduled with Up-to-date Pods: 2
Number of Nodes Scheduled with Available Pods: 2
Number of Nodes Misscheduled: 0
Pods Status:  2 Running / 0 Waiting / 0 Succeeded / 0 Failed
Pod Template:
  Labels:           k8s-app=kube-proxy
  Service Account:  kube-proxy
  Containers:
   kube-proxy:
    Image:      602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/kube-proxy:v1.31.0-minimal-eksbuild.2
    Port:       <none>
    Host Port:  <none>
    Command:
      kube-proxy
      --v=2
      --config=/var/lib/kube-proxy-config/config
      --hostname-override=$(NODE_NAME)
    Requests:
      cpu:  100m
    Environment:
      NODE_NAME:   (v1:spec.nodeName)
    Mounts:
      /lib/modules from lib-modules (ro)
      /run/xtables.lock from xtables-lock (rw)
      /var/lib/kube-proxy-config/ from config (rw)
      /var/lib/kube-proxy/ from kubeconfig (rw)
      /var/log from varlog (rw)
  Volumes:
   varlog:
    Type:          HostPath (bare host directory volume)
    Path:          /var/log
    HostPathType:  
   xtables-lock:
    Type:          HostPath (bare host directory volume)
    Path:          /run/xtables.lock
    HostPathType:  FileOrCreate
   lib-modules:
    Type:          HostPath (bare host directory volume)
    Path:          /lib/modules
    HostPathType:  
   kubeconfig:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      kube-proxy
    Optional:  false
   config:
    Type:               ConfigMap (a volume populated by a ConfigMap)
    Name:               kube-proxy-config
    Optional:           false
  Priority Class Name:  system-node-critical
  Node-Selectors:       <none>
  Tolerations:          op=Exists
Events:                 <none>


Name:           pan-cni
Selector:       k8s-app=pan-cni
Node-Selector:  beta.kubernetes.io/os=linux
Labels:         app.kubernetes.io/managed-by=Helm
                k8s-app=pan-cni
Annotations:    deprecated.daemonset.template.generation: 1
                meta.helm.sh/release-name: ai-runtime-security
                meta.helm.sh/release-namespace: kube-system
Desired Number of Nodes Scheduled: 2
Current Number of Nodes Scheduled: 2
Number of Nodes Scheduled with Up-to-date Pods: 2
Number of Nodes Scheduled with Available Pods: 2
Number of Nodes Misscheduled: 0
Pods Status:  2 Running / 0 Waiting / 0 Succeeded / 0 Failed
Pod Template:
  Labels:           k8s-app=pan-cni
  Annotations:      paloaltonetworks.com/app: pan-cni
                    scheduler.alpha.kubernetes.io/critical-pod: 
  Service Account:  pan-cni-sa
  Containers:
   install-pan-cni:
    Image:      gcr.io/pan-cn-series/airs/pan-cni:4.0.0
    Port:       <none>
    Host Port:  <none>
    Command:
      /install-pan-cni.sh
      main
    Environment:
      CNI_NETWORK_CONFIG:  <set to the key 'cni_network_config' of config map 'pan-cni-config'>  Optional: false
      MY_POD_NAMESPACE:     (v1:metadata.namespace)
      MY_POD_NAME:          (v1:metadata.name)
    Mounts:
      /host/appinfo from appinfo (rw)
      /host/etc/cni/net.d from cni-net-dir (rw)
      /host/opt/cni/bin from cni-bin-dir (rw)
  Volumes:
   cni-bin-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /opt/cni/bin
    HostPathType:  
   cni-net-dir:
    Type:          HostPath (bare host directory volume)
    Path:          /etc/cni/net.d
    HostPathType:  
   appinfo:
    Type:               HostPath (bare host directory volume)
    Path:               /var/log/pan-appinfo
    HostPathType:       DirectoryOrCreate
  Priority Class Name:  system-node-critical
  Node-Selectors:       beta.kubernetes.io/os=linux
  Tolerations:          :NoSchedule op=Exists
                        :NoExecute op=Exists
                        CriticalAddonsOnly op=Exists
Events:                 <none>


Name:                   agent-deployment
Namespace:              ai-app
CreationTimestamp:      Fri, 11 Oct 2024 00:20:23 -0400
Labels:                 app.kubernetes.io/managed-by=Helm
Annotations:            deployment.kubernetes.io/revision: 1
                        meta.helm.sh/release-name: ai-app
                        meta.helm.sh/release-namespace: default
Selector:               app=agent
Replicas:               1 desired | 1 updated | 1 total | 1 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:           app=agent
  Service Account:  eks-pods-sa
  Containers:
   agent:
    Image:         migara/agent-app:latest
    Port:          3001/TCP
    Host Port:     0/TCP
    Environment:   <none>
    Mounts:        <none>
  Volumes:         <none>
  Node-Selectors:  <none>
  Tolerations:     <none>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      True    MinimumReplicasAvailable
  Progressing    True    NewReplicaSetAvailable
OldReplicaSets:  <none>
NewReplicaSet:   agent-deployment-558dcbcf7d (1/1 replicas created)
Events:          <none>


Name:                   ui-deployment
Namespace:              ai-app
CreationTimestamp:      Fri, 11 Oct 2024 00:20:23 -0400
Labels:                 app.kubernetes.io/managed-by=Helm
Annotations:            deployment.kubernetes.io/revision: 1
                        meta.helm.sh/release-name: ai-app
                        meta.helm.sh/release-namespace: default
Selector:               app=ui
Replicas:               1 desired | 1 updated | 1 total | 1 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:  app=ui
  Containers:
   ui:
    Image:         migara/ui-app:latest
    Port:          3000/TCP
    Host Port:     0/TCP
    Environment:   <none>
    Mounts:        <none>
  Volumes:         <none>
  Node-Selectors:  <none>
  Tolerations:     <none>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      True    MinimumReplicasAvailable
  Progressing    True    NewReplicaSetAvailable
OldReplicaSets:  <none>
NewReplicaSet:   ui-deployment-5457f4d4d4 (1/1 replicas created)
Events:          <none>


Name:                   ingress-nginx-controller
Namespace:              ingress-nginx
CreationTimestamp:      Fri, 11 Oct 2024 00:20:10 -0400
Labels:                 app.kubernetes.io/component=controller
                        app.kubernetes.io/instance=ingress-nginx
                        app.kubernetes.io/managed-by=Helm
                        app.kubernetes.io/name=ingress-nginx
                        app.kubernetes.io/part-of=ingress-nginx
                        app.kubernetes.io/version=1.8.1
                        helm.sh/chart=ingress-nginx-4.7.1
Annotations:            deployment.kubernetes.io/revision: 1
                        meta.helm.sh/release-name: ingress-nginx
                        meta.helm.sh/release-namespace: ingress-nginx
Selector:               app.kubernetes.io/component=controller,app.kubernetes.io/instance=ingress-nginx,app.kubernetes.io/name=ingress-nginx
Replicas:               1 desired | 1 updated | 1 total | 1 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:           app.kubernetes.io/component=controller
                    app.kubernetes.io/instance=ingress-nginx
                    app.kubernetes.io/managed-by=Helm
                    app.kubernetes.io/name=ingress-nginx
                    app.kubernetes.io/part-of=ingress-nginx
                    app.kubernetes.io/version=1.8.1
                    helm.sh/chart=ingress-nginx-4.7.1
  Service Account:  ingress-nginx
  Containers:
   controller:
    Image:       registry.k8s.io/ingress-nginx/controller:v1.8.1@sha256:e5c4824e7375fcf2a393e1c03c293b69759af37a9ca6abdb91b13d78a93da8bd
    Ports:       80/TCP, 443/TCP, 8443/TCP
    Host Ports:  0/TCP, 0/TCP, 0/TCP
    Args:
      /nginx-ingress-controller
      --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
      --election-id=ingress-nginx-leader
      --controller-class=k8s.io/ingress-nginx
      --ingress-class=nginx
      --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
      --validating-webhook=:8443
      --validating-webhook-certificate=/usr/local/certificates/cert
      --validating-webhook-key=/usr/local/certificates/key
    Requests:
      cpu:      100m
      memory:   90Mi
    Liveness:   http-get http://:10254/healthz delay=10s timeout=1s period=10s #success=1 #failure=5
    Readiness:  http-get http://:10254/healthz delay=10s timeout=1s period=10s #success=1 #failure=3
    Environment:
      POD_NAME:        (v1:metadata.name)
      POD_NAMESPACE:   (v1:metadata.namespace)
      LD_PRELOAD:     /usr/local/lib/libmimalloc.so
    Mounts:
      /usr/local/certificates/ from webhook-cert (ro)
  Volumes:
   webhook-cert:
    Type:          Secret (a volume populated by a Secret)
    SecretName:    ingress-nginx-admission
    Optional:      false
  Node-Selectors:  kubernetes.io/os=linux
  Tolerations:     <none>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      True    MinimumReplicasAvailable
  Progressing    True    NewReplicaSetAvailable
OldReplicaSets:  <none>
NewReplicaSet:   ingress-nginx-controller-74dbc4858c (1/1 replicas created)
Events:          <none>


Name:                   coredns
Namespace:              kube-system
CreationTimestamp:      Wed, 09 Oct 2024 15:32:36 -0400
Labels:                 eks.amazonaws.com/component=coredns
                        k8s-app=kube-dns
                        kubernetes.io/name=CoreDNS
Annotations:            deployment.kubernetes.io/revision: 1
Selector:               eks.amazonaws.com/component=coredns,k8s-app=kube-dns
Replicas:               2 desired | 2 updated | 2 total | 2 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  1 max unavailable, 25% max surge
Pod Template:
  Labels:           eks.amazonaws.com/component=coredns
                    k8s-app=kube-dns
  Service Account:  coredns
  Containers:
   coredns:
    Image:       602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/coredns:v1.11.3-eksbuild.1
    Ports:       53/UDP, 53/TCP, 9153/TCP
    Host Ports:  0/UDP, 0/TCP, 0/TCP
    Args:
      -conf
      /etc/coredns/Corefile
    Limits:
      memory:  170Mi
    Requests:
      cpu:        100m
      memory:     70Mi
    Liveness:     http-get http://:8080/health delay=60s timeout=5s period=10s #success=1 #failure=5
    Readiness:    http-get http://:8181/ready delay=0s timeout=1s period=10s #success=1 #failure=3
    Environment:  <none>
    Mounts:
      /etc/coredns from config-volume (ro)
  Volumes:
   config-volume:
    Type:                       ConfigMap (a volume populated by a ConfigMap)
    Name:                       coredns
    Optional:                   false
  Topology Spread Constraints:  topology.kubernetes.io/zone:ScheduleAnyway when max skew 1 is exceeded for selector k8s-app=kube-dns
  Priority Class Name:          system-cluster-critical
  Node-Selectors:               <none>
  Tolerations:                  CriticalAddonsOnly op=Exists
                                node-role.kubernetes.io/control-plane:NoSchedule
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      True    MinimumReplicasAvailable
  Progressing    True    NewReplicaSetAvailable
OldReplicaSets:  <none>
NewReplicaSet:   coredns-789f8477df (2/2 replicas created)
Events:          <none>


Name:                   netshoot-deployment
Namespace:              utilities
CreationTimestamp:      Fri, 11 Oct 2024 01:19:18 -0400
Labels:                 app.kubernetes.io/managed-by=Helm
Annotations:            deployment.kubernetes.io/revision: 1
                        meta.helm.sh/release-name: utilities
                        meta.helm.sh/release-namespace: default
Selector:               app=netshoot
Replicas:               1 desired | 1 updated | 1 total | 1 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:           app=netshoot
  Service Account:  eks-pods-sa
  Containers:
   netshoot:
    Image:      nicolaka/netshoot
    Port:       <none>
    Host Port:  <none>
    Command:
      /bin/sh
    Args:
      -c
      cp /custom-certs/* /usr/local/share/ca-certificates/
      update-ca-certificates
      echo "Custom certificates added"
      while true; do sleep 3600; done
      
    Environment:  <none>
    Mounts:
      /custom-certs from custom-certs (ro)
  Volumes:
   custom-certs:
    Type:          ConfigMap (a volume populated by a ConfigMap)
    Name:          custom-ca-certs
    Optional:      false
  Node-Selectors:  <none>
  Tolerations:     <none>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      True    MinimumReplicasAvailable
  Progressing    True    NewReplicaSetAvailable
OldReplicaSets:  <none>
NewReplicaSet:   netshoot-deployment-7655b866d4 (1/1 replicas created)
Events:          <none>


Name:           agent-deployment-558dcbcf7d
Namespace:      ai-app
Selector:       app=agent,pod-template-hash=558dcbcf7d
Labels:         app=agent
                pod-template-hash=558dcbcf7d
Annotations:    deployment.kubernetes.io/desired-replicas: 1
                deployment.kubernetes.io/max-replicas: 2
                deployment.kubernetes.io/revision: 1
                meta.helm.sh/release-name: ai-app
                meta.helm.sh/release-namespace: default
Controlled By:  Deployment/agent-deployment
Replicas:       1 current / 1 desired
Pods Status:    1 Running / 0 Waiting / 0 Succeeded / 0 Failed
Pod Template:
  Labels:           app=agent
                    pod-template-hash=558dcbcf7d
  Service Account:  eks-pods-sa
  Containers:
   agent:
    Image:         migara/agent-app:latest
    Port:          3001/TCP
    Host Port:     0/TCP
    Environment:   <none>
    Mounts:        <none>
  Volumes:         <none>
  Node-Selectors:  <none>
  Tolerations:     <none>
Events:            <none>


Name:           ui-deployment-5457f4d4d4
Namespace:      ai-app
Selector:       app=ui,pod-template-hash=5457f4d4d4
Labels:         app=ui
                pod-template-hash=5457f4d4d4
Annotations:    deployment.kubernetes.io/desired-replicas: 1
                deployment.kubernetes.io/max-replicas: 2
                deployment.kubernetes.io/revision: 1
                meta.helm.sh/release-name: ai-app
                meta.helm.sh/release-namespace: default
Controlled By:  Deployment/ui-deployment
Replicas:       1 current / 1 desired
Pods Status:    1 Running / 0 Waiting / 0 Succeeded / 0 Failed
Pod Template:
  Labels:  app=ui
           pod-template-hash=5457f4d4d4
  Containers:
   ui:
    Image:         migara/ui-app:latest
    Port:          3000/TCP
    Host Port:     0/TCP
    Environment:   <none>
    Mounts:        <none>
  Volumes:         <none>
  Node-Selectors:  <none>
  Tolerations:     <none>
Events:            <none>


Name:           ingress-nginx-controller-74dbc4858c
Namespace:      ingress-nginx
Selector:       app.kubernetes.io/component=controller,app.kubernetes.io/instance=ingress-nginx,app.kubernetes.io/name=ingress-nginx,pod-template-hash=74dbc4858c
Labels:         app.kubernetes.io/component=controller
                app.kubernetes.io/instance=ingress-nginx
                app.kubernetes.io/managed-by=Helm
                app.kubernetes.io/name=ingress-nginx
                app.kubernetes.io/part-of=ingress-nginx
                app.kubernetes.io/version=1.8.1
                helm.sh/chart=ingress-nginx-4.7.1
                pod-template-hash=74dbc4858c
Annotations:    deployment.kubernetes.io/desired-replicas: 1
                deployment.kubernetes.io/max-replicas: 2
                deployment.kubernetes.io/revision: 1
                meta.helm.sh/release-name: ingress-nginx
                meta.helm.sh/release-namespace: ingress-nginx
Controlled By:  Deployment/ingress-nginx-controller
Replicas:       1 current / 1 desired
Pods Status:    1 Running / 0 Waiting / 0 Succeeded / 0 Failed
Pod Template:
  Labels:           app.kubernetes.io/component=controller
                    app.kubernetes.io/instance=ingress-nginx
                    app.kubernetes.io/managed-by=Helm
                    app.kubernetes.io/name=ingress-nginx
                    app.kubernetes.io/part-of=ingress-nginx
                    app.kubernetes.io/version=1.8.1
                    helm.sh/chart=ingress-nginx-4.7.1
                    pod-template-hash=74dbc4858c
  Service Account:  ingress-nginx
  Containers:
   controller:
    Image:       registry.k8s.io/ingress-nginx/controller:v1.8.1@sha256:e5c4824e7375fcf2a393e1c03c293b69759af37a9ca6abdb91b13d78a93da8bd
    Ports:       80/TCP, 443/TCP, 8443/TCP
    Host Ports:  0/TCP, 0/TCP, 0/TCP
    Args:
      /nginx-ingress-controller
      --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
      --election-id=ingress-nginx-leader
      --controller-class=k8s.io/ingress-nginx
      --ingress-class=nginx
      --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
      --validating-webhook=:8443
      --validating-webhook-certificate=/usr/local/certificates/cert
      --validating-webhook-key=/usr/local/certificates/key
    Requests:
      cpu:      100m
      memory:   90Mi
    Liveness:   http-get http://:10254/healthz delay=10s timeout=1s period=10s #success=1 #failure=5
    Readiness:  http-get http://:10254/healthz delay=10s timeout=1s period=10s #success=1 #failure=3
    Environment:
      POD_NAME:        (v1:metadata.name)
      POD_NAMESPACE:   (v1:metadata.namespace)
      LD_PRELOAD:     /usr/local/lib/libmimalloc.so
    Mounts:
      /usr/local/certificates/ from webhook-cert (ro)
  Volumes:
   webhook-cert:
    Type:          Secret (a volume populated by a Secret)
    SecretName:    ingress-nginx-admission
    Optional:      false
  Node-Selectors:  kubernetes.io/os=linux
  Tolerations:     <none>
Events:            <none>


Name:           coredns-789f8477df
Namespace:      kube-system
Selector:       eks.amazonaws.com/component=coredns,k8s-app=kube-dns,pod-template-hash=789f8477df
Labels:         eks.amazonaws.com/component=coredns
                k8s-app=kube-dns
                pod-template-hash=789f8477df
Annotations:    deployment.kubernetes.io/desired-replicas: 2
                deployment.kubernetes.io/max-replicas: 3
                deployment.kubernetes.io/revision: 1
Controlled By:  Deployment/coredns
Replicas:       2 current / 2 desired
Pods Status:    2 Running / 0 Waiting / 0 Succeeded / 0 Failed
Pod Template:
  Labels:           eks.amazonaws.com/component=coredns
                    k8s-app=kube-dns
                    pod-template-hash=789f8477df
  Service Account:  coredns
  Containers:
   coredns:
    Image:       602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/coredns:v1.11.3-eksbuild.1
    Ports:       53/UDP, 53/TCP, 9153/TCP
    Host Ports:  0/UDP, 0/TCP, 0/TCP
    Args:
      -conf
      /etc/coredns/Corefile
    Limits:
      memory:  170Mi
    Requests:
      cpu:        100m
      memory:     70Mi
    Liveness:     http-get http://:8080/health delay=60s timeout=5s period=10s #success=1 #failure=5
    Readiness:    http-get http://:8181/ready delay=0s timeout=1s period=10s #success=1 #failure=3
    Environment:  <none>
    Mounts:
      /etc/coredns from config-volume (ro)
  Volumes:
   config-volume:
    Type:                       ConfigMap (a volume populated by a ConfigMap)
    Name:                       coredns
    Optional:                   false
  Topology Spread Constraints:  topology.kubernetes.io/zone:ScheduleAnyway when max skew 1 is exceeded for selector k8s-app=kube-dns
  Priority Class Name:          system-cluster-critical
  Node-Selectors:               <none>
  Tolerations:                  CriticalAddonsOnly op=Exists
                                node-role.kubernetes.io/control-plane:NoSchedule
Events:                         <none>


Name:           netshoot-deployment-7655b866d4
Namespace:      utilities
Selector:       app=netshoot,pod-template-hash=7655b866d4
Labels:         app=netshoot
                pod-template-hash=7655b866d4
Annotations:    deployment.kubernetes.io/desired-replicas: 1
                deployment.kubernetes.io/max-replicas: 2
                deployment.kubernetes.io/revision: 1
                meta.helm.sh/release-name: utilities
                meta.helm.sh/release-namespace: default
Controlled By:  Deployment/netshoot-deployment
Replicas:       1 current / 1 desired
Pods Status:    1 Running / 0 Waiting / 0 Succeeded / 0 Failed
Pod Template:
  Labels:           app=netshoot
                    pod-template-hash=7655b866d4
  Service Account:  eks-pods-sa
  Containers:
   netshoot:
    Image:      nicolaka/netshoot
    Port:       <none>
    Host Port:  <none>
    Command:
      /bin/sh
    Args:
      -c
      cp /custom-certs/* /usr/local/share/ca-certificates/
      update-ca-certificates
      echo "Custom certificates added"
      while true; do sleep 3600; done
      
    Environment:  <none>
    Mounts:
      /custom-certs from custom-certs (ro)
  Volumes:
   custom-certs:
    Type:          ConfigMap (a volume populated by a ConfigMap)
    Name:          custom-ca-certs
    Optional:      false
  Node-Selectors:  <none>
  Tolerations:     <none>
Events:            <none>
apiVersion: v1
items:
- apiVersion: v1
  data:
    ca.crt: |
      -----BEGIN CERTIFICATE-----
      MIIDBTCCAe2gAwIBAgIIFt29VsxHi2cwDQYJKoZIhvcNAQELBQAwFTETMBEGA1UE
      AxMKa3ViZXJuZXRlczAeFw0yNDEwMDkxOTI1MDJaFw0zNDEwMDcxOTMwMDJaMBUx
      EzARBgNVBAMTCmt1YmVybmV0ZXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
      AoIBAQDPLMehlvfh0vm1EsjCDaaoW8kYqJfJ9WMcG0IbNemY941LqwB9HwXxg+3t
      7gdITQ9XpXh/OZIj0azGmqX5ftWmMH2aV0DjjYhXACsl0wNYgWwX9exN1pzACiNB
      HkMbo042IXK/IK96xm6Q2RoDWJbWLM11+Lr8H6y0sU0UtvYYEZlIqtqNI7Bzy3Q5
      IT22EJpj0hjgaKa+bsWKkxlHQ/kiMQ8aOn9/k7uimQgoMvH51N0m+A7815JuOkA1
      bchWRfpbdNXaNae7tWtFD3SH9c+THSWc3ADov2sxLk+RG9HnRpg5Ny4WQYFDOtNR
      uJTgCYyrcMo20iVt3a6znxHTfCD/AgMBAAGjWTBXMA4GA1UdDwEB/wQEAwICpDAP
      BgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBTYEUrj2rDbVmlooUG7wsKqfZGQ6zAV
      BgNVHREEDjAMggprdWJlcm5ldGVzMA0GCSqGSIb3DQEBCwUAA4IBAQB2uAwv6NEX
      /laJMfMs6MAr+VjiitsH4RleH4luSvakfAwYkCZCwn5Jsuldz18Usik/Jr+sM2BC
      9QmAaiaTqJ319C8yV2FbBhOG4Vl8/X3j5v+0HvNfhBAoMAjL5b1Vcfb9XPy+AYqM
      ZpxzMj9ItDHL61WYYZT5vA4DBqLDfACR1QQO3JbfbFbpL+cBk/ToLLOU/KD6My5w
      c46O2itx9e8/9Zuh+6T+NtcxljFZ8d5d4+3wMmh7e73MnUsjMEiaLZJcXThf5GRt
      1CKk4yKK2z2yEQkmrU3L60CSQ9Q1ZvCzlXtICIHKDM69yGRdIs4buOhfdGUUbz8s
      TRak1Gc6C9rg
      -----END CERTIFICATE-----
  kind: ConfigMap
  metadata:
    annotations:
      kubernetes.io/description: Contains a CA bundle that can be used to verify the
        kube-apiserver when using internal endpoints such as the internal service
        IP or kubernetes.default.svc. No other usage is guaranteed across distributions
        of Kubernetes clusters.
    creationTimestamp: "2024-10-11T04:20:23Z"
    name: kube-root-ca.crt
    namespace: ai-app
    resourceVersion: "332835"
    uid: fe30fc88-5ea6-4a8c-8bae-30d40c3f006c
- apiVersion: v1
  data:
    ca.crt: |
      -----BEGIN CERTIFICATE-----
      MIIDBTCCAe2gAwIBAgIIFt29VsxHi2cwDQYJKoZIhvcNAQELBQAwFTETMBEGA1UE
      AxMKa3ViZXJuZXRlczAeFw0yNDEwMDkxOTI1MDJaFw0zNDEwMDcxOTMwMDJaMBUx
      EzARBgNVBAMTCmt1YmVybmV0ZXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
      AoIBAQDPLMehlvfh0vm1EsjCDaaoW8kYqJfJ9WMcG0IbNemY941LqwB9HwXxg+3t
      7gdITQ9XpXh/OZIj0azGmqX5ftWmMH2aV0DjjYhXACsl0wNYgWwX9exN1pzACiNB
      HkMbo042IXK/IK96xm6Q2RoDWJbWLM11+Lr8H6y0sU0UtvYYEZlIqtqNI7Bzy3Q5
      IT22EJpj0hjgaKa+bsWKkxlHQ/kiMQ8aOn9/k7uimQgoMvH51N0m+A7815JuOkA1
      bchWRfpbdNXaNae7tWtFD3SH9c+THSWc3ADov2sxLk+RG9HnRpg5Ny4WQYFDOtNR
      uJTgCYyrcMo20iVt3a6znxHTfCD/AgMBAAGjWTBXMA4GA1UdDwEB/wQEAwICpDAP
      BgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBTYEUrj2rDbVmlooUG7wsKqfZGQ6zAV
      BgNVHREEDjAMggprdWJlcm5ldGVzMA0GCSqGSIb3DQEBCwUAA4IBAQB2uAwv6NEX
      /laJMfMs6MAr+VjiitsH4RleH4luSvakfAwYkCZCwn5Jsuldz18Usik/Jr+sM2BC
      9QmAaiaTqJ319C8yV2FbBhOG4Vl8/X3j5v+0HvNfhBAoMAjL5b1Vcfb9XPy+AYqM
      ZpxzMj9ItDHL61WYYZT5vA4DBqLDfACR1QQO3JbfbFbpL+cBk/ToLLOU/KD6My5w
      c46O2itx9e8/9Zuh+6T+NtcxljFZ8d5d4+3wMmh7e73MnUsjMEiaLZJcXThf5GRt
      1CKk4yKK2z2yEQkmrU3L60CSQ9Q1ZvCzlXtICIHKDM69yGRdIs4buOhfdGUUbz8s
      TRak1Gc6C9rg
      -----END CERTIFICATE-----
  kind: ConfigMap
  metadata:
    annotations:
      kubernetes.io/description: Contains a CA bundle that can be used to verify the
        kube-apiserver when using internal endpoints such as the internal service
        IP or kubernetes.default.svc. No other usage is guaranteed across distributions
        of Kubernetes clusters.
    creationTimestamp: "2024-10-09T19:31:06Z"
    name: kube-root-ca.crt
    namespace: default
    resourceVersion: "350"
    uid: 4b03d595-cee7-4cc8-98c7-b2a49f08b775
- apiVersion: v1
  data:
    allow-snippet-annotations: "true"
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: ingress-nginx
      meta.helm.sh/release-namespace: ingress-nginx
    creationTimestamp: "2024-10-11T04:20:10Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.8.1
      helm.sh/chart: ingress-nginx-4.7.1
    name: ingress-nginx-controller
    namespace: ingress-nginx
    resourceVersion: "332710"
    uid: cf427fc5-9971-4379-92be-cbede524dee2
- apiVersion: v1
  data:
    ca.crt: |
      -----BEGIN CERTIFICATE-----
      MIIDBTCCAe2gAwIBAgIIFt29VsxHi2cwDQYJKoZIhvcNAQELBQAwFTETMBEGA1UE
      AxMKa3ViZXJuZXRlczAeFw0yNDEwMDkxOTI1MDJaFw0zNDEwMDcxOTMwMDJaMBUx
      EzARBgNVBAMTCmt1YmVybmV0ZXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
      AoIBAQDPLMehlvfh0vm1EsjCDaaoW8kYqJfJ9WMcG0IbNemY941LqwB9HwXxg+3t
      7gdITQ9XpXh/OZIj0azGmqX5ftWmMH2aV0DjjYhXACsl0wNYgWwX9exN1pzACiNB
      HkMbo042IXK/IK96xm6Q2RoDWJbWLM11+Lr8H6y0sU0UtvYYEZlIqtqNI7Bzy3Q5
      IT22EJpj0hjgaKa+bsWKkxlHQ/kiMQ8aOn9/k7uimQgoMvH51N0m+A7815JuOkA1
      bchWRfpbdNXaNae7tWtFD3SH9c+THSWc3ADov2sxLk+RG9HnRpg5Ny4WQYFDOtNR
      uJTgCYyrcMo20iVt3a6znxHTfCD/AgMBAAGjWTBXMA4GA1UdDwEB/wQEAwICpDAP
      BgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBTYEUrj2rDbVmlooUG7wsKqfZGQ6zAV
      BgNVHREEDjAMggprdWJlcm5ldGVzMA0GCSqGSIb3DQEBCwUAA4IBAQB2uAwv6NEX
      /laJMfMs6MAr+VjiitsH4RleH4luSvakfAwYkCZCwn5Jsuldz18Usik/Jr+sM2BC
      9QmAaiaTqJ319C8yV2FbBhOG4Vl8/X3j5v+0HvNfhBAoMAjL5b1Vcfb9XPy+AYqM
      ZpxzMj9ItDHL61WYYZT5vA4DBqLDfACR1QQO3JbfbFbpL+cBk/ToLLOU/KD6My5w
      c46O2itx9e8/9Zuh+6T+NtcxljFZ8d5d4+3wMmh7e73MnUsjMEiaLZJcXThf5GRt
      1CKk4yKK2z2yEQkmrU3L60CSQ9Q1ZvCzlXtICIHKDM69yGRdIs4buOhfdGUUbz8s
      TRak1Gc6C9rg
      -----END CERTIFICATE-----
  kind: ConfigMap
  metadata:
    annotations:
      kubernetes.io/description: Contains a CA bundle that can be used to verify the
        kube-apiserver when using internal endpoints such as the internal service
        IP or kubernetes.default.svc. No other usage is guaranteed across distributions
        of Kubernetes clusters.
    creationTimestamp: "2024-10-09T19:54:07Z"
    name: kube-root-ca.crt
    namespace: ingress-nginx
    resourceVersion: "4348"
    uid: c7238732-f30c-4c01-8b69-3ff488d69d4f
- apiVersion: v1
  data:
    ca.crt: |
      -----BEGIN CERTIFICATE-----
      MIIDBTCCAe2gAwIBAgIIFt29VsxHi2cwDQYJKoZIhvcNAQELBQAwFTETMBEGA1UE
      AxMKa3ViZXJuZXRlczAeFw0yNDEwMDkxOTI1MDJaFw0zNDEwMDcxOTMwMDJaMBUx
      EzARBgNVBAMTCmt1YmVybmV0ZXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
      AoIBAQDPLMehlvfh0vm1EsjCDaaoW8kYqJfJ9WMcG0IbNemY941LqwB9HwXxg+3t
      7gdITQ9XpXh/OZIj0azGmqX5ftWmMH2aV0DjjYhXACsl0wNYgWwX9exN1pzACiNB
      HkMbo042IXK/IK96xm6Q2RoDWJbWLM11+Lr8H6y0sU0UtvYYEZlIqtqNI7Bzy3Q5
      IT22EJpj0hjgaKa+bsWKkxlHQ/kiMQ8aOn9/k7uimQgoMvH51N0m+A7815JuOkA1
      bchWRfpbdNXaNae7tWtFD3SH9c+THSWc3ADov2sxLk+RG9HnRpg5Ny4WQYFDOtNR
      uJTgCYyrcMo20iVt3a6znxHTfCD/AgMBAAGjWTBXMA4GA1UdDwEB/wQEAwICpDAP
      BgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBTYEUrj2rDbVmlooUG7wsKqfZGQ6zAV
      BgNVHREEDjAMggprdWJlcm5ldGVzMA0GCSqGSIb3DQEBCwUAA4IBAQB2uAwv6NEX
      /laJMfMs6MAr+VjiitsH4RleH4luSvakfAwYkCZCwn5Jsuldz18Usik/Jr+sM2BC
      9QmAaiaTqJ319C8yV2FbBhOG4Vl8/X3j5v+0HvNfhBAoMAjL5b1Vcfb9XPy+AYqM
      ZpxzMj9ItDHL61WYYZT5vA4DBqLDfACR1QQO3JbfbFbpL+cBk/ToLLOU/KD6My5w
      c46O2itx9e8/9Zuh+6T+NtcxljFZ8d5d4+3wMmh7e73MnUsjMEiaLZJcXThf5GRt
      1CKk4yKK2z2yEQkmrU3L60CSQ9Q1ZvCzlXtICIHKDM69yGRdIs4buOhfdGUUbz8s
      TRak1Gc6C9rg
      -----END CERTIFICATE-----
  kind: ConfigMap
  metadata:
    annotations:
      kubernetes.io/description: Contains a CA bundle that can be used to verify the
        kube-apiserver when using internal endpoints such as the internal service
        IP or kubernetes.default.svc. No other usage is guaranteed across distributions
        of Kubernetes clusters.
    creationTimestamp: "2024-10-09T19:31:06Z"
    name: kube-root-ca.crt
    namespace: kube-node-lease
    resourceVersion: "351"
    uid: 946ba612-61c7-4af1-ad38-fac1d6ba49d8
- apiVersion: v1
  data:
    ca.crt: |
      -----BEGIN CERTIFICATE-----
      MIIDBTCCAe2gAwIBAgIIFt29VsxHi2cwDQYJKoZIhvcNAQELBQAwFTETMBEGA1UE
      AxMKa3ViZXJuZXRlczAeFw0yNDEwMDkxOTI1MDJaFw0zNDEwMDcxOTMwMDJaMBUx
      EzARBgNVBAMTCmt1YmVybmV0ZXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
      AoIBAQDPLMehlvfh0vm1EsjCDaaoW8kYqJfJ9WMcG0IbNemY941LqwB9HwXxg+3t
      7gdITQ9XpXh/OZIj0azGmqX5ftWmMH2aV0DjjYhXACsl0wNYgWwX9exN1pzACiNB
      HkMbo042IXK/IK96xm6Q2RoDWJbWLM11+Lr8H6y0sU0UtvYYEZlIqtqNI7Bzy3Q5
      IT22EJpj0hjgaKa+bsWKkxlHQ/kiMQ8aOn9/k7uimQgoMvH51N0m+A7815JuOkA1
      bchWRfpbdNXaNae7tWtFD3SH9c+THSWc3ADov2sxLk+RG9HnRpg5Ny4WQYFDOtNR
      uJTgCYyrcMo20iVt3a6znxHTfCD/AgMBAAGjWTBXMA4GA1UdDwEB/wQEAwICpDAP
      BgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBTYEUrj2rDbVmlooUG7wsKqfZGQ6zAV
      BgNVHREEDjAMggprdWJlcm5ldGVzMA0GCSqGSIb3DQEBCwUAA4IBAQB2uAwv6NEX
      /laJMfMs6MAr+VjiitsH4RleH4luSvakfAwYkCZCwn5Jsuldz18Usik/Jr+sM2BC
      9QmAaiaTqJ319C8yV2FbBhOG4Vl8/X3j5v+0HvNfhBAoMAjL5b1Vcfb9XPy+AYqM
      ZpxzMj9ItDHL61WYYZT5vA4DBqLDfACR1QQO3JbfbFbpL+cBk/ToLLOU/KD6My5w
      c46O2itx9e8/9Zuh+6T+NtcxljFZ8d5d4+3wMmh7e73MnUsjMEiaLZJcXThf5GRt
      1CKk4yKK2z2yEQkmrU3L60CSQ9Q1ZvCzlXtICIHKDM69yGRdIs4buOhfdGUUbz8s
      TRak1Gc6C9rg
      -----END CERTIFICATE-----
  kind: ConfigMap
  metadata:
    annotations:
      kubernetes.io/description: Contains a CA bundle that can be used to verify the
        kube-apiserver when using internal endpoints such as the internal service
        IP or kubernetes.default.svc. No other usage is guaranteed across distributions
        of Kubernetes clusters.
    creationTimestamp: "2024-10-09T19:31:06Z"
    name: kube-root-ca.crt
    namespace: kube-public
    resourceVersion: "352"
    uid: 0579ba3f-b956-4b1d-a71c-6ddc5e956018
- apiVersion: v1
  data:
    branch-eni-cooldown: "60"
    enable-network-policy-controller: "false"
    enable-windows-ipam: "false"
    enable-windows-prefix-delegation: "false"
    minimum-ip-target: "3"
    warm-ip-target: "1"
    warm-prefix-target: "0"
  kind: ConfigMap
  metadata:
    creationTimestamp: "2024-10-09T19:32:37Z"
    labels:
      app.kubernetes.io/instance: aws-vpc-cni
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: aws-node
      app.kubernetes.io/version: v1.18.3
      helm.sh/chart: aws-vpc-cni-1.18.3
      k8s-app: aws-node
    name: amazon-vpc-cni
    namespace: kube-system
    resourceVersion: "610"
    uid: f124b501-8802-43d5-9305-ad34a3adb82a
- apiVersion: v1
  data:
    mapRoles: |
      - groups:
        - system:bootstrappers
        - system:nodes
        rolearn: arn:aws:iam::367521625516:role/n6oy2vvr-K8s-node-eks-node-group-20241009192358052300000002
        username: system:node:{{EC2PrivateDNSName}}
  kind: ConfigMap
  metadata:
    creationTimestamp: "2024-10-09T19:35:58Z"
    name: aws-auth
    namespace: kube-system
    resourceVersion: "1120"
    uid: da792a5f-ca77-40d1-971c-6f0e01854623
- apiVersion: v1
  data:
    Corefile: |
      .:53 {
          errors
          health {
              lameduck 5s
            }
          ready
          kubernetes cluster.local in-addr.arpa ip6.arpa {
            pods insecure
            fallthrough in-addr.arpa ip6.arpa
          }
          prometheus :9153
          forward . /etc/resolv.conf
          cache 30
          loop
          reload
          loadbalance
      }
  kind: ConfigMap
  metadata:
    creationTimestamp: "2024-10-09T19:32:36Z"
    labels:
      eks.amazonaws.com/component: coredns
      k8s-app: kube-dns
    name: coredns
    namespace: kube-system
    resourceVersion: "572"
    uid: f8fa4b71-fdf9-4339-acb7-753ece02d455
- apiVersion: v1
  data:
    client-ca-file: |
      -----BEGIN CERTIFICATE-----
      MIIDBTCCAe2gAwIBAgIICAL1OPrfp3gwDQYJKoZIhvcNAQELBQAwFTETMBEGA1UE
      AxMKa3ViZXJuZXRlczAeFw0yNDEwMDkxOTI1MTBaFw0zNDEwMDcxOTMwMTBaMBUx
      EzARBgNVBAMTCmt1YmVybmV0ZXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
      AoIBAQDlY7Kt+SOumqhXikUB1B3jLe7VCCno/1QRLrX5HMH2gBAXHWaN2LaU9wZk
      hOBrKDg0tLgkN8YJSViRs9gT90ePesS013YoO0i+4s1lttPa6j1WY91JF3gs9sru
      u0VoewAA4ju7pGy/0PF7WLh7eeZunKrW4VJJNHrnwGzKOmslzUuTkMa/1XVj43ZB
      cci7ihrwQfo8ibiW//wFAeH0mm93spez45U3dn0wMidi/khUcZjEhAJK4VK4mJi4
      A6bW5cv/DRVLMwdnDNLYhq74I2xxYLq/cnuh7XUVoYJB6pLvkwvmKvsw8U5IUiqV
      Iz9PQuNI9Bw4talBaeDY0uuYnrD1AgMBAAGjWTBXMA4GA1UdDwEB/wQEAwICpDAP
      BgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBTJ/dxLR9RQUjP3A5s6ioCK0cuQYjAV
      BgNVHREEDjAMggprdWJlcm5ldGVzMA0GCSqGSIb3DQEBCwUAA4IBAQDADyshxLC5
      7vP/vX2C/QovC6AjxEVAiZ98AjAD5DpKaGEhNqISEnvxXjMdTkoJ0/vH1phTZpgW
      99MJZCj/fEh+xxX9s89Vq9KncBUgj+R51suNyVGLSr2Np1AeeScts+BSix6vZ0YZ
      9mv97xKQpjyREGAUQbfwVOumGP2j6L4DhlfS+daVImgpFGZn3iw0MMow9d9NOeW7
      f/fR+68WJokhJOO3xS7o8fb8q9kPi3AduYjfBw/BhkWXg0svNPumz0jqBrDUAFCp
      O9BeopJ4+WjsAUwXKVYFfpVl0I68Hj3a4SQExCDRs/9iKT6E/TOn6iZRt4RDKUBv
      IQnETz8qkezc
      -----END CERTIFICATE-----
      -----BEGIN CERTIFICATE-----
      MIIDBTCCAe2gAwIBAgIIbdJjc0FRwY0wDQYJKoZIhvcNAQELBQAwFTETMBEGA1UE
      AxMKa3ViZXJuZXRlczAeFw0yNDEwMDkxOTMxMzJaFw0zNDEwMDcxOTM2MzJaMBUx
      EzARBgNVBAMTCmt1YmVybmV0ZXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
      AoIBAQDD+5BDz+dAwcOU5+bc3EIlTzD42/3U7+vnt77c6o0Yd7KKeb0Ezkqi3G2/
      9Dl1uOYr4MG7pg4EP+jvCUyfyhI3Nx0PSeTFNY81HENJZRNW3vkoH3UGX0MvXlrb
      5nFnTqOUc5fgL4Ni5gwBX/s3H1wW4hNzEYZkrQ+YMbUK28n5zlkW4/NTCPoxwne2
      LL9W8Fuv6ZLXgT40Ea7xPbjb1X3kX7SSHZ/xN6h0TMjNAwsLci7xhh5ZoPijHM9i
      A1upWqq5559PqxQ6GVtkOVKXH0WwtGe4+D5kAF1n45+Gzm/7RNgPVDvQgJt1bbdH
      U6RjM7csxkAnzcraZITp5joSJl3ZAgMBAAGjWTBXMA4GA1UdDwEB/wQEAwICpDAP
      BgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBTZmPu3J/vL2UE1nZiovqdB3a84mTAV
      BgNVHREEDjAMggprdWJlcm5ldGVzMA0GCSqGSIb3DQEBCwUAA4IBAQCFISXY6ugt
      +lQ2etMZsFFn7w/37EXORn2ggjapmxBAG9dkWksmaCTqm1u1H94Hz6w34pX/1qYx
      SUwIIedO3Qdvcdr0dRHd1zpI5voC6+7mqOooUpyCLffSeA2aYv3HqfRvrR5glX/t
      g6mgzcRCwX8Z5lJ7JIPue8AhKo0EXGhrODX4j5IME9zMgmIdXYmBpgVe1v2SeIwB
      zpDoVlzLujiHnRyM7wSQYVxhck0KZsBw8LbWfHBs9PpIr6axWDIpw3XoyEasEni7
      Wa11+ftrXY4+BLcpcy4rgocChrmHywX6o41GMvyhgWoVToClu+7e1vozN76FWckP
      At77jWJf/Nge
      -----END CERTIFICATE-----
    requestheader-allowed-names: '["front-proxy-client"]'
    requestheader-client-ca-file: |
      -----BEGIN CERTIFICATE-----
      MIIDETCCAfmgAwIBAgIIcY4sGLj7YZEwDQYJKoZIhvcNAQELBQAwGTEXMBUGA1UE
      AxMOZnJvbnQtcHJveHktY2EwHhcNMjQxMDA5MTkyNTAyWhcNMzQxMDA3MTkzMDAy
      WjAZMRcwFQYDVQQDEw5mcm9udC1wcm94eS1jYTCCASIwDQYJKoZIhvcNAQEBBQAD
      ggEPADCCAQoCggEBAMkzwv3YFTU8fqlNu2bsrbi42ElgRmOrYgV/au5E1P5UKk+3
      m0QA0CP3XDOR11NiEn+pAOGqWztRGia6YUT8NkSPi/S+2SVFoeEEoKUilWYnewnE
      NwBvuI3y/THLNbcJmyFC3T9DvCmPpyzNOnxacNqO9yDCx5whKKezxs/nbDmfLifN
      tguQsmKcLwkgzFYwsB+6dFhsA1TE+ARFZ6//5+Tbng4ezCPkeaV3m5gQ4HvcCp9J
      3Tz5qZx/4KnpPBCo9q6CPbFOwyrohTEddh2px8AVqd31n+kyZOHrSiBh+Ya6/1q5
      Dgdzy1p9g/IAysqSOFkGEG+pceOLn2Bw2y83n9MCAwEAAaNdMFswDgYDVR0PAQH/
      BAQDAgKkMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFFWqrr2eYg3qxcVqmDPQ
      QK1472gQMBkGA1UdEQQSMBCCDmZyb250LXByb3h5LWNhMA0GCSqGSIb3DQEBCwUA
      A4IBAQAQqH6RJd9Kzh73abC8SRsugZl7SR0qSV6M6fbqrCGydPlX1If2u6e0RDcs
      dJpvsHbr9A82er1ZPieUPYQ8esgsdyV4gpjaHhTo8bkDqH2dPR1a3SD2Sg3/8Bjc
      z4H7cLdewtqZH+mbwvhBoK1hJBGPEMV77txuKIHy96H3H/NxXqQ+g4pc/JKqNT3v
      BCndQNoi6mR21r5TiEI1979fItm/CGucuqh3vKMw8eIdvvUsxN+mABz7h95MaP+O
      6ev3S0xSSl3pBRJm3NsUaCGbkfauZSm0bmmuYH1RulZq4yOGKMmDkt8hlNh5Vvbo
      02ipFDz1yNY7ZDRlxRWB3U9H39ew
      -----END CERTIFICATE-----
    requestheader-extra-headers-prefix: '["X-Remote-Extra-"]'
    requestheader-group-headers: '["X-Remote-Group"]'
    requestheader-username-headers: '["X-Remote-User"]'
  kind: ConfigMap
  metadata:
    creationTimestamp: "2024-10-09T19:30:55Z"
    name: extension-apiserver-authentication
    namespace: kube-system
    resourceVersion: "1573"
    uid: f5d88e50-c0cf-4ef9-b919-0646e7d1657b
- apiVersion: v1
  data:
    since: "2024-10-09"
  kind: ConfigMap
  metadata:
    creationTimestamp: "2024-10-09T19:30:55Z"
    name: kube-apiserver-legacy-service-account-token-tracking
    namespace: kube-system
    resourceVersion: "29"
    uid: f2f9f269-2e87-49b4-b8f6-0e2d58e4d28a
- apiVersion: v1
  data:
    kubeconfig: |-
      kind: Config
      apiVersion: v1
      clusters:
      - cluster:
          certificate-authority: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          server: https://260a3f90dada104761d41ed5654bd337.gr7.us-east-1.eks.amazonaws.com
        name: default
      contexts:
      - context:
          cluster: default
          namespace: default
          user: default
        name: default
      current-context: default
      users:
      - name: default
        user:
          tokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
  kind: ConfigMap
  metadata:
    creationTimestamp: "2024-10-09T19:32:36Z"
    labels:
      eks.amazonaws.com/component: kube-proxy
      k8s-app: kube-proxy
    name: kube-proxy
    namespace: kube-system
    resourceVersion: "561"
    uid: b607c169-e047-4b57-8c84-b058e5fc3073
- apiVersion: v1
  data:
    config: |-
      apiVersion: kubeproxy.config.k8s.io/v1alpha1
      bindAddress: 0.0.0.0
      clientConnection:
        acceptContentTypes: ""
        burst: 10
        contentType: application/vnd.kubernetes.protobuf
        kubeconfig: /var/lib/kube-proxy/kubeconfig
        qps: 5
      clusterCIDR: ""
      configSyncPeriod: 15m0s
      conntrack:
        maxPerCore: 32768
        min: 131072
        tcpCloseWaitTimeout: 1h0m0s
        tcpEstablishedTimeout: 24h0m0s
      enableProfiling: false
      healthzBindAddress: 0.0.0.0:10256
      hostnameOverride: ""
      iptables:
        masqueradeAll: false
        masqueradeBit: 14
        minSyncPeriod: 0s
        syncPeriod: 30s
      ipvs:
        excludeCIDRs: null
        minSyncPeriod: 0s
        scheduler: ""
        syncPeriod: 30s
      kind: KubeProxyConfiguration
      metricsBindAddress: 0.0.0.0:10249
      mode: "iptables"
      nodePortAddresses: null
      oomScoreAdj: -998
      portRange: ""
  kind: ConfigMap
  metadata:
    creationTimestamp: "2024-10-09T19:32:36Z"
    labels:
      eks.amazonaws.com/component: kube-proxy
      k8s-app: kube-proxy
    name: kube-proxy-config
    namespace: kube-system
    resourceVersion: "562"
    uid: 3547cda3-8131-4bfa-a31c-7377c1fe17d3
- apiVersion: v1
  data:
    ca.crt: |
      -----BEGIN CERTIFICATE-----
      MIIDBTCCAe2gAwIBAgIIFt29VsxHi2cwDQYJKoZIhvcNAQELBQAwFTETMBEGA1UE
      AxMKa3ViZXJuZXRlczAeFw0yNDEwMDkxOTI1MDJaFw0zNDEwMDcxOTMwMDJaMBUx
      EzARBgNVBAMTCmt1YmVybmV0ZXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
      AoIBAQDPLMehlvfh0vm1EsjCDaaoW8kYqJfJ9WMcG0IbNemY941LqwB9HwXxg+3t
      7gdITQ9XpXh/OZIj0azGmqX5ftWmMH2aV0DjjYhXACsl0wNYgWwX9exN1pzACiNB
      HkMbo042IXK/IK96xm6Q2RoDWJbWLM11+Lr8H6y0sU0UtvYYEZlIqtqNI7Bzy3Q5
      IT22EJpj0hjgaKa+bsWKkxlHQ/kiMQ8aOn9/k7uimQgoMvH51N0m+A7815JuOkA1
      bchWRfpbdNXaNae7tWtFD3SH9c+THSWc3ADov2sxLk+RG9HnRpg5Ny4WQYFDOtNR
      uJTgCYyrcMo20iVt3a6znxHTfCD/AgMBAAGjWTBXMA4GA1UdDwEB/wQEAwICpDAP
      BgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBTYEUrj2rDbVmlooUG7wsKqfZGQ6zAV
      BgNVHREEDjAMggprdWJlcm5ldGVzMA0GCSqGSIb3DQEBCwUAA4IBAQB2uAwv6NEX
      /laJMfMs6MAr+VjiitsH4RleH4luSvakfAwYkCZCwn5Jsuldz18Usik/Jr+sM2BC
      9QmAaiaTqJ319C8yV2FbBhOG4Vl8/X3j5v+0HvNfhBAoMAjL5b1Vcfb9XPy+AYqM
      ZpxzMj9ItDHL61WYYZT5vA4DBqLDfACR1QQO3JbfbFbpL+cBk/ToLLOU/KD6My5w
      c46O2itx9e8/9Zuh+6T+NtcxljFZ8d5d4+3wMmh7e73MnUsjMEiaLZJcXThf5GRt
      1CKk4yKK2z2yEQkmrU3L60CSQ9Q1ZvCzlXtICIHKDM69yGRdIs4buOhfdGUUbz8s
      TRak1Gc6C9rg
      -----END CERTIFICATE-----
  kind: ConfigMap
  metadata:
    annotations:
      kubernetes.io/description: Contains a CA bundle that can be used to verify the
        kube-apiserver when using internal endpoints such as the internal service
        IP or kubernetes.default.svc. No other usage is guaranteed across distributions
        of Kubernetes clusters.
    creationTimestamp: "2024-10-09T19:31:06Z"
    name: kube-root-ca.crt
    namespace: kube-system
    resourceVersion: "353"
    uid: f5cddba3-d596-4bc0-bb08-42693f8a0b9f
- apiVersion: v1
  data:
    cni_network_config: |-
      {
        "cniVersion": "0.3.0",
        "name": "pan-cni",
        "type": "pan-cni",
        "log_level": "debug",
        "appinfo_dir": "/var/log/pan-appinfo",
        "mode": "service",
        "cloud": "eks",
        "dpservicename": "pan-ngfw-svc",
        "dpservicenamespace": "kube-system",
        "traffic_object_id": "1",
        "interfaces": ["eth0"],
        "interfacesip": [""],
        "interfacesmac": [""],
        "firewall": [ "pan-fw" ],
        "override_mtu": "",
        "kubernetes": {
            "kubeconfig": "__KUBECONFIG_FILEPATH__",
            "cni_bin_dir": "/opt/cni/bin",
            "exclude_namespaces": [ ],
            "security_namespaces": [ "kube-system"]
        }
      }
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: ai-runtime-security
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2024-10-11T04:20:03Z"
    labels:
      app.kubernetes.io/managed-by: Helm
    name: pan-cni-config
    namespace: kube-system
    resourceVersion: "332622"
    uid: c28e951d-3fd0-462c-b640-816d7a254a70
- apiVersion: v1
  data:
    Forward-Trust-CA-ECDSA.pem.crt: ""
    Forward-Trust-CA.pem.crt: ""
    Trust-Root-CA.crt: ""
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: utilities
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2024-10-11T05:19:18Z"
    labels:
      app.kubernetes.io/managed-by: Helm
    name: custom-ca-certs
    namespace: utilities
    resourceVersion: "343052"
    uid: d5bf5869-7d66-4892-b657-b4b61fd651fe
- apiVersion: v1
  data:
    ca.crt: |
      -----BEGIN CERTIFICATE-----
      MIIDBTCCAe2gAwIBAgIIFt29VsxHi2cwDQYJKoZIhvcNAQELBQAwFTETMBEGA1UE
      AxMKa3ViZXJuZXRlczAeFw0yNDEwMDkxOTI1MDJaFw0zNDEwMDcxOTMwMDJaMBUx
      EzARBgNVBAMTCmt1YmVybmV0ZXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
      AoIBAQDPLMehlvfh0vm1EsjCDaaoW8kYqJfJ9WMcG0IbNemY941LqwB9HwXxg+3t
      7gdITQ9XpXh/OZIj0azGmqX5ftWmMH2aV0DjjYhXACsl0wNYgWwX9exN1pzACiNB
      HkMbo042IXK/IK96xm6Q2RoDWJbWLM11+Lr8H6y0sU0UtvYYEZlIqtqNI7Bzy3Q5
      IT22EJpj0hjgaKa+bsWKkxlHQ/kiMQ8aOn9/k7uimQgoMvH51N0m+A7815JuOkA1
      bchWRfpbdNXaNae7tWtFD3SH9c+THSWc3ADov2sxLk+RG9HnRpg5Ny4WQYFDOtNR
      uJTgCYyrcMo20iVt3a6znxHTfCD/AgMBAAGjWTBXMA4GA1UdDwEB/wQEAwICpDAP
      BgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBTYEUrj2rDbVmlooUG7wsKqfZGQ6zAV
      BgNVHREEDjAMggprdWJlcm5ldGVzMA0GCSqGSIb3DQEBCwUAA4IBAQB2uAwv6NEX
      /laJMfMs6MAr+VjiitsH4RleH4luSvakfAwYkCZCwn5Jsuldz18Usik/Jr+sM2BC
      9QmAaiaTqJ319C8yV2FbBhOG4Vl8/X3j5v+0HvNfhBAoMAjL5b1Vcfb9XPy+AYqM
      ZpxzMj9ItDHL61WYYZT5vA4DBqLDfACR1QQO3JbfbFbpL+cBk/ToLLOU/KD6My5w
      c46O2itx9e8/9Zuh+6T+NtcxljFZ8d5d4+3wMmh7e73MnUsjMEiaLZJcXThf5GRt
      1CKk4yKK2z2yEQkmrU3L60CSQ9Q1ZvCzlXtICIHKDM69yGRdIs4buOhfdGUUbz8s
      TRak1Gc6C9rg
      -----END CERTIFICATE-----
  kind: ConfigMap
  metadata:
    annotations:
      kubernetes.io/description: Contains a CA bundle that can be used to verify the
        kube-apiserver when using internal endpoints such as the internal service
        IP or kubernetes.default.svc. No other usage is guaranteed across distributions
        of Kubernetes clusters.
    creationTimestamp: "2024-10-11T05:19:18Z"
    name: kube-root-ca.crt
    namespace: utilities
    resourceVersion: "343053"
    uid: d39fefaf-de20-4db7-9b53-a55555845a1b
kind: List
metadata:
  resourceVersion: ""
apiVersion: v1
items:
- apiVersion: v1
  data:
    release: SDRzSUFBQUFBQUFDLzh4YWEzUGlPTFArS3k2Zi9RZ1pYMEptOEZ2N0FUTnJBOHVRQkJMZlRyYW1aRW5ZRHJMc3NtVUk3TWwvUHlVYmc3bmtNdG5acVpjcXFyRFUzZXJ1cDI5VzhyZElRWXhGVFFSUkc2U3AyQklqT2s5RTdXOXhIbVU1KzQ1d1NwSTFScUltS3BKeTJaYWx0aXpmU1plYUltbUtjdEg5Y3ZtbG82cXk2b2t0a1lBZlpFQ1lZRmFTbGc4NXpLS1VSUWtWTlhGSWN3WUlFV0FTcDV4SWJJazVBNnpJUlUzTWl4Um5PVVlZaWM4dEVZWWdZMXpoR0RPQUFBUDg5N0ZSUzV6bGxXRHBRcjZRVG83ckNRTk1ZcUdVSmN5VFRPZ05CWkNtSklLZ3BHaUpJSTJzblpDbFVxNmsreFg1UXJxUXVEb2tnUXRSb3dVaExaSGhPQ1dBNFZ6VS9uZW4wMjd4a3lTMStWcWVBb2p6aXpXSUNkZXJ0RUFjenlUV2o0MFZzRHdDNlNUMWxjdXI0Y0I5NnNjczllUGJxK0VmbmRDM3JRMDBqVWZ2Tm1XZU13MDkwNURjdStUUFlWOHZYRnNtMTVIK0dhOTdoUlViT2JLdHpUaHU4TXc2SVJ6MGdya2pjZnJRanp0TFpCb1NzTHNGM0hBWnZXQTQwRVBmN0liK1lMcjBZMHRDU25jTjFHK0ZxM1RaV1BGU0dGdXFhei9sMTVHK2N1MUw1bEg0dS9qY09tZXAzTTV4dG93Z0JoQW1CV1UvYks0eElaQjZxYXRZdXF0TWxzanVTUDFZSnNnMEZxNHpEYStESkJpYTNMejdxNkZwWlhBdHIzeGx1aGs3azdBZjlRSS9OcGpuVEZhdVBmbm5iaW5sY3g3anlsYzZJYXBkb282V3ZublBYR2RVbkp4QjlhVTNLUGU1N0JmY0JBSk1XYnZLb0JoVGR1UWsxOUZUSzdiV1VDRkwvekVKWEVkZndYVlgrWGFiWnNEdUxLNGovUS9QMFhOZkpjeDcxVUVHNWZ0amUwcWcrYlRFdGt4OGVydUxHNmpxb2F2Y1h3MEg3UE93MzdGZCswbjJuRzlGMDRuajJGakJ2dDZkMzZZYmFGcVBwZnpCaU10TFhjWFluRHA1ZXliZDBYejFWYXRBcFF6T095RythVDBpczdzdVpmVjdnVzhia3F1RTMxeDdSUHpCdHlzT1pBV0FzWUpmazhDMVVhMjM1Tm55eWpjTnlidXJRVHF5bmEvMTlmeEVWcjlYK3ZFNjBrTlBzUXJVcTJpaHFoTzNCcHcvSzlZYXhlVFJ1emNlWGFVciszUjZmVDdIYWp0UEEvYU8rMisydGJmUzU5RlhPcEpyazhKelJwdTludndyVlVGNzE3UnpyL1BRSkl5dlgwZTlDS3Q1TUNaZTZBOHN3Z096dEtQZlNYM2JvTjZzcy9ZY2ZRa1ZJdm5xcURNY3lOMXJlb2pyVm40QmJEbjBsUHNDbVFibGRNTURmWHBCdFcvZEl2c3B2emU3T2JBbm5SZnRqeXY5eGxTWGZmUHAxbGVlVWxkZGJCT3JZY2RBWDBJNlBiSzkvTEtoT1ZuNmRCb0N1ME1nNFhTM0p6Rlo2NzdEWjlhUlhHZEVQV2Q2NjZzamlkdlJEMzUvTmVHMnBlbU5iRU9QZi93SkZGSjRYNVBndmo3dDVjcTdSVUhlZU01SUFmYUVmTFFNN1NOUmw3Q2pjNzZ2L3NEYUlOTmF6NndlWDE5eFMzZmxxUzhGME95dTBkY2tlQ0V5ZGpyeHNnVHA3UUVxeURUV25tSko5KytXTVExaGpBZ3ltckwwaldjL0VWZWRMdUZqblpFSFdmc0NJaEVOTXB3ZnR3ZXM1bXhva3JpSlBMQTdGTWJXQnE0N3hJK055RGV0eGJBdjg0b1VRcFBZUEtONDJiNk85TUp6cHFxdmpuaVZwT000djRUclR1b2ZWczZSSDZPMTUwdzJyMVROZE13elZSMFJxSDc3WUxYazhvekNqN3VTNjB4VFgrbnNJdCtQVWVyVG9HbFhodXdSZ1hHSElKUEhCMW1PVlgzdHEyRm43SXlJYTk4eVpQSkszNVU1VHNPanJHN0lXY0c0ZTRrdHpqTzlCN3phcTViVXpQQWZPM3RDL1BoSHorWTgvK1Rzc3BvU0dNa2JQeVlyYUZvODNvTjViMS9aZldVU0lwTXMvYWkzNUxrN1Z0Rm1PTWdiMVViZjZ0TGRlTTUwRGt3cjlFeHJQVFNzbGFlT1FzKzhEMFptS0tHQlBrZU9UbUZzTEx5N3Mvd0pHa3hYanJvYlZZSnZzOHVuNjFYU3JHcWxyeHgxUXBEUlRUemJXSGpPTUxEN3N1bXJJOVYxUmd2UHZtVXpzN3RCL2Q0Q0RLWVNOTHFKcjA2a2o4aTVINHlXeVB3U2pBYVRSMkJhN0FXOWord08yRFR1cnBGaXJEM1RXb3p2dlNXTWVnc1lXOHhYcDhSUmpJVTNHSDV1ZGtvNEdDM3hnTXloWWttT0V2SjRJakRTaDF6dllYLzZidjF2bFc3aHg3emJsM2hGTzMvUHpwL25LZ2EzYSs1U3NuS2R5WWFmVldHd3cyN1BOemlvbVdtZDE3ZktVd2pWeVF0ZGU1ZlhoZHVnSzd0SDFBc2d0WExQMlUwTmJGakdTZTlnaW9COFREeWFMTXE2TlJpRmZveklTL25oT3RNRXJwdFRRZlVkei9SeXI5YTFsTjgvcGVQNGNqcHJRRlo4V2lqck5kVkRaSWIzdkYvVU5oeE9ENlBRVlJqUDQ2dVR2ZWEwYzVmOGVieFg4VzlyWWxYemRyM2dkTUk1a3J2dEtlZk8zTXFWZlo3N2o3VWR1eWxxMzgyUC9XdGFoVmROb3AveFdnbzh1N040dmVzWDBTK1lzUWRXK2t2bmEycWxQM08yUnZiaVo4M1ZNcmc5UDFPN1NwZlBtcW5QL2IwNWlEVFc5T05odE9qVlhIdDMybldRdmRqTnNEQzJWcjQ2U2JuTm1FZmtYWHJxcjkyTU9nMDlub0d6NGRrWiszNWc1YjZoTDMyVFBPSzdrNGxJQnJQZHJMMXF6c2FubVhjOHFSMWtlL05kb0l6Mjh4alhHVkhPNmZ0SnJjVDZsWWovVjRaY0djeitxd1pjRHNVL0dXNlArSDlzc0VYMjRuZngrYStXdUFTa3dMbW8vUzJXN3hmOFJ4U0RBUE1mYVVISVRVSWl1QlkxY1RpZkpPd213em1uYW9rWlRwTThZa25HOStJb0FCbll2cUZVbDFnTUJLSW1sb2d5OGJta0p4RUUvYVRnaDhndGNZdHhlVTZTTVZIN0luR3VMTURzcG54V0pVbCszdEgxcXJ1WVNSVXRlSkczMHdUbDdSeHc0ZHRCbk11Q0JPVDVsb29HRVgwU1d5S213Q2NZaVJyTEN0d1NVOERDNnBhTC94STE4Uk5JbzA5aXRYRzNUam5yVFlibkVlZmRIcitWZVBBT3R0KzkyUnJBNDdtVytTNTUrMWcvSSt5dmxwaG15ZE42aWdHNmkyS2NGRXpVUlBWS2tzVHR6Z3pUNDUzbmxyaTdweXRSVGRQREM5T3RwK3BmN2NwSnp5MHhUVkNXa05MS2pHcGdsV3NSaURWTlZ0VEx6dFhuTHhyZi9GVDV2VjBTdHNRaStrZnhVa1EvTTFpa2R3VUxKNEloamtGOTd6bVBDSTkvL3ZEY0VtRkM1MUZRblhQV0hlclY1NDRpWHltZGpueFZ1WVJlSld0bHVjemF1T21jNTVZWUF4ck51VVdhMkc2M0grai9DTE9reUNEV2hBcU9UNi9kcmo3US9TV3VKaXpsQjdxSUtOS0VTVTMyUU9zN1pPMkJDZ0pucndYelowQnB3c3I3NEx6Y0Y0UVVrQVFRbGxETVZrbTJ5QzlnRW4rYVJ4bGVBVUkwSVFXMFBWODkwRGRWUFg4OStwSytzd05FemlyZHdLZGVMQzE4M1J5OHlDOUFERFlKQmF2S0Z1NzNOZ2RMK0FoaWIxdCtlZ0h6aHRIbklXcEtlY0hlUE1Xd1pHSHJGR3RDbnhRNXc5bndoaS94K0s5OTBDNmZOT0dMVkQwTHdqNG5OSUVYVUw2ZVk0SWhTN0l0RTBqVHJSWnZtM3pVaXo5aTcxN0V2MjJzOUpLeFJmUmVjSTlHN1VON1Facm1uL1pHZjkzUnZvSXphaEM5YnYyMjV1V2FjQTYwR0RBWWpvR1BTZTJPUXlBRm9UYWxabWhxeEQva2tQbVlYUkIybXBRUEo0WDBKRS81QnlhVWdZamlyQ200M2ZUQWZsa1F5a2FoQ1E4bjg0SldsZjRIOFlUNlp0ZFNOS0haVVpxRXpTRFo2N0JUclprTTc0ajNueGdDQjlMK0pmeDViSDhVL0lyM0NQbFhJYTA1enVOWjlmTmZBNmIwTnBqTjY5bERHTGN0TUtMQnhlSkxmaEVsRFV5SEZkZEw3VFdxdDkvZHFNb0I2NkpXWmxINE9LT1k0ZkxZY29wclp4aWdOcXZtT081T1BzalY3bnViTzhmMFE5dzh4WEhXem1tVXBwamxtdkIvdTJoSnFyOGtDK1Zndk1xRnYvZDRsR2QrenpIN0htS0FjQ2JjcDBFR0VCWitDeGxMdnhmVjAzK09HY3JON1IrMkJmbEMvczhyRXAyMmtXUXJrQ0dNMm9Na1oxdlJZWkt6OTdMZFpBbExoTi9LU1ErL2w4bElNdUczRE1jSnc5OEJRdGxyZkZ1OTNsQ3BuMUNLWWVuS0IzSHJtZ2Z4aEFNQ0dPTHYvam9GZWY2Q0g1OGJsV0lMWjc5KzA5RXFtTXNpVWhDODc1ZGNVaU9WeXZlZWc5UnFsMnRhaGZOaHp0WHZMcHBRdmJvYzd2b0FMakJGUjNtNmF4c242eThPUDRlZnFzR2ZyZ3NDTFdJZlo4M21mNkQvcjlEOWNKRDVpT0xOLysyUUQ5N1RSSVRub0NCTWZQNy9BQUFBLy8vUCsyaTQ1Q0lBQUE9PQ==
  kind: Secret
  metadata:
    creationTimestamp: "2024-10-11T04:20:23Z"
    labels:
      modifiedAt: "1728620423"
      name: ai-app
      owner: helm
      status: superseded
      version: "1"
    name: sh.helm.release.v1.ai-app.v1
    namespace: default
    resourceVersion: "343043"
    uid: e1d6b64d-9e1b-41fc-8d61-2068bdcc16f8
  type: helm.sh/release.v1
- apiVersion: v1
  data:
    release: SDRzSUFBQUFBQUFDLzh4YSszT2l5TGYvVnlqdS9xZ1pIakdKZkd0L0VHZEJYY2RFamJ4dXRxYWFwZ1ZpMDFEUWFIUnYvdmRiRGFMNFNyS1oyYWx2cXF5UzduTk9uM00rNTBXYnYza0NJc1FyUEFpYklFbjRCaCtTZWN3cmYvUHpNTTNvZHc4bE9GNGpqMWQ0U1pDdW02TFFGTVZINFZxUkJFV1NydHAzMTNjdFdSWmxoMi93R0Z4bWFDbGlXeEZ2cm03djdvVFczYTE0eHhnOGhCRXRTSXVIREtaaFFzT1k4QW8vUy93VWVJaURjWlF3SXI3Qlp4VFFQT01WZm5mRWE0T0hBVWdwVXpkQ0ZIaUFBdmI5MktRbFNyTlNySEFsWGdrbmgzVzRIc0lSVjhqaTVuSEtkZm9jU0JJY1FsQlFOSGlRaE1aT3lGSXFWcEw5aW5nbFhBbE1IUnpEQmErUUhPTUdUMUdVWUVCUnhpdi91OU5wdC9oRkVKcHNMVXNBUk5uVkdrU1k2VlZZd0ErbkF1MUcyZ29ZRG9aa2xMalM5VTIvWjc5MEk1cTQwZmltLzBjcmNFMWpBM1h0MlJrbjFMRW1nYU5yZ3YwWS85bnZxcmx0aXZnK1ZHL1J1cE1ia1paNXByRVpSaldlYVN1QXZZNC90d1JHSDdoUmErbnBtZ0RNZGc0M1RFYkg3L2ZVd05YYmdkdWJMTjNJRUR5cHZRYnl0OXlXMm5Rb09RbU1ETmsyWDdMN1VGM1o1alYxQ1B5ZGYyMmNzMVJzWmloZGhoQUJDT09jMEg5c3JqYkNrRGlKTFJtcUxZMldudGtTdXBHSVBWMWIyTllrdVBkanY2OHo4MlkzZmQxSTRWcGN1ZEprTTdSR1FUZnMrRzZrVWNjYXJXeHo5T051S2VRekh1M0dsVnFCVjdsRUhpeGRmVVp0YTVDZm5FSFVwZE1yOXBuc0MyNENQaUswV1FaM2hBZzljcEp0cVlrUkdXc280YVg3SFB1MnBhN2d1aTE5R3ljcE1GdUwrMUQ5dzdIVXpKVXhkZDUwa0ViWS90Q2NZS2kvTEpFcFlwZU1kM0VEWlRXd3BkbE52MGR2KzkyV2Fac3ZvbU45eSt0T0hFYmFDbmJWOW55Y2JLQnVQQmZ5ZXdNbUw3RWxiWFBxNU8yWlpFZnoxWldOM0N0a01ONFJkblhqMmRQYjYwSld0K083cGliWVV2RE5OZ2ZZN1gyN1lVQ1dBR2dyK0RYMmJkT3I5QlljVTF5NXVpWTRqeFZJUjdhenRhNmFuY2pxZGdvLzNvZHE0RWhHN25WS1dpaXIySzRBWjgrU3NmWWkvT3pNdEdkYmFvc3VtZHlmejdIS3p0T0FmV1QrbTI3dExmVjVkcVdXWUpzNGQ2ekJacThuK3dobDBEN1c3ZHpyM05jeFpldjNZU2RFY3VZUHNSTzRQUU96d0N6czZMWVMxOVNJTTIydEhVdGRRZ2tMcmp4bzlYdGkrNTRjNHJxVm53TlREQnhwbG51NlJoaGQvMENmamwvdUcyUFBmTWxtZWpzRDVxaDEwZjZvMUc5SVZOSFZYOGF1OUpMWThtS2JXRFU3ZXVvU2tzbVI3Y1dIOXZYUjBpV1RBSmd0RERHakc1L0VaS1g3RHA5cFM3Q3RBWEdzeWRpVkJ3S3pvK3YvL21iQ2JVdlRPOW5tUGYveEo1Qnc3bnlOL1ZsMTJ1WEt1MFZCM0RqV1FBTG1DSCsyRE8walVSV1FwVEsrcjI3UDJIaTZzWjRhSGJhK1lwYnV5bE5YOEtIZVhudGZZLzlDWk94MFltVUprdkVCS3A2dXJSM0pFR1lmbGpFSllPUmhUNnZMVWplTytZSnRlYktFejFWR0htVHRCVVJDNHFjb08yNFBTTTVvWDhkUkhYbGd0Z2lNakExY3Q3QWJhYUdyRzR0K1YyUVZLWUE2TmxsR3NiSjlINnE1WTAxa1Z4NndLa21HVVhZTjE2M0VQYXljQXpmeTFvNDEycnhSTlpNaHkxUjVnS0g4N1pQVmtzblRjamRxQzdZMVNWeXB0WXQ4Ti9JU2wvaDF1MUxQSEdBWXRiQ25zL2pBeTZHc3JsMDVhQTJ0QWJiTk1mVjBWdW5iSXNPcGY1VFZOVGtyR0xXdmtjRjRKalBBcXIxc0NQVU0vMmRuajdBYi9kT3pHYytQbkYxVVV3eERjZU5HZUFWMWc4VzdQKy9zSzdzcmpRSlB4MHMzN0N4WjdnNWxiOVB2WmJWcW8yNTFhVzhjYXpJSHVoRTR1ckh1YThiS2tRZUJvOC84Z1I0SVhrK2RlNVpLWUtRdG5NZXovTEhYbTZ3c2VUZXErTittMXkvM3E3aGUxUXBmV2ZJSWUxbzdka3h0NFZoOTMreUt1aXNQWk5zYUxCeHpUS2Q2ZStOMU93dlFtd2hRYThldVBCSStJMmZXR3l3OS9jNGY5RWJQUURmb0JiMlA3UGJwSkdxdlBVbGJPN3F4R002Y0pRdzdDeGdaMUpVbjJKSzBoZFByMzlZN0pld05scWlINTFBeUJFc0tXRHhoR0twOXBuZS9PL213L21PcG5ic1I2L1lGWHVITzM5UHo1OW1TeHV5YTJ3U3ZiR3UwWVdlVkdPeXcyL1AxRG1wbVV1WDFXSG9Kb0R5NjBMVjNlWjNiTmJxaWU0UWRIeElqYzZ6ZDFFRDdSWngwRHFZSXlNYkVvOG1pcUZ1OVFlQkdIcjZVSDdZMWllRzZQaFdVbitGVUxmWXFYUXY1M1ZNNmhpK2pNM3A0eGFhRm9sNFROZkQwWU1iNlJXWEQ0ZlF3Q0d5SnNqeStPZG1yVHp1UDhaL0hleVgvdGlhV05XL1hDMDRubkNPNTI1NXk3c3l0WE5GbHVmOWMyYkdib3ZiZC9OaS91cEU3NVNSNmk5YUM3NWl0eGR0ZFB3OS93WXpkTTVKZk9sOFRJL21aczdWbkxuN1dYQzJDOGZtWjJwYmFiTlpNWE9idnpVR2swYm9mRDZORkxlZmF4OU91NDVtTDNRd0xJMlBseXFPRTJZeFlSRDRtcC83YXphaVR3R0VaT08yZm5iRm5QU056TlhYcDZ2Z1pQWjVNUkNLWTdtYnRWWDAyUHMyODQwbnRJTnZyN3dKRnRKL0h1TXFJWWs3ZlQyb0YxbTlFL0w4eTVJcGcrbDgxNERJb2ZtUzRQZUwvWjRPdFp5NSs1MS8vYXZCTGdIT1U4Y3JmZlBGK3diNkVFZkFSKzVMa0dEL0VPSVJyWHVINzgxRk1IMUtVTWFvR242SWt6a0lhcDJ3dkNuMlFndTBiU25tSlJZSFBLM3lCS09WZkMzb2NRdENOYzNhSTJPQzNHQmZueENubGxUdUJjYVUrb2cvRnN5d0k0dXVPcmxQZXhZekthRUdMckpuRVh0Yk1BQk8rSGNTWkxJaEJsbTJwaUIrU0Y3N0JJd0pjakR4ZW9XbU9HbndDYUZEZWNyRnZ2TUovQVVuNGhTODNIdGNKWTMxSTBUeGt2TnZqdHhJUDNzSDJ1dzliQTFnOFZ6SS9KRzhmNjJlRS9kWGdrelIrV1U4UThCN0RDTVU1NVJWZXZoRUVmcnN6UmVSNDU3WEI3KzdwQ2xTVDVQQzZkT3VwNmx1emROSnJnMDlpTDQxeFlXVktGTERLbEJCRWlpSks4blhyNXZaT1ladGZTcjgzQzhJR240Yy9GQzk1K0RPRFJmaFFzREFpR0tBSVZQZWU4eEN6K0djUHJ3MGV4bVFlK3VVNVo5MGgzOXkySlBGR2FyWEVtOUlsNUNaZVM4dGwya1IxNTd3MitBaVFjTTRzVXZobXMvbEUvb2VieG5rS2tjS1ZjSHg1NjNiMWlld3ZjUlZ1S1Q2UlJVZzhoUnRWWkUra3VrTlduZ2pITWZaS01Ic0doTVMwdUEvT2luMk9Td0NPQWFZeFFYUVZwNHZzQ3NiUmwzbVlvaFhBV09FU1FKcnoxUk41VjlYejE2T1g5SjBlSUhKVzZSbysxV0poNGR2bW9FVjJCU0t3aVFsWWxiWXd2emNaV054bkVIdmY4dE1MbUhlTVBnOVJYY29GZTdNRXdZS0ZyaE9rY0YyY1p4U2wvUWUyeE9LLzhrR3plRks0TzZGODVyaDlUaWdjSzZCc1BVTVlRUnFuV3lhUUpGc3QzamY1cUJkL3h0NjlpSC9iV09HU3NYbjRVWENQUnUxRGUwR1NaRi8yUm4vZDBiNkJzMWNqZXR2NmJjM0xGTzRjYUJHZ01CZ0NGK0hLSFlkQWNseGxTc1ZRMTRqOTRVUG1ZM2FPMjJsU1BKd1UwcE04Wlg4d0poU0VCS1Yxd2MyNkIvYkxIRmMwQ29WN09wa1hsTEwwUC9FbjFBKzdscUp3OVk1U0o2d0h5VjZIbldyMVpQaEF2UC9FRURpUTlpL2h6Mkw3cytDWHZFZkl2d2xweFhFZXo3S2YveG93aGZmQnJGL1BIc0s0YllFaDhhOFdkOWxWR05jdzdaZGNsOXByV0cxL3VGRVZBOVpWcGN3aWQxRktFRVhGc2NVVTEwd1I4SnEwbk9PWU85a2dWN252ZmU0TWtVOXhzeFJIYVRNallaSWdtaW5jLysyaUpTNS9TZWFLd1hpVmNYL3Y4U2pPL0o0aCtqMUF3RU1wVi8zMC9WdEFhZkk5TDUvK2M4eFFiRzUvMk9iRUsvRS9iMGkwbWxxY3JrRHFJYS9aaXpPNkZSM0VHZjBvMjBNYTA1ajdyWmowMEVlWnREamxma3RSRkZQMEhYaGUraGJmVnE5M1ZPckdoQ0JZdVBLSjM3cm1pVC9oZ0FBRzZMdTdUa0NXWGZEamE2MVNiT0hzVm04NlNnbHpVVVJ5alBiOWtrbXFwVkx4M25PUVdzMWlUU2x4UHN5NTZ0MUY0Y3BYbDhOZEY4QUZJdDVSbnU3YXhzbjZ4ZUhuOEs5czhLZnJIRWZ5eUVWcHZma2Y2UDhyZEQ4Y1pENmplUDEvTzZTRDl6VGVRM09RWThxLy9uOEFBQUQvLzZlL29kZmlJZ0FB
  kind: Secret
  metadata:
    creationTimestamp: "2024-10-11T05:19:17Z"
    labels:
      modifiedAt: "1728620423"
      name: ai-app
      owner: helm
      status: deployed
      version: "2"
    name: sh.helm.release.v1.ai-app.v2
    namespace: default
    resourceVersion: "343045"
    uid: 0797fea4-b544-457c-be8e-a382da4976e2
  type: helm.sh/release.v1
- apiVersion: v1
  data:
    release: SDRzSUFBQUFBQUFDLzZ4WWYzT3FTQmI5S2hUNzM1WkV3T0I3c0RWL0tGSEVNV1RWaEYrVHFhMm1hUUZ0R2dvYWpNNjg3NzdWR0pRa1ppWXp1MVQ1Nm5YMzdYdnZPWDM3OUszOHhoT1FJbDdqSzVyZ2hDYW81SHQ4UWpZWnIvM0diNUtpcFA4SlVZNnpBd3A1alpkRitWYVFSRUdTSGtWRmsxUk4rbmFqU3FveVZML0xxcy8zZUF6KzRvWVFZVVFiMDJaUXdpTEphWklSWHVOTlVsS0FNUWV6TkdkR2ZJOHZLYUJWeVd2OE9jU1BIZzlqVUZDV2Jvb29DQUVGN1A5WFVOV29LRStleFJ2cFJ2d1FiNFp3amdvT2tKQ2pSVllGR0pWeGx0R0VSRnlKaWpxQmpSZVFKL2JaVVMwM00vbGxScm9SYjBTV0ZjN2dqdGRJaFhHUHB5ak5NYUNvNUxWZnpxbWRKL3VpS0xDNU1nY1FsVGNIa0dLV1d3T0VYNnhGcXFmVFBiQjlESW1WQi9MdDBKeDVMM3BLOHlCZERzMkpFZ2VPZllUR2RPc3ZjK3E3cTlnM3BxTDNtUDFzNnVQS2N5VDhrSXkvb2NPb3N0TnBHVHIyY1pGMjlxeVZHTTVHMGNZVm1YMGNwRW9kR2xNUk9Hb0ZqOHpIS0RKbjR6Z3cxRGlZcmVvZ3RjVlFWZzlnY0Y5NXNrb1hzcC9EMUI1NHprdjVrSXozbm5OTGZRSi80bi8wcmlHVmhGY3FBWVJaUmVoZmhqdTFNQ1IrN3NuMjJKT3RPblFVVVU4bEhCclRuZWV1NG9jb2kweUR3WHNhbW9aZHdJTzBEK1RWY2VGYXNaNk1vaUNkVXQrMTlwNWovZSswTlA3Wm51a3drSlU0YkNrWnpPdkFlS0tlTzY4K3hDRGoycDgxNjh6M0p6UkJJTkNpS3VrN2NqeDNuTnVwZllBeXJvTnRGb1hieWM5QXhwVi9sMFZMV2EzOEZKTkhaN3IvbkJCTGdvTlZIYXlscmJlV3RyNDdGK0crWFg4Ri9waEZhRkJHQyt6SHdjekc4S0EwTlFRSDQ5aVRueXJQSGUvTm1hVHE2U29PamNtUWtXclA1aEljTE9sVHF0YWhMdDB0MThvV2t1WFFuTzJwVHVnM1UxY000THd3WHpQZlhVWm1jbHN0RHE4LzJZb1gwdW9RdXBhNHNPZDFNRmpTcFRpcHZNRmNOSlB4ZDlOUThpQmQ0WUFzSTBzZnE1dGxGcGtUdjRZa2pHRzZwRzNzcFRpaHF5ZHI4aVJPS21qWWRKRmFoL0F1aXphNitIT0RaK2ZuZ1dFZkY3c1FoL29vV1NTM2Rmdno1RW05U3RWREtFOFB2aTQ5UVdJZlR6aWs2VkpjUFM3WHl0NTN4TCtUMC84eGx6L0w0YWRQaW9rZzJ1aVljTkxNRkpFL3F5dDJ4dkNneXZmTHZBQ09zbnRJeGhQZkhaZkJBRlAvank3Y3JEbHJ4M05lSk4rOXI1aFdRRGxtWjFyNWhyMFBERlVKSExzS0c4MTZhaTlYdDc2dStMaGMyRVU2M2NNR2EzNkVocjF0WXMvbUdCb3Z1U2RQajFjdU5BNW5WaGJJcXJnZ0Y3dW1mcE5SQkdXNzlCMUxEQVptVThlbVBxYWV1OXFDeVV2c3BYWjV2dWo2cU9Ia0lSbFh2cnM2QWtPdHd4R0x2Y0tCT3k0OWQ0V2JYUFJSRkRpMjZEbVh1M0VTaW8vK21LakEyV2hvR3BjY1gzTzRZRHZaSFgxM0xnUEh3a3ZIMmdhRE0zOS95RGVVN1VPWTRxMy9OTjE2c2lvRlpQWEFlRzZ4bi9LeTZvQ3NZdUFvR0pMN1M3NjZlQkxLeHl6cStPem1uZ2ZPbEZ6VGlqTS91bkt5V2IvZUQ3MFQwNUhpazVpWHlVS2U1MEdpSG9FK0R5L3hHZDl6OHBhdkVUVjFhZHUxV2F6SDM3dGpVeDl2b1Q2cXZZRjlEQTJWTGh6MldLeU9pME1XTFFiMkVTWnFHY2hXSE9qcUVSalRnNzlXenpvSUhQYW9URVhmdmEvZitaU2d3Yzd6aVhyeWhIcU1Wd09ud0xIaTBMQ1A3Mnl4SjhlMXFjL3ZtSjRGc2hpOXR6ZU42YzQzN0owWmRUalJSMUVveHpsN0ZNTFpYUElmeThnM3ZrZFFmc0crTzRydWo5NysvbzdOcVpYZjVYTG0xOEhNcHY2VDFEeUVIL2k2b3Z0bnplL0VEcHltUHBhZXU4b2Vrby84dmNONDhKM3A3bEZXU3ZTWW5mSTk1elNXQS9sRlltL0pwWDYvbUFlcmk5VFBmVkdLNGQwYkhGL1NsemJuSmVON1p0MEZzcElDSjdROGQvVDYwUDdhNDJ1QUs5YUVuVlN5NmJmWUFPVDVtMWJ4UjQ5dlJaTXR3NnFrV2FxamdwWjZSalpKZEErWS9XbGFnRUNBYktscEoxdUJ0VTRpZkVWNldYZWRncWhaVFdDR3dRNmNGWnJ2OFFYS2NRSkJ5V3RTajM5dGxVYW5WdW5WSjlxVlFwNkZwVkFDbG1pZWhVV0cyUUlvaUFiMnBaYUFWTk1rZVhDckRMOTkxOWhpLzdSRmFBeC85UGdTeGlnRmJYTzZTVERqaEExWU05MGdaTEEvOFR3WWZsTmthU2dyaWpROGVTZkQ3Q0RYZFNHZ2QzRlNRSklOS2ltdjhZSWdQSk4vY091c0tpRFN1RFBYL1QvcWdwL0pwZG5XdUZwNkpydUVoQnBudFdiUHBHMzV0V2ZDY1d4N3h6ZWJBb1JrRkxBR3YyeE1PQzRIT0FPWVpnVFJmVmJzeWh1WXBmMU5VcUE5d0ZqamNrQ0V6ZjZaZkNYaDY4M3NaMW12MzV6bTFkUTdaOXRPTmpqL0ZCVGFsVGNnQmNlTWdQMEpFVHNEZ1IwYzkzZE83MHY0MzNTcG42RSszNWlyZ04vZG9jOUJuL2M5c29qQ2lsMHFmWFFEQzZweHZ3dlA1RVFEKzNlYUZYdFFoTUxKVUI4SkUvMXVQYnJKVWZvVjY3ZDJYeURocys3cUxSOGd6OHYraFpTN3MrMVZWcTc0L0p5Wk1rZXcyZHRLaDhaSmJGZ2lqQ0ROaXRjS1NRR0Y4UUlFQ0xjMXc3R3NMc0hZWkF1cjNkTk5qWDM0N2Y0ckhqanVuRTh6K0tCZ0g0cWNmVEFqRkNRRUZSZmZ3anN1TGpFYitkUzREK3A1c1lCWm1nTEc4eS9QZkQ5SVNMK01uL2xmTzFrWFVSZUV3QW13Ty9yOU11QTRtSFA5dGtwWmlmYi95Zldyc3VqakRBTGNMMk5Rb1A1citTYWJCRFkxMGQxZjVTR2dTSGhuMHJWQU1NNjRaMTV2Z25CZEt3NkVJUXFmK2E3MVBrNHc0bWhSb1g5eFljYVZHS0djR3d4RmtRMEp1cGpXR2E1U2ROL28waHV3YjI5ZWUrM2FMMlViL2cxb3JMM0YzYlVwRUFnZkNENW9UUjd0eWluZ3h4Tzg3Z1cydXFCMVBYK2lDdDAvM2tpOTd1UE5oMmdES2t6NUgvOE5BQUQvL3hoSFp3ekpFZ0FB
  kind: Secret
  metadata:
    creationTimestamp: "2024-10-11T05:19:18Z"
    labels:
      modifiedAt: "1728623958"
      name: utilities
      owner: helm
      status: deployed
      version: "1"
    name: sh.helm.release.v1.utilities.v1
    namespace: default
    resourceVersion: "343056"
    uid: 0298e274-eace-4e15-a0b7-5d382fdc5c38
  type: helm.sh/release.v1
- apiVersion: v1
  data:
    ca: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJkakNDQVJ5Z0F3SUJBZ0lSQUpJUlI0YnNYZFV6TUJ0YnBURkNndXd3Q2dZSUtvWkl6ajBFQXdJd0R6RU4KTUFzR0ExVUVDaE1FYm1sc01UQWdGdzB5TkRFd01UQXdOREkyTVROYUdBOHlNVEkwTURreE5qQTBNall4TTFvdwpEekVOTUFzR0ExVUVDaE1FYm1sc01UQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJMbndseng3CnlveTJhcUUwOWNPa08ya29aL0ZpckRXRGNiMVlIc1FBNEsrd0dWbmJadjF1L3ZKSHBvRkp5VVozZGpJdjI2UXgKOVA3ZVdscmpvSGIrcTEralZ6QlZNQTRHQTFVZER3RUIvd1FFQXdJQ0JEQVRCZ05WSFNVRUREQUtCZ2dyQmdFRgpCUWNEQVRBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXQkJUQ1I5MzRyeXBKalBxc1pBeDc4N2FYClppUkFYREFLQmdncWhrak9QUVFEQWdOSUFEQkZBaUVBcHMzelN2TVBpMHNUZ1RCbHRpNU14M0h0aEJXamMzc1MKcGlsdXkrRFAweUVDSUg2MGRpTEx5MUVZL3N2Rk5GdWQ2ZnFMdDFNdGFzQ05RMGNiUHNJcDFpNWoKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
    cert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJ1akNDQVdDZ0F3SUJBZ0lRWUNZekZVVXd0QlFpRDFGMk0wYmw4VEFLQmdncWhrak9QUVFEQWpBUE1RMHcKQ3dZRFZRUUtFd1J1YVd3eE1DQVhEVEkwTVRBeE1EQTBNall4TTFvWUR6SXhNalF3T1RFMk1EUXlOakV6V2pBUApNUTB3Q3dZRFZRUUtFd1J1YVd3eU1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRUYvcW0xTTBLCnMrU1JvL1ZkeForMVpKVXREQXA2WGJEWXR5ZW9wNHNmblF3d2krZEkwVi9VekRmUzZhNXI4dlVVbjRrQ09WS1EKRUZaTXVrS3FBTSs2RWFPQm16Q0JtREFPQmdOVkhROEJBZjhFQkFNQ0JhQXdFd1lEVlIwbEJBd3dDZ1lJS3dZQgpCUVVIQXdFd0RBWURWUjBUQVFIL0JBSXdBREJqQmdOVkhSRUVYREJhZ2lKcGJtZHlaWE56TFc1bmFXNTRMV052CmJuUnliMnhzWlhJdFlXUnRhWE56YVc5dWdqUnBibWR5WlhOekxXNW5hVzU0TFdOdmJuUnliMnhzWlhJdFlXUnQKYVhOemFXOXVMbWx1WjNKbGMzTXRibWRwYm5ndWMzWmpNQW9HQ0NxR1NNNDlCQU1DQTBnQU1FVUNJQ1N3YmdCKwp6OEt5NEZwUm5jZENiaEJtRXo2emg0Y3dkaFFVVU5XZzFNUTFBaUVBZ1RYd2h1ak9IMVJ0Rm85QnRydkl2QUUyCnhaT0lFdTBhYTN3c2xyQjd1TXc9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSUFPMGZOYTFheVcwY0VJZ0hPNlk4cmFEdUsrOUsyWk8vQTNFN3hSbWxJOE5vQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFRi9xbTFNMEtzK1NSby9WZHhaKzFaSlV0REFwNlhiRFl0eWVvcDRzZm5Rd3dpK2RJMFYvVQp6RGZTNmE1cjh2VVVuNGtDT1ZLUUVGWk11a0txQU0rNkVRPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=
  kind: Secret
  metadata:
    creationTimestamp: "2024-10-10T04:31:13Z"
    name: ingress-nginx-admission
    namespace: ingress-nginx
    resourceVersion: "89114"
    uid: 1697b56d-ae96-49eb-b994-95ad2c84997a
  type: Opaque
- apiVersion: v1
  data:
    release: SDRzSUFBQUFBQUFDLyt5OWE1T2l5dFluL2xVcWVsN01URHk3OXdZczY3UWRNUy9FRW9SU3VrWGw5ajhURTVEWWdDYklLZkdDRTg5My8wY205NXZpcFhyM2M2WmY3TmhkaWtubXlwVXIxL1czL3U4blQzZVhuNzUrY2p6cmZibmRmdllzeHp0Kyt1T1Q0LzNZZlByNmZ6LzljTjYzd2Y4eGx6N2NoRXZ6MDlkUEZFRTlmeWFKenlRNUo1Ni9Vc1JYNHVWUDh1VWZSSWZvL3VORisvVEhKNmhmK1FOekNaY0JmaFQvc1FYdmpoODRHKy9UMTArY3R3MTBDSi9BeHZYUlE1LysrTFFOOUdDMy9mVDEwM2JuTDkrM1MzTnBmdnJqazdjSmx1akR1YjE4S2l6bENXeTg0SDBENGZMOXlkYTNUOFp5NlQwNTBiQkw4ODkvZWx6dzVPcmhVNkN2bDAvNjA0L2w0Y2wxdkYydzNENzkyTHcvQmZieWFielJUVnFIdWdlVzcwL2M5NmRnODJRc24vUzk3a0RkZ01zLy8rbXBtOTBUMEwybmd4NEFHLzhtbXVXVEVUNjk3enpQOGF5bi83N2VHVXNRd0tmUG54SEp0NzRPeWxPMWxzSFRkdm0rZDhCeSsvUjU4M1J3ek9YVDUwUHhxYy9aZ3Y3N1A3MS9lbjN2YVhuVUVYbWV1T2k1cDhEVzBhTFd5KzNUYnJ0ODJ2ekFVOHArOS9XZjN0T1Q3anZTOG4zcmJMeXZUOTR5T0d6ZTE0NW4vYm4rc3YzVDJmeTFKOUV6YThjenZ5YkRvZy9jWmFDYmVxRGpFWjZlMEVLK0pxL1BQc0pyKy9yMFk3TkJuMjM5SllpZmp4Y3lnUHAySytEZjRpVkZYNzd2NEhJYlAvajA5UG5KM215RHIwK0h3K0hQK0FWL2dvMmJmUDMwWkFlQi96WDc4K25KMXdON1cvZ0VqWUkrbllmKzh1dlQ5L2ZsRCtkWS9QN3B5ZERCZXVtWlg4dWZQeVU3VWZOTmFlR3o2TUc2NS96TmUxQTd3Tk9UdDNPTjVmdlhweTlFK1hzMDVhOVBmMFVmLzdlbnVlMXNuN1pMZ0k3RWs3Tjkybmd3ZkhwZi9tdm52Qy9OSitmSDAzdzhRNTlIYkxuMEVFK2FLZlBtTnUvcEtZQmxBdWNKOXJtWjJOc2xlRjhHUW43Vm53TzRSZnpIcFJOb2VQVWZUL3JURFA4ZXM2RHU0T09BT1hMNUhqZy9IS0FIeXlmZE01L1d5L0RKM1cyREp4MXU4V0w4OTgzZU1aZG9kOG9zbTJmUWFQUkwvQmxOdUo1SGM3OEo0UFpQOEI1OGZmcm5qaUE2d05DM3k1Zm5wNlVITnViU3hGUEdYeXl6cDlmTHNPSHA5VExNSGc0d0Z5SXA4TzR0Z3lVK1puaEtuLzd6ajAvQTF0OERKRytURmFCL040aG1lNE0vUmdkZysvV3Z2eXduc0hjRzJxKy9zc0gvS3Y5b3U5bTlBeVFpLzcrcmZ2aS8vL2kwajBqKzZldW41ei8vOFNkWkk2TWpxWk1UdElnRDN0SWhuM1pidE9NQ3l3bktrNzU5MHAvZWwyaFF2TC9IRUc4OTNPam1reEVMMlU5L2ZGb3Z3OFBtM2NUempXZUVwSHd5SjFkM01DY3QzOUVUS2FYZW5iVWVuRDc5NXgvcEo5dmdmZU5acThKbmdiNGhxYzV6OStYbHBkUHBmUHJQLy8zSEp3ZmdwU1NVMmZsb1BuOGVuTFhqTGsxSC8zUHpidjJGL3ZMUlgzK0JqZXR1dk8xZmdiMXpqYi9BWDZEN2w0Qm05bi9neHRyOHVkMWJmM1VKd2o5K0xuNzRwKzlabi83NGxESHhwNitmOWhUK3hNOCtJZi84Z21tc2U5NG0wQkdKdDRnVmRIUlNkSUEzek5uOEJXemRzL0NGOS9ucG41LzZKbUkyL2NuY2dDZm9lRXNrQ3RENWNwMHRwcnk5aE83VFhvZTdaU0xVL25TOFlQbnU2ZkJQbUx2Y3VPOVAvK08vOVo2SmwvLzV6MC8vOU5ESVA1WjY4RC9Rei8vbjE2ZStHVzFUOGpTVzR1Z0gzUmNxL1lHT3A0SitzYlUzQi96T2JYby8vWS8vUmhJRTJVc2ZYdmdtT3ZveEEwWGtlb3JaTGNkT24vZVlLT2hYaURCRlN2anZ5L2NsWE9wYnRMTS9kTGhkb3VPRStEbWphWFFHL3hmNUowWDhTWHdtMEFOd0E5YWZ2bm83Q1AvNEZDeGRIK3BZZjhoWUtmM3dMK0hiZkRqN016Z0dpUFB4eWZ3a3NUYmtXTGpUT2p3RW5VbGd1S1p2ZUphbFVyMmRPZUwzQm51RXdLRTNxakt4VkZlQ2hrUDdoaWNRcW56Y2F2SjBON0Q4Znl4RHd0SmxOZm9OeS9pR043RzRkWGV2c2RMVTZQQUU1L1Iza3N0c1RWazZqVjFoYjNoaWFGREhyYVp3TzBCSm9lbkNsVGJyRWt1Rmh0eUk3QTNXSmpRSE5LR3pDMHRWNklQQndwV3FpTDVCUFZ1U3hFODRsdTl5STU0MDNLNXZ1TUF5V1JzQ2FvSGVIeGd5czlOR2s1Zjh2TjdZN3Q0YzlEZWFUQjdNMGRvYVE4MDJSaElFWVhkbFVGMEN1TDJ0d1VyaDJCTWc4RFJmcFJZN3crMnROWW5lQTA4OGpWMmJNRWQ5LzIxRzkzNU1OeGJIU3MrQTdZWG1nT1lrUnB3cVJQZTdPSlIrTElhOW1mUksvbU1adGxydnpxQkV1RURqakNZN2ZTUVNZSURHaithdHljZVQxdXA5eFBxTkRValZsVlltZTdER00zS255aVFFSGRwV3FZVzE3R3l0TWVTaHdVbzJvQmE3dWNzRW1pSWNWRm5BdE9aWVRPdVRwdkNVTGdzUWhQM0FDT2wvQWFxM0F5eEQ2SytFc3d5N0o4QktxN0VYMFVNKzBlYll6ZmIzeDR6RDc5SGw3c29ZU1d0dDFuZDB1ZXNCVnpxQmtOeHBGTnd0QnlWYXV4cHBzRWM4VjhRZmFDNXY2ZHE3YTh3SFh2Q1A4WXoyTmFlL01kd2V3UTFzYUNnMHNaemRTTi9ScEhFUEYyVHYyNXdRR1lXa3Z5L2d0QmZSN1JZK29VKzV1VU5qRk5GNTRQUXRUYkVQK0R3TTdZWEUwUE8vZngrWm43T1BoYlZIYTU1Si9SNC9zTjlObVlkcVI5eHlBeUl3Q21zSy9zRU51ak5OUGtKVkVlQjQzYlVOV1RvQmxsbmhjekdqUFUyWldwait5c1FheTE4czNVTzhRTnNtYS9VNGI3dlRGUkVhaW1CTUdHSUhPcUp0amhDL01HdHRoR1NkQUFHNVBTcXpycTJ4WXFncHd1bkhqUE1IRnVhTmxjNStzVGlvK1lDQ0JNZmk4Lzh5RHIrczUrdmVVSlI2L09KMXM1NHg0bUxCRlBqR010a3ZsaW9MS3pRZU40SjdVK0VxTXN4MG9SM3hRSC9ITmI2UFBuMXp2dXo1akY0dmZCM2ZER2pDQ0JHUENFaCtXMHU1UndLSHRzR0kzdXF5WUpzczNCc09UZW55MElybU85bHhWa0hHK0pwRDR6MVZaYmdEWWQrWnN6MWJHL0syd1RJN2xaTEM2K1UzV2dOcEwyYzBvY29CNU5paHBibFNoMk5KMy9Ba0F1Mlg1dlpDYmlSdXRCazlNU2htUFhXWnJTcDNWNXJDV1RPcEg5SFJSZkpmczNYNWFLdnVFWTR0WHpNNlNNNHpPMjVrMmlZcmJPSXhUaWJMRUNhNm83eTFCVHhwWjdod3A0VjlUKzlJamlZTGhESG9CMk81d0VOWVRpOWNhYXZKekVtYmRiL2x6OXNQaGJBMFNpSzRVWExXcFJNM0lQZmN5UFExZG1HTkZmQ1FzOElmenUvRmxEcVNvQ05Dc0laVHp1bTNra25tQ0I2aXU4TWZvVE5pNGp1ZU9RRDI2S3NVUStoeWI4Y3gwbXcrb0ozbGpBNU51YnREYzhlMFZBVElzY0xla0VuYmNNWFRONnNnSzZkelF2d3hYek9DT0grSXZEb1lsQmpSbGZWUEJ0VTlxSXE0K1Q3ai96RjJJYUhKWkh6WGtOQmttYldxaVBiWXhYdlk0NXgrWUF6NkRqcGIzNVhnSDl3SW5YVjZxeW9pNUFhOGI3Z21QdE5qdWV2cGN2YzUrdDNDNFFiUGFHKzNTRmNBYkcrbnlWMEMvMzdRbFZYNVNHcktaRmZVZmJyUmZvM0kzbmlVcnFkWHV6NHNsemdmeWJ0NytDNmlOZWthSGI2akt2eWFHNGdaM1dmOTU4bXJkZmkyc2c1WXJzckN4Z2o3anVUQ2s2NU1MWHpQdlc3MjQ5TXdGTUxudzNqVjMwM21HL3diYmlUdU9aWlpJVjRHSWQwMU9sSlk1b3V4dzcwdE85dUFZNldkaHZXUnpkdFVma2J5MjBiMDFXWTBuOUFXOFl1S1pMRE12S016YldMZTZibnhtU3p3NXpkckU0MDdFSDFBcWtmdWRkTkRaOHRRTkFqV3d0NVFhQnU0QzR0YlBmY21NODRhcjRXTnF2REVlTTBjQUtOQjRBbStRWFhqdTVzNTZGTHkyZk1MeDNhaE9UTDN3QTJRUHJqVFQvWnA3TUw5dUtNZThWNVFjS2U5YnF4WmNqNFBhSXlNcHpDUEQvb1d2bi9tbTJ5dDA5em5NZTkrYzJqWG9MNjhvYy9SSFJYcEp6UUVzLzVhVndSNU1xTmROYSs3RGZxV0tuZDNCcnAva0N6MkppOW9UdmozMGZrSkRSZkx4SjB1Zjlsbk1xUzdNbGptQkU0YjY2d3U0aWE2dS9DS253K3o5NWIyMGVKR3drR1RrL2ZUcVg3TXMvQWtyWWFJOTZKMXNhVXhDWHgyWHVJN3VlbWNwR2R1U2gxdDBCRm1taUxzVFlYSHVsaHlodkx2enVzSDNBREpvU01FcDAwMGgwSGZHcy9vamRFUmlHOE8zVEU3WUpmeElLSUJrVDdIRGVpTk9SSVB5VDRtLzJHOVo1U2pkL29mRVgzSGlGM0FMbDQ0aGc0MVdmT1gvVTNwT1VRTDNsYXBBQnJ1dEdZYy9PNVU1eXEvUC9jTVh2ODNoNFpMbGdrQWU0U0w1TjZjTnY0RzYwdk5ZNks1ZFVsRDVpRlliYXh2ci8yM3VqR1FQUDNtOVBmeDNGY2NJMjUwWldJQkNzbHRyQnY0SUtUM2hudEVOaFVFaXVRRFYxcHpMSFE1UnB3c1F2dzkwakVjRGVtekx1TVlMUHBlMndNbnN0RUs1MnFBN3U3aktUZnZnR1B0UGVpSXArSmFDTXZzbUoyeEt6MnJNbmt3MkFYaXB5QlBZelJINEVyRXZId3VaeVJoakNadmczVmhqdWZuRmg0c2RVYlBOVmtJMFoyWTJxcFlUNGh0VGJRbkxIUWp2V21CenUyYVl3TzRuTkdCcVFnRXh6SmJRRVY2Q1JqeGU5T0ZhMDJldmtRNlkwa21qWXF5WnhHdkJYMW15QktoeWtnZURKT3pXT0dQc1NKdUUzcld5eCs2SUxzUXpjZXVFSnF2RytzN3k2TTdpUklHaUNZQzB1L1hISXYwZytsL3hPOUQ5TnZwbE5UOTV2Uy9xQzV6MHVZcWdXU0ZTdlhRbWl6MDNYYzA5aWcrSXpXeUNyMXpZUDJ2LzFYd1NLWE9odjlqTDZHL2ZOLytHZmd3OHpjc085djlHOVpIaVJjay84MEI3ZXJ5RVdLZFpVNWlPcXV5c0VINy9lYjBZbnY0eTc4R2E2U0RNRWlXNGIweW92dDJyem5KM3RrMjhLYTdnYlBaSXprV3lUNFJhbWgvNjNXelJBOExpczh6cERHYTV1NGZMUHZ5OGhmL2J0NUJlODFqWGZESGdDYVF6cW1HZldvUzBsKzRrUmpxTWprM1pjM1ZGY3ZpSE1MaEJtVE90dSt1bzcveG5iaC9zL3hYNEVvUnowWHJTTlpuRys3VU1sMHBCQlErcXpZSWFSSlFhRC81Ym5MUDZpeURkTE90S3ZQUUdEeS9aWFFqTEkyVlhGM3VOdWhFMFJvTE5CalJvUzUzQ2MzcE83d3lDWGhsNG5DRDdtdjBqa2hYeWYwdGF3cC93dnJrNkdBQlZ6b1lXTWZwTzI4aFozSHdpNE0rTjdHdlptSUpxMGxFS3hjR2k0N2thaTU4NWdaY1VOd0RkRjlGZjJNYk90eThUVHM4eEhvZHNpTll5VlVWYVl2NHhwU1AyK1dNUHBveXM5Vmx6VWQ4aS9SQmpzVjd0aHRBRTZLOU1PWHVLdm85UTNDdjZvbGo4YnBQSE10RGxXSklRQzBzUVBVUXZjZklIZ1Z1RjVxc2RJckhzVFFYUW9NVlR4ekxoTm9NMlZXa2I2SXpoZlNwVVNSUDM3TDlHTTdoQk85ZnBGUGpPOWNmVzV0L2pUdXBYMkNON2hzRDZUdHV4ZmUyMHp4cGE3Q0p2cHJ4RGJxcmMzeUkxNC81Wk5Hak5JVVBkUm5wdnRuekY1KzlmbSsyaUZaakpWbEhmeDN4YWYvbGU3UW0yNVNQUkEyL3BEckR1Zm1XZllnOG01eTlzcDZkbTFQRlIzRExlVVQ2MnNVelVIbFBNci9iei8rbHZ6ZlpHVWp2S3lua0dBR3FIU25VRmJFYmZTNDltODNudnFRdll2dmRSdDhCV0RjT2w5dGY3SHRydFAzVjNKelEvV1lxdkcrTzRDdDZuNmJZUkg1Tkp0dlRWSm5jbnRFZlU3dFhVM2gwVDVQQWhjUnlnZDhKbDBnbUt5Vy9XalQrU2xWb1czWGhWbGRFWDFNaWZVOGI4WHZ3aW5YSmdCc3lrM2tmMzlGckxmMnN5MGhNYnpCYmRJY0tLVEFMcVBGVFl2R1cxNHZQNk55Qktwc1F5VS9nOXZabW9sOFBDR3RCd3JsQ0NOeGkzZnN1b1hlTzR2bTZVNnhmSXo2WktvSUVLQ244NXRCbmZjVzZUTm9hdGRqbGY0UDFaWmZaR215dnN4anh2dW5DclNhYlVGU0VsU29mSXh0amRkRm1pT2QvWVJ5SEx2SmszcS9weHZ0aEpmZHo1SDhFckxSQ3NsZ05hZCtRR1UrYnRwZDc4WHFyTWkrbGMvTVpWU2s3TktnZWpqWEU0elR4Q3g0WGpIamY4RVNYRzNBUWhKeVYwS1J5RG05Wjg0eGU2N0lKUVdkNnhWMGN2Vjlrb2FjaFhiTWdkNkhMRGJvckhaMlZ6clJ5UHJYNE45T0VCclhyNVB1eEhJdm5KcjdXakpmeWFaMjhqK2VSckMzL3V3Tnc0YzVrVll0YjkyTjZpcjVHU2FmQ251WHU5a3QvMzNUM0YyTldXRThiVzc2aXpXTDVUREVFMHFuTUFaYlRXRzhDeUs1QityNGlRRzRrN0pFOG4zVWtSMVA0bmFhSUVJVFJPQnlMM25GY2d6RHlVeGdzREhSRmhGcmtmeVYwRnA2NGdlMHNaNUUrS2c2NzgwaC93UFlGNXBHMzJWVzZXVUVXTk9rRVJUNG1NTzNmV0xoVHFTT0pkTlBMK3NXemY5bjM5UUFkanVydFFBZnBZc2lPR2xxbTNQV0JJa0hFWTVvc1lOL1RiREhkRGFDRTdHbWtvOW1HZy9pcVIyRTlnV1YySEp2VEd5SWJEejBEbDVHdjJ6ZVJ2Y1BHZHUwYURqRy9ZcC9tMmpJcFptY09Jais0MnJ6ZXd1L1ZmbnZaZFc2Y0FtMEdJaHFIS1h5UGZXRkZlWWIwSFkzRnZ2Zk5CUjl6cHR2Tk9HdnNyQXY2R2RaWk9xSnZVRjFlSEpUMXRKcTV0S1JObFFlbkZsL2N5NHBjS2NwT3hOOENPcGVySk5hTGZUSUQyalU2WE9Tekh0R2s2aDU5UUZsQkZtZDRmaHVzK1M3MlVYc2FOTHc0cHNMYVBnanBqaTRmdDl4SThBMkZSdklCNi9aNHJOZGozai85SCtQVHNYZ25ZaC90NGo4aUh5bVpqeTNFNXovMmEwNzkxTi9Ec1NaRXVvK0s1Y0R6MjUyOG00MWI1Rm5INkdBZjNpWGVQWmd5djlVVlliUElZakxZLzVQWnFwSTFzRzdtNmVyNEVvNjFGZVFSajJ4b21NWk1JdjIveXQvNzZDN2kxbThNL1Yxa2V0K21DNUpaa0RROUpSWitDNTQvRzFkNUs5Z0hZa3JYQmVhdjJqTXdUNTZKN1l2bWVOZEljZ3dXbm5RbWk3ZGd2aDNtN2FyU3ZUam9yMEdSWmg5dUIrZStkMVJaZU1lNnpIOTF1emhaMHpEMXlmNjBlN0h1M2JHUDVrdENTMHpENks3MERVa2dOVmZ6bDRPK001NXhsMldoVENKOU8vTGhqQ1pYNkFsSFczV2xMZGE1MEppdURRMlcyQUhLMnNlK3BNaHZmMkh0OGJOSmZPeXRSV3p6Rk44dGU3RE96U0ZuTTJEZHZUYU9FNzFEVmVqRDJLM3hLeWIrcnNTT2FScGpnSGkrUjhTeHpxTE83aklITU9pKzUvazJpZ25SYUoyQlFha1JYYTZMR3piTzJaQ1pIZExmdFFIcExPZWJTdnd6azhsMGt6OW5aVkJrWUZEZFNjUURRdndjVFJna3RBMzVjT2JaaVZXVUcvUTVYK004M2JkYitNMFRZajJnRjg1Wnh0SGs0eW1SVzQyMGlmMzNMWGlxRUJ0djNFTUs0bndPdzhYKzhOcDQ2bm03VFFnMUdkc0NEYjdrZ2gyUnUrK1psVXIxU0tUcm1Pd1hITys4d3QrY2pqT1ZoUlc2MDgzaFJSOWY5VGVEN2lyeEZlTTFwZkcwL0oxbSs0WXJiRTI1aWFjcjkyVjIzNlY1QkJLdFVzTGVsTHRFZkFicTdjTGE5L1BadjUycngyNXZFOWJwWjdQY2ZaZm1iaXh3VGs1RVAyeXY0YnR0UEV2aVh0SUozWmttWlVPa3R4bVVlRXI5VHdxOU4xaTRXczV3ak1rMlJzSWV4MGxrZnF2SjE5ajNTV3hCSENUenE2UEhQTkhqRzMxdzdjWVp1d21QUjdSTDR0WDVHTWRiMllmaU1pdWRRdlMrL3E0czhGRHJPZDdPVjJNNXZZZWRTL2QwcW5zdDB2T2IzTjJ0ZkxDeDNKeHBpa2dDOXpuTHB4bnhlNlJueERyVVFWK1lvZEdSRHJGK1B6VW9NZk5qU2drZk5mb0FEdlhQZDIzQXdoRndleVNvK0dicGt5YVRTTzk4TlNqeW9Dbzg1QWJjZjN5ZkQzZVQrVFNZREhBZWhRMVl4dEhsbzIreUVNa1VyTXRKYVV5cE85SVZNWXZqMU5oMW5KZk1oV3ZoVTV0YW5DczltNnkwdytON0U2ZXRyenVKaGVtc3ROTGptR3dtUjR2NUpOd28wd05NbHZFNEZwNndIc3VTZTlEQk9VK2hKaSt5MkptSDg1ZVJYYkdPNWNSV1ZRU0N5M0o2R3M4eUlQSTJBTDlRWlJQeG02OVY5Mk5uZE5DNWFzaHJHVHhIT1RuenZuTTJqd0w3RUx1RUtnTy9RQ3VYOFkxQjM1a1c3NmVjMzV5ekV0OG5wc2xJMkJnZGFhc05hRWViOVEvakZkY1pyL29Xc3E5MUZucDY1Ris0eWgrWHh0TUpBZEh2eEkzUStwZ0ErOHE4eWVYNGEveTdzVmY0WGN3am0xeE96VG0vZUhHc2hTdWRqSTRVeHJaWWlPNERrNVZDRU9aa1gvSmZjYjR2Mks4NUV2ZXl6QVRHNEJIdnBML2cvQmtXM1RWOUluby9sbU5sMzJxRnRxSmlFOEFkV29iY1crTmNtTEJSVnNEbFNBelZCYm5YUnRKV1UxTDZ2WTFuYVM0QjFvc3lPYmV4T0RieU1TZmZKYnlTelRIeHQ0cys2T0MxNDV6U0g0T2NER2FSYnBMbE5LYzU5NjhiU3c3QlhwZTd2c24wQW9NU1NZTmRlTW8wRndOcC9KMTUwZ2RneXcxQW9JYjQvM3RURWNJeGRkeXJGTE1kVTd4dk9EM2ZjQ0doVVBHYVo5MlRQakJOTkZZMXp5bmpvWXN4cW5nK29PYTdoRTZYeHpoazhhM1J3Y0k1SmZIK0orTlg1Nmp0alpFVWFBc1MzNFZaM2hOaDVmWGxMRzdHeHpTVlRweVgzSTk5QzhrNzlIdnMyM2d0LzRiYnA3eEU5b0pJLytFVFdWdmd3WVljRGw5LzE5MXFDc2NsVlJkZFJiYVJzV1hBRFhyeGQyUk9OU29jc1h5bzQreDFyc2xkbkE0Y2t6TGdCa1NRdVR2SVZQMGJLNm42MStNSGRwWkNLUW5UNlVKZzNtWTlkQ3d2cU1vMXFreE5HbTk5K0FTNkhFNVp1YzZkbEsydlZkcDFsdlkwYWhlMnpmOTJPUktSYVdVYmc5STREbUdOWjJUcThzdlRNbUl4S1FEc0Vac2g5N2tPbnl2cTM5blFheTdOR2F1dUNyOVQ1VU10VDZTMEhaQ3BHZFV1VmZqU0hrbFRWUkUzeWQ2UFpiaERvdDl3bVcxREdHMVg0TlhVSmY4YzZISlVhbktkdTdQZ1prOXBPSjcxZzlLWkNsU2Npam5wWFpWQ1N2SVFVRDBTdUFJczBvS1B6dVZaRjhiRjFGUk1nOXdhNHpSWDhrSW92S3gyVk05Y3VuNVg4eldLdEFFdXhjcWJENDN1NXJNcERwb0x2Ym5NSE1vcDdPTk9HN2RhNFJ5VVFqV05kQ1RVVGo5Ymt5S3VRSTZITWMyb3JxdkxacUFxZmJ5M21menJPL1d5amp0enB0RDQzV1JNUVZYb2NrcjZ2Z1dQVnRjMkk5RTZhdDFTcGZXUzJpaS9YbW45c2V0RjQzL0lldEU2MnF5M0xOTldSb2VHWXpkMUsrUm9FWlc1RkVvSTV2ZnpOYUNFUFdBWE82UEUweGZ1c2JnTXI5RjBPYWxVNzVDL2s5NW0xODFoUVVXeURaa29aMmt3SXpQMzg2cENENmZGSEhQaFFDbnZFbTFLLzBEbUhVN0hiTjVISHVMU2pTRXVxZU1OTDc1YmgvQndaajQ0eFgzdVNvUko5VUk5SnlOeE9tV0hKOFl5R204UjVPNjdRRmY2Z1NxTGE4eVRGMlJuTXM3YzdhMjFSWFpYelpSK285djR2RnhuMW9ZTVQ5aXNoaVpVWFh0dlVNR3BubjgxMjJEaEdwZSt1U0F3S2NuUjJkNWVQeEV2NSsra2huZmcwc1VXNDRma1NsTjRBcWZsVUF3Um5aa3pjbDRXQTEwUnNBdEVTc2JvVEhibGxQQVc3MzNYbEhYdnByVzVPTlg4RFA4MXo5K1FtV2VjYWpJOEl2MEU2WGhqVFZubjdrWFNYckpJOTU0R0JndFhtdHc5YWJNMmMwMStKMDZRTERZOEFjNG9xWHRXVnB6aGRVMW10aVpyUnk0ZXdzYXVtbXlPTmxUbEk2R1BOb0hPOWs3bWhWSnFuWlZzWXlSdXBwUU5WU3JnMERrNkw4UGlNbkJsZUdhOThSeUd3a2FUaGZjNFpPeU1xWFJ1VGx4Q0hPa3g4UnpHY3ZUOFdJbktUOC9UdE80ZHQrMTdXUythZWpBTGYwUTZmTjdlaWx3dk10K04weDE2NW9nbnRSdmVhMUlNb1ZKMldnb21VWkRRMlI1cERuUDZXZlQranFxSUt6MXY5eW1tYjdMMjNsU21xWDU2Nnp3U3ZWOWlld2VET3U2MURxUk5pZ2sxaWQrYjBkbk04VmNzbjJZa1lYVG92Y0gydk9XTXRQSHpNekkwT2hLQjZQbGRFVU5UWHRUS1JlQXlPNDFhV0R3dUN6bFkvQ2phWTV6aWNDWjFKbkxYTUtIV3lZWHFCbC8reFExeE9kN0JITkR2bWdKUDNDaWxqV1hHYStiWVhoaDlibG1heTJBYlNWVW04ZmNMSys4aVFuSWI4ZmZiUUtSaVhmMExOMkpJb3hPbGV4dXN0SHViOWNQYy9xQXp0dGJMWnpwMTFWU2ZpY29sMC9IUHBrdld1YnZxWFEyNmlURStOdDdudzlLd041djE5aSt3ZkE4K3U3cW5XOHYzUDBQZHJmZ2dMdHZYVFhLOWpZMTk5azRZa3JiaE1sNmVCNHV1MDFUZTNEMCtlc2FVcFhEaFNtN3NUMWx4d3pTRWFlTXlTbFk3NmJLNVEzZnZMSDUrUEtCOXc2SDN3QlVoY0hEWUt3MGRxak02U2hVZENuUlVHaVQ2bWd2amRCQnRENnpOaWhzSnZrYkZFQnZwL1phRVE3dGUrWGZnNE51QWhXa280WnRENHp0NExPZldJbi9abTZ2aFcxcVNHYzkxNEpiS01kbGN5ZUYxb1NqRWN3RkFlcVJESmpRSkVocmk4cXRpT2RXbGN0dzMwS0doaXQxek5OSTUzUVVGUGNPVjF1aTM2QjRZejRnM0xxUkhtdHlGd0kzM0JORjFXS0pyRW1aa3YxZ0FqUkhUSjlWUmltWHhIVTNtTndiVmV4KzQ1WEpYWE1vVkpDa0hPR1FROXFqSjFIL1g1UzZhMTJ0aDNLa2ZhSXBvYXl4RHFITzhqcHlMbUw0cVZJenRYZ1duRFFlWVQvdkpYaVcyeWVaaTZmZkF5OHBReXlWK045cGRtSmZITXFZTExvMHpGYjVsS255VExvYjNUbERscnExUldMZmZHeDBSMDNYc2lpVGE1NlRzS1crTENxK1Q1OGtydlptd3hBR0VYQ2xGQmJ2Z1Q2QWpRUUI1cUsxaWwrOEg4bnJrWnUvdEV2cHlybUNQdldTZDIxMlZ2aHlpbnc4SWdmN200TFJwaVBlcEl6bTZLNjNNMTJUT3ZWQ2ptSjJ1K05XeTVnRmhWY2J0cCtja0szV1RuOVB6bjVTU213cXk5K00wREpuZm0rN0MwaWhwcCtIOWxOYTE4Z3FuYkVaMGpiODczWEJtZU5BUlNFM2gzc3JsbWNaRGVEUGVkK3UrODZKU2Fjbm9LU3BsRmI4OTdpeVhZVnVJWUl6dW1seWFLOGNPcmNoL0xJVzE5NGFUd2piNXFaOFo2U3BKdXN5dkpzdmszUG0zZmdsWlptc3M2WU1PcHMvSHlMTDhjMnRNLzUwMnd2dWJwTlhsZlNuUHdrazk2SzkwTUJsTmNEa25VS1I5WWd0aldZSFBEVC9UWkxVQ0xYRC9YSFB5MGlsQkc3UUkyOTZrWXpXRThETFlnaUs4dzhQbFF4MTBBeXZ1SWhnR0tTMmpIOC9hOFB5NU1wTG8vc2pUS0piaFFidVUwUXUrN1NJdjd5NmVwYi94M1dOUG9OUURoc2dnVmRlSGFpZUJlMEQ2czJrYkxueUp6a2UzQkcxUW1WdVJucFVVeEtaeStScjdaN1V4UHZ0NkFPeS9BTnh0ZytYNyt3WXVmeUZEQ0NBaFRGbjVNUzQ1aUhPYjBsVVNCUmNKQnlUazU5a2xrSGNnSjdtbHZwVExDd1l1YjZ0aDF6WVZjV04wZUg4WksyUmpkL3NNd3VvbFlveWtrOG1pQTk3YmZ2d2x3dXdRSFNvTWs4dk5qb3dwN29VYjBhRTJJMU5NeFhIME53bFlNMVJsRVk1SDlCNTBwb0V1ZDA4bXkyeU53ZkZnZEFSaXJFZ0hyY1BiR3J1STh3YjRqU1lmZzdFbmJNWVVWdTRDalpXMm1pTENjWnJEeUwxd0xBK1JrYUhOU0V6N3NSd1prcGgyYlBRNzBKRldLaVZCalpYV1dBR0s4M3kvRllUVCtRTnFaTG5CdXpNQzFRYWovazR2MU52aHZWc1pGSGt3cUM0MHZPa0x4K2JvNjVDWllaUVR5aVlGQ2YwT0hrN25XeEwyV1M0RnZoaVJ3cnpXNUM3QnZVNnRmRjVscWNaM205UWhqMmQwbHI4M0tpckorVGtCVi9KMFJTQkFtWTlqREJDUTVodEpSUUUweWp1aXpaUTJTZUF5VlI2OFNUeFhEUUtYTHdreEU1cjkvSmpTQVowTnJUNFkwSlNuV0VvZ3FLNmRZN2FlcHRpRUpuZWpOWWRSL2c0M29NTVVLMGlKbmdOc2I1M0x5VGtZMU5GWEtRaHp2NkUwaFhmQUtaNDNzL1dRZ3NtVHlaNWtRZXhJMkJkeGoyN2xGMDJ4ZmREQnRKNkNPRWliN0NlK1pKd0svaEoyMkpXZnUxOHhyUEpkWS83LzZCRVhqK0Y0cHVOWnYrK2YrKytmQmJwWHNIUDYwY1ptMlhpd0RiZTdOOWxvYmxtT1dlV3VjTDdoZXNWRjRaNUJmNXNLN1FHWFdXdXorTjZSNDlvTDlyQUZiTzlrRHJLN0twWnRqczVLV3dQbjUvWGlPMFpFaWhlaHpjam9ISGZXNkgyT0ptdDcvTTQ0WUJjNUJwQ01QMGEvVXdSU3BRU295U0xVc0tNcHJqTksxaEhuK1oyL3J3dTFTVjg0dG90b2orNFZTeGprTU5vYWFsZnlPSUhmSERwUDN5em9kOGdiSlpHai9vYkFaaFRrVHVmYmJPeGNObEFTUnp6aWV5azF6QkFQaXgxK2J5cjlGMjdFTzZvODJhbUtST2hzTDB3ZE9VNzMvZHNJcngzeFQ0UCtkTCtEdHFna0owcDNnaEZHNUhHenlybjdEM0dhVlkwZU9sOGYvSElCZnpZWFZLa0dQRzZRcytoZjRIMnBCOHVvQThCdktZdWxyT3JpZHhkREJtN1BlWFM0SUwvMlJDUE91UHdLZDVEVGlQWllrWW9jdWtWR1BDeElWUFQzVDlUczc5V0dTbXN0YThSWjVlSVp5VnQxZGZ5Vzh0ZEorZGdGbVF1WFR5bm1vTXE4YjdDUTBORitycG5wTEhXN2RrL2p0VzJEc085azU0dXhqUkc5VWVkREozMVBTTlA0c3hudElqNHlGUjVpWkFWWGdCeUx0SnorY2J3YTRqQ0RPUkszQzBwQ05GZ0RnbkhSVFNHNmNLY3J3a2FUcHkvY2F6a3REaU1McG1tNEtRSnJCUm14LzNGbk83TmszUnRrMlNGS2E4RFdFRjNRc25KN1dxT0JsVEwwSC9yZUF0OS9PM2ZHb3JrbDFiOEZaTk03cmZ2bm5DdnZZV2N1SndjNnVpSnU3cURiTmw4eG5VTkt2V0R0VzdYUGx4QnNNY3BQeVV0eUYyOEJGKzVqRkRTY1ZqUFBWL1BFQ0srMXo4eHZEQlVrOHNtalExM3V4Y2h3R00zM1d3c0UzenB2UVZUTkp0R2t3UjVqOUZYeFZPQ1J1Q3BwTVpLMkJrYTI0NkU1bWlUVitUVXUvdHJubS9lclpDV25mSm1yNnNtakRrY2VrVmptc0VWNVVUZ2pkOThCTWVKWTZieHdneGhGYkw2eHVKeE1qOUk0QmQ5a2UrRVM2MHRSZWx6eGM3cjNRMEZ5TXZFNnBNOUUzaVZ2bmFZMzU5OWZTdEdKVWpNOTBkYkNhTHlrQzBlRzZoV2hESEZEdE9jcG9sanZ4NHd1Vm5YT3VGTDFYZjFlVlBrZzFtdnU1ZU1FNmM3RC9EZU5yYythZCtQVXJGcWthRFd1TnEvN2JveDByWTRRSWNnL05tU3hmVVIzZ1lKbjJubXVUUk5QUXg5RjlPaWczSkhqKzJ5NldReDdRNFhvMHZPRk5GOE1tVmR4dHE2Z1RrZnBzZkc1SEVSZEFkclFwMlZvS2prajBQRFUydjFLUENpVnVkWWhiY2ZwZXlLeWxPZWJ0M3FVN1FqNWJlRks3aG1FYjFlWHBhM0c0UFRQbHp5NmZOeXhJTEloNnVUSWJYZEVuRklvN1V4dlV1WG5CNFJJTlZ5TnlqQ0dwNTFLZC94eDR1VHZvUDRaSGVQdWRjWmVJU201Tzk0TUNwZXdOVlp5RnBEWnF5aWlaKzZWbGpaUExBOFNSRzlrajQ2OU9pVFZvajQybVhQVmZUb25EMXRVUWw4M3g4d2pYdFJSKzlVSVF4UUphMENlYVJYR2orNU5LWllEUTMrdk90MjhsNzkwWHcvRG12MnIwVEZpejM1SHRJRW5Kdkw4aFJ2MmRxTEwrTVpJQ3JNelJqY2hyanpTYTNSN3FrTjZSK0Z5a1ZJSlNycUdxSXRWVmhaek4vK21FUy9jdVNwRDgyblc0MXZyZWxmcW1PSWVQWmRFU1l0N1hQenVibjVzZk9jMWE3N3ZUQ1owdnlpN1JqV3k1SFZ6eGxhNTJiNm9rNDluN1o0UGlEQ2wvNUtqNzM1N1B2OCt6NmNTblpKYmtxU3ZqVFg5N2JHa2U2MDR0NWpqOFlpOGdhcEhKcEd5WjYyQTVEZk8yWGV4VFZocUdLTm1iN2pTem56ZFdFVitTQk9GM3o3VUEzT3p0OWlQUFM0RnZNRXkzaEc5R0daRkNTRHNjcW95c1RpWGoyNkVqbnBVNWVOQlo0ZEhMcjE1SjlZMCtzelNFQjhocldKR245QSthRFA2L2R0b1lrMW16OGRKMUIrRndGNElxcmZUUmdLdGVTSUVhODAzWEhqU1dXbjl6ZWtmeXZFaGJrQVRHdTU1d3hCYVluWFU5S042YUY2U1EwYjA3Ly8yZlA3MmZQNzJmUDcyZkY3d2ZJNHlYYURDSzNmbTJoVnhwNm9ld0c5TzM4bnhVS2dwOUI1UWtEQTZmQmQ3RmFOK2pjWFBJeTltbHB5ZFBDT2JHTXNLZTBZeDRFOGU5NG9zZWl2blB2NCt3azVMdktKb0RsYmFZeUhXMTZ3cG9tM2lEUjJSdlR5dHNXZlVhdThkaWVZalRVMzV1RjJ3dmEwdUM5MUx2VUZhMG5nSDh0N1VXZlhkcXNKN0pSNUlrc3NMOTBYWk01Z3JlUDhnRDEvcVljM25aZFFET1UzcjV4alRJakFVaVlnTDlYdHhBZTNmNUxWTTF4VExPZEpWWmJnMUZUNkw1TjhJVktBbDNnK3BlYTgxdVV2VmVEQ3pNMS8xRHRmMUZJd0tmeGRhYUZCRVUwL0UyQnVhSzNLcitTL0dENTlHUFFycExDZTdBTTZ4ZUpoWHJPalJMSHViYXZUUTZ3RXduczBSYjR0eWx5cnJKRC9UK3hmeHZaM2VxMmM4bEZVdllDTU8zdjNlbDNTT0JQWUd0dkErWE9FVkhEekdLMVdhWTlGaldkbWpuRWYxVWZvdGs4NHA4blRudkxLM2UrRnhmaldoS2p5UnUxKytHMnZjVzVzRWJuYkdxbGk1ZHhZWWxtc2pIcU1mbHIyaWhiMHBlellmNWoyc2VtcXZzanNlc0c0Q1kzSzZ0ZlpXOGJ2SDJWdmxkMTVyYXozQVUzeEpkdFZIZWlxMjNRTzg1cUFCLzdQUkRqeWJvNys1eFdQcUxZUEQ1bjN0YjZBRHdsL0lYV29rR0Zaa3JJSXNpbmhRWlJkbitqd0ZkMXFZcGgwWFhKN3o4cGkvV3Yzdll4TStFemRvdmh3TWwzK2xhZmpUcGxJeUVyZDZNdGxGQUdJUnoyRTNzdVFhSGZUT0tBRTBEZ3ppQklQNGR5ZFRGbGFhTEswMWVmcmJCWG16QzNKamNTTjZyekc1YXlkTmFzVHEyS1RpY3JvM3NiVVlLTHk3bEM3aEcya0VEN255dFJUaktmNmJpVTBneENzdy9uZnk3RDhlRkJUeXQzNlRZQnZZZFpqM1h5YXo1MUNZcGRqcXI2V2VvRHZjMHk4REh0aGwrUGZycXdCN2YxS2NLZGN6STJLcTVQNUw5TGM4Mk40Ykt3VmdKSFp2eWlKaDRjbGs0VTRqNlJPSXM3b3FJQTJqeEtic1VST1poeVk3UEE3Y3dEZmNLYklaYStmM2tYR3EzMEwzdDlCTmhTNTd1UmR1NXZPaFhVQkVQVG9TNFJ3QnVoVkFGUUpWc1Y2NFY1VVU1aE15aDdQdW83RW04WHh3amU5OFk4MFY2V1F5UEdtc0dTd2dnU3NkVFJtR21pd09nZHM3bERQeGsvcW02ZUk0d2Mvbit3RmJ6V1BQM2Q1dTRmYjJ1RTUzSk1BNUMzZW1ZaVg4RXByeUVTbEJNMVB1MG9CZ2RzdHBCR1lBUnZSV2swbG9lS0p0REtPMVo1VVZ2RzI0Sml4Z3o4dk04emVuVHduenhVbklMcGRBbDU5ZnVOZGg4anZTWUJjdjNKQWtRVWVNM25uSVlkcG5sMGNPWkxjZjlWMk9aWlhJd2pCKzVnRGMzcitRSFJlZGhYNFFaVUR3Y1UweVlXbHNyMk40cGcxY2tWNE0xeDlSNS9vYldlSFd5dFlac2c0L1d0cC9kRGJDNzhyWGY3dktWOXdwSTVHMldlVXJYVVErR0hCT0hRSkJIcVVoZ1hVQzhWcE5Wd3JWRXR5WlJrbEVBZGtoeVJtL3Z6TDBkK245SXdUVUZETU4zR21IMy82RDM2cnNMNlhLNGpaTGFYRkJybzNjTjRjT1ZaZFpqVjJHTkZsN0QxSU1xdWVkZnJMeDJoR04wMUw1MzZYNUgxR2F2MTIrN3gydzFBSFk3THpmaGZtUkRNNzdhT3Y0NElOaFRhN2hoN2lvL0RjazEvL0xrRnczaDEzMk9uUk1QWEE4Sy9tczBURjV2Zk10QmN4S1VMMVRUcUJYT3BJb09ESkNFem9MVDBtcDJuaUF2c3NhWkdZT2g2bFYzRFVNa0JWTDBZbWxqMFFDakNZdjQ3QlhjNE9LZTdVejJRTlhjaldGaDRZcndER0ZrZW5SeVl3MExTZjYvOUxwNGE1aGhpZjRTT3FVa2t3TEtqOEl2NnlRaGhMUDhhVFhvNFRuNlpNbWJKVnZ1bkZIelRrZEM2Qm5LVTJuWmRBenE2THQxWmlGajBRckxVYThvdHNRUHhOa3o2UmFxbTlFU0pPQlNnMERMU3BCeEJLeTJMeitDMFI3a0pPQVRyTzA2Mit1azY3cktrSTFUaENVUW5OQTV1WWNOZDNHQ05BRGNxWE9TQmU0dlNEV21nL0FoVHVUVlMzT2tVN2pVRG9WZVlKcjFvQ3ZibFJkdXQwdk5ILzhNRGlUdTRzRldqYUovSGMyK3g5cDdqOVl3ekF6bmtnY21ZbVZTT0hHdnl4RGFMTnVNbDYyQjFWNkpzbjkyTVdSUzc1aGdDTDVwc3RzRVozelR0eDhNbVl6ZUdTYXVBZk5rYmtIV0M2Q2dsV1FTMExQTkRldlpveVJlc3gvWm5Ub2ZCTEpXemw1Y1VyeXpGUVNtY280akRRVmg4eWlVR1pkVEpDcWpKWHVEU1dkWWhxa0NaSDNKc0xXSkVSK3lUYy81M0R5MDhISko3SHJzZ2hGV1hNMVdTREFhV1BOM2Q0dXNaano3MW00RXFYTFVxZWVyZ1RXam1QWnY5VmxhV2NPNDY2RU9ScWtpVmFGc3ZNN0xKMzhIclkvQzlkQkNPU1RSMGR4cWZ1Z2gvU05qdEhoMzlINDZKNUdkMFhjK1JHQ3c5M0pUNFF1azlEb1NFUUtNWlNUR1NZTEEwM3VrV1phaEROSjZQYlE5enc0b2V0TTk3a2NxbmkxSzk3ZDViK04zZllLbXJSNnZvamdqanZXb0hnYzdLbE4zbU43VVpjSjVvSEplMjUxek5LOVFqVzdrZHQ0RDFxQWMrZjRJL1plcHAxNDBnYmc5UjBHSXc5UTNDR1NHOWk0d2Z3Vm5TVDlmR04xTEk4VnlRY3Vzamw0M3ZBaVBacGpZL25VU2JzQXZIQURzL0J1UHFSUE90c2pEWFpxcWU3QzBoU0dWT1VEN3V6QVUvV2RIVFBQQkxEZVJyaXIxajRPeHZwamg3UGVva2Jwejl6QVh1c3lMcTV3eGc3bjE5RyszR1MvbVVhNFlYN1p4cmpvU1N2WUYwTmhheW9Db1NsOFEzanI0L1N5ZGpyVkw2UTdUZjI4M2hMa1BaaEZYYWJ2Y05ZRk1HczIxNzEzTk1uclFkQnd4WU5Cd1oxWi9Cd25Bb05ESHJ5YTNtdkZaNUpPS2FjelBOU3FJMnYrdlRuNWZjcDRWY3p1cFpvd2tjSENVeEZvMjB5THJNNENoVk85UGNDQXdWZUNnN09SM25BdWROVTRwOVpkVDZ1MHV2eHNqWWZ1empCZC9sNERWYnBFSWVJU1A1NHRGR3lhYXdKcDFRaWs3bGZPMTdtOTVSenU3Wnl1WE9ieGMrSEhPOStUZFZ5K0l0UjVLMDgzWlA5ZW1tTXFWelhsQ2tCNzl1aUR6alEvVGljcmJydVA3elJGZzRZbm5rcWc5UGwzSlhmOVczMXgzWm4zbjdYdm11ZVV0NnZHSFlGUUZaRTh0NmVtUXE4VGlMT1AzTE9vMitmUDRTK05oU2VWNnFIOTZMYVhsOUpPRzlGN1hlNFNBRGNja003dDYxWlhoTUpjbzY2b1Z2NFpUMU9tWmU5elMyLzA3ZGo3WG96dEhXY2gxS2lOQlpYcHAyUGNmMXp3b2xYZzRaR0JoWHNUQ0g1aGpQYTN0T25mS0hXREplK2FWNUMxK3RWbVdDWXJCWUE5WWpPbjdwMU50V1lwYlg1SzhCZHN2T0I5QStIeS9UUFllRDhjeTlYOXo3cHAya3ZkWEw1dmJ3cjNpSndtTTJ0a2ZqU1lJOFZ6azh1Ui9JbG5wV1dncjNCMnJrbWllR0NTeEFPU0dqcm9iUFNDTWRxWEFibEo5dWVXN01JNG5IUkZmVjJPSDRyN0VkN0pwLzc3NWhqZXpLa0g0UGFlbDVJQXphRU5WVm1Fd0pzMFZBQVVqT1BJU0NOSUcvUXJBYmEvUC8wbnYwYnJ2NmhSUFNOWHBpSVFCa1VFWU1Udmw2TTFiald2c1ZLSWxhZHIwOHpjU0tLMGRSNUc3NFJ6VGZrd3pnMkEzNEpoVFZZNC9CYWhEOGt6dXh6bDlzUVZHSFR0V2tpbmN2NU1XNjlzL1pnMWMvWWZmWUFJdGRPL0lWZklqN3g4OGZvQWU3RGU2ZzRNWHRlNlF2K29KTDl0U1VMdHdkaVpyUTZHTFA0K0dEL3RZRWpyeHgrTTJqRi94c0VndGRGSEhneTBybzg0R0tWRGNTNGpNY2tEbXN2TTRXZjY3bHZtVkJRWTRlOHlYRnVvaDBueEZ2MVF4bmNUOWJGRlRveDNqN0Y5c2ZQeDdZY2dWM2c0Vm9TZHJ0QUhUWmtHNVV4K2JzQmZ5RjA0Ym8yT09UZGNlQUNzUkV5citVZE92cTNQbVZqcmVwYW9oOW4rRkF5ZEZvYk4vbDVWRmMxakxLZW14TnYxZ3BZT2pZN2RYVkFTVVZuUEtQcHVyQWpRL01ucnFxcmdmbDJjdUxSSDRtYkJNcUVxRXdtdm5RQjFDRFRXQ2tEMCtXVit3NEIxOS9ONTNUNUVoYThMaTJjRHVKd2RMRDdPTCtWZU43M0xNZ0VrYThKalJXUFVDUHo0a2tySExuV1BiK2tIelM0RFUxKzZHMjk3cGo5ZUwrUUdOZ1N6NXNPQ0w0bEIzeEZaQmhweWI0ZVlqWFBXMWhzckhjOHNIR3RVM0lBZkdCMXhnNTdIZHJKWHZqejZqcTRJcjNtbWxsakdRM1BSNVNuZWtGcjdHdG0ybzBrQitpUS92OStYMkNPOHJ4OXhJYlJOT0sxTExMMGRJZmV5MXJpcGRxWHUwRkNORXA1UGFjTFJhbE5JVUp5WExJS1cvcHRzdlBXajRVcktGZ0lkYW9ybVk2VnZqVHN4NzRFSEo3cE0rdVpyQmZtMStka3Jrb1dUNE5naVNrcUhXdG8vaUNZQksrTGVKT2FJUi8vM2x1MjlndFhmenRydFkxU05qM2lTV1MrbDFrbHZkYis1Q28yNmpUL3hTa1RvWWwrQkdJMkFHNGp2bXJMZWNnTXhRcHFjOVYrK241SG5nTzJ0cDAySjJ5a1A5OWM2SldHVTJGaGhXSnQ0dkVWdEF2dzVsTjhLOG1CWkZnOGU0ZmVzb0M3ZmJsRVA3cEhOL1RaKzBPZmE1MjlCZ3ZQb3ZUYXMrbUd2U3NJdmp0R0lWdmNnSk91MTRRbXZSYVVvUmpkbHU2ZkVFRzF2SElrN1FNUUdVdmh3ZEVIY3E4eW9JbWxubjdlWFgvbXhya1VFUkRUTGV2ZWNsMXY1Wnk4a29EYWdZK2YycElDMG5OVDFuN2wzYTU5Ly9MNThITnA1STVwNVVSRy9uT2hMNzRGelhnWXY2cEFSbTlkOFdpckN5bVJMc3VaYzc1c2JFNUViNTNaQnhsMC8zb1A3SjNsQ0YxQUNVWVBZbjlLdUlLZXkrelArL3REK0R1M0FrOW9ScXpJMzEwOHZNdVRpT1EyYWl3OVNoT2dMeHQrRlBiMStueW5iQnE0MEJXNXZwU1hub3dTMUVQUFlSbFY0dUJqeGUxemdTTlRGMGhyM3BQbTNzNHR5RDQrbHluQ0hIUmRXTTUzUE9zODgwZGJsTGdUWUZsazBJVWRmOHFCSDNRbG1UV2owaTloNUZmT294MFBBOWs2NmduVG95UGFOZW9RV1A0OFE5V2xvaklTa3J5aCtScVBneVJ4RktQM2p6dVVJZmp5SDJDNjdpTkovU2MrSzFycEllcGNtRHA2UDdrM2FwdmRvbStMVG82KzUwbW9wQzl1Ni9USlk2R3F5MEZXcEkyeXZaeFRHdklCVWZoWngyd2F1ZWFxaXlyZlNmdytxd3R1R1VxZi8xaUovTi9kekxQQlR5ZmJPZGJ1b2xkdlZTRll0c3ZZMTZQbDFxUGlSdlNHeHVIQzJvWTlvaklpZlpvT2Q3VWVLN0tqWFRiNW5lbFRjTS8zM1IvaFBDa3ZtTWpwang2MUIxZmRBelJWdVRrU21OMTJzcGNtY1lJYk4rNFBrWG84RUhXNXZzTDJWS2gvUVdYZkc2T3k2SkpJalcvVDUyQlAyajBXbEwzUU9xUERlRlQzL2luMWhQeHBOMzR0UTVVMkZSdmV1VXllZjRsNmRKR0RvMEtENDlqS3FPdmFIZDFRd1dFaHA2Rzd0Q0kzcnFUelQzbWJhNm9vR0RTUUR5WWdXUDZHdmJxakp6RnEvc0NiZ1NqYUd4MUtFRTladDNFWDdYS0hxYisvbHU0UFI0WWxLd1hDMGY2RXFkejF0RnZsenhvUE1qL050UmJUVG15QzlCOTcwa3J3bytJenE1RVhoWG1GN1llSi96UFRkK3QrQkViODMyZDdLb0E0dkhDTytMdnAxZmFsVFhsMDNyOG5lZzQ0NFJiUnFLbFRLMFJUYjYvbDU0djFSTEl1L1lPUGozd3k2MFo2a05EbFlHaXU1cWlKdHpkd2VOTHo3b295NVhXNlMwQnp4dmxxQVVxcVRuL25PVnVmOXBKb2locm9zWU9SbGtHUWtYOGtEYmVZTE1GMXI1eG9ITzhXOVN2VzIzeHg2TVNYN1A2VnpUSHNhbG1EVml2dWR0M013Zjk3ZXplcERhZFJXbGhCcXA5OUNYbFRPS3o0ejJBNlY2RkNUTlg4NVNEcVRUUXNJM3dtZkxVWTgxRnlJZlFkajNIMHFsdnY0TjlndmpyT1pUVlk0WENXVG9nRHRiWFFzbmNXVzhpSUROMm80T3pyYk81a01sc1h4bVV6WDkzQVowamJZamJQcWF1ZExsTEt1aW5UQWZJcDdpMHRUNEVxdXJsaXgzZHFDSDJheHpZejVsQ3pjTzJORldvTzYrNEd0M0dkdGFIZ0Fibzh3S0dGdnZHNHNhU0ZPNi9ZbDB5bW16VEgwYk84dXlReUxZN043cXMyOWVsbmZxZmt1azNrYm84T2Qwd05JMEJIM2hpUkNRNkczcWlMQ0xDR0p0RUhVSC82aW5pNjV2YTBwazNBdTQ2cVYwMzNnWDVkMGVYS3ZqYVN0cGt6T3pLdDNRTHFXSmg4aHNnZUJ0ODd0U3cwL0pFamRDM0p2eXQwbVhhc0ZQU042ek9YZUdoZUJuNUh4Um9lR3lHWTNXQW5mc2N0WkhtYnd3bjNEcGpSNHErR1hDenBDN0lkeGhRMXdlL3ZHKzRTTmFKSFkxV01xZWI0WEdKU0k4WVFWS25xbXJuTWN4MHBiUURYcVFBR3VrbUpTMEpTMlkxNTNEdHJaQkhGaUU3bEk0NzZ6Ymc2cG5UNmo4eENXRWZGOGJOUDM5NW9pcnNaVW5HUFJ5YzVWM2RsT1pHanM1d3R5RldLQkdaK3BXcDBaMlJqRDNzNFlyVis0Q0VqaVY5V0hBZ3llMW0vQlh4M3BCSnplMXFBRTJ4ajBNQVNuTG11K1NqR0Vwa3oyZndjZDRnNkpza0VkU1VPV0JNeXpvM3JmU3R0NFNlT1lkOWlJTGU2QmMvWnFycU5lNVoyRm91b3JiT0QyWGZvYTlxakZ1WTN2Zzl6ZFg1dnIwTWIvRzhudGFiNFQ4UFd4OGxRbmZNTjVkNWZtRFhlNklyN21ZeUEvKys3VDVhNlB3Ymd5K2xYYU1iVTRIN3poUXFKRXU4b2VYM0UyNnNhN2NpK3VtcitRM0QzMU1kQWtqdGgrYitwa0RUY1E4M2Jndks3Yko3YXpDcjZaMms1L0JlQTIvbnh5NnRuM3hVbW5oYmhFaFNaT2Y2T3hjR1VPK2s2YUVPeEdlaUVYNnhLY2szV1I1aTdPbjdONDl0SXpHSWl6WWI4dnlZeGJPaTZlT1RPMWNyaS9OdERkUHJ5MERoeG5YbC96M292eG1aS3ZxWjJQcjEyMzIyckZVMW1mNWF3M1Z2VFZ6dFRpM0NSWGxOOERKTnRaQ1hmV3dYRk5wKzlrTWN0Ry9xejhMdEZOdVFGL2lYY2RiaUR1MFcrbkYrajFWczdIcWUxR0tUNGtseWh0enhoVzg0blM3MDZYZkdMWVB2eVdnQWplblRkUjdkS2FuMXU1YzJ6ck83N2NWZmJ4K1I3aUh2MC9LNGpKNzF2eHV5dktMMHRqUG5qT0x1TnFMcjdYaS9ZOG0zMStCWUJmYnF6SDB4YXdTTmMydTRzT2pXTWk2Qnhob0drWlZuUmNrKzBkRE9xNDF6cHdEa1k4VkdXc3Q1eVFiTkFqZTdsdHpJY3dPdlRlWUh2ZVVoSU9rZjZPK0VwQWQ0NlBmUWRYclRYS2tRSWVzaE1rV3FVRWJGUE1INDY2Z1hrT0FwZE1RY2ZFRG0rcmxEVFZGTjQzS0JISnFMM2hpcWRMdmwyVGxVSkRocnVZQjBmQVpWYWFSRVBnd3FoellDRVgrZC9jbHlPbEhkSitzaytGcG1MN3F5YTN2NjMrZnE4dURodHp5NHhrcllkeXpnVjVNRWR3cUN0WVRqZDJWZjVvMzBmT3p4L25ycEJaenZ5TWpHbGJzc1haSEMrK1ZuTWtXdVo3dGVMeE92dGNWOUJ2Smk5MVBoeWRraTRESzhlSUtWSW1UekF0azhMYTJSa2ZMa2h5VTJLWlk3TGt3ZWpmYjc5Yzc2ZkplQ3dGOVE1SjdHdXB5UzBLTldWYXBWZlNqWEQ0NkxZMi9YdEJoQnZidHRUdUN3c1J6NTdxYzQ5U25pQ01FVVlPSXhyeWZnNXhMazhORGRPejhxNHAyRCsxQldFWC9icytQeWdCa0dZRHVQeFFXNmNvNSsrMDFSTS8xdW1hcnUrM3R5VEpGejh1ZmJnSjNhWDNtT3BINldDd3ZhNGhvOWx6ZnR2ZlRkMGVvZVBueVZ4SmIycE5vOU9BcXg1UzdvV2lyWkV4ekREU01Pb3hLMnd3b2s5RkNGNFJBdmE0WCtMZXBkUGYyQlVQd01VcXphTUd5dmUyQm5adEpOaGpJUVJ1YWFlUmI5VCs0Q2J0WGpiZXZKbkhxSktGZEJ1YTFhZ2xoREdHdXU2ZFZJclpZbGorU29ZUUhXb0t2ZFZsd1FhWExIU2M1WDMwVllwNXhkNzc1c3JFWDZrNjg1U3J5bnk3UnRMWGpsbGJrVnlEK2lYRDNRSlplU1BZMmtLcSswMHlYczZhU3hEVlNvaHI3YXRnemxWSk5qU2h2Qy9yRGxmaWxjOXF4ZU9jWmFlMHFSZzU2N0dxYUFmYnlubSsvNjZvVkR2ZVhqSGZ2d3VkcnMzZGNaMG4rV0oxNzZSeWQxMlhuVndjNDB6RmE5MStaaFhzTGFNZHVRck1vdXpOVlZtMjkrUVVLejJiNW41ajlSTE9xR0dyMWx6dTg5YWV5c0pZMTh3enJscHQyM29uLyt3RmIxeFVnU1BoU3BoNUFzZGYzSlBhNnMwemEyNm85bnp3dnVCV2JKM1l3ODR5Y2NWWGNZOGFucm1VYWRwVTlWbFRXWGZlNjNuV1M0WmtNRk1icWJteUdyQysrdVkrcjJ6VDNPNm8vR2FhSW9nUHJkaXRyMTdGTWlxbVhWRk9wZmRuOG4zN083U3BDclNjMFp4V2ZUWWdHcFNxWEtMZnhOV2gxL0hjRFpXc3Jhb21jUXN1bGdrMWlRNE5Tb0JKdFhJSmphVnhUODc4OXFMY3kwY2hTOWx3YlRQSDh4RzhoZ3lxZGlnTVNXUzVxUXJ4bTROYlZ5UThpdlQ0UGFBZ1lYVDRMcmF2Y2JadzZmTzRVaExwTkpqbXlUTnh1ODFsYTdpcExBSWVqeG1mSDR3aC94SlZmSXEyRnNidmFGWHBLUTExMllTZ00wMjhaYzRWR2I3NXU2VXRxa0JjL2RvOTRNcit5aDNXV2lmYTZySUcxUTVjR1d6ZGZ1V3FMSytwRXNxUGVTRkw2bHdtb0tyd1hyWHRYanY5TjRJb0kwOXRxeU5CVFNTNkJwWHB5b2g5RlVXb3R1b0x6YXVtQ2pIbnRaL09DZkhIZk0wSVltMEdmQ1MzeEtnRjY5dlpxc3VrVWZ2Z1hGVms0dG5NVUhUaURKSjJjNVNFNlhRaC9MMVZwTEdQNTRaS3hzalBzTWlxSlM5bDFNK0g0bzhGd3pQellZOFcrODM3ODgzcDcwMUZDTWZVY2E5U3pCWlhaVHJvN1BJQmtpTUdlOXlyWWZka0hCNmFMVnVzcUx3L0U1SXhQTzMwRXlyL1RpYkxoT1pJT3FSVmVaVXNyVktGWlhzWlZSMzdveXROM2FOdnVsS3h5ckJHM3BhZWFaL2RVYTM4L1BCcTA5ckt5Y280T1B2QXoxZU50cy8rcVA3MlhyN0RsUzZWVnJUMHZaQ1NoV3F4TmhVNFp5dWFtcXRqRW4zMzE2NkVTdHNpdHF2QWlmY2tCOE9aeTVhOFVJMTZVN1ZOTy9tVFZWSmVxRTR0VmQyZThaTktCSERocWxCSmRUVVB0SzM4bkxhcm9ob0swOGZLdWFZMnBxMXAyRWtpeEkrcFdHMll6d2ZUcUhYRkhpdjhZaFY3NHVyREt2WXFkUHd2WExGM0xlb2p4cFZ2VWRsZHBrTkRkUzIrUXk3eUF4RkVOblBFcDRWN0o4WFJiMTM5ZkphR1JWUUFhZmgzb1FLY3J4UytxTy9VZk5jNnk2eGRabGJiREx1a3NqRzhKNXZvaWtxS3E3SytjKzJaYTlEVFNwVlNMMDEzeU0vSjJsdGZ1bS9TU3NiNkNzYXpPa0xpaDFucDZMUE90RzMxWlBMOFBzMGNKSHRCdmc5ZHFTSXFSU1NyclVvc1ZUUzJIdk9xYzlBeXcrMUMxdDBablNlb1ZyQktoQnIyNG96RlhwYXhXQ3Z6azByYjJNK241RElPbGZoTTFjb0ViR044Tjl3anpoNERuZ1IvVlgxb0xBc1FlTk0yL0ZWQWdNSVZuU3gwZFZtd2NaN0c0ZStnUTBPMmNoMVB0NDJYTkk1NWg0M1k0aDQ0bTJlU3RKQU5hMUdLc3JhdFY5akF1VEZ2UTdwclgxbFhyRzZzeVhWb2orQlZxdks4TWxhZTZZVDJXZVRXNWdyRW4zejNzZFhxMExwTTlVdThQS3RXZU41VklWczczcFY3Y2MzOHM2ei8ybk9WeEJGdnJ2Qk1xdmt1VnQxRmR0Ymxpc29CdmRaa3pUYmxJM0hPL3JoYzVSZDEwN2krR2k5Q0VzU3hLcXhMY05hVlZYV1hudkdSUER5RHpINU9adHlTWjNQbXpJaDFjdGppV1hTM0gxL2JWTnZ5VjczMzUxYm0xdWxLdWRoUldaOTF1SUc5MW1XQjRBWjgwbFBacVZiRWNJV3EzU3NxYVdKKzZqc3RFRVRiVnNjNkdvdVJjUGZvYkNKKzFseG1DNmlGWDg0eHE1VXBkMWZyTlZWYXBqWi8rdDBsWHh6Mkp3eVQ5dlRidS9Oc3F0V1YrYm1WS2pwWHJlTVU1V3JQaCtjSG1XeHZxeWw4YlU1bDZidldzWWpLbUErZXN5cHJMa1pDR0sxTE9hRHA1NjNuV2hqcjhiUTlYNFZaekUrNldHbDVUZFhzeFdyUksvUHFtcW91a3psbFBvK0dEanZsZnV2RGN1ZWloT2RhVlZ0ZThvVVRtc0lIdXR5TmVIQnRocW9zd0FVcmhib2NvZDhiVkhkZDZaVGNRdDlzWjk5ZWp5WnpqLzNZdm5Mb0ordkVvN1JhdEE2bDVPY2djeW1ObFpBTmZoOGFHZ3BOTEJlaUg4bnBSK2pHTjFWQkJyZjROUEs4V0lOcTNpcE9kYnNQaC9aeHZ2K3BOcGNscnFvN240TjJ3WWM2UGhkcmlDdjdFcGxESUZvOVFKKzlYRFhkWEcxNzNuZVRWR2JXVk5lQ3VGdkwvTDVldWJtNVA3ODl4bStGMWlFS3F0eTFOU3FYTDlQZ3gycXU0cTFVV3E3cWZWdjVTc3NtL3hjNkt3RmN6amVXeVI1UFk3ZFVrVmxUMmF0VFVyZHR4NmM3L0NtNWFzczdmQ201cXZ2Yi9DakYxcGxYOVMrMmZiMnhYSlBaYVlOSWpMZHNQam5VRkhwcmRHQ0FwMzk5MDByLzNERTFGWEVQS01FMldMalRDcUFHOW9WU3N3QnE3TEFRTXFodGNobXBsQkM0WFJ0NGE0c3JsNmgxMUJDWmNLb2lFVVpIV0tueTBUZGNzRGRYdktNcG9qMXhPT3R0MEgxVkZkcFdYYmpWRmRGSDY1aEtOSjkyZ3ZZbXV4bkxuTGdCWDFwUGo1bzRYSFM5cGlXbTloNjQ4Q1V5VFk5VGd4THA3RGRTV0dtNjJhNjhzMHpIMjBvZm5kYk5BRXNsVHZjMm5zdUpvVnRMRk84b2FiclFhSTQ0bDRwK1JWdjAwancwMG1DUHV6SUlTajROc2tXWDRVS0RUY1RUbWlUYXdEV2htVytTd1RZM2ZvMityeTkvTG9Sb0hsYnFTL29HVEVzN0w1WXBsczVsVXJaNE1GaTRVbE1RT0RwUUZYdld1clMwVXFaSzJrc21tMU5XVmhtbi9rVDBiWlZHWDU2dnlUS2hSa25FWEpZQ284TjNKWFQyV1BnU244R3BwdkFyZEFhd3F5aCs3M2hHRTB1RlJ2cy9TNEVoazNLME5CeXhlTW01S2hMQVdtakl2WENaTTA5VmhmZktBQlBtQ0I0UXp4Ym5VbEExYk5PVlFqU24wak94S3ZqY1dJcmE3Z3lXNk8vRlBEc1VwcElrRWJwODlKY3hBQkF5LzFSS3dvMlhNdldWU05ld3lPanhsb1RFa3RCTHpwV2ZxSFlyTUZya3pOWm9id29xOTBqc0FuYnh3akhGZVJSTEx6VUlYTWJUU25OTmVMbStGUHhHV1U1bTVrT1J4bzN5S256bys4T3VvOG0yYmJvd0F6VmplYWl6REtYTFdTbDdXeGw2dDJyamVOYjdjcnNGVU45dW0zU2NjNkgvdUxRa2JreVluYTlaWHZjZzBUcFhIR05DamhYM2htTVMzRWdnd1NoS1A4dkxhQTBES09iSG5GaExXU0lHenNSYVVGOHNkVWEvR2lOa21rbmh3dTF0dFJsdG8zdTA4dm1DUi9jdWtobVdya3pRT1QrYU1ndzFlZnFtS3JTZjZocXJqV1VrSUhjVTNwLzNiNk9vOURmZnlIdVczRDlFVk9iM3U1bDNtMmJlNThxaml2VE15WjFkMXR6VWIyR2lKZmVtRUpWdGtwbThHcnRaV0tPaFdmZGJFcmFNeDFqaE1jSTZmUW1leG5JNlhxQkd2UG5DRFhpY0pzQlpwYlBuQ1FkTmp2UzV3cGxaWFd3NGQyWTllUnJ5Y2lFTk90YkxVOW1XNDdmNEhDWGxRR2hOWWN4enQ4bU05ZEs4WUErZGdhQ1IxbXBCTm1CWDQwWlRodWRzRTZSUFdkeTZvRTg1YjdPMnYrUDNKbXM1YjdQWXBuRW1sajRTQ1RDYXZJekQzcnNtaS9iWUV6WmpTdHlybmNsK1lGV2diYzd6Y3JTbXdtOEtOZ3FEOVJlb0RYdU83a29ycysrWDRCOSs2LzhmcGYrM3VNT1MvUy91MGVEUmNEZVJmUjNicGVzNXhmOUxrd1hpQVRBNGVONVNySHRGcFcyWjNMeHdQdkNjQ3ZlaDAzZGlmczdkZzR4dGpPaU5PaDg2dWIxYjUvMFk4MGZ1bXhmZktTTUJSakxsdkg4RTcxL1JUMkZ4S2IydHB2a1htdjZjdjZkTGJxMHFNTnhiVlRlazBmelFXTHpoaVJCNG1tMWNUTk9QNTh5aXYrRk9JeUFHM2pSZFpwdk1XNlY2ZTRNVjkyWms2L2dHZGJFa0lxYVBzRGVvNDlyb21Mc2tCRlNDdTRsc3dFVUVSdHBTNWdXNjNNM3N4UFNNRk95L0NHNm81ZG9ObVhrdTI2UHQ1RkRzdjNLWnJjSHl0a29sNFd6YVZlWGpWbldabFo3ZTk1cXR5MGNTdU5KQ3gvYU52VGZZbEk2dUtzT3RxZkJRWW0zRUJ4dEV0eEtBZFY1WHFrSXdlWG5idHkzdzlZWDFGM2hMREhYWjlLTDBLcjlkT1hxMFg4ais5alFxQWJ2M2EveFZKYnZIS3pVd1labTE2VEk3bFpMV2lhMkN6cmZKOWtKTkV2ZnpEdStqYzY3S3g1UXZwamhVMnBKUEVlMDY0aDd0alVIMDBEcDl3MlcyWmY3TXlZbnprQ3pSdXFzMlYxU3lGZXFLajlNOURBYkRIS1YydEtid0NVeE16aStRdDlNdzdTN1pmdkhaeTM2WFFlNDEwdjI1aHU1dmQ5dDUvc1kwbmUzN3pnK2NqV2ZzVEd0NUFZRVFtMVczSUpPOXNTYkJEYXpiWFZESUJQU21QdmM2OUpHS3AyTDN0MzByVXByUERXelBIUFEzVnlDajRlMHdCMnRyTWx2SDd1WUxibkF2N2ljOTYxR1RHVmY4VythaHlRNlBuTlBmQUVvS1RGY0twOWgwWTBKMFJYNWZFY2Z4aWp1T1YvMWdNdUNzOFZxd0FjczR1bnowVFJhaStZNlIrcFpkMGQxVXpZendnWDBjSXZqbTBGT0RFb2U2SW9TbVFtTzFaZXBKYTZRVy9EWlgyNWlyOTZzQnlYZ2x0Sk1aem5wU0JEaGUxNkNtdE1yMnFVTjlxNWl6YlNOcVpkVzJWWmdpN3hyUFpYSEZWeXBwbTZ5d21aY1FQVnVhTXRsNDZ6TThWdXdCY0NQQ1p4YjFqZVJLY3lXcExuZHAwMlY4eEc4R3U3RGUyTzRleVJHZFpVNFlON254dDMwSFhlT1MzTFZ6djhmbVorSmVMNDE5c2FxMVBKZWl1eGlqd1p6UHpLdk9KKy9xbHd5WG9aRGFnMlhtUlR4cnBONUpPMVhCYWhRT0Z6N01IZW0vYjl4bFlDOTMyL2NkWEc0dlJGMnZMVnhHMTBuTDR1SFFvSkRJdEtHcENETlRQc0thY2RwR01RT0Q2dnBJUTRxdUpnRnBOL3VJck1UZVhBMGRyaW5heXBKN3c4WGdQL2lxVktsZXFNbTlhSHZSMVpJVC9jRHRvZmx2TkVVNkxUeHBxMDByWG9ZUHNIaGFGby9YMHJOR0ZOWUMxN1pvdzR2ZUtVdUV6a29rSUhuU1lCY0ZBSlF5Q0dVVmdQZlh1dzd2cHkrejFsaUlSYndxSHljWEFZdHZwTE1xaTJzOThsN1l4akQxQmwxMXBkeTlWbzh2RkVwb0hYNXZLblI4RFJXTHlDKzExcWhFV0pHRjQrRms5WmRIMFN3ZXIxWk51VitFYnYzR1FJNTkwbVNTaW93YjhxQXFQT1FHM0pmSjdEa1VacytIOGJ6djFJbTFHYnBsTTdHMHl6VFJkVkVVbEoyL0pTeS9CS09yYUMxSUFSaUozYlA1UHl3OG1UaDRSNTlBWTJKS1ZlUE9ITEQxODZocXhYZDFCL2p0eUswTGZzakhyZEV4b1RZc1dUVnBmaVJoemRmU1FpRjRmcjRXZnl3SWFTYXQ0YXZZVWpPT2NmWjJLbVdIQnRYTDQ4NEVIQ05vQzdMM09tUDQ3M055V2cyd3QzQWdWSEEwV1l5SDFkRmtVVEk4d2RaY2FaN2dTT1lTakI2SkZSbFVzQ0hya2dXOGltVnpBQzZrZFBrSU5VcENLb0tySWsweHQ0YkZpUGRORjI0MTJZU2lnaTN5eU1KWWJTeHp4Sk5Sa3NURW11STlCQlpXUDJaSmJmc2lTaHBRSmppWW4zUit6ZThyVCtYeWV3Y2c5M2wwNWtVV2hueGNoenVlOVQwa0tySHpuWlhXaGMvalBORDhaeHJiNnhpZWFRTlhwQmZEdGRmS0dWUmI3L0tBVG1kZVhWZUl4SlBTdHZ0YS96YmNqeHpPQjJoM2xkWjBmZk0vQnZzcHJHSm1qR2ZJK25sdXhISkNsa3FDdFpHY2wrWnI4YkxsMDB5N3U5YWN4NGJDK0RLWjNKelVZSEFRMk1sZXQ2N0VlbDYrbG5IVG0vaXFTSVB6d2ZGTURhbml4VXl5aEt4RFpZNnQ4WnR5ZDBDZ0t0Wk4rRXpYcjZzMW5zQ0tZM1BQNW5MUnIxbHpFOFlJeHBzWjFQTHVIV1A1ZFhLOUxYWS9vWGI2MmRxTDJFU0J5UXFIbWpOWXhDN0s4MkxLdzNmTmlkUkdaK1lraTQrY1UvNyt3MmQwSnRHdnhic3ZrcGV6eGZTRlk5RWNJM3hNNEVtN3FTSklnSkxTSkN3dXBHZWF3cEE2MHBOSDRrYWI1WEdCT010a3YrRGZSYnFWdlRlVnFSVjNwOC9mdmFleGxUTWo1aHVMSjBnU2RNU1pLWGRwUUhUM0JzUTRLQjZlUjBjNkFCWmp1T3hNbHRtS0JWT21ZWXdRSk1sNkdJZXBVSHNTMHF6UjRSMWRubHJZVkpPN1hyeVdTRjlpemREb1NJZHhsclFYNEtUUzFjYWE1T3NINGowUVZndHljbHJnd0JvZ290LytnblBEOVg1enFydGRTb2kySW92MkF1bGl5UHdyOE1OSWdITVc3a3pGU25UMkVKbVUzNXkrdDRoNGdqYThWTCs0dmZQVCt3WXVXeVRZQVplMzFiQ0w5QjFzb3RiYk9yeWp5aE1jU1ltRFdKSGU1dFFucitHRXVPbnZwSk1ISkowOHB0OVM3SzVJM0JPcVF2dmxjNDU1ZmNBNVdaQTU2MmlmSmM4U2hlVEpwUE1pVGpiMmlzL2hLRkFrWjIzQXdoRndleVFZRlovaEhLNlM5SnMvcitOSS9ybTZiQWFxUXAveXZ3VnNiNTNyL0Jpa2RWMmpTZjczMEhERmcwSGgrdHY0WFJvRUxsOWNOMnZDSEY1VHdMRkhIM1NtK1hFNnFpS3U5UDc5OUV0cmVwV2ZNQjgyc1QwQzdNN1ZUelkrRjVmbW1QSWhsZFJwMHBTbThFNXBienhOS2N4cHF5c0NrUi9IcEJoQ3BheklwbVNaZzc2STVHdHBuRjFpMjBUdTZ1MHpqcXdjTmxYOG5zTGEwc1JGQ01MZXlXUVp3anhIMDVGMDBGSWNxNCtrV1pSZytuUDJWOWdiSFg2ZDFseG44dmpTdVlvS1V0STVaczlGc3FPNHR1dVRyQ0xzQktSenpoYlRZcjE1RzNxMDNxdEhyYjl1VGdLNjB5L1BvY1daMXhRTkdwNTQ3aXdsOTIvK3MwTTdIaEI5UUFsN0pJT1hzOWJyejhsRllhdGZrT1VHQzAvRi9URng5TFVpNyt0OElpMThzcW5mcVNnamtzaXJVWEdqTjQ2Wi9UNUo3bE9tTlhJa21UZXo5ZkE5a3VHekhIQXZDQXBDRUpwbWFiOEtOYTF5YUpLQVduaks5Qm85UW5wR01oS2RuOFVvajBHYjQ1MUZkTGVqT2NxZHBGaUhOSXU2Uk55UG83cTJxTUFNelpVSldvVGRxc21RU3BzYTFwSnUya29YTlJ6UGREenI3MVJKc3hxTjM2MUJIOUFhOURFSktUNWFNMHhiWk9SRXdEZUhEbFdYV1VYSlZsSGRiVnpIVnJpV2kyYkgvV3NBSFNuS3lZN1YxZkdNVHFMZTh3cWtTaXdXalljMzA3K0tqc1ZXVE5jZXorMFN2RGVuNStVNFQyUHRxYXJ3dGpIRGpYc3FsVTJGRXhjNzBYK25ndjJxcVdCK2JrL0VUVlN0USt4QTVMQW9PUlhGelNMNi9qWm54SGI1dm5mQThyUGpCY3QzVDRjM1Z2T2tKNmRRMGRQY2NDUTVyV00zeW13M1hHYmJDc1RIRXlEd05GK2xGbWd2Q1NTNVZmbFFTb3NUNnBwUzUzTmtVbWxSUFFPbHFvNmFRTjUxVFZQYnpMZDRRK1NjbmhjYnUvMmI1Sy9rK09HeVE2Y0ZEMjdybTVLZWFmVDd3S3FWc1p6eDlKM0lBM0cxT200UTE0ckhjQ0FXQTlwemI5ZlJQWDhPajN0VkZnZXFmTFFOWktDczRUU2xFOXV6dFNGdkd5ek8vQTluVXY5aUk3K3IzdEVVUUwxM2ZCZ3I4VkxzZkU2RCtCZWVhNTlLZStzOGFzNmJmMzF5UXNiN1BxNHljcnUyTWNDQU9kRy9HVEdNd1AyRXBLbGVjaGJPUFhQajNrclB5YitsRVc5cnJ1YXJaSktVVTdNK3A5aUlDTy81UUR4cGl2Z05BejdHRFhHUW5JMUE4bTBJWnExb2djOFBOK0N6Y1FhY2Y4UHZKd2JGcktjdXMxWGw3a3BUdUh3S2I1dUdtZW41VElLdnM1Rkk1QnRnNUVDeU51WW9Db1RGWUU5dG10M1U3MFBVTE9NMGRtM0NIUFZMNEw0dHhpci92dGdrTjlmZ1Fuek5HbHdreUJpRmhpUFg4bTFoREJCMk1VMUtGVlN0OXE5K25Dckk2cGx5RE95d21GTE1RWlY1MzhCNWxOSnB2TWIzWUtwZmpHRldjVmdBNFZSbzNGUXRwUldMYWRrR1NETXVkNm1lZ3lUOVhKUEpnemxhdCtLN0NKQzFzSjkreHNOeDQ0VDBtV3Y0RFlPNW5xVnZCY1draXB6UlZyWWx1aVdIM3BQWEVjcm5Kd3RBMEljNytQQ1FYMWNrcXpNa2dUWjBqK1hhTHE0eS85dlAwQzFyU05CY0ZrMXJTZmVRcmtzcS9ZL3Y4K0Z1c3JvMm9iUmM0b0h6MnRQbVNmRWNmb0Z6UkovZWt0S3dJc0R4dFh1M3k4MnRpY1o1RzdVQklhaHRBeVp4MVhEL1lKdTMxSlNvdm5FV2JqcDh1VG5UV01sVk1DcjFpU2pWdTY3YVNPdTY4L0ozcktGVk04RW0yWmxQMk1tZkthd2JMczlWRERmeEo5N2pta1pWRmY1ODlEdmFOUnR2dUF0dVNTYjZHeHZFU2V1c1FWemhycW5TdmRpUVVoS1pmZ1V4SzkrODYrOVlRNXZtYzAweXk1VHJkU3RzZnl2V0xXY0M3M0cxaVJtZHZUZWwxV1BmY1JrOHRCYTlzVm9PMmNiLzRtVkErZk1QakZ6YzdCdDBsOEc3QTI0QUJhc3R2YXNQR3FtNUdvMVUxQlNEUVMzTTRGeE9hbTY3eThBcU1ZQkcwUVhYdnJkd3EzZlViSjMzWHdEc2MzUXJqVzkzMjEwWXJ5MXc2aU5kOWtFaEgvcnFuSzZzNWlVQlUyeGR2bGgyUGJSMC85VFRVTmlhaWtCb0NzOHZVdmR3N3JQWG0rYTFTc0QxWmxMLzdsejB2R21YdXFHR2NKcTU1ekpYMGt5aXJ3QlphdldPaDdqZUd2ajNrUzdVWEs1OFRnMnJqdlBJL2RnV1hWNzhQTTVqbUdIMUxBT0l2ZlRjblhMMTU3aFA2OTk5eVkxWjVNL0tNN2VkKzRzdTJ6cUFLYVNLSndrU2ordS8zYzUxVWt1N2xFK2xhZy80TTMzWjY5VGdWdlJMVmVORnlZVHFyd0VsRWZPY3lSTFY4N1FCR3p3amw2OTBLZGZUQ0FQaVd0eTZ4T01PNTcvTmFudXhZQ1FlZmlSQWM1aFhZZnNicEh1Z09lQmVIZGZPSTZjTzMrUEt1RFQyT1ZNUVpEMmRydEdGMnFHRjNCdkN2RDVwSTFLYkQwdkQzbXpXMTZ2TmwxdHNSTmhSTjBTNDd5aXB5bDA5andhaGFWanZ2NTk2L1crQXBUbVdjL3hoL1F6MStESS9wbEh2NllQNG16cVNvQ01XMUxiOFp6ZVg5ajFVamI2OERrMng0NHlUSTc5SXZjbDBVUTErNkRrdHF1dHR6dWtkOHZDajFPM2IzL2N6MXZieG1ReVBtTk5sdGJ3VTlTKzIrSW9pSzJNbDRldHRGZ1dJVlVQaGRacVZIWTJTM2h4SkJLSDB1MTh1UXZYdjZTbjg2Y21EbWJoNWlJZXh4aXQ0ZFdDdGVXMzFNTkpwMTkvWUFUMHZWLzhYQWF0cXIvZGZMa1grdXFTWXk4bTdWeVVPL2gwZXcxdVNmSFBRM1hGcmxMWkpGN0hsZUgyQzNKMGV3WE1xMGwySmUyVzFJUWJ2S3FvdnJUMUpIKzN4TytNbHk5RzFxaUpja1F6UU1PNUQ1L3JoSHIycjN0MFNBSzI5VENtcWZVa0xtWVkxUmkwMlR1MzUvOXo0OTh3N3gvTUw0REt1NXNKVlVrVlhjeTRxejF6QlkxZDZHcTliQjZDa3lEUlo0L250ZEVYczVydzlsZSt1bVBkSmkwMnJhYW56OVQzejFWbkpOa2JpWmtyWlVLV0NuSGN2UlZlQ3Fud2s5S0d3MFdUaGZYNVRzbHpqR0dmbi8yaXM2QXg2L0FyNktEU3J5cVJ2akdBNWdkZ0hRODAyWkxoZFNpMDkzeTNHYlZIbGVFR2RIKzRtQStMcTVFMnNPMTZaY0oyc1g4OTFOazNYRlNIYzNaSkVmaEJkSmtEN2VSTkE1TytrNnNjbFZmL2NST2pXU2NzeEh2NERUZHExOWRhS041a0RZTElvenR1c2hTbmN2NVJZODVnSXg5bUV5c0hhZjd1UVNIUmpNdlgxaVpydGRlUElybDFFTHBFQ3FtWEpYZklZL3FaUEh4S3R1eTJoR1BQRDIwaUFocUpCc01idWRSdTRDNHRiUGZjbXMrZncrajRKNS9vLzVPeWJZdUorS1NwVzVQOXkwdm5meXVPanlZY2w5bGZDRWVlVDRhNUNWVFRaUE9wQ2pyZWpVbkczVFpJdTlwdGNUSmdrQXZSY2NoNEx2cGNaU2FpZGZzWFZXRVZ4aktMamVSa25EWVZwc3p2eWIxcERsczExWTJKdkRmOUc3V21lYjBvUVJYdGNrOWhkNGM5SHY2TzVRT0NCQ2ZYUytwZElxSmZGR3hQcXBlRXZrMUNmcnVHdWhQcGlndmhERXVyUkhuOTBRbjNkTzI1TnFNL0NCZGY0aHJOc0RIN3ljZUh3R3dEdDR6Q0REc0JtNTUzdldwV1RvQlZRaitsTzdmQXdhbzdhUHBFaUF4YjVqWi9ZSnRIZ0VXQXIxNWJPTjFpT3A4b2V0bTNxbWVWRTErV2N0aG0zVlRRQ2QwS2pTTnpRYmxHbHk4S2dBbWhVR3diWHZ0OVV4TDBoNDk5VmVaY1I5em9sN1c0RW84R256OTE0VHJCNXZ6SFdsOHNTYXhQcnE4bDhsWVNraWM3Rm1GLzdwamtwcGVaeWI2Y3I0aDVZdjFMVG5McTFQN0JwVHNweENiMjQvOGVhNXRUUjl3T2E1dFRRK1JGTmM3aEJBVTAxUzZkbzV3Y29JYkhIVXJpZzMyVHRaMi9KQWszUGxOTTlxUjNlQnF5VXRjS3R0WkZ2M1RON2I3aTUxSWpDR29yZmZYTm8zSzc5a241MWRlWjhibStCSzBXM1BFWkVMUlYvRjcrN0swcytSOTlRa3lNZXdocEhpWSsrRGRvVXVOMUQvNWdlSkZvWHBqTTY5NlY5cUgvbXJzcU92TnlLNmJNbzA3NmdZVm1OZHVEOU5QRDNhcHlObk1ZQzNKNFQ4ZDNoaGtxUHBySFB5V1QvYnQ3TnkvOUZscDFkaytzZ3pYT3BURzNqSE8zdk5pbXpZYzZtRTQ0RVdLYzFMcXFaNVFGR2J4M0dhSjRGSk9LTE9Sc1BxU3pKbmRmRXppN2RMM1Q1ODVvOHBCdHA2OFcrcVdGVjh4L1BJdG5lcW9kamZkWitUTnVTUHZCUXUxT3RBS3g4ZUVaL25NbS8vZXd0ZzhQbWZlMXZvQVBDajBqc2I4bFZUUW5HUnRMTEo2bEJXaFN4ZktzYWNqMm05cmlUeTVaTCt5UUZTWVMyQ3RKNkQyNytqTXg2c1lTa2JiREh2WGxuM1dYNjNvZ0QwY2xPSXFMcnhSVmMyOFJkVjZ4M1Y3WnBRWnlwSVVVOXN6SnRiWmllaUxmYmVreVl5eC82RGdhZkRSMnNsNTc1MlZ6NmNCTzZTNjhkZ21pTXJEVGtiUldabTI2K1RWSTlxaWdpRHdnTGh0UlFVK2l0MFlFQk9uaS9JTUpvaW9BMWx0TjFuc1gwcmFQTDM0YzJtaUQzaUFOVkZ0NlJNSzZyMGJnVGRmQy9VRlBuRk1rb1VGMW1wVlBTVHV0bnlrOFVVRHUvbCtVbTlKWDJXS08wS2Z5cEJuMjF1aC9WSnZMMWw2Y3JVYnFDcndKT1YvQ2wxNTJ6TU5DVnFzRjI1dGx6YnErVTE2Y0piUVpkRXJCSWJFdHpjOFNqLzN0cFVHc2tFTUJsQ0UwMnV6bG5jYTB5VjBkSFU2SFJPWWVMamhpaS8ydWRkWHYwemFqeHY2Mk40RnlUaGIzaGl1MW83WksrQVhtb3ltSjNRVW5va2wrbkNzMUloSVpDYjlGY2t2V1VyNjByNkhZd0tKRnVTdUMrcHZhdGpuYm9XcHFXYStwYUdpeHBFSzF5Tmg5YVUvQmNNT0llSVc4SDU5Q2Q2L2E2cXJDMndWVFBHNzNuNk5mMlRrUjdWZXRnT0F0NVVTY242TDNXNFBBcHpybldPWkVsanpmTVBXcUhLazJSdXBVZ2ZwZDQxamRreHRNa0d0MGY2TnlGbWlLZU04UnJuMi9tazlaT2xkcnpCbHk0Qnk0a2xvdW9iVXRkZVhydE0xWEg1MDNqdDNXUU5QSElJbXRkOFlxTUQwMnhTMlh3V1p1TUtUSVRXT2s1U1RhNFJtN1V2K2VhUFVIM096WXZiRjN1UWxCb01WSUpaQk9hVEI0TWxpSGFxTHRqdWU1K0xyYnJhQWhUMWUxWnhIK3owbmtlSUhVZnQvNTk0UVo4eGwvNEh1NmRzS0h0UmEyaU1WK1VQby9Rc0RJSFF2S01Sc0dUT2VJamhDemM3aVAzZmlXVElXamNieDcrbmxCbEVJOFh6ZUZ0MEYzcnNnbEJaK3JqVU9PTTdpODcyNTNHUWs5VEJPS0hRdVQ0RE92WVRwNzJqZnRWUGIrTmlMMTFmSk8wU2dZamFXc3dKVWlMMHQxUk5FUHI1TEwwakhTSnFjSjdGZG1NN3duZUs3VDZ5OFp1aS9SV3h3dHdPUkpEZGNHRVpjZHFnYThHWC83RkRabVZTa2tIYzBDL2F3bzg1VnMwbXZHNmNNZzQ1a0hOWmJhQVdsaXFNckdTK2J3NXZjcTY4ckpNVTRiV1d5MUsrOEV5V0duM051dUgxZjJMVU92R003SWVMYTU4WCtVY1hKZkcrSzdVdDlSdHlWZU4zOVhKeE5TaFhTT0hDcnBJTlBhcWxJejZVbDFQMzlKRy9CNjhiaXA3R3BuSnpHVGVyNHdiNGhhVHBIVFNGTzY2TTVCcjkxbFBmNTQwMXN4cDd2WjJDN2UzcjBsMFBDT3J1bUdwdFdjdHI4YXQwYWU1VnFFTW9BVGJpUFhKZHJvd0RGVFpoR1AzUWt0dnA1WWZMclhKYlA5K0QrdmozdzMzMk1YMEdtcSt3VXFucFNLZ3UrTXVHU1BLWGFwT3htaHlsenFqdDV5Ukg5TE9yT2phdy9BYXZqZFlTR25vM3V3SVUrRDJIRzFlNVZ1Y21EazBvVm5MMDdpZDJPYWIwOThuUlNqTHlybHBUdXB0MEFzSzdZaUw0d2dyblpXd25qUmp4TVdpZXBaOHc0V0VMak5ia1pXMnFuS3RUWGIwVFZmYUlSdGpNZUwzcW9zN1gvZ21DMjFqS0VLRFphcTJXb2tlbXNMN0JpWGUvVjdBU3FFdVJ6clNtZmNSdWt4Q295UDkvK3k5YVpPaTJMb3YvbDN5ZGQvZERKcWRWTVNOK0FzS1lncVdva3duOWdzR0UxQkFkb29Ebk9qdi9vLzFyTVdrWmxWbUZmdmVjMjZjRngzVm1hbXdobWNlZmc5VmY2NzhGSThmSGRPT1hXVC8wSHpoTXJONG5xNHkxOURQdnRtcy9iRk1VV21MVVJITmJCd1lCUmVlWGVsemQzdEhiOXF3OUExMWgvYXRTeUh5N1E0dWM5MC9mSzlraDQ1eHBiMUU3K085aVdYRVI5K2N4VDkrTDVZdHp2L3dTQ2RHWkJtcnJFTTd1QkV1czR6cnhEYXU0VlpYWTR2aFR2YjBzWDF6Ujl1Zm85bjd1OUNHZC96Mm1HYnZhZnVYOS9wL2dFKzhSQTl0S2U3S0ExWkh0bURwMGFzRDhsc2NpVHZhRDJtQWYwamJ2MzYzRC9udS9sNXZvTnc2ZGsrbjJXUDBpRWRhSThsbkh6UWRQWTVEVkEySWovanV3eUwzTC9qRHlCYjBFdEZ3bVN2dEdyb0tjZEZIZEQyMXorNVV6KzBOTG9Vak5QMzVtQXF4RS9TRU8vb0dIYTl4R2R4dGpPS3FSSitMQ1gwaFh0RWVNZnBnWDUxeG4xL3o4VnZqTVg5cEg1KzJzYUNJdVVubVJ3OGFwVnFwczQ4TFZqNzE3QzhWcGtCTzRyYVVjZEpxRUduRmVqK2ROMm1TNDd6RnFFQnY2OXR4M2wrZ2NSL0pFbk4yUDlFTEdxVTZmL3ZhMmFXcnN5dnB4UWZZWjMzRjJ3QzZFdW0wbXlhWDV2ZnJyOUd0MVc3Ty9tSXNHOEFnalBoRTlqejFFbkZuNjN6c0pURWVMNHYxNHJNOHRpNWYzQ2UyKzNVaVoyNTQxU2R5NDZzOGVpUGZQbjlIbnlwRXVFM3JocG56NmVMYmh6THkwWlM5aHpUaG02c3o5a1BqazMxYnBuQUhzSVA1MEV1R29aZnVBeGxtZzNLbHhZaFFqRFpuclVLT1J0Rk52dTNzNzJhUmJhNUNKWktEMXdmTnFrdWRuOVU1NTFRNWFaSll5c0xzWm0wY28wUXlidEtyeXhid1hGS3NFNjlMbDFueHpYZjA0aTQzL1lYODcyM084TmZ3RUFlZno0LzlYd2Y0K1RpTys0WDQ3Zis5ZWJpUGVMWjNFQitnaDFpdm1sdXJ1Yms0Vi9aQjNRVCtleldaZFNYcEYxZmlocTd4ZUg3dFQvTHNqODc4dnR3R3pnN25UYitVMTc3bDU2VDdqQ2FYS3c0MkNkcEh2TE1xc0pndjh0UE5NNnE3cVF2YmZwZGZxd2JrSmMzck90SXhValcvZUxpMGtRMW5JSm5oMS9GV1JLTjRFaU92MVhiZTNZanZ6WE9ySVl6WTZ1ckZYOTQyMVMwN01jOEtBN083amtIYkJnMWg5THZoeHplZklXYzcrRWtENDZkNDgxYldWd1dJcW0zUVp5K05kVjlDTXBuTThvNlJMbFpqTjEyRmR0MTZNOHBySUN1eHNYZnZ4cWkzZlArS3RsMUR6MTEyTnJ4cm9PM0VBdW83Nks2bDdTdEpJb1BzTEp2UnU1K3BXbWVpeDRYMHYxWmVsUjE4UHpxK243SThPcVR1eVErMmZkVlpkVnZad3RRWE9rM3JIL2dmL05FeDFIQ0pXOXlRYnNuY2RKbko0MG4yeVdmYzBrRHVHRU90ZWk3T1VjY25YOWdIQ21rd3Y1VnJwTzJyY0JPeDJHcWpxQ3AxbTdQV0Zlbis5czlXb2xQV2VoTDlHTURpbDBCY3VuYUF5Si90eVNyejJCbnRUWUhIQmQ5WUlUNzhMemhyL24vMDdDZjA3RjFUcTJ1SWxNV0VTcmNOczlmNkYrWU9BT0lUYlpuTnRFbzZxdlJvVmUrME5DRW1CSHovNlZxbnZjaFlSbndFKy8zamd2UXYraFBaTWZ0UWJqM2t6UmRGR3hTcU5yak0xMThIbU9uS3R4dC9KZVd4ZjBmcUlpcFFzeS80TEsybXdrZEFHbzlqUm82cFVzaW0yVXpWeStzSEUvUWZ5SzVtb242M0R1UGZWU2JkcGFIL2tWVzNEUXFOakpCK2tnUGRIYW84UDVKRmlVZjVoY3ZxbCtvc01XaUozaDZwa1Z0bThDeVBMVnBkSzNTcm1TbER6NnJzZUMvVmoraCsxNlplK2lMT0c1TmF6NnR2eElWdHJDWmV3bDF1ZFJsK0R4VXNOMWNGUHQvS1NkZHJldkRzT2ljOXduSnhqZlN6R1ZTMWpZVnZnR3pSY0E1YVBHMXhuU2Z0VGZtamJkQmd2N2tUdlBlbUpydkdpMjRtNnhuaVlCR05HSFc5S2RYR25zMGRZL0FzanlldmRaNGMyWDRUbXZiWUZYN241ZERFZEVtdWY2NUJuRHB4REYrMXpCRzJHeVU5OTZhcjRVcUtDL0taaTVkdy83SU5sYktOSmJFdGtWeVl4ZGd2b2dKYjRsZzM5VU12V2ZHYnlmN0hZR2dmZ2d2Y3lzTDNRL3hwRk9OMEZsbUcwc0lTNktDMlBCSUliVVB2ODBHYWgyakc1TjJtVGprU1Y5U0dialI4WDB4eElhYS9hd21vaER2YXkvOTZ1QVVmS2NqZkxRejlQelFzNGVkQytxdEYrSWpKRzBZSlBTbWVlZ2xIZTFQbHVYSnlEUFl1NEgwaHlUc2FDaG9yRkVadDJIeGZJT3ZUS3lIYlRVZ1FoblpuTEgrMlc0V0pST2tocFo2YTVHekJHVTJiOWNCLzRqSDFUVFdlMGRTWG15bHNNOHc4ZG9VTXM2WFhHWUhhckJIMytxQjM4bTd0eU9rM1FlUk9nVlRMNGR5UVRyK0luTjNQak5nSDgrQnFCU2YrcUd2MHF3NGtFalp1bFBwUkd2eS9Lbk0yeU9CR2QrdjlqN1BWdDdQMUl6b2QvVXIvM096c1NycG1HeFpHd2pmNWJNWE96cjQ1K3N6ZEkzMVNOWUZwTG5PTmU1V2xxVXBiU1JaYjdLbzJsbW82dThmM2VlMEU0ZjdOQ2NJdnlYaUJ2L29HUnoxMDNqNXRwUHhrMnNKdk52VjFlTGc2Mnh2YjRkT0Y4RCtiZm5DTHQvTzFJcjcvOWdPaS9wdmJQMTlJT1BRK0pPckg5UENUQ1FrL29kVzc0VXhRWE5QODduTUZTTDgzN09rbjlQNjdFeE4rSk84ZURJNzZOWFQrbit6aDk0WTIvZVRNZjJPQ3dvL1A1blp0RzJLamJralE0S005M0g3dTEyWGQvNG5oUzQ5UlVEL1BmLzNNLzd4SGpvNFR1VWMwNE0rZyt2NDNtVm41c05IeTEveVNUOElzZnEzVzVOT3MrLzh3VE9OL2RYWC9NOGpHejkzYjc4TTQvaUljNGc5RlVqOFFpZi84NCtuc3hLZnQ4ZW5iZno1NWh5UTVwSFBIM2NibzU3Ly9lR293WTlEZkhkK2ZiaDEvKzA3KzZ2aEpkRHhHaDlRZ2VETHdvVFE5NUU0ZUhkTHFHZHYzWEhGU0o2Z2VRcjRrYk45ejlBdi85QTRmZi9yMjlQVDNIMC9iMUhIanJmLzA3YzJKajlzL250NFBoL3poUjhtam83ZkljM0lrQVA0OEhkLy9qQStlRS8vWitzTVJmbmo2NDhsNzN6cjVWdHQ2Nzl0OGRuRFI4OTYzeDhQcDNkdVNsUjYzM3VrOXlndmhrT2JiSzd6UmllUEQ1ZnQ3ZEk3aWJiQ2RIRDBuSml1QTVmM2RYbkQrZnRyKzhiUzlSc2M4U29Qdnh3d3RFLzBpZjNjbTZmbjQ5TzAvL3ZuSDA1c1R4YWYzN1hlQTNIbjY5aVE2RVpKRysyM3hneTJndi83eEZMZHVCZ205WStaNFcyMGJiNzM4OEU1K2pRRjk4Tk1uTjBkNWNIZGJMKzkrSVhOeUwwUTd2ZGxHbERqQkZzNDhDcmJIL09uYjB6RjBtT0h6dCtHQTlRYlVtMDl4TFBjOGNEM09jWWNVNTdQYnZ6ajZqZU5lT082WnBSajZqZDV5MjRISGVYKzV6MzlSbEVzeDdwdkxNSCs1VC9Xem42STBlTjhlai84ckRhTDArdWYrNU5Zemh2OFgybjJ3VFovK2VNcE9jVndmbHZ5bUh2THY3OXZqTmtWWCtyNE5vbVAranY1Uy9lOC85aS9IZjBTSHB6K2VjaWQ0K3ZaMFppaUdwUWJVWDRpMk9nZDQ4TnRuOTRSZS81NXU4eTM2K3ArSDQ5TzNwemhLVDFmMHZlemdqMjdKT251UERrQXNzWE04cWxnRlBUMmtvYmVqOUg0NFpVL2ZHSXFpL25oNlA2V2pvM3BJVjRkRFhwMDIvRzV6UkJ5Q1B2VDNIMC81SWQ2K1YrLzdqMzlXTjBVNHJVLzZ6UTZJdVY0R0F4WTlBVFRsUXo3ZVh2UHRlK3JFOG5kQ3lmSEI4WGtuZGxKdis2N0JPbFpPR216Slg4bWp2c1BUNGVGNWthRkRFdUxUTWQrK3k5K0JoWjIzdHlpTjhvSklGTFJjTFkyeWJKdDNUaHdmMDkyYW5GTitRSHVLMHVEaG10MXQ2SnlqaXRadlJVdmlYRmZiTEk0ODUvajBqYWIvZUVxaXRQVUxSRUx2d1RZWHZtODJlUlJISlR6NSsvYmQyNlk1VVBDUXFqNmpiSlBEZS9IaHg3cExYUk5MQlIrVWQwamZvcUNXdDI5UmNFZHIrTmVLazZrVjEyTmlRK0xaaWRMdE82Ry9scmh1L1JGZndYOCtoWG1lUFgxN29mNkEvenZDcmFDSG40NzVJV25XOUovTjYxNUJLRDNkTElBSWFqODlDcTJsKytteFpsTnl4V0wwZmtSc0Nsd1dIVko1VENRaTNJTVNKZWk2dlZwd3dtL1hoK3dRSDRKaWRISGV0NnZES1llckpSZjJXTGFPM29PR1JOOGRvZG8zSWNRYitRcy95bW1VUC95Y2N2QlA4YmI5Ry8wUW41S3RnaXpIKzErVDM0UmJKODVESWR4Nisra0JoT1ZUNTVmZm5UeEUwaDMvcWtSL1BCeHpGY3ZxZW5mb2Q5VmQzWklxWXRMamg1ZjROLzR5Tm9UUlFkVFMrMlAreDRmdWhlOGdoc2hyYm9YOWR1Z05YcGpCOWkvMnIrR2I5OFk0TE1kdWFZOWlQWVpqM1dmdXJ5SG52TEYvT1p6blBEdXU3M0swUzdQK1h5OE94L3JPaStzL1ZZOFV5SHZxQjFQK2dHYm9MZXNOdHl6bmJ6bWFZYmJENFpabGFZZGwvT0hXZlh2eEJ6NHovSXRoL3ZKY2puWGM0Y0NoWFk1bW5MK2VtYjgrMUNJZEZ2aGwzZEdTeHpSRjE3cUUvc2ZMUDJoRSsrU2RJUHVmdmozQnE1KzZ2K1lMekN2a1pOdC9XaEd4VFhpTnJGZEhkdGpUdHllOGlEODcyMExuaUoyYWhoZTYrcG80UWRXbk0rZmRTYlk1TWRYK1J2YUY3d0JCWkpHK2ZUOWlJd3I5OGgvSDhNOHo3Y1JaNk5CUHR4TFRPeHhpLzNCQjBpdzYrRS9mV0tUQXZpeEdzME9NeEo2YzV0djNzeE9qeDZEelArYUg5KzM2c0hpUGdpaDFZdklWQVhGYS9XeEVzRnQvQVliTEF3bVBGT1Y3RkFTRWlkRStvOVIvK3ZZMHJxSGlidXltT0hyYmVvVVh3K0ZuNzFzdFAyVEFjTmV0VjluQURuckVmeno5ZVhHaS9IOGR3MU9PanVEcG4zLy9EZDgvYjlQdDhmajkvZURDTTRnOXR3N2Z0OGZ3RVB0UDM0YVlONlV0ckRpNzQzMnNjR21LR1E3UUJzTXQzTngwdmY2T1NTdktJeWNlYjJPbjBMYmVJZlhSSVZKL1BHVndCNTFmSFUrZXR6MGVXKzlHdEJvbDI4TXBiejc0TjF4UkVxWCtQUEsyNlhGYmkvVmttNzlIM3ZFamdWTXZFdjFBSkgvMUZXUUFIWkp0SG01UHg5VUpINmZqK3hHNkdpZHUreEIzQm4wbFlQLytxcjNSdnNiUDJ4NWtEL2ZXUi8wNUJTUEFmMzRMK0JCV1cxaFJsQWJrdFdsWE8zOWdvci9mZnUzb3ZUdlp0dUdPSjVZNlBsV0dSYldNLy9nbm9yNGtTa2RuSjRyUmN1Q3lnZFVjdjZFVXFoWUZIVW40Rld2M2tHM1RmQnR2MFM2TFNrYUJwdFMrYm1EZUgxNGx0MitrYmxmZy9kbFp4RGRzeFErWnYvNC9vai9lL0wrMjNnczdmR05wOXkrWC9ZdCsrWXRoWDdidTRNMTMvTUdBZlhtaG5yZlAzTnVBWmgyR1l2L2lucGxubG1icHQ4RWJ4V3g5NmtPci91QzNMejREaHJ2Wjg4ZkdmL1ordUJiYU51OTR5ZG5KamFOanFEV2tmaU82a1lSWW5MZnY3NUZmMlZidlc4ZVBmaUptMlA5Nll1YTlJOEpwK0FVU0hRY2ZremZpNXF3UkJDM3Y1ZWw5KzYvVDlvaHRIQzg3UFgxN29pa3FBUm1GTE91bmIwOGNwVVRnTWh5OVE3WjlKTE4rem45UFR6OFJPazZXZlg4LzVBZnZFSGZ0MGluWVhiZS9PWFovMVFvQzROM2UzZllqdVJhbHpZZnZwZUROSHR1Q1QvNk9OL3BqWVZpWmpuOVhJdVY3OVF0RUJwbm9KRkVjd1llZjVPL253ZE0vNjk4V3RlMmtSV2tRYjdYYzhmWlBId3ZpeWh4NitwVmxJZ24xdld2bGdoV05UeG45Yis1bCtKMG5QeVBMLzdGWmZMdmg2ckh3VC9Oby9PL2Z0WXFZdDlZSjlCSTY3OXZ2N3dmRUF5MEhyTEpRaXFPWFY2ZUJsL2dnQnZiUWdVTmYyTDRuVVFvZmxkNGRiL3U5eTMxZ2I5MkVBdEF2c0kra1pVaE9DSWYwbUw4N1VlMmY0T1A1d2lKT21lL2tXeTEvZC9KdFFEenhpNU43b1l4RnNoSGw0ZUdVayt1dDVEb3hTSGtjWkljM2RuMzVuL2ptUHpRam1YK3ZNLzREamZaZ1paOXlPMjg4ek0rNGpaL3cwbTUwSmpuektySGhKUDd6NEtkK2p1TXYwcmhZSFE2NUdNWGJZM0hNdDBrZGVQcXBGL1J4cE9wNU9HUUhsVzlFLzJONEcySDdoS25NZnFDSTJOOVFSTU12MmtuZE0zM3FJVEw0U1JzQ3g5MG9KTFErc0NjK1l3WThmM0NFOXljNC9NSUJQdERrTjZIR2YwK2dFQjNHRHl6MUVVN2h3V3RQK1NGQlAyaWRQNjBQKzIwVDNZQ1EvNDJML1BUM0E1RjZMd0tSaEF1L0l6Y2Ezd1d3NFBkVEhPTU1RcTFjNjh1dEdQRFdMdm03OForK3YyL2ZvaXU1VzlmQkRtZG5qY1MycWI3NHZqMUh5RmVmUnNoWkx1WlJFdVdFRmU0UDVGRnc5TmRQNkY3WmdnM3BQSDFMVDNIOHg5TmJoTjI0T3YvNmozQWJKMUdRSHQ2M1RYWlZMdmlsWmE2ZytNSXJlTW90K014bWhtY3YyUVErRThadXhFZStFUjhCMmFiZ0w1YWh2bHVHSDN2RjRGVXUrSTBqeFNXcDhBY2tHWG1xSG16amVwUWwvK2d5Y3RVcGxibUpkNVNuTUlLRmNrdzdscWQ4NkV0QjkrK1NlTEpIaDUwc0RXT2J3WVZic2hCZThCalNNTGFGcXNCM2tzMGpIaERmWklrNzJScWdOY0VlNUNrZmV4Ri9kSXhoUEE4T3A1V292bTNZRmRvUFd1L1laZWpjWlFhQnZsZlhzclRLdkZSNW5TZCs1Z3N2K0Y4cFR0MkVLK3psNFdTbFdURy80SDhkd3orNTdDd1dvdUhCTHRCbnc3VDF1OUpQQm1jaFVvSWx3K1V1V3JjRUdVdmFFL2dFa08wdWgzL05VNVgxUm9kL3paTlo2TURQcXh6OS9CWWNkckpvaDE0U24zMVRDYlROU3ZRdWg1TTNuWjJkUk4vNW84UEpNVmF4cGIyOHZrWkR5alg1d21VT3IvUFVMaTJHMjl2YVM2ZnpTcGlPVkdreVgwai9TUHpPVFk4ZENVcEJqaTdqdlFyeDZ1Q1lTbUFuOGRIVytMM0xxRFQwZ1U4VndBZVVKU2lmaTF4cEUxaE1XSlY2SUFweDcvTFdJblVndzRDZjV3V1hvbHZ5RGZsa01WdytaenFsQk9mN25QYyswQ1Q5Nkdxd3ZzSVhCb0V1aFRHbUZpalhDdHhVejlFejBIZmxxVjdhcGhJWXJCcTdobmp5cFhnblQ2dXk0V0htSnI3L2lrdEswRnBJUDVtTWJpcDkxUWF2UXFUczVHSkV6WGZMa3pJNnZMNUdQRzlMVURJY2VLeCtJVGhkaWN2S2dTM0ZwV1hNb1A5Y2xocThOMXlMME1ZWlUyQzRxWlhvcFR4ZG5lWHA2bUJydkd3YjExeVcxSU5semloWm1nM2xDWDl5RWoxMVdiV3dZSUMvRWpqR0lQajFzK011dm5FOXpzdDlvWlFCMmt0b1M4dm5WMG5jdTBaYzR2S1Q5cmlMZlZEMUFXMDF1TXZTTnBjUHNUVEplb2RXb2gvWGh2N3VGSHptVm9Pbnk4TjV6Z0N1S1cxRnc1M0xVT2R1K1ROM1gvTEs4clFyWGM2TDlXU2dCb2QveVlMQ3FydE5JUXRVb0JNc2QxdTRPVE00UzcyME5aNXlwRTNRS2tFTzdJUXJ5RG1UZnNyNDdPN2pDYTRWR1o1OWdsbnRHSFptRzhzVDJZL2tteXZhUzNRVlNReFppay9WTVBORjlISzJtWmh5cG5wRUJ2WjE2eXVZdS9xRU0rRFpDaTlEWmEyVVFuUUlObEIvUXNjRTM3Z2FuNUw3akg2d0VoaVprdGNqVTlpNmJXSm9HZlJ4SHZIUlZ1TkhLMGJjT2N4TFgzUnhWWFpLaSthVmt5S01YdWNhdi9aTkhnYnF5cEo5OWlKKzN0NnJQTFZPVmMrbFBQVkRyMEIwQmZjRHc4VHYrTVFZN2oySnk5d1UwZEkxc3hpOUZDSXEyTng4VHV2UUNNL2dFcXJCaGZBVC9ybDVaMkViOU5sUDlEMTZsbEVHZzhXYUo3ejlXL2MxV0l6M2wxZU56eDNEaDlrQlFHZVNmcktuUERwTHFyMEhvOXhmMUhYY3gzdUh5bmd6Zk5WNCtMeGZqZEZoMU5oTFY2bHREQUtQQ1VPZ2ZjQXA1a003WFNGdGxycmw1THBZVDlDOXVZdjFpRkxqMzVHM05XMWMxTEdWeVNJZmVsQXZzNHE5Skg2MnRRYjNndUFiNG5xYTVTR1h4ZU5RV1k4b1V3djdrQU1YVmRnSEt4alFqRXNTRVU4amk4REgxa2JzcFRORW0xanJTelR0VGxlWkoxM2oyekp1QVduUVFnbFVZVkRNZDVOWGRHOVloNmdIUytQUGRvVFBmRzc2c1pXRVo1YzU1aGFqRjc3a0l3dUhZT2VPRWlKUHpwNmtuM3hKaDU1RndPU1dDTmFzQURLUUlYVmxSSGRlQXA4UnkvcmVqR1hnU3krQm0raHM5VDJ2d0ZhVUwvQm5OK0pEZDhwbmJyTEpmY1NQYSt1a29MTVZadTVpSEF6N3VWdkVLMVltVC9XTExZblVUOVpFdWN3cTNHcHlTMDdJb0JzL0lTZXU4OTFrT04rTjhCa2duVzF3akcwc1grZmFLRUk4cS9UR3N4UEVzMHN2MFhGZk9GNFBraG5sZkRlSzBKM0w4WEd3R0k4R3ZkRG5PTGdzaEQzTVRiRkJmNHVGeFFTQm40Z0ZLVjF0djVQdTY1MnF0ZytXcVo1N0FsKzNPVG5NOVl3eHAvakVTN2hjSHNzbmRUYzZLYUREUjhWODUxM211MGw3UFdWZjYxR0tmYTJmc1p6RW4wRVdMckxOY0ExaFRkTUJvZW4yV29yZTFoTHRrUzJLclBsbmVhcFMyRVpBTklqMEd0SVhHTThCU240QngxT3AxNkdXKzU3b3doc2l1bGdhcXoxK3Qwd0IvVXN2QWFKaEg0LzNLaHd6YUwrYjZldmRhclJIY21ld3dMWmVzTjZJWTVQaTF2SVVQQWhvdFNHOFVlTDJGeVczbURDMm1HTjdQV1ZmNjBIMFVma0h0Z0EyNWExOGE3MDN1UGIwM29IUzhFbFhScklxNVNVNjhpcUxPYnVLUFhhVjJlaytzTlBaMmRWRzEvbk9PNm1ZYjY3elhYQlNCTG1TVmF4YWhyM0lLclgwQnE4YXYzTWtyckRYQnlSRGNwZEZYcTlLWVN5TkliV2RMc21hZmthM1hrK3l4V09SYk5uY3JhVzlmN1d2L1pldkdpLzRCbjJScFdxOTNNNWxWckZuWEhMTFVMRjNMOW1GeTFDQkVnMlFIc0gyL2xoR3R1ZFY3YXhyMXRlNmltWmRYT2t4MXRsajFMT1g2RHZMbk8zbmhyZ2ptUFZFems1Z0xYaGQ4UCtGSEZTNjJtTVZ2UmRkemFybEpKTWxPOXNLU0Njam4yRVp1TWF5dG9jNjd4VDdldWNva3lmaTNzWTR2bVFvOUFEN1ZUOGJaSzd4L0dheWI5R29OZXlKUnBtRlZ0bUUwQTVlK2RvZzYxd3BQam1zQXJMV2xuVEdOcTdJVml0a3lhY2RZeFczem9sUjZaN09hZWRsTFpzY2ZKUmEzdThtSjBTNzJJOWN4WjUwUFc4aGxxSUV1ajVUdktKRnd6dTlKeHEyNkMveGxqYTR6SGN5MCtHdHRzeGI5OFZibStKK1hmaitQWlpQbExWeXRoZ3U4cEpKU3hZdmtkNG1zbmpUbGNWcnNhOTFYVDllMTZxd3pkWE9tY3BuME4xU25HeTFodmZWWWxCVXZLOFdBN3BGWDNSdmZMZ2VaYklrN20xSjN4Ty9obllUTllaWVhQczh4bnhQNTdHOFlOMGtubXhtUTN6T1RRRzh5YTRLM3hpZWJGTU9MR080bHlVZDZURG9hYkJOdWNYdlNsKzJWSWxzcWRxK2xGWm5pL0MzYTRqdnRzWm52c0FqM1ppaE5XSFpORHk3ekF6SDJTVDdET05iQzJUcjZCZUk4VXhWeWpaSDdiV3lmYTFWTGZhQjM4U3FJcVN6eVZ3WGZJNE5mWlE5K1hHc1VpSS9UbzE5Z1QvYUFwMzdwbnFjbXhBOWIrK3hMM3V1UlBhY25laWhQejRFcmhHbk1LTlI0NCsySWU1dGM5YkUyaUwrNkRMcU83NEhiTCswNVoyeXMzdWlWNWw1eGZnOHVXMnVEcmFwbC9WUTkvS0E3cVAwcDdQWU11ZzNtQk5tREhkYm5TdHJuUC9tVG9xK2VGYlpJZDJwWnZJVTRnRjcyK1RiNzdrdWVySUxsUFUrazhWNlhIS3dadm5ZalZmb0RpQkdzOVg0RWpJRGpGaklRZ2owMlBobjJNOS9iZGxSeW5yVjA1MU1xRmVOSDN1SVRxUU5YbGVxbG5iRWw5aFdVRU12V2Jib3N5K2YzQU9mL0xIZGoyeG5PdmFsTVBaTjBEVWtFMFAwb0RBb1ZXRnd3Zko4ZEZMS3JyNVJ4bjNadnFPVzdVdnN5VlE1MjVKK3NYRXYzMjZyMFlWdDJwbHRlZy8wTmZicFcvUjA2Y3ZPVk1hVFRKNkFuVm5hcGgxN2lYaXM3YXo2ZmRhd0ovcGxGb2grc1YyTDQvY000a3VsOHBNaGxteHBmRzRaZVZ4anNKSllzV08yNkdmWGwrOXVEVnYwRTFvc2poL09XY0JCRG0yQkRyMTBsZG1KdUVQcnFHSXRTbEg1QU1vSjR0T3RzK3JKem1RV2F5K1RKelBhTlVkQlJSTmVnWFR2aXZZRU9uV0wxbnFpaW80Vi9QL3Q5ZlIyZDV0SDY5bTdySC82d1ZtQjdsWWFQY0FzK3BJNXV6M1Y4SlZhV0dZMm5CdDB1Qlc0MUtuNExLTDNTQ2ZacHB4YnFaNjUwbXJRc29PWithNWEzNkNFZUZrVE43N09kL0pyVFcvcm9DZWJZVE5BTmdQRWlpWXF2eEc1dGFHcmIwc3ExTllVdDRFN25LeldjNXBmYndTZWRTVDlCTmx2QTlrWDlSbFM2cnFudU1SNE0zalZlQjc1VXBDWGdaa1crdEpMOU1SR1B0Y2tqRjJKZ25pT2w2TFBpSVZsSUptcXQrVFJwbEQ2c1cxb1pTZFhQbWlUZnlhUUxTU0dCVE5tdklRN3VwSmUvQWdXUWROSGtETWp1ZVFkemlXM1k5b1RFdFBHWjdvWTkrUmZqQVBrWDBpT0dRU3V4S1dJTm0yajJnUHlDOVdEbDNDUWo3VFlXZVpOVzNKdDdQWGtOeTlaNURlMzRuRGtySGxpRThTNVhmQXdMeFRSdjJQUXFTek5hTWU0VWhYc2xHVmNMNDR4akpHc1U0VUIwOXoza2wzMFl6ZFJhaGswT1FtdFdSdkpSK0RjNG5SMjlpVXU4ZzBMNll2Y1pkcm5aZldrQjViTUFuSlA0dEdGU28wanlZLzRnM2xxaDE0MExDMG1qSnM4OHl5MnBSalpOZFNHVVErMlFjZlZ1Zm1tR3M4Tisrd0JOdVF5ZHlROXRDVzk4QXJDejJLUXJ4S3U4Qm14UUQ3ZVhNZVFEN0lVbHhVT1pldXM2Wjc4QmtwZFc1azhpWE5QdWhKZmtqOWpTS3RsWUV0NjdBRmV0M29oa0JLdE05NzBGRzljMHFyVzhlMWlUOUlCSThCaTRyYXZRS2w5NllqeEJ1a0lIYytjM3dTQW5XQUdKOWRvMDlDeUo5bStwTUFmbk1ZWHBKc2RFNnFZMnU5aGVudFBWTVhFVk5wbWZPU25rMXg4QTNFMU56RXV3ZHhFL3NJeXQ1THIyV0x5bzJPcXJmamhrbEw3NHVYeE1nUElST2tLT0FySXZzVngxQlhPQTBCOUE1ZHVOZjdkTnZjZ20yMHpERjJUUDlvVlZLT2swbDQ2QXdnU2x4bkc3WFVxZEYvclZHb2RZNXQ4REpBbmlUcEVhL2VUT1BZTDlEdjc3TjNIWENpbDdJc3VGVVNYVlEzRnlUYTlBS0R0QkpweXAwcU9xK0NDM0dJR1FXZTJTOVJhUzEvKzlCajg2Y2Z4c09uczdCbzY1VWc2N1dINFFxaVdJL0c2eTN5bkZQUGRCTnRRd3FCVUNyQTlYK1ZDMmNuajVVa1JCdGRGbzJPTFJVOHhQR1czUnpxVzFJTWdQeUtta0w5Z283dExyU3FQc25NbGpyWUZVckhZM0dPeEdOczlyU05nS2wzL1ExK2M2RFNpWS9jTlhjdHNULzVDb1paZVJkZmZrVnpkMEtva1Q5QzZRWWVDYndNejNLUlphRXQrM0Y2RDB0c2FFRy9GcGNmcXNZeCtIamM1YUdWbjlTUm5aYWEyb1NXN0pCQ1I5YXhzUkl1V3Njb2RVOFZ6R2VvYWo3eWNNOW5aaXVpTFphNTJqa0Jzd3FuU1htUFIxeHFWYU4rdVl3UE1hZDlVSVc1am03T2lyV09WM2FZbjNTRFRyWHp3M2phR1ExbENjcitHUFNSeU5qNmg4M0tNWlNWM2FDKzVmQ1JyQ25XdDlzUXZtN0x5Tnl5TjM5bm1qSElNWkwrRC9aY2h1VnZIOGhwN29GREt2dmhWUWZ4YTF6OHVva2FHSUx2TmxSQmQ4NUE3bWJmMnIrejhudDR2czIxN3hKWGl5RXZFd29FWjhQRkpudGIxU0FHSkk3ZG9STzdKRHBNTFpJZUJmd2NRcjl6SlkyRE85c2tYYUl3M0pkQ1EvM1NNWVVocVF5RUcwOVVIclhsSUVmRXZ4T2E5SnRPdWVaeTlZUXg2dmV6eW0zenRhMCtLdGc5V1lMTnpsRHkxMGJxSm5WbmRoeHJYOUQvVlR3NHpQUHZNSUdqa0dkSVhJdm8zYzZHV2dzNDhGcUNIZzdvMkQyeUQxY1ZsNHJaZFVQUlYwNlRzb0ticGM3cFlpbU0zWGIzWkRIZTBvQjY1am10Y2NjMGt5Vkd2NVpPaXRkWTZqbnRhNjJqWVd1dlpaZnlqclExVGw3bUdNRU9MbmFWenhpODhTV25uOThvcVY2cG9Bd3JpcjQwZXV2UmtpeFlLc2tXeEx1UmJNU25aTjJUSUdYZnVidHlYYklNNEw5Z0NHc0ZvSTNPeUFwZXgycll1K0xXUXU4YjE4eUFINXdZZHVvbVkycVljK0ZNZGN1MldjV254eXFndlhya29Hc25wQ0dITnc2L3JBOUtiKzZvVEErZjdJSDUrdGh2c09yaTdGaThIQkJNdDlwS1dybC92ZTRwalRJWUxiUSt5V1paczJrMXczTkV5TG9ITDhwVk9RMmRZMk1hS3RscTlBYkxFSmZYNjBUb3hsaC9vWDhzWUJDdERQYmdVeWRIRExJcGxlLzFNWCtzSGZTeHhPNjg4ZkNCenV6R3RiaTNyb0wybWExOXJVc0FQeDdiSUNtckxoNlV2aVVlWHhOcWhWd0RaczFLTC90WkJYMmN5UUdmU2xXZDU2aVZpWWhuRFVKN3FKZTdycUNFOGM1Y1pacjdFdFdLT2swRlBjZTNyWXJ4QnN1TGlZWmhLYkw4YlE4b3JvRFkzeDdiaWhaeVJIdG9DMUE4VHV3SHFrdUhNTElZcnZJSytnWm11NWN4VkxYdVN1MnR2K0pHT2NOR2RKYUIzUStoRFNaV3psK29ucTJqVkx3bURzbFcvMUpLL2s3NzhnQ3YyQThROTZSSzdoZDVHL0FyNUg4UUhQcUlENlJwN1VUTmpXWlpxRE00Vy9Wazk1YlFuekUwTjY4SFdSbnNrMDB3bVJ2THZhQmxxRExQWmdSOVhzY2VvaFdOaWVkTTZMNmFudVBkVjNjbVpMTlk5UzhoZnFHbzFBOWNRVDQ1aHh4N2J6bDFQNko1eWNsZDF2Vy9mVmVreWRDeExmdXd5OGFWZFExckZZeHNNMGJydXZYVkhmY1VLSnhBcmxFdXZVTXRKWFg5Z21mYlpNWmE1SjYyaXVkSEUxZWVtZjdDTlFmNEkzM1J1ckRLUHdUTzU1b1o0c2dXNmFHWUswcWt2VU5mMnVTcTluZXNFblN2dFN4eVNJY2pIT2JyVGZXQXorZ25QNHQ0RURzNU43RjFHYmQ4dDFSc2Y0bGdYektMQ2RSbnEyVTNzekdiMXd0YVFmM2dOdHhvZjJZWU5IWjQzL0JodnBaaHF5N0RlL0xBMStHRlF3MWV2bjFLUEZ2VFNjUmRTVDRMa3hLSFQveVZRQVl5WUFCOE4vUGlNekgwYlZ2SDM1anlHbFQzL29VenVLNGFtckNHR0ptNGxNY2Y5S0pDcmV0WHBaU1RjeE1QVTVRSDM3WXduaFNKU1FSLzNyT3d3aEhRVFcvZlAySitjMFc0eVJIZUpjeWsxNWkzVUxWN251MG0xbHV0Qzcya3Q2MzEzTFVCMy9wbjBockR6bmRXOHM2Lzlyd040WjEzTGpHVDJkQlpEWE1GWWR2enN1Y0RUdGYvTnJnN0kzb2EvWDZDZmFhQ3NKNnlwOFgzSXNLdGFBT1l4K0FUUW1XdEFmeEh1WTBxVitoelUzczUrZ3lHN2NiNzJiRE1ocVdrWVBKT2FzVXJ2Rmw2aUk1L29ZcHV6T2xhRzd5b01mU1FMREhVSHZhM1FjOG5USGhNRVZxczJuZlRnWFJicjBKZjc0S0h4Zm9DeHJQM1lUZlNpc3RVM1ZNZ1RmaG92TmY2TXU3eWhSdzdIVEtRS0MzcjE1ckhxY1o3NFoxazRCaGllWEN3Y1UwV3lCTmxzeThGQlNPcDFqL3RhZDREWGpldG9SRnVDV0RUMFVudVNtTm9hZEorL3QzcFhjOHVBZFJlV01kdzVJMEozWTYvb2grNUdySUt4dHNYdGxEOTd6Q1pZTWZwWjAwZUZQQUhiTUFNOGNBSEh1V1JKTE50NnZqb2ZkU2YyZEQ3V0ZkOHIxSEllTUcydXdOK3M0cUZZRDlKWUQ1SThQOFJtNjdQWkRIbzZHM3FCUjQxOXNTNVpybnFyY0c5UnN5NnFyM1dwM1hWOU5wNXliY2RUbEdKd3FlOXYzZGY5YmNqOWlVZkg4QkhkMGpieXQwM2NDMHI2dlJKa2kvbm1EUHIwUFZQSGVZZEVUMGtjTVpVbG1JY012ckJQWmorUytkbmtMSmRNVDJkSnFaait0V3FOdGhsZUhITUdjZmhPek5sVWdsZEJRZSttWDVmMU9xamUxaUdRVVhBa3hyd3FKNWNGMUtMb3lJYWhISXlNY2ZZWWZVZkd6UjM5QkdMQmtFT3BkZEo0Mlpkc29JaHNBRjR6bWFhSDFtVGlrOGV1OEVnUG1qdTdpZjVtTVZmYVkxZXhGM09VZyt4cGMvV21saHRLYWRaMTdXMWRXck91UmNRblNHZmlYTHEvbHlWOVlCc3FYZUZQdFBxUEI4cFlvWHRhUTZuaU5RQXFDTXhZa0dhMHgrNERsL1dSelY1V3ZLWHM0cDU0U3g1aTNRR3hTbEszVE9VZU04eThLWS8wTmZUYWc5eEdkanRGaHg2cGsxeDJjalg4R2M4V0h4Q2JZbFFvZEM4MnhVWFpLV0JUNE5oVlZVc01jeVV5dDZuTk9scUczenFmdm1TUGpHWFBwUExoTm0zL00zZVpWZG1NbmVSZzNxeEhjNEN3Z25FZjZNNDR5Ym1wbmh3VDJUekxBUFF6eThjV0V5ZU9VV01LWEpSMVgzYzd3WGNyUWwxQlMrOGpQWWhqVEZWOEdPeUVtcDRuZmVtNks5RjFTM1MzMExPaDhXY3ZBUXdCWkE5ZDNLbWVBcTZFTVdSY1JyMlJ4NU8rK09wSytBcnlmbTZpczY0VW4zQytieFZqZThTN3k5dTJjMkdkdkdSdE40K3VxdGdUamErWFFPTTRwM3pOM0FUWGY3Vmk5aFgyd0FYbjhlblFUZUxFTmxXQ0dRSzJUYld1UzArKzFFVVpZMStLMVBwY2JPTktzR2NlMHhIRTdLZXJzeWZRUjl1MFk3ZEJHeUozT3VxTHRpNkV0bkR0YUtMai9BRGsyakNHVFRlV1FOZXhQZGZnVG82NU9uc1J4am1wK1c2czlzUjNveExMRERwem9UOG96cUdHTUtuaXVxTkRGMWZpRXJUajhSYTd6L0Q1RW4wb1hRS2IxVE5iMnRUM3EvUjJ2NU5hdGk0aVBuVUxPdlZTZmlkUFZtZmswM2lKbmJua3ZXcTVIL1pEVjk1d1FYeDBuR09HVVdBMDhoT2NNaXpucGtwWmhvOTRNc2QxK2VnYzdjTFN1TlJpNUJ6WmJ3NmpGM1BEeC9VMTJCWm1GNUF6K1gzYVF2dFVheHRGZWI2OVAwd3YzbkRSRDcyd2kzVlF0dnkzRU9rMkgvTThrcEVnanp6a243Um8yNWZDTzh5UkIveDRxdGFxbG5GUGEvV0dsUzJPWTNyZzA5L0cxM0Urb2kxTEo5blpJbkpUTGZlc1N2ZERSMnJwTlhKenFwYXV5QlcyQVdOUzM2Q2ZjS29lU0MvSHVUWHVOc0F6bS9TaU9SKzlyL09oeWZrZ2UrcG9HMzVvc1hzWUdZMnhyNXJZajc4Ym5kVDFpUFNiVnJxNXdteTVudTFMUmRmOStPWG8zSW50VGRhZzc1c2MxNmJWdDBhQmplTVl3NHpvNDI3OGNGVEZEMGRNWDNKSTNVM3FmR0RIRjhleEh6aGZITXVyWmwzeEJDc0FhaVcwMVVhY3JEZWJrMnNzVy9YMW81T3lWbDRiK2Q1WHZHVTBJUFp5WVJ0NEZobnNEZGR0ZFBzRHpQc2M0andGYktHYmRjcXZEUzJHL2ZHcVdDRWhMZ09MMVV0ZjR2Sjd1WUhvcm9YUGxpcUJsbkNSZCtuZXUwTGl4bW9ac1AzWTl0NUFMWlZnYllqdnlBOEdtU2Jtb1RkRjlpSkh1WXg2ZHJ2MUdBL215NEhkYzBiNjAyTDBpejlWenZVOE5yT0ZiWWJPcWVEZXZPa3NjOVBsV1diRWl5ZGRzNm91Ylc0Mll3OWZOV1N6NkVkYnFIeWFZZWdLZzV2N0dqWDN0VnYxZEY4V0pZdDFMMEkzSjEvakNRNmFQbjl0Y0duMUMxM211ejFaa3pWY3JHZDlySWxaclBjRm9mV3d5WE1nbm9RNmZjQXhxVWVTNDdnWjJDdm92bDFXTHdDenJMTkdyejQzWmRlWC9wUkw1T05VMkl4d05zS0F4dlVYZDkrcmFQaWl4djNRc0RLMmdpVVRubkhldU00ZDRaNUJZMGpHeUY3T3pValpDeDZOS2pXOVFyam5jUlBVdEx2czhCNGpCRVFYakVkVVA3b2d1S2dDcnpVNEw5WVYwYldLYXd2dXZrZnVqT2twcHNlcXU4MjFMWnNjazVjc2c4N2NabXcvcWYrSkw2dEV6QjNqbWhGOHM5aVZTTnlkOUlZdGNhNkIzS3MzN0NlbjR5RzdMRmlaNGRsajFOQ1ZOczhrZGk3cjRtcUozbTBaVjhxUjFJTnRxTy9nNTlkMnNqZnNTVDZ5aTdYU3lxbWg3MjN5cGhhUWhsaWlEYk1hVjFWKzY2UjBhWWV1YUVjdGw1ZCthTWVqbEFlMG94UWYwRTZIL3l0OTdMSEsyTytIbHNvUis0RC9pNC80dnlQSGcwcW5XWU4rYkJtUFdZd253YWFiNTd6TWR4T293YnY3M3FpclkrdTdXdmNUVTFUTFRhbHFEKzVLK1BpZWxBTDNwVmRyd2JYaGZheEZwdFdvaXNHMHhwMUxkbVliMXozT0Z3UGU0YWs5RHhYd2tNQldoZmcwakpDV3A2dllOWG13Q1JzN1JUa3BwVkxoQkxwcU9XSDZpYzk0VjNXM2JQRWhpVUhXUENkZk1NWWowRldKZTFKcSsrQ3FyUHVoYzJVOVlTdGQvTWpmMGtTZWI5OGhzUS93SGE0VnRwODduSlJxUVdJdU4xaXF0WDBKbUdHem0zc1oxZmNpbDk1bDBRL0dENnVNOThVcjBEZmdzcGFFZmk0dWkvek9HbGNZeVNYYUF4c1FNRUpDVndyUEhyc0VYM3JWakhySGMzZ0xpSGszZGRaVHBYVzM4ckMrV3pyMFpmRzRVM2Q3cXA5YVFPK0NjVHpnanF0NE9xNTNKWEhpcmNiL0MxRE13ZWJDK0tTeVdQc1lhdVZqdE9pZ1dEUzhISmh3L3RaUTZRZTdoMW1zUjVmWERpYW5QbkJNbFlJWW9jaXZOOTJ6WTZ1emEzanA3dG5ZTHg1dmdGNXErdGxaTmYwWUloVVloY0lnLzZhUFdpOTF0NGRlNVdYVHExekhDamVZdm5HZG1WYlZwdXFVbDhTN0RuM3ZOZy9XdDJGN1doL2Q5QnVSc2U3VC9TMWRmR3FtYzVzdUdobWZXdzFkaEgzUlJkM1g3eWZjMGNkOFJibkZ3ekh0MEt2cFN0d1EraDA3OTE3TDgzWVA3UTMvOEl3aTRGcis5djZVNkc1L0EyVTg2MmQvNDFIUjdBLzNmV0VzcUthK0RjZkpKNDFjbkt3eUcvMU5vMlhidUI1ZFF6ekoweGJXY1Vyd2U1YzNhMTdyUGExNVFxTTFFM3dxaUxjaW04Uk45ZHcyWjVsVnRQVXU2UWVTT3ZnTGJWNiszc3RCYjlCUDNhREZMcG9lMloxdnFwVExVTGM1R0tEL0RjaHlmYjltWnYreURaVzZXUS9UVHkybHhhcTdTYnRHOWVvYkhPVHU2MWhzVXl2T1c0d0tjOXNKSm04YkE2S3FWKzNJQ2JXMGVwSVRIdlFsMWpWb0UvV0l6czQyWjVyTFhHTjVDaldxeEo3YTFQMExwTy8vQlBFMFkzbXp0b0R1YVcyRGJ1LzlEM3lacWxlMXRxODJMWjhHeVlUUmljU2lKbTdCbjF4MldmVld4UElrRjFlVENjbi9nUDJOZFAvRU1pRCt0cmJOVlRsSE1nSEgydWVyellxWHAxYUJZOFB4aVdCT3R1bjg4b0RPeTM1d3V5eFdBY3hMd0RBKyt3Sy9xL0Nya0MxSDRpa1BadnJ6bVIzaGZkdkdFR3FtYktHOTVzbnc4M3BXNmVyWmRYQ254OVJkTU9pSEJxd0J4aW0rSGwzV3EvWEMzTVN4RDl1Z0wvNDBuamltL0NCL3gxODZ1WGFUekNyb3lrcW1wLzV1UnNYOTNUT1liTUxpNlRBUWYwczg3TWRoZnI1WTVpeEU5Z0RVWmpTNjU2b1dsZTZwNDNsMzV5SlByY3Q4dHlTK1FuMTNUSVVYRHpsWFVuYzhOeXYvRnZwemR0MjRQTUZzdjd1M2Z2QWUxSjBGZUEvSS9yQ05aYkIrZ0hQVDFZSHh5WmNRL1l2SFZuNmh2VWY2MS9aNGIyT3BQZlVFcWJ2Tm9NYTBFUHpjTXNQY01ZYjd0UlR2YkdOWTJwczgzbXBlNEVyY3JzcDFnK3lIZmV2bFRVd2Y3Wkc2bHh0THBwK2VDWXRTZC91bXJsNVNhWTlkblYydDNiOENPRXJsSTh3aWdsOWI5eWUwNlZZcDdtd21XaDJ2K3VHcDlaS3EraE5iTlRUMU91Ukp1RndTMzc5VEQ5cGUzNzFOUi9lRUljaW9hOEFRMUtwYU9lRHh0ZHoyYzZIdXllOWlnN2J2L0ZyUmRYUG5tMHMvdnFGRksrTk5CbkV1ZHJhM1RlenZkMklpMGpWRFBpM2tCeGl1Y0twZTQ0bWYrUlB1QXZZM3cwR3Vxbk9tZFp5Z2ljZHFqTDYzTko1SFBnV09mOFludSszdnJHc2REUGZwSlRwZU44NXhacmp2ZWtWYmpJN2pPbU9rYXlZbnBacVlKZW1EV2taSUlvMXNLRGRkMWZtWXp2b3FQd1hyN01KbGRleGZUbWN4NmFzbS9BZzB2dmNORmZsd21SdU5MblY5S3E0UlhWcm02cUJQNDR1TmV5VjJiVjlqb2QzUkZxWHMxSDVvYXl6WHVBT3JqMmsvL09pOEYvZStXcm5veVM5UXlqM2R3U2hLZE1xWDlKMGpjRCtmVWRMVnY2VmErajJ0eVdQeGVRRjJ4ZEZseFAweUVZK1dNVVIyNHBya2xqVElsVU5lNEVidlNGZlNUOUZhMjlydWFXMGJwc2FzYStaVTdlbzVWVk0xOXFjcnBHdEtXZUpPVGQzQnFwRzVYYjNRRTU2bVJiWHdORy95aDAyZS8xRXRXNjFQZTVyVEFYc3E5b0dHYXdoQ1Y3anBvK3JXT2RSMHJoWlZETHk1dDU1NnBCZ0Y0L1lTWEx5WXNjbWNORnl6Tm9zdEEvb1NTcThBYk4rSVRQRTdrRnEzRU9rRk40VjZsNm8zb0wzdU8vNVVlcU8zQ1ZyM0FtSW9pWGdrZFFiSUh1WnY0c0RvOTdWdml1NVRLU2UvNTc4eHBBNjhnSFhRcnkwL1RJMGU3SG5jbDB3YTBSV1B0V3dGcEx2b3JjQ2ZYR1lWYnhqOVNMRGlXanA0VSttbG1xYVYzYjZuT0tFOHJHY0JTRGU0bEZXK3AzMCs5L3FrVUhmOXhGMlZuWFZweFhMd2pMcEphMFpkWlJNYU1EL3JBeXdSdjd5dEJaa0xQT1VZZEl4MDdJYlJZUTZEVjF3Nitacld1UjlsaVl0Z0lxU29FaHh1cnJJdmQzaEdrWjI1RXJKRFd4aEFiWDRYSHAxUjJOY1pEZHA2aldDRVVUZzNlQmZiQ3RDN0YrT2duY2Q1UUV1YnZtaUpYdURaSjFXZXNDTWZ1L3BCcHZ2QnU3UUtkUjNVK2dIamtmSzVaYzdlYllsalhUeWw5UDMyM1QzRjlBcDFyV1RkUEMyeUNVZmQrTU85L0MrVWZtYkFNTXBPYWJDZjJyV0ozZG1JZ2IyZVFYN1JZNWRkV2hqZDBrSmZ1bElHWGJsSjlNVENmQVU0dHlSZkJiUGliSE5mKzVyZCsra0xBOERDR0FBNDVucWpxMGxOQzRtNTJtWjRjVm5rYnhDY0xGWnA2bFkweUowdFFENGpuMm5VdWN2cm9xZThrN0lPTHBVdWR6cjR1bTFaTjlRd3BybHYyT2FzSkRxeXNBMThEK0JuM0p4bFQvNzVGZnZud0dlYnJjbmpYbWhKSDFnR2ZYR2x6UzJPRmU0YmFmdFg5M0x4cXU1NnNxM1hWZ2NEcktYRHJyNFJGemJ1ald2aVdkSGcra0RYWDN2Q1NHV1U5WWFxZXZHdDZlcnNTZHpSWmZ6aGhzWHpiSmNNZC9MWVZXRVp5TDdIdllhZDJHQWRJNUlmeG9pVWNkQlRmSDFVWTJkai83T1Z1eUgxWGsyTjEzWGpKV0ppSi9GdUl5R2ZXeDFXTmYyTmo5S1ZPeTBlZ2pteG5mTi9RQS9LdUsvekg2SHpWeDFUM1FFMnZsVEhqUWhkMC9XWk5ESUIvaDdaTU9WYURoeEdqMTJod1V0dWFKdUdlVWdXOUZ0QVhBRDU3R0UzdG9mdTdZRjhIZTk3a3EraklaR3ZUVTJPTUNqVlZ2MGtPdU1Ic2EvTFl0MlQ3aG52eTlkdUhjNWx2bFBvK1c1MFM2dVh2bWhWRWZiQmhrWGZWdzh0VEd2S0xmQWNSNXRSaTNrU24yVkpUQUJQWGJSRE40RjZpWW5MMENIVVJpVFh6QnUxNzBtK3Q0bkdYazg1b2hHZUI4ZkdKK3NXZDBNQ1hqcEIvV2t0Ui9XT2pIb1FHN3dvL1dBZU1jcFlHZGEyQThPZDdDUk9mWE9HWnh0Tzcrc3ZhdDFJdzRUNXFPbWJBdHVZc3N4WmFwc3JoV0NhM1p6bmt1cnBQS2w2bnEwWTgrdk5CV1BQZFdKTDZFNG5KK1Z5ZTZkS1R6bWZVZG1hYjFIcGFLYlN4N0xJOC9wRWxUdjNxQTJLN2oxdWhqM04zcUlYNi9ic3JjcGY0a1Bna2FiR3VyTDdpb2N4M2ZYKzBrLytiek5VeHFPT1RYeGp5NEJPUVhheVVpNWJPVkJ5WjExNVNTOTZ3dTVYMXdIVXd6UzV3NjZmaFBIblFYNVJOL0tMVm5mZXRaODFXS3lpN1hGdmdNWWZIZE9PYjJJenVjdkN6RjNJalNLZjEwVjZ4aGdDOW9WbERKQTlFMEsrSGpCRWNFMWFoODd1ZE9wbW9QYUR4VWd2eHN2eU4yS3E5VDB2dEZ0L2FEUG9LU1pOTDFveGFjL1V6MlRHTmN6ZzM1cnF6cGV1cFN3QmhnMnVGV25xUk9wNTAyNmlWek5XSVY0R2ZiN0dFREJ2TE9odlhoVzROMlowd0d0WHN0WWQzTmZTcmIyZTVzVnNXSmdYSTBMTmRvSit0OVg0cTIrSVJ6Si92KzQ5eFBFU2tYR1plQzlMYXVGbzlMbUZmMEJrQWI5WlU2dnZRcEROYlFQbXVnR09OcllEb2VhUXpLL1RqeTdqMWJnaXI0bWYrUkMvOW9JYWR5UWkrQXZZdndNOEhGOFNVeUg0My8vNzZlOC8vdk1wZFpMdDA3ZW5oYUZPVnRyVEgwKytrenRQMzU3a2dsL2JnQzhkeHZLRU05ZDdYZHNVTlY3Qloza09NTlI5WTVqNTAvMFpNUGtqTHJlZ1RrUStFN3M2czFMQS95em5ESjVqT1djNDFrMzB3aXVHdVQwNnZGb204Q0hJOFFXaXovdjZncHowY2VYWWJoY3orUDdsOE9vbE91TVlPdnVKNzVLWlZIN3NwY3Fya09CZUs2OEV1UmNpL3A0eklKdGUyK2UybW96R3l1UWZpZDg1dWdmbHpwbDdSejYvSmRZaDNOMUErWFpTcm85R2xST1l5Y2x3cW0yR0ZzRGdTSk5xdkhlSjJZa2JiR3U0Vmk3RWFkc3Joc2hBNXJPZTE2N3RJaHBSODUxM3Vra2xaSzdoblR3bWhCSnJyeGhtYnNGRmxyRktiWTJydnp0Zkx5SDBQamZpVTlXYVRHQk8vL1RZMWRDVk5weWRYRU5mb0V2UDFFTXYyV1N5SUxwTGs3L29WV3ZqN2hBbzJtQXczM1ZWdFdQUTZUeFZEOUJTUmNhSFc0bTR0NW5OdWZQOWlNTGpqelZvOXoxN0NZM2RoRVE4Zm1kVmFtdGM0KytHZmJUTVplNnhJbTJacy9oMWVYalZwUmM4OG9TTVpMVWF1T1V4d0s5UlVJYjFYSlZ0V3dKMnI1cXljNlRPZ0lXRExxdkFXVFYwazJCNHVCcHFXaHJkd0pXREdCeTZyRjdJazVxa082MVE4d0N0Tjh3UWZSQVZIN2tNUjRGN2EvSVFqbjFVcXRNcGp5UWorMlV4NzlCVHBYYmh6Ty8yc1E5cUtKV21GQnBFajBFaEZxSzdkd2JzTnl3ZFlSOTRrcmh6R0lDUnlpMWppRVJtTWNldUczS3Bia0lHV1dkTmk0Z1B2dThvVWlJL3loV0psTHBNWUt3YXdPUEFXU1V2cjBMQ0J4YTR4T3JabFRhdnhCUUNtQi9TVG50ZlF0TmVjM2ZQTmUvQ3VQcTd0b3NNdXhjd0x1U2xUdW5ER3JDN2czaTVncVFkVittZTF5aWJ1UURwc3dyZGRQbjhHaDBDbHhraTFRTFBVd29lM1cxWmxVUGJ4dktqZldWdXFsS1djVDNLWXE2dE5sZHhxYXVpU1EzNTlVYjNIOURBb3owRUZqclBHS3NmSk5aeHl4U0JGSWJ5eEx0U1dhQlRkTzlhNTd6NG5UdlZTM0FEbXphTXV2U3NYZFphdDVZSDJkdUcwV05aekdHMGdHUDR0SmRndVdGcXdhN3RKbUgrMkFkSWZMdXNkekl2aDFlVFZtTmI0OTNiOCtpYWp5RGVUeDRUbkFIQ3VPRGduUEh2NmJjR052Z2xhMHBkNm5PNGE0YzNzZHNUNk1hd09YK1NOaEVDZEo0Z3QwdVh1Y1pDZ3MxZXYvM1pCM2RWMFF6aDY2SnVSY0MwOC9pc0dmcmlNa1BnR1NUM1BZYmJPUWFHQ2lTbENnUW1ENXZjMWIyNkV1Z2VVbkphdXczdHV5QjByWi9xcytucU5IeCtxWHFvV21meCtlUGZtMnpyZTE4OVU1TlB2VVRFSnRIUHpwUjhGdDMvWnE4cnE0MjRYdW5jWXJtaFJXVG1McW1RMzhRclh4YW92RjVQVGU4Y21FRUdjL01zL1V2N3ZOanNMTFNsemZsVnErR1RjeGZnV2U5SHY4M2psOG9NVkIzRHI2RUJ5WmlYa3NCQ25XdnpwZUs3QzlCRkROQ21BRTIyWXV0Vy82a2ZiczFxdEhBOTFqWnMzV3YxZkdSR1E2aGh6aEEzeWFoMVhJRE5WLzVSNnZaR2hvUkI1Zkl1Z3NPcm9nMkNGWExsSmtTV3RuUldKN3lhS3FCZjdRcWFPK0ZPYzBNdEhBSXAyd3AvNFBRaGxIS0twV1BBU0UwWWtlc3lHTzRJN2RWZ3U3UXBkMmlPSm5weFR5QXV1Q05wczhkaE14dytjVHZmWjJxWWxKendTMWExa2RtbUIyT2NoTjNrSkU4d0xYdEpURG1HR3JxdE5vOHFwVTdLaHlnQ1JYbXd6RlpZWE9PZmJYTjJuaHVyczg4TUlVMDZGNUMrM3lDZVJiek9FdmZ6dkFnT0FFdUJ6dGlncXZWZC9WZEJyV1hKM01CMzhRcDNyc1lnTHdWKzFncTF0c1BEcndBck1aNmNaTEVaL1NaUDQ3TnZ5c0ZxTWx6TDAxVmhHWGJpR0JVOEg3NExsMEUyVGpmVURDVmljTDdEMkwreFZRV0FpQmhkNXhHdmdDc3puWVYyWW1jMWhMYzBPd004L3cyTjJGUFM4a0NnSjZ2UmZ5NXJJMXUxT1EvNnkvZC9ZMHR6SjRDcmFOWjFRSzZtbmVvWTNuZzZBK2h4dXhvQktzVklEaTFjRmtOdG96djFPenlwbm1Hc25oUW5kcUlYR0hZTjZJejJKTCt3akdaOFRsdkhlUVdFdjFuYjBDdDlTZm5NUyszbXpXRzhsNHJvTFFKM09OMEhteVRPMFZyWEJyZERybzNGeExSWG5lc2trN3lFU3h2OU80bzZNaFg0L040MnZCa3ZpVXVTQ0NTYkhmSHVtc2dXcHpXaW8vdWRCMkgraCsvcXB1VzlKTTU5VTMyZUkxdFA0UEtXWE14OTZTVi80QitkNUlsWTFyYjJ2ZXQrSjhPc0ptUUlOT0FZUTlvbWNxU3kyVDdpUWJsdXpXNUd1clh1ZUllZWcrN0VTL1dUaTJIMEsxdms4L1pNcFRPbVNnRHdWd2xIdGNZNmtUSkdmbno3UENISXNBNmptaktOVmloaFRQWXNWTERZdFMySzdvVCtpWjZETXNpWE13NUIrRzk0VHkrN3FnM0pNVE55UjJGY3lhQzVNWXVSMzJjajM0dklKN1NlVjIwUUlQL0tRN1lGdG1mYVo0T2hFSnN4R0tTMGN4V0R1eS9wV080UTMyQXU4SXhqcXBuZnRXMVNyK0RkYmhrMWtwT0Q4MDFwZFRZWGVDUy9DNSswM0NEOWVIOG5qYTNpbFllUGJPL1NBZWlpR2tybUU3b3plTFVrUHFoQ1Z4dUoyNitrdVBSU0hhZkc5elBhbHZ3WStRanJoRU42bkhJa2tTTDN1WFNaMWNReDFjSW5FUDdMVk4vYmpFNTFXNXI5ekpVdWxUOFJFZnM3Y3hNb29VM0lzMnJvK0NVZVR3QjYxU2J0THg3WTlzaUg1RTYyZG5tMWpXdHBhenc2YzlabEFkSUVqN2FXWWdwZ3JTU3U5SmdZN2hHbjl1M1FZbkVMaXFYaE1xdDV4Qk43eXo5VVlURlpVRmhsTGY4NHJZcnRyWW9Yem82cGxuQ2ZwWGRWZGw1bFc1SXdMdmlBZGRudnBwc2VWNnNSTVVLUWJjQ2VibVRIZ3ZnMTQ2Nk9VRU0zNHVNdEtXZmVmREEyYWk3dzBSYks1bGRFUHQ3QTl5UjFpY09wYnJXcFV0RFRWZUViZW9COFljUGdhUEpPaUVIY3ZPL0Q4Uk4xSzJuUkt0MnY0a0kvV0V1VEtoNTJuODJNVHNKZVBKSVVNd1ZoOCtuK2lPa25QdnNhYnZ2RFVEdWQ4ZlF3UGhESkp5anJ3cC9kV2NhZ2JqRjYxR2JjR1MzOGxYVnY2TE9ieE9oZDdYTkYrdUdFMjIrWGhHOXJtK1hVbk5Xd1BxdDFBK1VYMnRJcXErSkZhd0pKTTA5clc1cVQwODUrSTBzWUJITHI3OTIwTmRLajRkbUgrQkJOMGtQQWYyUThXVnNPNm0zb0FtUkRnczFybTNyNWNJU01FQkI1eWtPbzNtSlhSMW1DZU1nRGlNTHU4K1lHYnB1RHRXcDA5MTBDZmQ0YVl1NEtvOXk5K1o0bDdDdi81VUVNQmY5cmloeU0vUEJyMkhEOGMwV2J5QVlWWWg1Q3NpNkw5bGFQQ3lrQmFxTmw5d0draXlUdW9mMzE1aDZSTFl4MDQyc3llaVMvSTFmaWRrNXhDWHdtekN3bUFQbm1KaHdyUzF6a01kelJ4cTBYdEswMWZHUURyWEVzcGo5U1dremFNMzhtS3hZWUFtVG1ScndMOEdiUjRQZFNXTXpzNkRMeTJUWEV6STI0Y1NzdGNIS041VTRaVHhoRjJ4OEp2VEQrVkFsZXAzYm1wU3ZhTWk2QkkzSEliNktxOGhGNXFpSmZtL2FLZldCTFl1bElzN05senZiSWYyekZHNkNrWERNR2dWR09jTnYwNzZVbzBUMUVjMXdHY0s1YTQxMkpTK2NKdlpmTFVhR1VvNnp5OS9DZElwcmdReHZwWlpPTWN4ZEcxOFY0TkZBRWlJdWRYTlpEZW9WMk1ad29RRXdpM1dRYnM0ckdLdjBYK2dteUliQ05nWjRIclZmRzllQ3lLalZIL29UWXlDZzhub3ZmK2Vic0tBc1VwRGUyQWwzaTBmdkxZTTZ1Y2svZ0tqdTNvdk84Z2dHY3AyZ3RSd3dWTWtaM0R1V3FSM3dYWERWYWtIeFBEUUNhazRuM3R2WndqQkRJUCtUalY3NVdQY29BOUM1K05wYkxYRUZnaGZBNU5yREwyQ2NRODhjbE9GWHBQUDN2djJQY2hqdUw1d1pwRVNacmhmY0tMZG1BNVl1NG5hNWlMeG1HN21TMTJCUjhEVVZRUTBnM01jUlhZVS9nVENMZWJjRndUTmJ4RjFLY3BwclpyTktHMThwdGFWaSthbDI5aS9jQlBLZDAyMGxhcFZkcllqTk9jVHRmNTE1M2gxZTVKYU1ySC8rbW5lS1orTTlCdThWcGJxeE9YakVNM1NsL3NMVGhBeGk3OE95eEsyaDlXMFI4OSs5R1hUYUk3elVnY1RCODNyeE9LOEY2N0FXcnpWV29SdEJzYUZXUlJYUVBpRzVxbjZOdUYvaUFicEU4QWRzWVV0RWtUbXpjeFp5VXdCMTdTRWRRRnZON3Bkb2svUmhhT3pWVXkyQm9NV0pvcnkzYU52U2RLb2w3TmRtVTFtN0pXTHZKVUMwM0YydTNIQ2lHekZpSkdzOFpFdWZXdU5CbmxiTTc5aHJvUDQwK3FnV0c5MzM5aFR2MUpiRkE5am1Vc0U3YmQ0cjJPbm9tLytLWWpEQ3FJWVk2djc4cHJhK2UzWDdmUEpuRnZqUTVQY2c3b1QzbE9PZEhOem0vaUM0OTVvSkxCbUFjMWV5MFNFVFdLN1BRWXFoblF3eHlRd3d0UTZDdFJSeGE4UC9vdjNGMk0rcVdhLzRtMFBEdlhFYy9OOSt2L3k2R1ZyMy9wbzNvWkNVNjlaaVdSZFlyYUdqWm1odE5tM0FMN2dQRDZVcmN6bVV1ejdJd0ExMHI5M2crSHJtMzZ0bGVJZGQzMWJLZEk5dGNoZk9rSXlkeGZ0TDB5N2x4UFZ2R01yY2FPWkVqMm5HVEtyNUNaN1owamVmb2ZnMzk3SnZMWjFud1NuVTN1c3d1WFI1dDI2YnlwRlVDT29GM0JDMVpCUGtjZ0labmRNbzNSemh1YXFxeG5lckhDc0poQy83R01JYTRFbzQ1eExYY0pXV1lMZWpCKzl4eHFnUldxbE95dERxN2tVOGhXd0w1a2toWE9aTEkyQnFmKzhhVmNqQU1jZlk0SmprclNaenNnOCtTMXBBcHNpZWg3YmdMdVJrY1hwZnB2dFhlY3lFeHY1YWNJYkFlbFcvc1NWeFdyUk4vdHQxR2lzK3lkVjh3VGhUcnZBdlpiNXlnUFhncHRydTNXdGVPcjJKSkZvTjhhRHAwbUEyeExiaksvODd3cUZFNDU3T2JiQUxIc0lnL3BXdnI2dnNtOG1tdlo1ZkpNYlM4T2NKNVlPYksxUEVyc3RjZnJELzFDbDdmN0M5SWR0c3V1MGtoUHRDVTNHQS9DZC8vdlIxY3hUZHdIS1RyazZVTkg3Zm9wTzJMdmQ3WjdRM2Z0TTdnenY5OEZmYm9qTGtUZ2Q1QS9sU09JVVpJV1Q1QTdmOTA3MVU4RDhON0pKczZCMjRieTVNOGFVcnBNUy9RNFZiakQ1WnB4M2YrNTgvMk9xWXBMOVZqUytBakg5bVp5Y3NkMUF6aXhibFE2VVMwRnhYeU0vaXpWYjRBMHloYXF5K0o3N1lCT2RJYkhUdHN5YlptLy9Pa3F5c3NnV2NzY3dhUWw5MTg0UFhzRzh0MnFUaWl0OVRENDhQUjJhSjMzbzZCUXpiQ004bkZZY2o3cEhPM29OL2FOaERXWDgzNldyb3JkaE04eW5BUjhYQnVqVzc4U04raC81UmdXVUcwdE85OU1sU1c3Yy85am40eDFSMmlOWHQ5Q09UVzJjcWZXb2V1TEtOd1lwdkluMUlCR3Z0MTJmM2U3K2lORnQwaG5RVG5kcmN1R0pYUElYNjVIY0ZMNU5FTXhzcFp6RFhFTVFmSVlaeXEvUE9xR1JVQmVib1ZwWXJJdDdVa1BvQzR3Q2piM2ZpOTdmTW1OazVMdm8wUHRjNXNlT1VRK05NWmJkZG5jeFBiS3B2dnlNSm9KMDl3Zk9oR2JpckxhQkNzRGE2b1J1N1h0VDY3UXh1dUVjUDdDOFBVWmJpMHRuKzdmazF1WTc4N2J2SzhIRHMzVjJka2J6YjJkL2RPQUFJaEdqWG5YL0FTUHJOYzdNUTFZSHk1Ui9MdlYwUVhSZnQ3WFhqcFllcUFqSGs1UDdCTHFLM0p4NHRvRkdrTkxVU1AxbUFiWXVGS01iTEg2ekpwNzlLbEZTSUhUamJEblczbUdoTjcrd0ZQQUxRT29ybFpjLzdJVit1OGwzZlRmVDJLOEthbUNmeHJJbjkzTHJLTGpXV0FhTlRXQmlRbWZpOXZ0cWxlL0lvdjljdjA5SFVaOHV5YnlLZjlyOEdyYXhiWnhsZUE3SEpaZlErNStIUVdldXlxOEEwVnhwcDluWmQvVlNaZmhUWjlmRWJ1dVl5YS9kODZTeDFzaVVlMlgxZUhBOVFkbGpsRXJyUmo3Z0R6bE5tU1huaEZpK1lUam5hVDViTXM1aTMrd1hBVWNndSt1eHN2dkQ4ZlVydUU3bXhubXp6bEZWeXI5b0JHZmczcnNyTjNKSmZtYkgyUFova0hNc3cyNVF4czZEcitoVzBTWEo1ZitSQXEwdGVGWTd5QUg0RnMrd3FXMEdQNW8yTXVjeitKWTcvZ0ordTQ4VGw4QnVmSGNaMFJUMXZKTmJNSy90bGxob2hHb1U0SElCTVlyckRCdnYrUlhkNkNPY2MyTXV0SWNSMUg4cWF6ek1lMUwxOTRmdHQydkgzK0lDQzFXS3hsN3F0Y0JobmJpWDBtZUUvTHorajZsL3paU3JMWVlwZklsdnBlandDUXJzTjJYZ1NkMVk5c1RmY09Kb3NQV25tWWsyM29lM3dQUUtNN2VSSXZpZnpFNTVMb0pmaFZPS2R5RTdPYUJmT3FmYTVWdDdOc3R6V0xWWXRCWGdwQlp1TGM3RjBzSjcrSkFUV3RPZVBSU2RsdDNxc1k3MDl6YmxQK2JBc2s1d2J3a1loMzlaTTk1U0VuWGRkZVlMdSsxUXE0NmRxNHlHK1I0ajJ1SmZCWjI1Z2RYSVo3djhzVkpLUGJ1cnJXQ0VnWUcxTEFDS29VNU1LK2ZkK2tQaWF5RFR3ZW5zRE10TWJDVjdXeWc5ZlhLTnRnbTkrT0lRNlBmRDVUYVVIdlFRNnhxWldjSWp0Y2plSDhTb0FpLzlkcmNIalY4Ujd2NHJsem8xdWI0eGlEUUJFR2hhb04vaVZQL2JPWEhLdVlPTW12ZCtSTG9HaURxeW9jai9pK0xEd21UOHlKbjRMenRiMjA1SXczaGFKVmVTUWwwUEJJNzNhOVFxdk9vWVppbHRIZGVaZU1senYzV3RsVWR6SGhwdDZxcW5QczB0Qlpudm9IeDZqemNZVnRpalFaZ3diNXRscE9JSmtvcnBSTk1RaTBhdHplVGI0YmVIaXFYMW9RYW5mak9TRXZqdVZPMW9vam5HU0pCZ2hwZ0prMGxTUHdNcU1mN1lndUhjTS9RV3dHV252aXhBR2ZvcWFiczIvNGgzbkViM0RNSDh0Y3BKOThVaHZlMUljdU8rZmhNVnpldEQ3QkNNU2piUWFCeTg2UTcxUDYwenFQeGpxUzNzcko0anBhV1lRekszMUp2d0RNZGJLcG9UTmJiVHhJRCthZXhGR3RXaWowdDVEQWpTQWVPN1hxVlJxK0E3Z2orUHpaVGl6TTF4Skgrd0pmK01id1ZJMk93M0VtcU1XQXZUa3MxTXBjNXhIUEE5KzI2bEJrQ1kvZ3d5TzQ0cXFOUHlRam1ETTdpWGVORGZOU3diRUM5R29IWnI0K2kwbFE5VGlRTTBSbmhta0M4eWkwdGpnbStBQWtmb1BqRmdEVk5kVkxzQzg2ZDZ1WDg0aWYyVkVsUDdyM2JobFhhR1hmYWpEU3Z2U25TcFgvQTltR1liTUJtclNvNk9LVDhwYlFTeXNYM1l4NURqSDkxMzBrN2J6VXNlRWpVbmVDWTRTNGJ1WG1iT2ZCQWUzUHNJeHJaa3RWTFJuY3MrcWJvTCtRSEsxbDlUMWZENUUrQU5zTFE1eDJjdVoxN2ZrOE9GQ0VCaEJ2TmJXL0Fqa25ETk5VeVpieFVpTjVNdnh6YVJ0cUFUR3hocWFodmdQUnV6eWVFS2duM083WmpCeDZJSmNtTk8xWCsyeVBnYnpWUWFrQ1BBV3laVG83V3d6MC9yQjRyRzRGejlpR2dGYjV5dGFFbmhld1oyZkRxZ2F4OHNGYXo4SjhOMVhQWUFkWGF6ZHdmTGZTVncya3o2TTZSYkNIa0x3NHVLd2F1eEdmV0VaOHhIcVN3S2hxUUVmNFBiL3lqcXFkR1BtU0pBN3RTekZqbThvcmtyMU5MUVYrcDhlcUdXNmRybW5WQlo0UjZLYkhoRUUwdUlUNk9taGQveUhNeWMxbkl3N2srTnlnUXpjUlUyUXI0OWp2cFBFQkdHZ2hSM1puNlRKWG1zaE5YTU52aWpRZTF6eDRGZUlIdFRBQVdjamxpR2FzQXRIZE5ZRThKQU4xcDV1MXFOekpnTGI4SXZIWnpDTDZwclZPWEpPSWRJTFU5T2pjeG1MYjhEVjZkUytzQW5hbVA2bWYxYTFaSWhDdElDT25NeHI1NzBMTVY1QUlzWnVxTkxINVExKzRYeGV1N1NCais1RXRYSStuQkJzSWNnNHQvbWhCRWxmd1ZIcmh3YmdDbk1ObzE3WXVJdHlUTlU5cXlPclpabnhBTXBBQm1WTkI4SzhQZ1J6Sk9NYU03ZWdReHo0N2RiS2RPaFJpNjRYdEVWb1d4RzMwR0VORUtnQVJDWHcvbnB5VWFJRDd3ZW84QzhTV1U1QXJpQWJNV1FGMThGTDhqbjJZdUt4OGN6ekdrenZheTB5RWNhMjdRNkRyL0hTekZ5Y3JqWmVXbTFoWmJaQS8yY0R4eWJ1WFA3K1hMMy9lMklFUmpwbkhKM1J2anJGOHhpTzMwQjBUMjNRZkx4Y1JQM05UTEwrcWVQOGlHa1h5N2tCR0pXRzd4ekhvSE1scGdGT3RZaENTam5UQkVZL0pDWkZleC9DbVREZ2tzanB6STk0bE5rbm1zU3B0LzdBMUYyeU1jMTMvVE94R1phMHc2dGpLWkdtRzdBQWtUNUI5ZVhhbmRsemQxYmFwbjhNNWpXazQyRTZEZHM3aDdCb3h0V3p0M2NMUHdyUnNORDRyL200WVlIdVE2SVhhejUvRmRmMnZzV3lOMHNTMENmNjBpV01GclpHTnlNWXUxR2h3c1lRcXB4SFhVQ2hWRGFGajBCZDN1Zy9jaEtPYWVBTDJMOXkwMVgrM2o1ZlZYYzBGcUlQR05ENCs0SEVPeGJEV2g1bytlb1o4SWFhQmlvZWZaVUdPWUVRNUhsTUg5K01hTkJsUHJnZTFUazlla0Y0LzJRQ3B6TzBzRnFBZ3NYOGk4ZDMzQ0hKa0NaWHVBamp5Q094clk3aTMyL3dza3J6UzVmRDZKdkJ6Mjl3SGJ4am1LSmFubHphODZZczhXY1Vlb3hZT3FYdVZwNWZYTjRISzV4cVZWLy9PelF2K0YvNmpYNXIvci8rTzNnTjF2UzR6ckNBejBEc3JQeDM5ZjdCbDZRQzlINy9qdGdaUjNOc3dzZ3VQV2Zqb3V6cjJUWEVmYVQwdXNmbWVsZWdKMk43SXowaXd2UUEybW9UNHZ0T1QwUFlsTTJKSDd5Q2VVYlhabDUxWTkwMk1zdmJSdWoyb3RVOEdObWhPeGdMWGZVZjM5WFJjcGF0enl4eWRaVWJjMndKOVFMWW81RzgvT0t0NkZHVGN4QkJ1YzFUb3ZKcjg3Q1d3cGpsbm9Uc1grQmNodmR6bXZkcXdYR1psSjNvRnhES29kYTIzTzU4Ymd3NUtWcldkZ2Q1VFFRckFPekhOL3U0NzY1d1dQRFBoemk1NnBvVHNwR3VKWk11Yk1BcmVSdG1ML0l0NjJFdTRzejhCRytWa1R4dGY5dzJQM0FjNlFuUW9SN01mMHZEamU3bnhnKzdQNk95YmFsSFZ0R0ZicWZtOFYyQmJTVTUrWVovRXp0NHdPckxyS1MzaG9ubmExTFI3QlRwSFVnZUF6L1N2TjZPdjl6Umo5WmZvM2lWOTRBdEQ3S1BTZk9HWUFEMloyaHU5UlB0dW5YbmtNdHdSemtaQ3NreU5mNEdHUHFLWktwZjg1ZWVCWHdqOUhYenBvZTlQVmNyRGZTa3ZzalNLOFAzd092UTlnQjBTWmg2TFpkQkdWSmZFSG9zdGlHOWFsUTlFUmhZTTQ2L1JsRDVBc214bERCbDhoeGhhSE5Hb1FXTlpDVEJvWmpVZUZkbVBkdVlsM0luMHFFUCtHdW9GU1F3RngxcStzZ1k3ZEl3cjhtbnJrWkIzL0xKSG43bGdHVEJwUFNmaXpjWVhyWjZ6Q2J3S2lxM3hPNzV5Uis5RTE5M3dMRWQ3ckh6RzlhbVg4MTFjZ01uanJmWXJmRTNnTGo3a0liN1doVkJqaW13Zk1xSUIxNXkyWXNIVDVybGZXd01lSStCSjRzN1dXeEN2L2NqK091OVJRZVN0bXBqcWl5ek56aTV6Z1RPMkUvSG9NZm92bk9FRGVOcCsxbjZ4ek5YT0VYcVhBOVZ6TVJTUU50dzdTRWRoM3V2U1hhb2VyTFZNcTdzRHJZN1ZuVHJtRTNzOEdpcmxubEdsMlc1aGlKRzZIZzN0c1JxcjVmNXE3L2JEeFhnL1ZIZktSZG1KaVdKc2h2WjZ0VnNZQ212dExGWVo4NUV5bmtWMmdqeDVQL29WZllCclFvTVRodGJaVlAvZXJ6MTVnRy9BNnBHdDBYVU1hVzZBbmtwdFl4RDFjSTRBQzFSRE1kN3B5Tm5NM2cvUHZnaStTZXlteXo3ZVdkaUdqMlIwc2RYdTVibVg2S2xqcXBTWDdrOU9HVUpldW84ejl5VXhmYkEvUnRsQlBUZWxqTDNmMmR2eFovWjMxWHVEZXpCbk1XQjNTRlZja2tDdFNkblppckFmNkpzejZNWDhsVDI3Q2Jkdnk2VjVOSHVRNitkS09iby9mNERDTTRQZk9ZdEhFT3k5MkR2Vi9tQmNPUXZqQmRwWU5oL2FqUnNjWTlwakhBRytjQXl1d0pDSkdMdW1Ha25XeE1tYjJDYXA1OFlqK0JNdWtvVmZ1NVBXU0lSeE5SSmhudGpsaXAyZGZSUDBGdVJ5MGJxVjNlaWlTTDl4UG8vZWxjNW9keStXNjRRN2JaRGRmYU5McW5qQnYrT2R1cW5HSHFJMVJGdnczbEdoakVlWDM2QXh5bVd1Y2F2bi9LRXQ5aVdkbUdJZXJQZEdJVjRjZG5ueGk3NzFGOTdUalBEYXdMbkgyK255Wk1GSU1IL3BKVEhqR05mWVpuUVJqMEZwL0w0Ky9ESXl4cWQ5UHdOMXZDeC80WDVhZFp6L0ZyKzQ5ZnltbGtMVGVmeDg1Q3ZnczNETlh6bUhKcTcyMDlFcWJ3Si9SSG9LOWlMbS9tL3RwYTZQMEpjd0xuWjZDWEJlOXhKWTR5V2xNTCsxRjZxS1FkM292bkVyenZWamVaL1lHWUhBL2NqbTVsdWZ3VEZ2WTBnNUd0MytMb2J6Sm1PWnF4NHplUXIxcVh2ZnVKSWE2SmNBOUplcEJITEJhN1poUGY4QXp5cHpDdzZnL3VhTWVvYWF3dW1LL0g4bmYzNjI0SXo4MDl6a3o3WkE0eDd1UW0ydGowYnJ6dS9YUGRwOXdOK1F4OXBVdldtVGUzcC9hUGVLVlJ6K3JzZXo2bXN2SVNmVHJsL3AxcUtVanNUUkxzRDFrNUdCSnU1ZGFQekoxY0UyNGtLR25xWFJ2K2FtZW5KTS9vSmo5WjM2cjJOVlkrWXpjVm5GN1hHTTNUNTd5U3l6cFZYc1JxT3pMSzBLbCtVdkdJc3BqRjNBUzRPNk1JZ0wrbEo0OXU3SDZKemtpWDkwbVJuZ3lyaEpmUEVrblNLNE1sVmRoR3Fab3dwemhJSTQ2eFR0bTQ4dEZuS1ZEMm55Yy9ZRnp6L29NWS93NkkvYjJwYk9HVTlza3orNmJKempHQ1ZYeUJNeTZpWldZMS80a0Nab1grSWdyZ0kxYTc4cEF6dGpyNHBoWkJ0aDZDZnhHZXZTTDloVHBrNjVyTHF6TUkrZDdGLzNKMi8yUjRkYmNSYVQvcFd5SzdjbTF5L3NMWGVNb1ZaaE9PRDdySFhSVjU1VFFVaVBONkt1KzFKOGRNd00wMkxNeDE2Q2ZKaFY1WHZWOXBhNjVqKy81M1FWZW9rZit4TTZkZzJ1Mk9vNm90bHNTMnlSalFSNkF2d05XK3ZzZy82aFRkZTVJMzlqUXg4SDFQOTl3YlloY3U5amZqQkpEcjQ3UXZoZUZwRXg2MFBzcjB4K0UxZFE0RUJXekkwS05yV3F0M3NncDhsYVhFTzh6SXVIZDE3Rjd2bC9zd3dnNy9FK3dGT3A4d2VuSDk0RlJZZmVwQlV2MGo2TVllS3hSYXdTdERCcHdoWm1VYjNHNm54a0FlbktibzREZmkrMTNyYytOcjFrSkNZMkU4TGxtbHE5cmZlaXV0TFY1WEtqaXEvYWgyZE5hbU5tQ3p5QzhzNk82T0pRNGIwOHFubTd3YXNDK2dkTUtpK3F4bHQrY0k3VjUyS01XM0puaHhla1YzSjNHQ2pDSlNMNW8yaXhXMUlLc2RHWHJSeThSKzZiOUVOV3VYMk1QZEk2enhZdGdLMW5HME04dXU3eE9uR3RuTDZLWFpNL1FuMVFod2J5ZVB2aDNYOGdFd2dkNkZCM2RnMTkzT3NCKzFnYjRtV2RpTG45eFdmYTByQ3N6dUpEZlRRaG8yMFM2TWR2MDJOYzRYbTR6REpvUDJzZVBhU2Z2WnVxUDRoVDEzVU5rbVBPU2wvQS92cWFZQ2RaR0o2YVFFaHZxanBBeEsrMTdicEs0c0pqVjFESHEwbGM2VStHc1k5NzBuWjRwQVRVUStBZU9NRUhuSVIxMVo5U2tyNGR6VHZKazltd0dVbTRKSFZnMTFaOVhBaDFqWFZ2U3pYK1M2dnk5bnFOOTlMVWFNSjNVZy9Ya1ova1NWMmZ3VHFtMnFvN3ZzZWhjeGc5OW9TNkpnRG5LNkJ1RC9CTFN5Ukh5VjI4TDZaS1oxMVE0em01T1ZzUmNxZHl0ZjhQN292RWpPS3p1NDhuSCtZVkozalVHZXgzZ2o1WDV3MndiVi9qWGxSam5pOVF2OU1hV1pmNUF0aVBIOGdHSEkreEdDNjNFRjAzK0oraFBGVnBaSnR2b2VaZ2xMcVNIdHFTWHN5S0QvYUQ0OUNxWTlDUUE3T0tqK0lldk9oVzJGMUduSU50elNnQTEyNXAvTjVMdU1zYzhDbkIzZ2t0UmllMkljWnJJcDgvUVU5Y29pYy9naDUzalhqbkpWenBNalkxWitqTU5jQ1gySDBVVzZyc05WM2lMaTV6UGR0c3pQdU1XTmo2N095VFhOYUgrYnVQL1kzcWJFcFpiTVlMeVJPUkJWdGNiSjV0SnpxNnp3TGRJOEc4cEZ6R0I4d2dMeUwxMXgrTjBvemFmZXYzUFNCK3ZhZDlicGwrNkNXYjNFRTIwMVRoWkxDOVhpSjVVbzhLSmZGVHZML0hjbGdmSUZtTmFIWXpWUzhmMGpDR3dNZDRXRldPc2VDWEczb1U0UHBLUGJSeFhRdXB6Y1JqeDl4azgvaU96SkR5RXBIM0V2OWpPMzhpN20wcHJqREUyOWlxeUxhTW9iNkk0TWdTT1hleEt0ekJ4aC9NMXdUajhNWXZGT2VKUi9BODFJdHRxSm1kVm5pUnRWekRHQmkzTmNMVEc4eVlEODdWbjg1Q25GTW1zUFdmeTRHMmJZZ1A0dDhQWkFEVThRNEN3Ty85R0V2akNENVpjdDFiNWloM0UrOUdiLy9zNzREdEVWZDllaC9KeE8xMFZWZ2IvZVNuSDhSOWJ1N1ZOb2FNWTg3T2JrTGp1bnZvTlNLOGh1OEg2YWdmdkF0RytveTc1L1lvdnNWM1BqUEhQVVE3SkNjaHI1dnEwQ2VHTVF5Si9XanlsNDd0bFNxMTcyMlpnTTE5K3RIOXJ3MXVUK0k0RCsrKytYdURWWVg3L3Vtei8vK3o5eWE4cVNQYnYraFhpWEtmOU42VE9udmJCckpEcEpZZUVEQVFjRGFUalgzN3J5TlAyeGc4TlRiajFmbnVUN1dxeWk2RG1aTGRwL3QwNTBoOXVnUEdMbGV0V3JYRzM0OVFZTEQxczFEN002TDlINFRxWTBUV1BjVWl4SmdsUk5mT29JNGQ5d2xDSGJBbURoeWpWRWUrSFRxL0FNZk9IdFVUUXhqeVNKK2YyYStLSVd4NVE1RWxveVFqblhQVitscCtOYllVM2hzclZSNndxay9Kc0lqcG9sUm16NXlWTVZsRGRrUnlNcjU0WWh6bTdxUVBnK3kwRStzNTgxUmx5K2xOakFjNnd2aGFKMzBUVFJ3eUdLakloaHRRR3dmZnAwSG9PM2JvWEJsdURBSDV2Vm1QaVlxcFhuYU0vSk5ZRTdFMTNld2RjaGdkZm5WQmZEV0NuNUZpUHFhWXdMMEp4V28rNkJtYTlsa2MweFM3UndXN2JQaEc4K3kwWjE5dGdNeWMwZ09ocHJSaVM1eTl3SHZ5OVprbE9rVjFEL1M2UnpKM0EweVhuR0psa084ZFJ4Vm1uaXJFMEQ5QmV2bFduU2JVOWFmOU94akxUUEwwcVliTzNSU25uc1RzR1N6TWJpVi8vOWxqYjRyOUpWTnM3WkIvaFhIc29ZYlZOMHBkZE00djZINGtHRlBJM2licjRPMXhYdEk1SlQrNU9UeWRpNmlQc3JweFF0MDB4YmllYUE0R1hLWGJFYnN6RXlqeDh6MWNhWjlENnJ2WFFyTWtZLzBHWnpIR0VnUmJFdGViWXV4QVpaaThqamFPS1hpQWlZeWZBZWNzMlA5MDdneWhIRmlOZXFKUEhjZFd3Q1orWWZxNk42WXZ6MG0veEJyWGhsNkw2WFNBTVpaaWZIYjJiK1BPaHVCK2VLWnZuWXB2d2pnQlo2bHhUUjFlWnJ0Mk1XWVc1Qkc2TzhDR0JheVFJaDBJT0c0dGtKRVY4WVZYQkw4c2x3c2ljYXVBdVQ0Z21FNVVEaSs5QS9BK21Mc0t3UjNLM1orVFhpUTRPdzdHVHEvZGtKeklLUm1rc1lNUCtiTHdidGp2T0NIdm1Db3dqZnREZjY0WGE0cmxEYWNRdDZQMjdrMTVWVnFmb0Fxem5TRlV1VnR6ZXZUM211Z0ZHamt2RHVJemUxMXM3cVN4K3FpTjVibjA0dXdrY1ZMcTcwMWU4eVcvN3pmM2IyUEo2eXY5VFYvbzc5N0draXZORnlWcDdNMjBlYitranIyNU90Wm1xajkwMzhZdHR6K1dGdEorTm5zYlN3dDFQSE8xeHJrYUxqcG53MGdUNUwzVmxFS1Q1cDRQNno2RTJhdy9ud2h2L21TanZReTIvWG5MNnd0OVhodjNLNW80cWZUSG5aMDJucUMvOTMybHVlLzdBMTVUdXY2Yk9PQzBsdzR2N1RzN1NaRGN0N0UwVStjVFRoMjMzTGR4YzZlT1RhRS9QMXZiUWV0U3lMK1B4MVlRenl5SWVaMWZINkFYYTZWOVJVZlBHQ25hbTFFYURpaFYyRlgzekdwbEN1cWd1cDRtZU9pelNzK1B5emhYZHNWYW5jN1piL3N2clN0K1A1ekJPeDI4bnpWdnJ0NGE1ZTM1OXlMenpKRzZqR05aSnZPUDN3TjRHa1RBVDRPempQYUlRditSNzhWUTQwSE9tV3dOSzNPb0dUbkFIKzQxTUFidzRSaDZicjF1aU5ZYStCRkVEdHN5MDM2S0tZWHNYQTFpVUlPajM1TDRITzFGaEpnTndkT0tOS0tYVGNDNmxsZFc0MUF1NnpIT0UrTXo4OUw0VDZ6SkFlZFR0NUxHREUva2ZTWlpqMTFxWHcyRTdRdzRtNWpZekt2STJxSmdONkF6ZVFOOWVyUmZneG5MNjZoODFacFBVbDRvSE90TTU4UER2a0NCVEFCdGEzSGVvWnZHZnJONTVYSFAxQ2dmVTJmbW5mUjZlb1FlVWZJWWZLNkl4VVduODNMcmUybHNMOGlKZFJqaEdHSkVZOVZzN096dytSVGJndTBadlVvZStLd212ZWNUSEZObGtJOGxFVHp2Z3pFZGp5SExLWjYzT2M3TWkzRWluazFpOGlUMmlPV1A5SVV6ZUJYa25YWW5kSHh1dk5Jb3Jlc1pWVGJxdERzekZHU3JkVS9IYmxvTXJYWFF4M3BnQkhHYkpmYUptSDVXRnI4Kzg3VkpIKzFSYkNUWE04cGlYZVRmSWNYdlFQK3NVL3dOckV1SzVIaGhBTjRFOUN5bHZadUFRZEx1em5JMDNVSC9oUDVJUEUxc3J0UnBQY3I0NkFyT1IwRmVxTUNMVmhYNlNpczJ4ZG1zZjdhMm05elhsME1WY0xNN045WldrZDhMMWJVaEF1L01RSnQySTJUSDVlcm85bWRyekphYU1weWRsUHZMUFJEazkrL09nZFBmUjRaMzZ2ZXRpM01BY1Z1MEJ6aU0vV0w1clRoL2ovN2xPUWpRL2htdVRWK2VHRngxcHl0V2hPemxpUzl2a0wyaVRpU0kzZHhzbXhLNVVJVldyQ25EN3hRLzVoQ0Q2RDFyajJ3ZFRiQm8zOXExdFZoTEhYcmRqODZRZkwwSDIxTXlxanREc1FYWTh4TkI1bFNzMzV3aHl6MG9Gcisva2RiOG52Sk4wbDZHbjFTWFFqZ3hhYjg4dzdGSWNXWTBYRi9GZGNUWnpQSXpucExEdUhFNjloTTVDVVAwZkUyUktvRFBkZlIrc1l2c21nbVNxVWJuMGQ1MVBWdVU1NTE1OUszakEvY0pHcWY3NXNWdXIyVE45T2tnTVlVWmI4RmVMcnZUS1Y4bHVmdXVNWVdlVWF4SC9ZcW5sbkMvRXVFend1Y3lya2M2Z2NmYVFUN3FBdnZjaEN0T0dhVFlGVmlIYTU1YTh1YklmNGI2dVgzb3lDbjJEdm9kOEVIaCt2dEd2WVR4K1FCemJZLzdTdkl4ZHFoTFZMd1ZxZnRwbTM1cnJzbDF6L1M5dGRZaW5GWnRpcmRUMi9jYmdOR3dObndTUzN6cGIvcklIc1Qxbnd3MjZIQ25LaDdCQzZuNitUbXBRTDZONUVjaVdGdkZXMWxRbjFGMlJoU1BWV3pOQVlNQXh5cFhOSTluUXR4dXdQUnlncnpFckk5TU1JclFPWm5vU2dYNjl6WEFhSk1wbFRESm93UEhTd1MrZEF1TlIvWTFqQThzYU1xMjBta1BBVU5XVllhQ3FsUTQ1RGV3WEFtNWZCUFErcEk4dXNEUHpBYUxaNFRzOGdUd2pmVzJ6R2xRNzhZREI1bFJram15YnRUZWk4eGRiU2U5MVBlSFBXSDljWDNmYzAvVmRHMGp5NWVCTGh0c1kzK3kwdnhXWktEeHljTVE3VEVkODNIbGFuM082S0NNdHB2SDlOczlIK0pLYlcwNmdIcHF2Y0EvN2dra3p0b08zZmZmKzZqT2Q5dEh2dk9adWlRRDFxeUM3S3NCcGhqSE1aeWhJSE85Z0dDTEZ2bXpyZUZrY2pZMmNEeXZhRDlib2pjem1taWZ0aW9UUVVhL1dSeldnL1Z2Rys4RzJ3YkRjYmJIY21mMDVxYjVEQ1JleFQ3QlJBYzdiN1kyeEFPN1E3bHBmS204bm5yZk0rTkwxT2tNN2NYRldQVG1tbExaYTVOemRTWjFpVjdmQVh0RGh2NXNYWkJ4N3grMnBUQ09YOVB5REc0YldlSUV6aGhMYkxucVZBSmQwdG14dWUwdTRmQm9sWkcrMFJvNHg5MmYxN1p2bzZkdDMzM2F2aldxVUh0TDhLTldGdWF6VzJtQ3ZBZE1VcVUxQjU4VDhFSnhIUzdSejRrbXlHdEQ5RGh0M0VrMHNjV3BDc1NLVC9UckZmQVMzVnpqeVBEeXZHZS9aSHc4RUxjOFZhT1RYZGU5Yml3c0R3L2Y1UUgzbGZVbG1wZjZJaStQbCtYR21RUnlySTNlM3dOKzRiNjdjem5FaTNOeGl1ZnAvZTkrWTE5QnZRLzJKanF6QUord3RkQ2daaGw2dTlFWlNQT3dEQTlNUDlHbU04eC96SEpyRUl3aGx0ZmwzWFh2SllaelZLbDRGajRmMFQ1aU9DQ2U1aXduaUQ2dG43YnhDdWZuWS8yMzJBWkoxNUtkaDZ6WHByZ1dNZU1uTzRNbk9TRis5OFRIK3VXV3ZwREM5ejNibTlIYzlPY1Q3cHgrTGhxejFmWTJSVHFCeFhFNUZ5ZDlEK2ZYamJYbkJlUE8rTTArNEROZnVDK1JDNzdyRWY4RDJmUWZYa05tYmlCWFpKYnFNMVdZM0lnemNaNnZqY1hVbXdpNFB1NzJ1TWI1WjVpK2pQdE1JZVoxazk5N2Z0NERhVzc2clkwMnljY1FEdXFtOXYxMjMzMy9NMmpkUEtzL3J0YjlrYkZvQ2FyaXhZUnI2ZGcrYXZLUjRYdUpwWENPT2dWc0E0eEoxcTZ2QVN0WElQaVVyZnBhYXc0anM5VGxTUXl0WVNuREFObkh1TTdNVzJtanVxZFBzUS9kRlE2ZmJUcG9YYnNDUDdOYjhvcDlWaGRxUW1YZzY4TDhFK1VUTXVxdEpyNDgwOXJlQ1pzVTl5T29JbzROcWNvd3M0VUZ3ck00MWRhNk1uQjA1SlBoMnJTTklRejNUTDBQOGxOeEhSQThhNEhPbGFKMVcxMWYxMzFpengzMEd4ZkZBd3JPcjdXNTZ6eDIvRzFrQkhLNUU1RDZJVnp2a2ZaVFEyeTcwSjl2SVhzeG9EVldIemd6MmY2ekJQaUhTK2Q2eGs3NWlkV05CdlZOV3c5MFVMQllzWFUvazhMKzM5dHl5WmR0MStNeHZOOE9QcjdYU2R5Q3dseGpFUWZnMFQwZnJYbG4wNS8zTjlLNFV4cTBLWFpENUdzdmxxZnVuYjJrcVB1KzBpbXA4MzZwUDNaSy9YbS9yQ2tkVHZPSE0rMWx3UFgzVHJuL29ublMzUE9sbCtaZUhYYzIvYjFaa2VZZG9iOXY3dnVLeW1uejJrNVRCcHR6TW94a2FuQmxYUEx3dWtLY2thTTZyT0ZKT3dzOWUzeGJySkQwM05GK2RjQTh6Zkhyb2ZsVkZUVEc1c2xuRnNuazZmeEhoaXRFNnF3OHV6MmcyREhBeVhKcXI1N0l5V3hNMzF1VG5tYzJYM3BUUHdQeWkyeWtSNmZERG9QZmRlSWRDQmVOTWx3dzJNWVo3bGVtTy9lYVVxRzRpU2wvUEY3bjFsd1haSWpmcVlvME4wcGRob2Y4L1p4dlZydnJhYU5xZ3RhUGNuWm9sQTloMmw4Zjl3UlZhZjlXb3BNYStGUHpiQ2xkWkNlRWs4eldQckxkTzVsTjU3NEZ3NTJsVE9JTzlLclB2Z1BtSCtBbmRCNDdicGZXTXBQOE4rMGo0OU1lT0tiV2plYjJzbnhkemwvcXcxazY5RnJOc1VzeEVISE5Xb1pCbVBYQnBuMEZvaFpweW5iUmMrc05GbU84aC9zS0FGUFl6R29KZmFQVVRWSWNiWW9GUWJqbkNTNXlhcHREajRZNGpFd0JmREVhLzB3NVlDbCtwT25McEthSjRNRExOWVpYSzhzdGsvcEZuQk1WQUkrOWhIbENvUGI4Y3N5NjNlVU5IK0xjeFRtNkFQTVFtTUpzelBpd0YzTzVGRk9vMDdBSzVBUGJPQml6OGNwbkhzbks1VDQzbzZSNVp0Q2xlSkRwbkpsdDJVWDJ2cDdqb21EclRwK2M4VlRlWXl6RzJoTnJlMzkzbjU1UzIxbXVnbTN6dmJpZUUrUkV6OGZpVWd4Z1daeWhkUWtOWWJ2STIyYlM2VE16QUZzdCtvTml1MFhqWldLeGFXOWNGb2NjMTNiU2VQais4UXBTcUJYYmhoMjVOVHpybzRMTmlkYjFKOGQzaSs1cml2Sk9WL0I1OWxQdVY1SnhQSkkvR2QvZjNyaE9ING54SG5IYlh4dHJwam9LYk9wSnhnMHl3bmd6eFg1N3N3czlPTmgrMkJEc1hnK2RqNW05NDN1ekZLZTlKT0U4QytGa2VEZDJaOFpiNnFyVHJrZWV2KzZVdEVnZDhVZ3ZKSmgzT09PRllURVNzcDR6NEg5MkRiRzEwbmQxRjNqTG9ONFkrWFBBcVE4MUVTeldNSTdMTVJ4OGwzdHRJc01GclAwam5nYWFWMlQ2Ly9LOWVRZTV3dDZJVC9WdmI4cU15ZC9PdEIzMHlCRk1lSWxUbGNvQ09LNUZ3b2ZVbGp5ckRad0ZiSzNIekd6WFkzdDBTcFpTUEpzVjVsQ1E5MWE3djFKTGRiN0E1OS8yWCtySmhYMmU1cGloam1BcWUyWnB1Ty81cEQrKzRCeDRHOWNsL1Z4OVNJRHNxcnAzVlp5cFNmbVhhNEVwU0d0VG5BU1FGOGR6VVRRSGV4WDVJYVByWWtIakhGY0NPb08ya2FGNFhISFAwbkQ5dHN2c0VXeXIxeGF2cmZyM1lhc0svRDBUdmw0ZmNKUG8vSHVmeGhjczdtWEQyT0hrL1JtZnIxYjlQaUt4K3RIbXNLK3RCRmhLRkl0WjNPUjRJWEQvenNTeGhBei9Ldjg5c21PcWU5WlhKM3dzQ2Nab29yd3N4ZS9TYytzaXRzc0dGRFBjTjRTbnF1cTMwSGZOL0J6V1BXTmE1K3pSQnZrMU05QkJ6TGd3SHdiem5PbUplaVltQnZ1aEdoVDJQdFA2WnBMeDlwNnVuVk5VdGtZdXdyZ3BsRnVoN0J6ZUo2M0x3UFZnUFZhWDV1M1YxZ280WkZ2MW5WRWFybFgwYkdJZlo3MnFaSTBQY0JCd250N3lHSjVNVWt1STlNcVExa2U0cWlJdE1jZEg5b3llVys5aytoUTRqVkx1VWJoSHN6V2Q3TU9QOFFwVFg2dkJiMHkveWhtQ3REWmVRc3F4M29WNkY0cVpJTXpXT1IzZXpzMEhta05QVmFTUTFBdERyUVBVcVFxZXJ5czUzbzNUYzkyU1BOcEhsK09VYlZxUjFVUm5HOEdESjMzUWhGTmhnZDViUjc2OTJIS2hMb0hVVkZqVExqcDN2SE85d2djOFJJZCtKUEFZbWJzbnJ2L1M0YVFVM3dQV0pUQ1FMNnNNeUhya2UydFNISGZnZ05zdWNOLzViR2E0dFcxdjN0bWNqRlZrNjBsemd4M0FYcmdONTNOLzVLdE1zTy84NGZ1YzhYa3U3V1VtTDNZeWJuYXBuNE9kbjR6ejN4dWM3SmZFZVEya2o3dVRSdGJucGtHZCtTRHRvY1IydzRHUFNKODFKVDJjSWh1bnJzMDdyYTZuemMvaHFYdHJHbXRBODZvSzhzWnE5OWZNZlpNOGwyZkd6OWZiU1F5M05oK1o3ZjZwK1BKVjNMNW5lcWJ6MStIK3RRVGJRc08xR1N6WSt1Y2pEa0o4Wm1NZUdXdGFXM1ZhMnN6MFBYeCtRZDg2T2NjUHVBOVA5QUNlZUpjYjdCUzBWa2pmNSt1QW8zTThpcDNHek5XbVVxU0pLVjRDeTJ1K052eEpkTnQ0a2E0ZE5sSWVWdUJlT05NblQySWxLYzh5amFHay9keTBEbzNVd2tGc1I0NUp6M3lPa3pTUHE0ZXhMdFJSZllOOERoYTdtK1gvNjdsMVNWVVNyOU9tWEN4UE9JYVg5ZDJ5Y1lKUUl6eUNNTzQ4RmdId2c1dWlQTmNWclpMR2RoU2tYdy8yR3ZSREE0OE4ycGV1cG16WE9CYzVYR1BicFVQN0UxZXFNSWs3WWozUFYrbGJTK2dwUXI1Tyt2NkYvTXk4Q3Z1eFJ2UzA5VEtodkRFZjQzM0c5MjFMRHNOM2ZkRXVZcm5BMzVkYnI0K2diOVgzNXVoOHhyVlNmZHlyMHp5UU96ZTMzdzVzdnRxbU42K3QrbzN5cHJldjNUUnVpdXR6TW42ZjF1bmptSW1odERZbWxsWGFhNVAySHpQMUNkZnZMNXJyaEY3SjRSbmRsc2FnQ1c3WmdQWlRKc2dleEhXZXNIYnNIbUprL2NLY1RPdWlxdkFSOENZZm5qKzdibmZTVnJtT1YzZ08rZG52YXFFMnFnUTk5SGxiNVhvTitMZndPcXJQekZMSzdaVFdLMmZ6bGZZcnNId3N2Rm1TTVdkb21yOUR0aGZER3lXUVBrMGYxOVppdmx2S08xblVMNEY1K0NEV1M5KzM3YVdZUXlSZUM3Z3NreU5jbGc5eTBncERYbFUyQ2RKVnFoQ3ZyMTRQWm54SGZxZUhiRmdyMW1UazcwdExFak1kQVFjN1lIQ25QRzhMUzJuRnZTbStyZ2Z4cHI2VCt2VEFKWWZPUmZESkk1UHBFZGVuZldmQ3JOT0U1WDhFTGgyWm5yTmo5SjZHS0k4dHNUWFhkOUFmQmx4Qnc3WThNMXBrak9nNXJmUTVUVFN1Q1o0VHlxMFltVTF0WmloZXJPTjdyeUJmbGVLUDF0T1l2b244NXltdVJZWjRDdWhpMHZ1VnF4SCs2NnlyOGI0YUc3YW02dUE4UHRYL2VNT1ozQ2ErZHFNK0srS0JCbDRtRVdQTjBOZ1Y3UnZBZmtESzAzTncvdzdUaTFiK28yekw0L05NU2Vma3dsb2M4Z3ZYVHNaMlpJeGw1TnFaL1ljNUxnbXZFYzNqR2poUGRoWC9NTzBGTTl0ZHI2ZGtXRVFIOWdRNkY5Y200VW9Ddks4L2NCN1pkYi9ncy94TTNHTkd2aXRyVGNUMWN4UUQ0RWJPb3JQM01uYzM1b3l6OTRXYzNJUmdIMWdpeG90NjN4N09qWXZYMnJWM3g1U3V3R0s0OUY1WDRTMWNHb2VGemdCQjVpYUg0em5zLzRQUHUrKy9KN2JWRHJnd1NEemd1blU4aFhGOTZHK2NsVEVkalUxT2UzN2ZEdUxEdDlRNTd1MnBOTGZFTTJjQ2ppVmRjMlp4NmxSYW1yc3E0SWdidm9jNVlSV0s3OWRabXlWdnI1YUdNZnNac1J1Ujd3UGM3Um5lRzQwRlpqMVE5UGNuNmdjNHRWUzdPbDU2VFcwTVB0T0hjN054akxFSytLV0ZNb1N1VDdGZkpYVmFmN3NtZmovQVBWVDd0TjVEOFI3VDg0N1dKTUJZZU5ZZVlQRmR2Mlg1R3RLZjFSaUVrMmExT2VVcTlmRkVIaythclpmaGFGRW9vOWYyZ2hYMnJZcHNyNVczTmhiV0R1cExEL09kSDZzSkxLbVF6empWTzBZd2U1aitzOExlc3hQeFFrdXN4bXp1c0JqWEN1bE81TmZucjZXeGFEUFF3RmRVaFptbnRlVTRxN2NCbmJ1bkdBOVFheGZnT3F0MzJvUkgva1ZQSUg2S3kyOE1ZWkRnZW82blU3RXV6aWpWMTRaWURXeFoyc0FjUTYwVTBwZGtiTVUrOHlUOTNhaStONEhQR2ZQR0luMkc1aHo1czZZdngvWUk5aktjV3gweFZ4TVdhYUs4c2tUUHQwbU1tc0ZXZERRUjF4YTl0dnRSMmd1cXRPWjZvLzZHNzRWNVZhRVA3cDF4UTJ5RGdDMjc3NVdnN25adGl0VkZiNXJoUy9hbVpGNGFzTWVBbTEwSHZNT1RjNHJPMGo5QS84aUwyL1FQdXY2UDBqL28zbitRL3BuV0Y4QVJpT1JvT3ZRMDdITVc4M3ppc1JETTFqcmh6WmNEZ2dsRzg4cXByNS9yZ2NaOTBVMVZrUk5EcUl5MTZlRFVldUs4WTVwamx3QzcxeWpKWElxbmNSTExsSjdOZllZSG5yN0xrT2lCMmRxYUhtT3hJSjh6aXlPWDF5ZXdXbWlzSXF0amdsd0o1b2dHZmRUZ0VweDdkQklHYjZSRTN5SDFVMFF0VmhXVHdhbkl4KzVWSDUwSjNjb0ZiTk0wbHp4SWMySFg4SEZRZXltOWQ0UG04RDdLVVpENmZzMDBqL1lSZm9IQzl6dmtCbENuczFQY0FMdGJ4MFpxN3pHdXdiUi9wcGJtaXJsTGV4cWtnZnh1SG9CYm52TlJ6b0dpWjdINDZrWGNvU2Y3dk1ZcFo5R296dFFQWTR3ckhPY0JHL1FhVE15eHBreXVPbThzc2JYWDBibWpETkgraTNCY2tFOWpTYjJTVkRFRmlUTWF6R2ZFaGtGeXJnR1BkY3BaVC9MdmxVV0s4OTBtdjJmeVdVVnk5VUVaLzAveG1oWS9HekJtV3p2U1EzVE9SejN6KzUrT2h3dHJWRERYdVJyeXdyVzRCY3UxY2ZWOUx2U2RGZTJsOTJFRVhpa3pGM0hxMG5mS2Fod1NWZUVYMGp6UDIxajA3ajhIcCs3TW5PQmEwKytHdjYwQS8xd1RlSWlSbjh4cENuY3BaMzl1UGo3SUozbDJ6RGR5NWwyK1Z3R3VuaUNOSjN0SnZQWSt4Zmg2L1ZHWnYveGVQNk4zTjZ0ZHpPcHppamdyQzUvL0hpeU4vU1haTGNCVUFQdElWMXJ4VUpSamRYcXF6eTZQalhUbHZXL0NrN2p5bm50TGtlWm9YazdYbmJjdTdZY0NySXBoWkNqeTJwcWVHdXZGUFliTzJEcmJtMzZidlZUUXY1aTMzMmljQS9NL0thMkZMZE9ZaUVSaTZTM0JFTHhGUjB3aVE4VG5OVGtQWEUzUjFsQVBnTTVJd0lQQno4cGlFVVZqT3NFVjZxZlhadlZ1Ri9jVHhCL0dtckpGL2tjaEwxZW5vTjdOS1BYZE43ZUxiRHZlYnRCK0dod0RTWE5KMkhaSzF5Ulh0L2JYNkg4c2twY2J1Rit2NG1VNitmN201WEgwYitQa0JVNnNMSThOYzV6aktFcTA2WEFHR0NTajAzdjdQOXhYOTE5bk54ZHhqZlpmbklzNjgxYk8zek95OGM2K0grMDk5NzN5SEtxLzU5NFh6aUg1UGZmOEdlZlFlL3BmK0l2clg0QkZlTk9ZcnVmeExmcjl1M2x0QzkvbEQ2MFJMYlRQc3BvaFhLLzlsNmdUdlRBM0g4cEZYN2gzT3I1SmtUNjZaSXQvQ012bDNQM2t1aXBnK1NZeG9BUjgyZGJ4OTdKWVhXcEsrVDErVS9ydUEraGZsbGRXbzBJNGppWS82MzRuTUNVNkYvM1F2M3UrcVBDZC93SXhlazJjRFFBSCtVemZMdWJwbUFoU2cvY01YMW9EZjFOekdHbStGbWtqdnFNcDI5aFFXcXNjdG5DR1d6eFB1VFdRM01DNnlRdXlGbzhkc2I0MlJYbGxscVM0SXc1RHpGbkNPZEpMclNLNXRkMTN0NGFlSi9TRUNtK0l1TTlHblVxZU5CODZ4ZXQzdG8vaXVQK3dOTnhweW1SdEtLM0ljS21kVEh0YVpHUXpIK1p2MW1pc1BXVVk5cWI0ZmNrZXdYRUp1YzRiNGhhZHpUdHRlakx2OTUzQmNaNlpRWGRtWTF6eTRuc2NZRW1iRUY4Q09XQmpJR2d2THpTbEFuWUgyTWszNlBmVVRtVDRNb245eitKTHJDRk8xT0JKREliZm1MNG5BT2ZsbE1FQ0liSjFZQlBUMnNkYllxZ1pscDZNM2hYNC8wN0o2Y0QwWlYrZk9sZ2Z0SVpwUGJVOEdRNXd6UythUzl3dkJuMC9ETWJBQVc1SGRtNGlHUk9xaVZaY0t4YWpjMXNYSm82aXRGYWFLSmM3VGRLaktmSm9UVEgvcE5nazlabmVUa1AyRUl5RGNscVJXbVRLS2FsWW5vMzlrYjAxSlJ3b3RPK3pzSjZ2d21tS2xmYWh3bG5UN3JxcTBsK1IyTEIzcWJmRzlMc3pkVWY3SXkrdXlRNzVpdEJEdElEWTlOb012TDZ1OE5FUlpxS0lhMWlSN3dJMnlhNGU0K3RTSDY3b0RIa3Z4emRUcjNDaVgyYUU2KytJSFhueStkWVU3WGZnK0JvZmZkOGFydEg1ZDNGT1V4eXYxbHpGL2R2WHIwZkJiNDFyTUZKd2JjMnArWm9NK0JvN0YwdHR1a2hvanRNVVc1RVpGSFB2MzRwcG92cmJ0ZXJtTVUyQXE5N2xBMHZ4RnRxbzZ0bEk3akh1SjZlV2FvbWxERGRaSHpUU1Rmd2lqZWZnblAycDk1S0hyZi9HOXdwL3ZmLzNMLy9uUHRCOSsvNzVmdGlzdmZTYlgzenJpeE1tZnVUZC8zSnY2WWwrLzN4dmwyTEh5cGlBblk0dmhlcTB5MkVtTjNUU2RweWVXNi8rR0VUR0VSTkdpd3NaN1oreWRhdENOVGxpcXpwaTBWaXcyZmFEYkY1UmR5cUpDRFFyN2RHa29uYkUxcDVvUGtHYmR2Y2FkUHRVeS9hSW9KV0wxWm1HVG5OYS9leUVyeWZmRlZsMmdRU29iYW95RExRUmVlZHA4cTNUenBpWE80M3VYQmRiTzZ1Qkt3TUhmbXVoQ1JPMzB5ZzdQNmI4TjN0WDV6S0c5WnFyQ3JPWmlYYm10TDVKbVE0VzNaa21XbDdIcmEwNmJiN2FjS0tKQVIzNUU4cWdYc3o0TWc0SmkvVE13WWpxR1dwTXBwbnFCU2R3S21rckZWZENQRktHWUxWeHlQWXlYQU5yNTdURHJrMnV1eCtORjZPWDQ3a0RiVjRhZ3NWb3RuRVgydkZhUS9VOWl6Qy9RbXVuY0t5TVNOWXJadjhxdENSZWN5d2tORG9FWFFER1NKUmpRODdKWXFncDI2UVhTT0hycUw1QkhoRkdBK2RuaHQ4S3RHa0h2Y2ZKOVRvOFRjSEtnQXdiM1F2aGEyZlhkNGFDekVHSGd2aUU1c3MzTnVHckt0WUp1a1UxMWdZUmpBTjNUSlB1TXZGbzU3OGIzYUxoenp4RDVEQnFFSkloY1lqa0dzYlFjTUo1WjFmdkdvSEVRU2Q3RTY5WHd3bC9mMTE0Q1VUTXhOYktlZ2wvZjNYcmE4UGZWam9pM0crUEVZSWszc1JXamFmVlRyd1h6aFpEbDcvQ2QxdmpwbHlmY0RKaGdPY0s1S0RvSGVxT1dndGZaWHF5WWhSL1lNcERIZ2JMQ2tOL2c5blNDN3FxeGJSU2xVRjZZaUlYUjJ6RjVkZUdWNFZvcHlJY29tNVVyTmVHZE9TSnZZNXcxNTYxcS94b09ORVBZQlJ0SlFmenNTV3lUQ0xtU0Q0eGt3bnhBR0NlOGVkeU5hSnIxTnN0c3Foc09nL1Z1WVhsa0l3WlBSZldWamI4YlA0SFdIWmZZVDdCUXBIV2hqaDV4Yyt1OCt5MUJXdEZaSWJzN1hiWE01U3FnTHRLdC9HSnVWNGJVMkJMaEt3NDBsT0dJRVdFMlREWEJZdDFacDJ1YTR5OXBiVHpJUWJHZ3hHN0ZsaXVMZVNSa0xtWmptYU1Gd2JmcjB6Qm9kNHozdS93T2YrRC9kMnRjMnFLMWc2akY1a1g1NVJjaTlaL05KeHNXd05aYXBIcU9hdlRTbDVHemRaSWJuRk9iOFNuNDZIeVB1V2hVdHM0dk5kTjd6bXRCeVk2ZzBaUFVWWVZ3ME1YYzBkRUZrU3VFMmMxM1lEZW1uZWFmS1NWdXBSOTJqZjlhb0tSWUxxeE5xcVN2Y3FuK3c3TEJVWVhnOHhZMjFyVGlodExhRlZJbGlYUnNhZEFQUkt5cnVUK0lxQ2R1WVk0V1JPOWwxVzYwVXJqWTkxNGJEZUlOWWZvNmNlR0UyNXAxeXhGMURsbFU1Z3A2ZzJwWUJmS2lWcnFScGJvelhNZG1kTStsWGRQblVvUnNCK0t2R2VKc3pYcE5rVHZhdVJsMDVublpFN0J1dmFWVk16aWFIZlhNMFI1aGl0dktvdE9LOG45UG1VbHhTajJPNnRCV2JhQmJXSnQrSlBYL3FoTTJPbWtuVTY2R2pNa0NlSjFBcnZZa0tlTUpwWTRtK1dZbXRxUlovcFBDYkJhUUNaM0VoT203aEtnUExTdEdWVFRpRStQRGJmbWRCbzFOTWZHaUk2dnhZVWRJZFVsQ1ZtTENOYWNST0ZaQktXYzUrdUU2SDRPZW8rSkx5L1FlTlRTd0xHVkttKzY5ZWJZNnp2SWp0QjhMVkpUdVlTMUFEYUVRMFkxR28weWZMbDA0Slc5b3VkMFhwcXJUbk83MW5aMXp2UmJ2dVo3ODQ2bzdReUJJMGk2UnpLeXNLWmRscFdOTWdxc0xWL2VzZk1oMzdyK0IxNGpSUHRHN0xobU0rUmxFc2FUQlZSMlEzY2xIcTgrSGJ3MkZzaFdtOUExNWRnOWFlSW93a0pYTkYrYmRpRjdTekpwRzdUWElhcDJoQ3hWZ1NwK3EyMTVHajB2MjhPU3NTTTZ1OTJQMGZscEN0Sk9WN3EwcTIya0t6d2FxMlFJa29mMmpENkZxandZNTJpQi9tMW01MitqbTlPcDBKVjJiQjkyOFBsSmJFb1htR3N5MU1kV0l1azBDdUdiaE9IbTREZkVwdTBwbWV3VlBpdnZzK3gwaGVmTlVyaENObWhQWVBVaXp4azcvc2oyZUIyVm5RRm1yRVAyZGdIaTJLRU9tem5aR0VFR0lpT1FLYnMydGRsTzdjR1V6Vmt0eVR2VGgyaHJ0c1krSUNhaE5kbFpTZ1V6K0tTMnlOWDJUSHBta0k0ZTF5Z05RenBtYzFkK2Jiam96RGhDSlh0dGVQZ01HMlFvb2d6YUdYbm5adG9sa3RxaWFKd1h6cmtJOXNxdXlvTzN5NU56YnljeHFLQjRqWFJ4UW5WUVFsbUdrQXdRT3d5TkorcTVkZVJqN1pGdGdWR2RtSGZCeU4rVStTNk40bXVpekttS0IrZ2J5SitGU0RmYUQyMklUbkY1MjhiYWQxb0paZ1NhOWxlMjBrcVFudXk1MWZ4bmpVVk11cWQ1M0Frcjd3bmExMEgzT2JWVmh2czM1NVJQSVlWR3lXUTZxNjg0TzJ1Um80bzF2SjY3K3NBUWhrMTlLdTJzS1VhRkdnVHlRaE5rcnVGRWIwWnBTTm1hOEhxZVJqaG5HTUVtbE0ySitCTmRZbjk3Szh3SXJtWklIcGlaN2dWSHhlQmNEWEMyQ05CVlF1UkhHa0xGNjlVaUR5clhSVFRuMXRwU3RoRDkxSVVKMG9tNDQ3Z2s3WFc4am9EcVpmbXR1YVZBQkh1R3N6TXB5cEtoQ1k2RG1iTW5UbWR2YnZ0eksyZXJIMFJ0aUwxRjkwSVZJekZOKzJ0cDM5eEpxVzNKUThVUW9NTFMvYktyRDFpR2trNHpSZUYvYlhqWE1jMnJBa2JBSXRVTitmdGxiQmN4N3NCbjBMVk9zeGVrekNzcWpnTFRha1BrRDJ0R2FVS2VDWEdJZytjZFpxaFRsSlFVb1o5QnRjcVkwSzVpLzhqZlcyMlVYd2ZLRnFObFRJZVJCUjFLRzVBZlpDc2cvNThpWmsxWUJwdGQvYnNwZ241YW0rNEdYeXRLczZ4TGNaSWhGR1FNQ0ZtVk00TzBxTjdHQU1ITWE5a1p3TGtMMWNjM01sWGsyRzlwcGRFcXRhWEhuSnRqN05sMW5aNEwxYWprZXo3SGlvUE9VVjJzOGhBalVxQzdoSnhidUdLVDFZTjRmNVl6bERNQmJGN1BtakpzS2tvMlo2OE5vazh4dS83Y0VqY08waDJNUFpyUTl6cTRYd0pac3hFZWEyK2FmMVpQcVZaVWhZODdEWDZWLzUza3ZBNkkvMUlRUXlGbnJUa3RRVWM4a29VTlZMYml2L2RwQnRjSlh5ZnRMckpiMXRZUllwbksybjFvejRXUUVSa2RyU01nTjV1Nzh1OXFJZHRxTnpZRUNWajlDR01QdXVjSzZXdEQ2TzROWWVzQnl4MHdENmY3eUVleVJwbjUwSmxtK0pZSDhRLzNvcTVBdmxDQzdPNU9LOTcwNWsyaE4yK2QwMnUzUmFNNUtZVHFDQVhaMHBWRWEvUTMvYkc2ZmFWTWVtMk5NM2UxMFBLOW5kV1daMGFESUxneUtPY1VTZlYxVkYrb1V5bFUvZXJNOUFmSWY4emlEY3JndFlmMG9sczMrbzN5cnI4cmIvSjJ3bzNaVjJBUjY5RHM2d3V4NVFtejJHRGVmK25zKytoTVBrRGpObkhIQzdLeGNZYnNwUW5WWkJUbDFkclZaNTIydk5LbkRySzc1enJJdmVXcFFWb2xRTTYvSExzSXVoK1NpNW1CRVZ4WHlKOVFNaDBGVE9HcUtQR212M0Y2STU0M2ZLL2NtMHByVlVnOHExRmJXeUsvNlFuazNhWlV6bkdISCs1Y3I4NTF3cUtHMXR3UXEzTlYyY0phME4rbCswT29BZEtVcmd5OVF0VFJmSlVpVkFGUTFDVWQwRFhoM3FDWElmNDhUVkd5OW9idmJVeFI1cWhQb0FqSHRqbVZiME9zQnYrQk5RWmJHdERBS0VJNVFSckdxQkdaYnNEeGtZeXRhOWlzakZsVTM4RmhETkVKWHdjUTEyMnRPcTJrbFZWZURkOG0vTlg1a2NRVXZNRGNWZG1xcG9VUjlLT0REc09zWXY0TTZoVzFHY0htckVXNWRYMURQbmgyVGhNZi93REZjeDlpLzdsUmMxaFdMMDJzN0hzK1ptSXVRdHdFSkdYTTVQN1lFZlB2bDdJT2pHQmRWelFPaHVlN05aM3M2bjFwVjIrTm14MWtReUxmZkR6aE5vNmM2M1F2dnpZVzZYeWNrRnVrVDVCdGJLMFk5RTNqS09hMHE4Y1NPaU9tdzduK29UeFcxVFhFcXRzVFdtNWZhSmJlWHJ5NXFyUThhUzU3bXRMblZHVWdhR1BKbFY0MHR6OWVsS1J4M1pWZW5LMDYxMXhWbUt4cG5Cc2pybFZqaWExeVV6YWxYdUROREdVVHZXTk5DZnJYRUtPSE1Hc0s3MG9SVDJzNEp0TnBwRlV1dWM4UE9xUnBUSWg5M250UTVQWkdnNTlyMHk3MzV0Wm5wbDkrVktmVy9zMXZ6WTF4cENvTlhsVmFNN1VuTzQvbzMvU2ZOeVRud1REU2ZHOE9WU0Y4OWwxUFJ2OTJFdmc3L1gzMnZkSnkwdmYvSTlCak1iSkl6ZjJKODdNaDY1YWhsampwV2pHMmM5ZXp4T2Fxb0NwL1pxSHpIUEtnZkpZSGRma2NRMjlQOFJhR09Fa3MwVXMwcGNwYkw2SFQzZmVGL2tzdE9OaWp1ZTY3RVlObU44YTUxZ2FiYXlYVldYc05uVFVVcFEwWWZUZVVXYm1DL0EzRGx5R3VoR01PbWQ0bGFGNW5FU3pOWGQyMWdIMjZ1dXFXd0paQXZpUTZxMGhsRE04YjdXRmtpbHZ2WkRWTzBNZHhzaFBYMGlwY1pFK0NUemF0a3k1ZkhGTnZPTkVoV3dobENEbm9KRStaamplRzRORnhZdFRmVE1jZTU2M2RyREszMThEdmkvd2dWYWp1VExDN2taMlJzK05wTEFrcTR3eWx0ZFJHMkxiSXVzWXpWTUdPV0YxcG80enRYNWE3ZmZKN2lDc2FZbldOcTIvcmFCMGhGMnkwTlJxL291OTZadnpXdnRPU1IrTkcrYlhob2Z0YWFBNEFTWlBwMHNUclgyQUgwL2dHMW44bmtYb1lPV0Y4c1ZyMEx0UllKUE1qUmNVZHI1UjFSdUVjZmRwM0RNVWpqTExYdkR1SjUySFVlQmVqTmtNZTNOTWFaV2VZbm9sa0x5aXRDbVZRdi9WZHYwOUpWYTNZNWExR2ZXVWNJM1B2dGVrZ3BtY2llaGRWZ1B3TVhKdm1DN0NNb3JGeXFwSjRrQ1AxcjBQSXpKOFZrdE5wWDRlS2krWE4ybUU1UlhPTHp2bEM1RytjaTJ2RG1maWFXOXM1T3Q5eU5oQSs2N0x4WldlWG1DTHJQbmFnR25tU25nMG56enYwejY3K1FpdWEyWFVmTDdZTjlycVBuQytVSGVYTnJibk1NOXhyeGpHY2JCdXZ6YUVIU0M5Q2k5T1VRWFR3dTQrY0c1bmNvZk1Pc3prZGpxdHVCSXNVOGU4QUpUZXIxQlhsdVNHMmNNd0JjaGhsbW45dTJXSXJ3VG9ZOG5UdEFUZDViRGlSbzRwMWlBczAvQU8vMTJYbWUweHNIRWEvdldWblpycFgzbHhjRlpmSlEzNy9aNytwUVJYd2dGYldzWHF6dVczMDNMb0VyUGJvdlBDck8wUEJleTFmTVl5ckszdSt0VFlFaTlxL0IzNE43NEY5NmsvU1BLOVJNaE5MZkZvejYzdTRKa2cvdm1ianJNMDdUVHhuSTI2U2kydjBSK1d0dEtOMVVTMHV6WS9oZVRtRk1GeGdsd3dycGpoNTdEUzYzVXdIZFlyRzRLblRicXdyOHE3VFRtdXI5Z2V5UXZSQUpUQ0VhZ0RNMDJCdkgrOEo2SVlZaDA1bndjeS9FeDQ4dDdXeVIvVTFPdC9RbVptcmE4TCtOZGEvZ0tRQ3VTeGdidWs1SkNaK3JHOGVyV24zSGI3VSsrWHBkaDBTOGNDcTg5ZllxOTlOWkwrTHlFZkc2SjRqcGVLYmZtdHZ0YnU4V2hxaXNkNitsOStyazVzNUdiOUc3NjFWWWZGbnplVUU4c1FGdHQvQkdiN1czSHFDZFU3RzFrTmpFem0wMWt6bWZhTWtyN1NYMEZFNDF1NDdyUGJ1NW11V2ZpSXorQmtkNXBudUF0blE5VFQraFcwU1dtME5Qb1FxeUN0MTJvMk1IZmdSeUxhbkxDSjdVOXhHVm9NWGRFVXVkWnJEdDBubWMxQkdQSmI5YmQ1cFIydkRuemdEcU5PQitpTmdXelIzNSsxeXRpb2UyOGhXcUN0cEhDbnRWTGpsL3F5OEh0Ni81OVpKTFpZMXMwYzBsMUZkR2UwRjlabmdPWXlmc2N6WFo5RnFabVJMVlRlVXVSdjluc21MSUp2d25LMTUyQzNYbllpMUxBOGpWandOeDhmM1dFYjd3RmpJTUNjZ2Z3SDhLbGl2dzVpVlgxdmh1cXNjOGxaZEUvbklMRWxnajhxQzdPcklCNEc4R2M3TkhzZHkrQVBHSkhybWxKMStvN3lUUmpHTjhWN011ZUVPYmNpNTdTbXJncVpVRnFaWWpYQk9mb2FaK01HdWgvMFVtTGhiaHJWeHdXL1JnU2tWK1pLV3AvcXp0U0VrUjdrQ3RYRllWNmQ1RUo4bGpBUW01Q29nUitxcXlvQmRiMUpYMWZVd2FqRHl6MldXdlNEcnVIYkMzMTg5aW5BdHo2dzI3QXUwbDFLYkNIS0lUSzBrc3NPUlR1azN5dnYrcUx6cHVlSHZEU2VhRXZhbHczaHVvaDR4bWRVMnZYbUg3N21oZzFuS1NFeWM1TmZ6K3FXMjdjMmIzT3R1ZzlmTHJVT25qVkxDWThiNVd2bEQrUXpjV2ZURVNlUE9OczBqN2VvZHlLSG42aFVZWDVyV2VUUmg3ZmFOUlRPL3JzU21PcTRyemVxdGFKMWpYb2FlRGxnaEtNUFpBSHhNVTVDcG5nQ2RLRGUzNDU0THpFUVI2SkY4dmh2MnNEV3RPWlROdFNQbTQyVEVWMTlndmVNeGNZU3lZeWpWdmRXb3o5VXBadWRTZ2FWMjYvZW1LUW8veE9sMEJlbDVrSE1pTjFWZUV4eUt4RTUxTG1IYjlQTDFvWTNjZk93TmdmZG96aHpaZk1pR3NCdjF0ZWxMSVdaNW9QWG9tSUdNNW1SeHJXU1pkQ3RLbkRhdFUwUjUwbWxLNUI4ekZTMmd0cnMwWkdxaEFKRUJVSlE2YmJUSEtneXJYcmJ2Z0IwQVlrSlZYM1ByS1FvZnc1b0t1dHZZMVVrdEJyemJFbXBsNXMxVnAwbVJ1ck9hVzlCaE85TGROWlZJN1ZYVFFYYTFKWHErcmtpcERaT3hIa0JYVG81UkxzMVB3eG1KbWM3d0hLSTVBNWtnZXFpK00wcWtrOG9uOFJzY3QvQUlTaTh3SCtUV2R0ckhUTFZFZnh5cys4eWdTQ2dpUmlBM1UrWkJ0RDlpUUJPejJ2MVZZOTZoY25HbHZpWHl3dVNpWVk5TUphZ2xSZktQMzJkV3llZWxOdGsrd25FTEhDTWtkU3NIYzd0cXpQdkExR09JM29MV2tzRTZOM2tlbjErVkFQSjRQbjZmbzMwZFVFWWthYWNwNEY4emRlWnA3Zm1xTVI5Z0djRE1rbWxkSUowbmpKSkxkWXRVcDNreXlocXNscm9lMnBPcFRPUDZEazZiMXB3KzZXOUI2NjBLczFTL3lBVjZhVHlWT2ZxZUZqMUhkOGY1YW5PWGR0TWkrUVNrQnFTbk1hdjFOa1k2VWgxUlJtYk9HWEJOYW12dTBlOHBhd0NwUWFRK0dITXZ2TzlNQWFNLzBiR1QrQzQ5cjBxYTBnME5vYm9zcWxQRTl0QUVHTm1RZnV5STJreFh0ckJmQ2FwSmhhQVF3SFBlOHd4aWl5QmZNaVoyTXFkUE5jL2NSRWozcHJVVStCMFlkZ3NxcTYwRTlreFBTZnRNMWlDRERhaXZtMm1DdkR1WDZ6eTh0aWNnUFQ1SURLVzFVaFVMMmNvNDlqdEtmWUExWnZKR2RxZTBOdG95OFhkeERUOWw2T2c1NGF0U1VBc0RLSllDanhtUmdObEJUVkwybE5hd1A5a2Q2UUJXZjVINHJEZkQ1dzA3VHFoSlJHY0N4L1RwSE1aaVo1bWRWNW5TZFRGM1lHZHk0L1JldVpvbFhFOUhPdEhOUVBiUXUwM0VyYWVDcnBCWFpvbmEvQzJ1WUZ4UTIyR1V1anROa1Roa0M2ZDExN0RQQ0lOSXVqL3czR0dad0QwSncybDNoM3dUR2VjdzJOcldSOUtYdFZJWmxJWTN0OTQxQXF4ektPUEltMXR6T3c2T01XTTd1b1ZqbjdrNjJWd2RDckgxbWxsY0IvbDIwMkZKVStSVjU2VzI2dSticXo3cHNlaVB5cnZlSFBlRXBYa1dpQzFiSHZSaHVIWFBETHJJWjQ5MVlNQUNPNHY2NW9DZ2JBaGJyN0dRZDZaZjNiMjVkWG5TdEVhRHliRFZhV3IxMFdUYkdyNkVETnRMemYyK2YvcjZmZjkwWUFkMndKN1JsUXBhdHdqNW9NQ091S3N3TEMyMXgwN1RXMkc3YWtCUmNSODdqWTc3NXVaWWZpSkRBVDJOWkpmNnpVM01ncmlCM0lhT3puVzhoaVc5dlNDNjJsdDFXZ214U1RDejRkbDZBN0F4cXJUK21kcU4yLzVlNVNSMzRhZ0JNQzJ1WVg4SjFkZ0NPeDNXcXBMV3o1SGFMN3M5SzlzNWxKZHFvaytITHd4RERVRWpTN3QwcWMrS2Y0dDhMV3FEc242K0w2ZjF2NkRmWE9xdmdteUNQMDFpQmRBYmlYVUNNREFLdlhuZFlSbHZTTzBzclNHTWtENnhSL1dWVWNyWVdZaC9zYkpITEx0T2phNVZESFhRUk1iZlhNeUUxdlBwZWRqdFRsNUM1TjloR2FCN2VCdzZIYmZ6bUxLSzR2VkpESFJtUVd5K1JzLzBsYkZENTNvbHdIWHowdHlDcm12c242aGkvamtZcVFtZlhjQTBMMklFTjhNZmVuUS9uK2tEaGYxcDhoSkJvQytUM2s3dWxlMm1OV2Q2NE5oZTZIejk0cmpKd3JhanJKKzIrTG9HL2ErSDhwZktGK0dMYjJXLzZPenFiTlVLVkljU0xpSmt6UzBNUWVKSjlUSGxwRjJUWGNCV2lVRlh5ay92ME1YZFNTOVlDMUhMTyt0a01RSTVRZmZBV2w0R2oxa3BTUjdTdVBoVVNhTy9rZUZiYklmblhsTjRxRm95U3QzZ2RVU3JabXRjYno1WjlaM3c5UlV5bjhEakN4Z2pocHRxd3hTakwrc3lxb1dkL1lLWDlyV280WWFPS2l3ZTA2cXkxRHZoYWVVMFdGS3ZqWDVGZXFseHI0UHdkMno5RDBLOCt4ZVBuV1krWW9JdDBlUFRCRmwybXRKQ0o4ZUNaQWJST0hGVlNRUEd0SlAyQ3hpVEdTQ3JKZTNZcE4xUjZQcUU4QjlBZEFkN0tzVHp3WllsbHM0UzVhc2kxWGhUeW8yTW4vTTJ4dTh1RTl5WElyNXg1dlRJWi9TbTZyWTNWMWRTRGMxN0pGcTBZelN0K2d0Ly94QU9pZ0NXeXN6MEowVEQwaTRuanV2TkI2ditycnpxNFc3V3RKcGZhcFQ1M3J6emVubEhQWDdoUG5mVXBSMjFnUjBGTWR4WExJWFJHNG16VURRRFhaQXJPRDhNZmw1QzQ3QTVkRDUwNWpkVCt4YnZvdmxnQTd1b1JYdU5vTTlpZzN5MHprdC8xUitiYUVmbnZ0ZUVhb3lrcS9QU1hQWG5OVFMycHVsWE41MzIwQ09JMUd1ekpHOUk3VHVNWTNRVU0rcnNrY1Rqbk5rTWR2ZnJPRVRyWE03WTNSTFBIc0VaQ1FoeUJrWGNKemxnZkxaQnZFU2lkbmVuNGN6ZnhpclhieXpRdUdUU284UEVLUGszMHJmRW5LODV2emF4NXMyVnRDdHZZSHpJajNzSm5YR3A3aG5lMEFPR3RDbWc2aVNHTU9RTkdndG1rRmJRdlBaZjFCM1dUaEthNzUwOTRrdWE0Z1Y2ZTVCWVlwV0R1SEUrMXhCcFFtV05XZmxnSGVIZWFjMVN1NC9YYTkrcEVLMFgyWTFEdHZuNjNteFkrMDViUS81RWt2V25tT1MzWksyYjhOdTlodndqeUY5aHphWk1XdEs0VWFkOUVyU1dqNkI3ODJ1dExSTzIyZ3JFV2ExMmR6WlNLcEhWWlB6NmdJNnpoc2RKWW5OdlZFYkVBKzFGc1NvQ3llbEJyTWxhbTM3c0RKdU9ReEdmVEVGRy9qVFhjMEZiQ3RJWWErVThrbFdWUmJGNjdEUkpuWHdiV0VlWTNvQ2orR0xLMXFjMnltVHNmYngyemRsZ01BNmRBOGFBdFRYdlFsNnZqMnRDa0Q4Q3ZqN0U1aFIrMHhGYkcxM080dGpnWTg0N1JIYVAwZDZ3ekpyNy9naGtWa1Q3V2xjcXFhOXpXRWRLRUY4aXlMc0E2b3M4TXdCUlNBckpuampzOXlKN3ZWbDZIWVFmM3hlQVE2RHh0SGVkMWdLL3V1SEhVRlJ3TEd5bjBkNGQwb3ZaR3c5V0V2S0wzUExxK0FSU1YvMER4SlJUSnczL2VkS2NQV25VVlI5TEIrNXNsemxua21ueE5JSkUvejd1bkRqRFN3c1M3aUF2RE4yL3JvbUUwNW50UHNPNGlYbU1YN1FEaTdyc0RydzRrbVZJT3dCbEVYbS9MWWl5VXJ1TjJDWklFOHcwWVFJNzR1Mmx0azlQUDR5ZmR4ejFaREpTZVErWkYvcWpjcWszYjc0MjNQRDNZWUM4elp4TS9mNmF4MWk3dFRwNWJnajhCbm5DcE11U3RhK0UzcnkyNnJtVjQ1M2lscmNONTljcmRzUzNUOXZyd280d2tXNUJFZ3V6L0VaMHM0RnNnZUNrTFVCaVVybGRzU0JuRStSNzhCbXoyQjFJWGhxM2VNVTlHMHROa1RlNGp3clhvQks5djlDbjBzWVFXNVdPMklwMXhZSVlMa2p6dUw5bHp5MFplejR6VTJ5NXVyS05JRWZaVUIzdzVRV29MMTNwaW9ac3RqMDVXL24rdkFsbjYwU3NMb2FpdHpjREdYdFRpeTZ2NFJnVXhBZzY0aGJwOTNtR1BBbS9yL1JmQnRpTGc3NEs0b201MkFZOFpPelNsZktaNThEOXl0SkwvNE9la1VQVzhEL3RHYW1yL3FqUU15cjE1clhYYTNibjUzbDFjWGZpODZwTzhPRm5nSndDV0lJVnRqc3YwUUczSGxsR0JKMkdZc0FWVitZZVYwNWdhZVQ2TDJxVWVnV056R3ZCWFVRbk9Kdmg3SnNJZlh6MlVTeDcrSzBwek5ZV2lRMll1N3FYVm1VMW5IbC9YTnYwaWFYN0lla2YvQm5TYjY3NmpWUFMzeXlXL2lLSXUwK2haNFcrL3MzZTFaemVvdUpaSE1BSTRXZTNNZ1BseDVURElWSnczV29yREs5R1ZQUzBuMzV2K21oT0p4Z1NiUlE2NkRNQ0Zmak5KbWxtQW90SC9wdjdEd3NSZW5adGxiWDdTZ0FaZ21HZGhrcnFvclQ1NnJGYmdIODc5dVVTdlA4RUcwZHl0bEdxUHdZSExvUDcxUXlEWkJsNm5yMTgwQzNmaldNM0RCNFNMMzR3N1dYeTRPdUI3dGpMaDdYdXJlejR5MDczR1NrdEtHWXZUcERSUnE2RG9NV2xRdWVqd3NvMktlWnRNZ0gwMnJrM01sZHhFdm9QYnVBczdUZzJQVDJPSDM1NHVuUEZtMXdpWjJUSzhETklGZnlkTkVyaEI5UHlidHBpU01DVFJ4VGVBczlBQ2dEOEVtSjRnd0g1bklKa0gzeWVHNitYcGVnb3NWTUswa3lmMHpnSVNycGZMZDMyd3lDMkV6SkpaaGo4Y0oyckZ4cmpIYWNMMC9WTXNib0haSUZnOGNoMnUrZDloMnBPVjZkZGY0cjVDRkcxUm5uVFU0YWU1ZERYOXdKdEtuRnZibjJGdGlDNkhqcDdYa0puS0xZOFE2bXVKb0xNb2M5eDF0OGEwMDdlQS83VFI4b25pYThka3JPeHVtS3E5V2dYSWl1TXZxcHM5ekR0QmQySzlyVHV2YmwxSmp0V2U0WDdreW9NS3VEV1ZQSUFOYUEwcStCL0Q1SFhINk1sZzJVZFhWeWVJTFRzS0Z3bVZ5L1FVbGNxNkFYWThOQ2Z1bkR2bVBUQzloaGFXai8ycXd0TkJyQm91c2N5NG5tbWRkUVNwVTJ1blAxbHNlbS8xQjQ3TC8xTi8yV3h5ZG9mNVlYNWtpdlJyL1JmYXRzM3Q3YnZ2OVFxeUtCSTcwWHYwZWhtYlhTbG9XZVdCbzl2TDdWeXY5RjViUVRwL2VoOU1tSzZScFdEK1prN203ZVhtbnZrdUxJQ1lHK1RwZjdnaDliSysyc3YvSlU3cEhNY1c2WDE4VW1tS0tzYkRlTExXdzl3VElKRjFndU1HZm9lTzJLWE4wdWVhNVNjMDd0blp1dVd2WXovVWR2R2djcmFKbzB3cDllcXZZbTJVeFhlNjAySWh3cDZjZWdaTUxzRWpWaVdQS3Y0dDJzenNHYW1qK3g0ZmdDZHhQczB6bk4ycTdJY0lHZEYzUTBTZXhubzNvTm4vTU5XN09xOTg1Tjd4VDdTODYwdzQ3am1KUHRIbm1IbmxoWUk1NEY0NTlpS3phWXRDaTA5Q01KRVQ5d3crTWRwc2hRenJPaTZXMTBGQi9KaXplTDlrTWVwZ3Y2aGpUb2RobTl1YloxaWFXMU9YNHNNRDdRUCt1UGFUaG9QU0w5VlBZZHZCZnNKTXcwQ1BqcUxXMUZ3ejcxYTZzNUkveUs4YThjNUl5aUpHVDJzck9nQm0vSjlQWkowMzQ0ajNiUS9kOXdKUTRSVFN6VjZEVTIzU09xMC9zWVVzRDh5VFNib043eld2dTAzaldBNFp5ekJ6WGxMTUVydi93YWhzSkNoNUJ5c2tWSzJYa0lNN25TTk1DQ0ZpK1RnKzlMKzRXNC9CYUhRWi92akZ1Z1Y4b1pONE5paGZEeG9OMk9Vcm1zVzhIUEYvck1yZG41RlBsZmpvNnZ4emxXd2RiSUtsdjFEWDNtZlJtVGhTcHljTmQ5T2xxNzVhVDMrekVCek5ydFIvS2taVG1pRytscGptSjBucE84SmJPNENUSnVUTTd5eGpWa1lMaDcwd1BySHpQYXQ4dmw2Z2w4UTdsMlFZdmoxNG14L3p2STFXaUR5d3AxdkI4bUR2a3JDMk5ROU4zQWVESHVtcjkzd2h0U1poZVlGc0ZhOWxaYW16RTdnUG9sZFR4ZGJncTVVMlRUYVhoVmFzVFlacmkyaG5NTWNNVXZEbWVwN3NUNk5jRWJFc3lMREg2NHRYdklnVzlIdTQ0QjRqWTBOMWRlRzZNMTFqR1hHNE1Gd2FXUnZJbFlYMUNkT0ErNjBIK3FseVFiVDBmMDgwL2V3UGtpZjJTekRNOWx1QkMvRkhraWZ5MG92Wm1DY2ZDamlXTHhtZi9uazEwRko3bGx4L28rYUdlbDAvbmNsRTkrVHFBUG9XWEdMdHM1S245WTMyblJZUDRDaVpVWDBRa2FjMmQ1TWd2TGpxdWlkV2NPL1kyUVZubW1rMmNJaG84elkrQS8rQjF5VGw5RHA3MnVidDNFdHl5SXF3NElzWXBObUViY05KMHJ2UmU5eExpeVEzby9lNTB3bThmUXFuL1dGT3J0NlgxTTByaU4yWTFXcExFbGxHR0IyWk41Wm5mSjl2UDZWeE9Iakd5Q1hOVTBueWd5RFJIY0RlL2tRMnliOFpXK1R2L0MydURxdXpXSk1lSm05UFVEakVlV3lSUlBiQkV0a0FvelpYcXdwbGplY3dvR0M3WUo1VG5uOTRYbmFVK3NWUjdicC9uRE52L0dDNFVhaXNWSmRXTXJXeXlvV09GendQQTZQQzY0SHFkNmk3K2VvZ2J5M2xlN2F6a0N4R1hyeTdsaFRKTjcwUGM2ZWdJQjRkbnVRMDNla2JHWmcrcDZnSzF0UEUrUVdOa0pUWUVpcWI2L2RiSityVTdRNloyYnYxaHFGejFxRVA3QVdJVnVXOXhRamZCWWQvRWxGQjZtamkyeStkaDV3azVJSFNDK0QvZEhuNElRNlRCWFljR2I2bG1lMURtMUY5RTY0VXJuek11RDZtOFBQNi9zM3QxYnVuOTNwdDBaaFA2T3RoZFA0NmRaWVorZm5uUlVqbjVVaGY3UEtFRVlpYmdpWi85V3RzNCtIdWROcCtRa1ZNNStWTWY4bGxUSEhxLzdPMHBqUEZQNGZYQUp6dkZLZlMvT25iSksvellseFM5L0dlL3Mxc3FsN2I2NzZNeWQ5OXJDbTB3ckJwbWF3dnQ2d3ZTNFk4TTZKeU1LazhzcktVVDFrc2FMaG92cWQ5VHpURkttb3JZM01rOHpDcXExaGE4SVBXRHFJRklJUXRqQTFEQUV5MWpsTEUzUjVRcGQySEs2V3B2M1htVkNLSXp6V0ZHbW5UWWV2aHRCaGVQd0FBWVUzZmNsakc3MDZqWHFzSzN4MDZQN0QvZHFRajk0WWczeXUybERreENoMUsyOXViZGR2OGpudUlkT1h0NVlpN3o5K1A4clptT2ExL3g3dnd6VEx2VzhuLzVNVjQ2LzMvLzZmZi85eWp6MlArK2YvYzUrMUxhTy9ZbnU1ZGswYi9TZmp5alBmZkRIc1JQK3lXQm4yTXJBVE8vN2lobC8xVGZ6Z2hicjFZT2llSHBqMjhpRmVHWUdkeFBmUDkvaS9Icml5VUMxVjdVcFpmM295Zmp4YTNDLzBDL1BKZUhyaWJJUFh1YXIrelREdmY3bnRVY2t1UWlzZGVNYjl2Ly85NzE5ZzVjR1ZxdVhISCtsZXFIdEpHTmpKSmx3dVl2enUvdGNmN3RMZTZKNTMvM3dmNmNIRGp3MitqYThIN2c4N1R1NmY3eDhlSG40TC90ZmRDSlRWOHgzcDZuNElIRGZZZmsxc1AvTDB4STdaL20veUFycHBocXNBcDQxK0MvVElsZTFsN0liQjg5MmEveTFZdUlIMWZEZkNsOWJ3cGI4RnZwM29TQ0tmZnd2dTdqemRzTDBZL3ZQdWJtWjcvcGQ0OXRXYzZjdmtZQmdZd0FSZnAwZlJ3YVNoS1RuNHdhbEwzU0JPMEx4ZWVmbWF2dEJ2OS95WHB5LzhiL2Vucm96MFpmSVEvcmp5dnJqLzMzb3dkczkzYmR2elQxMW5objRVQm5hUVBOOWwwNDh1UHZIS3FYQWNmYWV2a3RCSFM1QmZrSEc0c0lQbnUyUzVzbjhMYmhjRXZNMThQVG9yQXcwYUJ2aGMvajl1K1IrT3J5aVdoSFQ2ZGM4TE53OXg0RWFSblR3dzZoQzlMMGpFL2ZVeTRhM2l4RjR1UTg4dUVJV2xvWnRmOUZVeUM1ZnVIcDd4WmZHRVp6Z1RFbnlIWWVqWm4ySnlXa3dLMzJLNThtdzhRUTkzZXVTS3kzQVYwUWxEbi8xMlQ0ZVUycVRNdCtrbWpyUFA3TUNLUWpkSW1JK0MwTEtaUDZQUVl2NktiWE5wNTY2bThrYytXOXRMZzMybzU4Wko5dGRHVDh6WjZmR2JZYmkwM0lDVm5OT3Y0OWw2L0ZPZWVuN1dtT2s0ZklwakorKzlLemxaejkvNEhlOUNyQUkzY0M3T0g1R3RueitHODI5dXIrMVUzQTZmYVM1dFBiRVoyZnY1TC9zMVR2UmtkZUw1cThnaXovOVpEd1RNbko4L3haWWJtK0hhWHU0dWppUGQ0SjU3Nng1bEJubjc2V0M0Z1lYbTZjT0hSQjNmNlBPc3VQV3NDRDE3YVAvQUZnQVJvVE9Uank0ck9LQlAzRHhlR1hQYlRPaFpWT3dDb0JjNE9jR00zZkxiZmY3NysvZFlxQit3U0Q1TmtUL1RZZm1ZVFhQSi9QakFFVjFrTGwwd2hnNnNxZi9Va2ZwM05pYit1V2Y4dTQxaCtqMGs0NCtIU3hTWEIxV1RWd3o2MG9UOU5LTTlzLzcrWkx2eXIycGQ1VSs3ajFsWW42YlZYK0hzZTYrTjlsOW1uSkVEaWlZdXJna2tmd3JsZnlTRW1JSFducGZVT0xKTm1QMWtGOW1wajlENWpqNkt3bVZDbCthQlBHK1dKRkZNMTV1cU8zVGg4MTI1WEtJZkpQclNzWlB2OERGemJXeDd0cG1FeStmLy9ES2VtTVozaS93N1JKME4wT0podmlkbGhRVHg1cHdWRmRxYkUxZm9hWUZuNE45Lzd0VS9JOXgvc0VON29XN1Z5UktoVDkyb3BmdXV0L3NlZXE2NWU3NGJ1WUhqMmFORU54Zk0xNjZOQklmczVNNzNkZm5jL3M1djZ5Y3UvWHNaSnFFWmVzOTM0OGIzb3EyZS9UaW5MazZxaWF0dUdQOWRORWVXNkM5UUhub1V4WXdWOTVKZSszbGUvcFgyNElFYytzam83N0ZMY3ROazN6emRONzN3MG80ODE5VGo1enNlLzdsMjBjcTAzVGdKbDd1ZTY3dko4eDBQdTl0M2c2R3RXN3VSYllhQkZUL2Z3YWRVaXVuTHNuS0kvdWZsWC94NmVieDVtdDR4VWJmSTV1M3llWXVNM3Joc2QzZXB0S0gvV1VGTVZUc3h6bHJ1TW5NODB6NWdkaDJvOWoyOE1mNmY2K3NPSE94TDIzSGpKUFdHditaMVdQYmo1elhNMXY4WHozU2g4dmhzVjh6eWsxQzJ2NVcrVlg2WVB3UzlWQzNadk1tVlRLRmFNaDZyM3lwVi9VZnBtMTQxOVVmZHNJd3FiL0FsNjl1VFhpMVorcE5oc2JOT1J2Tjk1WG4wTFRzL3BERDV2clJqTzBqWUN6MzNoMjN1VE0rbUJ4bjlYN1MwUjBrWVBlYy92YnV6dDh3MFp2OHpROS9YQTZ2Z200ZTdyeHZkVFI3aTJTcXh3azNBWHFFdm5mamdKdzkzWDdGazAza3JubTUwNGNORHRESThONTVSOC9IWC8rdi8rZjcyOGkrcDFtK092dGNhemYvMzZ6bkZsTDhWcUNBM0RCNWM2OWZUb1IvMkYyekJoNmZIOGE5RkMzNzhzL1M5NERjbkxrcWpxUjk1cGJYdXVaYWV1SUZEWFl0Zm41OFlRK0hjbFVESTRmNXdUVDJ4Zi8yNmlwZGZ2ZERVdmEvTXh6SDhjZFhORnZidTVFMFc5bzY5UjJ5YnE2V2I3QnE0K2Y1UUxFMDkwZzNYY3hQWGpvK0V6Vm9XQ096RFhhM1hPL3hRdDZ5Q0M2WG0rRi8xanZUeXIxRnpLSGNhemZ3VnkxVlFpeWV4dlVUNm5jOS9CMFVqMzVmdTJ2VnN4MjdHcHU2QlQwSnJpSmo5RTZ5UEpCN3JGYnJPaCtPQ3VzWFdNdlFMTnRjUDEvWXNHaE1wL1BLN25zeWUwMVBtQzNyVStjZURtUDNoWXdDTG9IZ2d2WmQvZlI4MmUyKzFsOEpSUE44eGt1UzVCdnJIZDMyMEF1YVhPTXdydDdVZDJISDhmUmthUndydWgrNTZxNlU5bmkzdGVCWjYxdk5kSlg4Qk1wTkZPemw2clFqZTV1dk0xcjFrdGovNkZreHNuaE1xNWNPdlluTm1veGRzajhmZjg5KzVnWnU0dXZkaWUzcG1MZkRjZ1VhMmwyNW9uZnc2WHBtbUhjZk0reHpJYU9MNmRyaEtzaHV3WHk5dDNYSnZtS3ZTUDNpdVdBL3ZVSGhaVHk4N0c0azE4ZjNBOWN2TzJnS1A3ZmkrOFlVYkg2bjJxKzU4RUhVNk5laGJicjRPdlpWdjk4TlZjSEtlMkdQbThMNVFrSWwxeHFsRDQvQW5TSHpmQW05M3JHK3pQTVNCVEMvdDMxZDJuQnlmSW1hMFFoTEQrVWZqc3Yxd3VYdStxM0o5bDM0WGhKWTlvdTRMODRTOFdSckd6M2VlRzZ6U2t6N094WmVsMHpaNllpOTlraTBTbDdwcGY4OExkb2xMaFFsUGVwSEJlbXF1Y1VMMjRQM3hod1VqWW1PZnQ3dnBiUEtQT09yLzYwNng3Nnd3K0wrVHUzZ1ZvVTJWK1lvV3ZXY0QvZUJ1WnlmNGVYYzZXM0J4cHdkVy9oT1NvN2x6WTFoZmQybGIrWWpBVWI2U0NROTBtRWQrQmdoK2FvRGcwT05uM0tDN1lyUDVTaEhMV09TSWxNZGZqKzNQVk9BTSswZTR0TytBRFJHSlNUSnpZMnhWL0hKbnpteHpjWmZNN0ZSeW1FMThSK1lYM1FSVThmUFhyL2tKc0VJei9ycTBmOWhMT3pEdHJ6b2NNQS82S3BrRjhQLzdyL1kyc1lQWU5UeWI0YjdMSmlMKytyK2lwUTNQanQzRWpnOGlXZlFYeEwwOGthZVUwM2RYOEt2akl2TVZ2djVDNlB4VHlLOFg4aU81T3hVTVk3UW1sVkNTYWNSWEUybTF2OERsWDhpUDh3OW13bUxVbjIvK3ZuTFh1cGQ2ODFsZEVOYjh4NG42cy9VYStIMnB1QjMrYU0yWVAyRmtMM1BwRm5wUlk5aXNqWnY1enliZlgzS2ZIUmNGRk5iREVIT1R2bXRMZHowU3czRXR1L25qQjZScjc2UXdJQ2Q5T3NkRGUrM2FtNk8zeU43QTlGdzdTUENtZUQ0NGpKa3huYy9vc2xkZG15dk1tY1BaSW54ZDgxK1psNy8vNVI0azVQNzVmNmZOYkNmRTZmNlhlN1RsNzUvdjg3bnErMS91MFZNT2YzaGVaYzVENHdHcVBMNFc5RERkNTlxaTN0SFBkR0ZibkFzUkYrWDNmcnVudWduMjNmM3pYYlMwSDBDVmVONHY2TDlYa2JQVUxmdVhLSXlUN0F2MEIvbW02RVlQbHUzWmlmMFFnZFNoMitMVDRnSGJUa3NiQnZFTC9BWCtnMjBoNCtKVGJYNUliZDcvY285TGtlNmYvL2M5czQ1SWpMT1ZSSDh4YTBuL3BOLyt6eS8zbmg0bi8xcXVBdWhaVFBSbFlsdi8wcEc4Q3B4UWZ1QzVCNTRmYytWbmdYdm0rUzhjei9GOG1YdDgwdTUvdVVlalF3dC83dm95LzFTcVZNcVA2UHBvcHNkb1g0Nm9ETnovKzVkN0xEdi9BdGx4YlhpWkl1a2grenVUbi92L1lkcFdMKzUweHREOTREWS9iRXc2dmNjLzFxUjBjZXQvYnUrL3VWVjBxV0Q1bkdGN3VwSXdzL0hKZzB6V3pvMnZydFA4YzlUUDQrUFQ0Mk9GSzEycGZuaE9lQ3cvUG5MOFgwZjlFRC83NTJraHRqenpweW1qNG9yTlQ1MzBqOWRKZjF5ekR5dEpINmtzUGZRZXpua2tmNG9TNDRXbnloTlg1U3JYS3JGdlplRmJxVnA5K3BPVjJFOHdubjZTMWZRZWMrblRVL28wcGQ3ZDlzUzBYNTAxalhEL3g1K2lWUVJPcUFpbEowNjRVcXNJcFhMbFcrbXhXdm9MYUpXZll4UDlYR1BvQTFiUXA2cjV0SkIrYXF2TlA4WTBFaDZGUitGYmlYdThVb21WdUJKZktWV3J3cCtpeEI1U2RVOTBXVGMwUHFqRDBIL2h1NDdnMExtZ3lBejRVYWEwdXFGeGk3SjZ5UG9WL3lDZDlhbVovanFhS1d2Y3VGQkhmYTNNZk5aYy83eWE2OEtzNkVIcDlmbmE2dHl5M0ZCWGpZYVVxMTExN09CNUxYQkNpU3R6MzJpUmRhVmNNc3ZjRDR1cmxxcVBaY09zNmthRnExb2wrMXVWLzFHdFBsV3JqeVZPNEgvd2R0VXVtMVh6bS9INGplTU1UakIrR0lMd3pYaG5rWFZobWZQeHErTHkyVmtZSjc5ZVRpcitjdm1TTDRlMXcxL2l0WG44d0ZScEh0VWFIMStMblFqNHlhOW5EK1ZyaTEzL3BHclRDMVhHcDh0NWYraGVuTjVwYVlNdFFKZi9MV2poeFBYVlZWN0hzL2J1ZXJMOCsyUS8vQkVUNDAzZ09LYndFSXFacFRBWWhtRnlXRFRIRkRxakgxMXBROTFrSlhHUFg2cUM4Q1JVK1N1ajROeVhieVdoVXFwV0h2K2NLRGkyYkg2MmtRVC9wVEJGU24rY2taU0NPSHpZUnZyMDMvNHhWbExFd205OEdrbC9FU01wdHlwL2F4dnA2RTJ4RlVMZjRWb3o1SFk3Qng3ODRLOFN5REgvbWp2MTMyME5zYmNtSlc1RU1mNmFsYmg5R2s1L1U4UHBKd2FZU21XaFhLNld2bDBYWUNwL2VlSy9DWlVTWC9sRG91VC84OHM5VWJUM3p6d0R4SDVvRjkzLysvOFBBQUQvL3plN0ZjSkZlZ1FB
  kind: Secret
  metadata:
    creationTimestamp: "2024-10-11T04:20:06Z"
    labels:
      modifiedAt: "1728620414"
      name: ingress-nginx
      owner: helm
      status: superseded
      version: "1"
    name: sh.helm.release.v1.ingress-nginx.v1
    namespace: ingress-nginx
    resourceVersion: "343034"
    uid: bd3f5f72-4d21-46a0-b79b-da33ce740395
  type: helm.sh/release.v1
- apiVersion: v1
  data:
    release: 
  kind: Secret
  metadata:
    creationTimestamp: "2024-10-11T05:19:05Z"
    labels:
      modifiedAt: "1728620414"
      name: ingress-nginx
      owner: helm
      status: deployed
      version: "2"
    name: sh.helm.release.v1.ingress-nginx.v2
    namespace: ingress-nginx
    resourceVersion: "343035"
    uid: dba32942-03f3-4b44-b6cb-2b2e25365036
  type: helm.sh/release.v1
- apiVersion: v1
  data:
    release: 
  kind: Secret
  metadata:
    creationTimestamp: "2024-10-11T04:20:03Z"
    labels:
      modifiedAt: "1728620403"
      name: ai-runtime-security
      owner: helm
      status: superseded
      version: "1"
    name: sh.helm.release.v1.ai-runtime-security.v1
    namespace: kube-system
    resourceVersion: "342924"
    uid: 9693c00d-b465-428d-b52d-ccfbb1ec1cd0
  type: helm.sh/release.v1
- apiVersion: v1
  data:
    release: 
  kind: Secret
  metadata:
    creationTimestamp: "2024-10-11T05:19:02Z"
    labels:
      modifiedAt: "1728620403"
      name: ai-runtime-security
      owner: helm
      status: deployed
      version: "2"
    name: sh.helm.release.v1.ai-runtime-security.v2
    namespace: kube-system
    resourceVersion: "342925"
    uid: 0cf667b4-a028-49b9-99b6-8bba2dfeda20
  type: helm.sh/release.v1
kind: List
metadata:
  resourceVersion: ""
apiVersion: v1
items:
- apiVersion: networking.k8s.io/v1
  kind: Ingress
  metadata:
    annotations:
      meta.helm.sh/release-name: ai-app
      meta.helm.sh/release-namespace: default
      nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
      nginx.ingress.kubernetes.io/server-snippets: |
        location /api/ws {
          proxy_set_header Upgrade $http_upgrade;
          proxy_http_version 1.1;
          proxy_set_header X-Forwarded-Host $http_host;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_set_header X-Forwarded-For $remote_addr;
          proxy_set_header Host $host;
          proxy_set_header Connection "upgrade";
          proxy_cache_bypass $http_upgrade;
        }
    creationTimestamp: "2024-10-11T04:20:23Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
    name: ai-ingress
    namespace: ai-app
    resourceVersion: "333000"
    uid: 45469ae5-1e42-4447-a1dc-a99d2d43ab72
  spec:
    ingressClassName: nginx
    rules:
    - http:
        paths:
        - backend:
            service:
              name: agent-service
              port:
                number: 80
          path: /api/
          pathType: Prefix
        - backend:
            service:
              name: ui-service
              port:
                number: 80
          path: /
          pathType: Prefix
  status:
    loadBalancer:
      ingress:
      - hostname: a1b395e76e8ab433c838b2faae084ff2-2d8550f4cddebd62.elb.us-east-1.amazonaws.com
kind: List
metadata:
  resourceVersion: ""
apiVersion: v1
items: []
kind: List
metadata:
  resourceVersion: ""
apiVersion: v1
items:
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      controller-gen.kubebuilder.io/version: v0.9.0
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{"controller-gen.kubebuilder.io/version":"v0.9.0"},"creationTimestamp":null,"name":"cninodes.vpcresources.k8s.aws"},"spec":{"group":"vpcresources.k8s.aws","names":{"kind":"CNINode","listKind":"CNINodeList","plural":"cninodes","shortNames":["cnd"],"singular":"cninode"},"scope":"Cluster","versions":[{"additionalPrinterColumns":[{"description":"The features delegated to VPC resource controller","jsonPath":".spec.features","name":"Features","type":"string"}],"name":"v1alpha1","schema":{"openAPIV3Schema":{"properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"description":"Important: Run \"make\" to regenerate code after modifying this file CNINodeSpec defines the desired state of CNINode","properties":{"features":{"items":{"description":"Feature is a type of feature being supported by VPC resource controller and other AWS Services","properties":{"name":{"description":"FeatureName is a type of feature name supported by AWS VPC CNI. It can be Security Group for Pods, custom networking, or others","type":"string"},"value":{"type":"string"}},"type":"object"},"type":"array"},"tags":{"additionalProperties":{"type":"string"},"description":"Additional tag key/value added to all network interfaces provisioned by the vpc-resource-controller and VPC-CNI","type":"object"}},"type":"object"},"status":{"description":"CNINodeStatus defines the managed VPC resources.","type":"object"}},"type":"object"}},"served":true,"storage":true,"subresources":{}}]}}
    creationTimestamp: "2024-10-09T19:31:03Z"
    generation: 1
    name: cninodes.vpcresources.k8s.aws
    resourceVersion: "1602"
    uid: e6d49486-7b17-4b1b-ae5d-02c081769672
  spec:
    conversion:
      strategy: None
    group: vpcresources.k8s.aws
    names:
      kind: CNINode
      listKind: CNINodeList
      plural: cninodes
      shortNames:
      - cnd
      singular: cninode
    scope: Cluster
    versions:
    - additionalPrinterColumns:
      - description: The features delegated to VPC resource controller
        jsonPath: .spec.features
        name: Features
        type: string
      name: v1alpha1
      schema:
        openAPIV3Schema:
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: 'Important: Run "make" to regenerate code after modifying
                this file CNINodeSpec defines the desired state of CNINode'
              properties:
                features:
                  items:
                    description: Feature is a type of feature being supported by VPC
                      resource controller and other AWS Services
                    properties:
                      name:
                        description: FeatureName is a type of feature name supported
                          by AWS VPC CNI. It can be Security Group for Pods, custom
                          networking, or others
                        type: string
                      value:
                        type: string
                    type: object
                  type: array
                tags:
                  additionalProperties:
                    type: string
                  description: Additional tag key/value added to all network interfaces
                    provisioned by the vpc-resource-controller and VPC-CNI
                  type: object
              type: object
            status:
              description: CNINodeStatus defines the managed VPC resources.
              type: object
          type: object
      served: true
      storage: true
      subresources: {}
  status:
    acceptedNames:
      kind: CNINode
      listKind: CNINodeList
      plural: cninodes
      shortNames:
      - cnd
      singular: cninode
    conditions:
    - lastTransitionTime: "2024-10-09T19:31:03Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2024-10-09T19:31:03Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1alpha1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    creationTimestamp: "2024-10-09T19:32:37Z"
    generation: 1
    name: eniconfigs.crd.k8s.amazonaws.com
    resourceVersion: "1472"
    uid: b141d3a0-2d2f-4e61-8c07-d68f19be3837
  spec:
    conversion:
      strategy: None
    group: crd.k8s.amazonaws.com
    names:
      kind: ENIConfig
      listKind: ENIConfigList
      plural: eniconfigs
      singular: eniconfig
    scope: Cluster
    versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: ENIConfig is the Schema for the eniconfigs API
          properties:
            apiVersion:
              description: |-
                APIVersion defines the versioned schema of this representation of an object.
                Servers should convert recognized schemas to the latest internal value, and
                may reject unrecognized values.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
              type: string
            kind:
              description: |-
                Kind is a string value representing the REST resource this object represents.
                Servers may infer this from the endpoint the client submits requests to.
                Cannot be updated.
                In CamelCase.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
              type: string
            metadata:
              type: object
            spec:
              description: ENIConfigSpec defines the desired state of ENIConfig
              properties:
                securityGroups:
                  items:
                    type: string
                  type: array
                subnet:
                  type: string
              required:
              - subnet
              type: object
            status:
              description: ENIConfigStatus defines the observed state of ENIConfig
              type: object
          type: object
          x-kubernetes-preserve-unknown-fields: true
      served: true
      storage: true
  status:
    acceptedNames:
      kind: ENIConfig
      listKind: ENIConfigList
      plural: eniconfigs
      singular: eniconfig
    conditions:
    - lastTransitionTime: "2024-10-09T19:32:37Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2024-10-09T19:32:37Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1alpha1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      controller-gen.kubebuilder.io/version: v0.11.3
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{"controller-gen.kubebuilder.io/version":"v0.11.3"},"creationTimestamp":null,"labels":{"app.kubernetes.io/name":"amazon-network-policy-controller-k8s"},"name":"policyendpoints.networking.k8s.aws"},"spec":{"group":"networking.k8s.aws","names":{"kind":"PolicyEndpoint","listKind":"PolicyEndpointList","plural":"policyendpoints","singular":"policyendpoint"},"scope":"Namespaced","versions":[{"name":"v1alpha1","schema":{"openAPIV3Schema":{"description":"PolicyEndpoint is the Schema for the policyendpoints API","properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"description":"PolicyEndpointSpec defines the desired state of PolicyEndpoint","properties":{"egress":{"description":"Egress is the list of egress rules containing resolved network addresses","items":{"description":"EndpointInfo defines the network endpoint information for the policy ingress/egress","properties":{"cidr":{"description":"CIDR is the network address(s) of the endpoint","type":"string"},"except":{"description":"Except is the exceptions to the CIDR ranges mentioned above.","items":{"type":"string"},"type":"array"},"ports":{"description":"Ports is the list of ports","items":{"description":"Port contains information about the transport port/protocol","properties":{"endPort":{"description":"Endport specifies the port range port to endPort port must be defined and an integer, endPort \u003e port","format":"int32","type":"integer"},"port":{"description":"Port specifies the numerical port for the protocol. If empty applies to all ports","format":"int32","type":"integer"},"protocol":{"default":"TCP","description":"Protocol specifies the transport protocol, default TCP","type":"string"}},"type":"object"},"type":"array"}},"required":["cidr"],"type":"object"},"type":"array"},"ingress":{"description":"Ingress is the list of ingress rules containing resolved network addresses","items":{"description":"EndpointInfo defines the network endpoint information for the policy ingress/egress","properties":{"cidr":{"description":"CIDR is the network address(s) of the endpoint","type":"string"},"except":{"description":"Except is the exceptions to the CIDR ranges mentioned above.","items":{"type":"string"},"type":"array"},"ports":{"description":"Ports is the list of ports","items":{"description":"Port contains information about the transport port/protocol","properties":{"endPort":{"description":"Endport specifies the port range port to endPort port must be defined and an integer, endPort \u003e port","format":"int32","type":"integer"},"port":{"description":"Port specifies the numerical port for the protocol. If empty applies to all ports","format":"int32","type":"integer"},"protocol":{"default":"TCP","description":"Protocol specifies the transport protocol, default TCP","type":"string"}},"type":"object"},"type":"array"}},"required":["cidr"],"type":"object"},"type":"array"},"podIsolation":{"description":"PodIsolation specifies whether the pod needs to be isolated for a particular traffic direction Ingress or Egress, or both. If default isolation is not specified, and there are no ingress/egress rules, then the pod is not isolated from the point of view of this policy. This follows the NetworkPolicy spec.PolicyTypes.","items":{"description":"PolicyType string describes the NetworkPolicy type This type is beta-level in 1.8","type":"string"},"type":"array"},"podSelector":{"description":"PodSelector is the podSelector from the policy resource","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object","x-kubernetes-map-type":"atomic"},"podSelectorEndpoints":{"description":"PodSelectorEndpoints contains information about the pods matching the podSelector","items":{"description":"PodEndpoint defines the summary information for the pods","properties":{"hostIP":{"description":"HostIP is the IP address of the host the pod is currently running on","type":"string"},"name":{"description":"Name is the pod name","type":"string"},"namespace":{"description":"Namespace is the pod namespace","type":"string"},"podIP":{"description":"PodIP is the IP address of the pod","type":"string"}},"required":["hostIP","name","namespace","podIP"],"type":"object"},"type":"array"},"policyRef":{"description":"PolicyRef is a reference to the Kubernetes NetworkPolicy resource.","properties":{"name":{"description":"Name is the name of the Policy","type":"string"},"namespace":{"description":"Namespace is the namespace of the Policy","type":"string"}},"required":["name","namespace"],"type":"object"}},"required":["policyRef"],"type":"object"},"status":{"description":"PolicyEndpointStatus defines the observed state of PolicyEndpoint","type":"object"}},"type":"object"}},"served":true,"storage":true,"subresources":{"status":{}}}]}}
    creationTimestamp: "2024-10-09T19:31:03Z"
    generation: 1
    labels:
      app.kubernetes.io/name: amazon-network-policy-controller-k8s
    name: policyendpoints.networking.k8s.aws
    resourceVersion: "1606"
    uid: b8c149a6-6a23-4562-b3d3-abdd21edd385
  spec:
    conversion:
      strategy: None
    group: networking.k8s.aws
    names:
      kind: PolicyEndpoint
      listKind: PolicyEndpointList
      plural: policyendpoints
      singular: policyendpoint
    scope: Namespaced
    versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: PolicyEndpoint is the Schema for the policyendpoints API
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: PolicyEndpointSpec defines the desired state of PolicyEndpoint
              properties:
                egress:
                  description: Egress is the list of egress rules containing resolved
                    network addresses
                  items:
                    description: EndpointInfo defines the network endpoint information
                      for the policy ingress/egress
                    properties:
                      cidr:
                        description: CIDR is the network address(s) of the endpoint
                        type: string
                      except:
                        description: Except is the exceptions to the CIDR ranges mentioned
                          above.
                        items:
                          type: string
                        type: array
                      ports:
                        description: Ports is the list of ports
                        items:
                          description: Port contains information about the transport
                            port/protocol
                          properties:
                            endPort:
                              description: Endport specifies the port range port to
                                endPort port must be defined and an integer, endPort
                                > port
                              format: int32
                              type: integer
                            port:
                              description: Port specifies the numerical port for the
                                protocol. If empty applies to all ports
                              format: int32
                              type: integer
                            protocol:
                              default: TCP
                              description: Protocol specifies the transport protocol,
                                default TCP
                              type: string
                          type: object
                        type: array
                    required:
                    - cidr
                    type: object
                  type: array
                ingress:
                  description: Ingress is the list of ingress rules containing resolved
                    network addresses
                  items:
                    description: EndpointInfo defines the network endpoint information
                      for the policy ingress/egress
                    properties:
                      cidr:
                        description: CIDR is the network address(s) of the endpoint
                        type: string
                      except:
                        description: Except is the exceptions to the CIDR ranges mentioned
                          above.
                        items:
                          type: string
                        type: array
                      ports:
                        description: Ports is the list of ports
                        items:
                          description: Port contains information about the transport
                            port/protocol
                          properties:
                            endPort:
                              description: Endport specifies the port range port to
                                endPort port must be defined and an integer, endPort
                                > port
                              format: int32
                              type: integer
                            port:
                              description: Port specifies the numerical port for the
                                protocol. If empty applies to all ports
                              format: int32
                              type: integer
                            protocol:
                              default: TCP
                              description: Protocol specifies the transport protocol,
                                default TCP
                              type: string
                          type: object
                        type: array
                    required:
                    - cidr
                    type: object
                  type: array
                podIsolation:
                  description: PodIsolation specifies whether the pod needs to be
                    isolated for a particular traffic direction Ingress or Egress,
                    or both. If default isolation is not specified, and there are
                    no ingress/egress rules, then the pod is not isolated from the
                    point of view of this policy. This follows the NetworkPolicy spec.PolicyTypes.
                  items:
                    description: PolicyType string describes the NetworkPolicy type
                      This type is beta-level in 1.8
                    type: string
                  type: array
                podSelector:
                  description: PodSelector is the podSelector from the policy resource
                  properties:
                    matchExpressions:
                      description: matchExpressions is a list of label selector requirements.
                        The requirements are ANDed.
                      items:
                        description: A label selector requirement is a selector that
                          contains values, a key, and an operator that relates the
                          key and values.
                        properties:
                          key:
                            description: key is the label key that the selector applies
                              to.
                            type: string
                          operator:
                            description: operator represents a key's relationship
                              to a set of values. Valid operators are In, NotIn, Exists
                              and DoesNotExist.
                            type: string
                          values:
                            description: values is an array of string values. If the
                              operator is In or NotIn, the values array must be non-empty.
                              If the operator is Exists or DoesNotExist, the values
                              array must be empty. This array is replaced during a
                              strategic merge patch.
                            items:
                              type: string
                            type: array
                        required:
                        - key
                        - operator
                        type: object
                      type: array
                    matchLabels:
                      additionalProperties:
                        type: string
                      description: matchLabels is a map of {key,value} pairs. A single
                        {key,value} in the matchLabels map is equivalent to an element
                        of matchExpressions, whose key field is "key", the operator
                        is "In", and the values array contains only "value". The requirements
                        are ANDed.
                      type: object
                  type: object
                  x-kubernetes-map-type: atomic
                podSelectorEndpoints:
                  description: PodSelectorEndpoints contains information about the
                    pods matching the podSelector
                  items:
                    description: PodEndpoint defines the summary information for the
                      pods
                    properties:
                      hostIP:
                        description: HostIP is the IP address of the host the pod
                          is currently running on
                        type: string
                      name:
                        description: Name is the pod name
                        type: string
                      namespace:
                        description: Namespace is the pod namespace
                        type: string
                      podIP:
                        description: PodIP is the IP address of the pod
                        type: string
                    required:
                    - hostIP
                    - name
                    - namespace
                    - podIP
                    type: object
                  type: array
                policyRef:
                  description: PolicyRef is a reference to the Kubernetes NetworkPolicy
                    resource.
                  properties:
                    name:
                      description: Name is the name of the Policy
                      type: string
                    namespace:
                      description: Namespace is the namespace of the Policy
                      type: string
                  required:
                  - name
                  - namespace
                  type: object
              required:
              - policyRef
              type: object
            status:
              description: PolicyEndpointStatus defines the observed state of PolicyEndpoint
              type: object
          type: object
      served: true
      storage: true
      subresources:
        status: {}
  status:
    acceptedNames:
      kind: PolicyEndpoint
      listKind: PolicyEndpointList
      plural: policyendpoints
      singular: policyendpoint
    conditions:
    - lastTransitionTime: "2024-10-09T19:31:03Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2024-10-09T19:31:03Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1alpha1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      controller-gen.kubebuilder.io/version: v0.9.0
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{"controller-gen.kubebuilder.io/version":"v0.9.0"},"name":"securitygrouppolicies.vpcresources.k8s.aws"},"spec":{"group":"vpcresources.k8s.aws","names":{"kind":"SecurityGroupPolicy","listKind":"SecurityGroupPolicyList","plural":"securitygrouppolicies","shortNames":["sgp"],"singular":"securitygrouppolicy"},"scope":"Namespaced","versions":[{"additionalPrinterColumns":[{"description":"The security group IDs to apply to the elastic network interface of pods that match this policy","jsonPath":".spec.securityGroups.groupIds","name":"Security-Group-Ids","type":"string"}],"name":"v1beta1","schema":{"openAPIV3Schema":{"description":"Custom Resource Definition for applying security groups to pods","properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"description":"SecurityGroupPolicySpec defines the desired state of SecurityGroupPolicy","properties":{"podSelector":{"description":"A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"},"securityGroups":{"description":"GroupIds contains the list of security groups that will be applied to the network interface of the pod matching the criteria.","properties":{"groupIds":{"description":"Groups is the list of EC2 Security Groups Ids that need to be applied to the ENI of a Pod.","items":{"type":"string"},"maxItems":5,"minItems":1,"type":"array"}},"type":"object"},"serviceAccountSelector":{"description":"A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.","properties":{"matchExpressions":{"description":"matchExpressions is a list of label selector requirements. The requirements are ANDed.","items":{"description":"A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.","properties":{"key":{"description":"key is the label key that the selector applies to.","type":"string"},"operator":{"description":"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.","type":"string"},"values":{"description":"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","items":{"type":"string"},"type":"array"}},"required":["key","operator"],"type":"object"},"type":"array"},"matchLabels":{"additionalProperties":{"type":"string"},"description":"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","type":"object"}},"type":"object"}},"type":"object"}},"type":"object"}},"served":true,"storage":true,"subresources":{}}]}}
    creationTimestamp: "2024-10-09T19:31:03Z"
    generation: 1
    name: securitygrouppolicies.vpcresources.k8s.aws
    resourceVersion: "1601"
    uid: 175dbc6a-6cf1-45b1-b30a-146171a6183e
  spec:
    conversion:
      strategy: None
    group: vpcresources.k8s.aws
    names:
      kind: SecurityGroupPolicy
      listKind: SecurityGroupPolicyList
      plural: securitygrouppolicies
      shortNames:
      - sgp
      singular: securitygrouppolicy
    scope: Namespaced
    versions:
    - additionalPrinterColumns:
      - description: The security group IDs to apply to the elastic network interface
          of pods that match this policy
        jsonPath: .spec.securityGroups.groupIds
        name: Security-Group-Ids
        type: string
      name: v1beta1
      schema:
        openAPIV3Schema:
          description: Custom Resource Definition for applying security groups to
            pods
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: SecurityGroupPolicySpec defines the desired state of SecurityGroupPolicy
              properties:
                podSelector:
                  description: A label selector is a label query over a set of resources.
                    The result of matchLabels and matchExpressions are ANDed. An empty
                    label selector matches all objects. A null label selector matches
                    no objects.
                  properties:
                    matchExpressions:
                      description: matchExpressions is a list of label selector requirements.
                        The requirements are ANDed.
                      items:
                        description: A label selector requirement is a selector that
                          contains values, a key, and an operator that relates the
                          key and values.
                        properties:
                          key:
                            description: key is the label key that the selector applies
                              to.
                            type: string
                          operator:
                            description: operator represents a key's relationship
                              to a set of values. Valid operators are In, NotIn, Exists
                              and DoesNotExist.
                            type: string
                          values:
                            description: values is an array of string values. If the
                              operator is In or NotIn, the values array must be non-empty.
                              If the operator is Exists or DoesNotExist, the values
                              array must be empty. This array is replaced during a
                              strategic merge patch.
                            items:
                              type: string
                            type: array
                        required:
                        - key
                        - operator
                        type: object
                      type: array
                    matchLabels:
                      additionalProperties:
                        type: string
                      description: matchLabels is a map of {key,value} pairs. A single
                        {key,value} in the matchLabels map is equivalent to an element
                        of matchExpressions, whose key field is "key", the operator
                        is "In", and the values array contains only "value". The requirements
                        are ANDed.
                      type: object
                  type: object
                securityGroups:
                  description: GroupIds contains the list of security groups that
                    will be applied to the network interface of the pod matching the
                    criteria.
                  properties:
                    groupIds:
                      description: Groups is the list of EC2 Security Groups Ids that
                        need to be applied to the ENI of a Pod.
                      items:
                        type: string
                      maxItems: 5
                      minItems: 1
                      type: array
                  type: object
                serviceAccountSelector:
                  description: A label selector is a label query over a set of resources.
                    The result of matchLabels and matchExpressions are ANDed. An empty
                    label selector matches all objects. A null label selector matches
                    no objects.
                  properties:
                    matchExpressions:
                      description: matchExpressions is a list of label selector requirements.
                        The requirements are ANDed.
                      items:
                        description: A label selector requirement is a selector that
                          contains values, a key, and an operator that relates the
                          key and values.
                        properties:
                          key:
                            description: key is the label key that the selector applies
                              to.
                            type: string
                          operator:
                            description: operator represents a key's relationship
                              to a set of values. Valid operators are In, NotIn, Exists
                              and DoesNotExist.
                            type: string
                          values:
                            description: values is an array of string values. If the
                              operator is In or NotIn, the values array must be non-empty.
                              If the operator is Exists or DoesNotExist, the values
                              array must be empty. This array is replaced during a
                              strategic merge patch.
                            items:
                              type: string
                            type: array
                        required:
                        - key
                        - operator
                        type: object
                      type: array
                    matchLabels:
                      additionalProperties:
                        type: string
                      description: matchLabels is a map of {key,value} pairs. A single
                        {key,value} in the matchLabels map is equivalent to an element
                        of matchExpressions, whose key field is "key", the operator
                        is "In", and the values array contains only "value". The requirements
                        are ANDed.
                      type: object
                  type: object
              type: object
          type: object
      served: true
      storage: true
      subresources: {}
  status:
    acceptedNames:
      kind: SecurityGroupPolicy
      listKind: SecurityGroupPolicyList
      plural: securitygrouppolicies
      shortNames:
      - sgp
      singular: securitygrouppolicy
    conditions:
    - lastTransitionTime: "2024-10-09T19:31:03Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2024-10-09T19:31:03Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1beta1
kind: List
metadata:
  resourceVersion: ""
apiVersion: v1
items:
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "2"
    creationTimestamp: "2024-10-09T19:32:37Z"
    generation: 2
    labels:
      app.kubernetes.io/instance: aws-vpc-cni
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: aws-node
      app.kubernetes.io/version: v1.18.3
      helm.sh/chart: aws-vpc-cni-1.18.3
      k8s-app: aws-node
    name: aws-node
    namespace: kube-system
    resourceVersion: "1565"
    uid: 080eb1f3-b8af-448e-95f8-bd5bc7679957
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: aws-node
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: aws-vpc-cni
          app.kubernetes.io/name: aws-node
          k8s-app: aws-node
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
                  - arm64
                - key: eks.amazonaws.com/compute-type
                  operator: NotIn
                  values:
                  - fargate
        containers:
        - env:
          - name: ADDITIONAL_ENI_TAGS
            value: '{}'
          - name: ANNOTATE_POD_IP
            value: "false"
          - name: AWS_VPC_CNI_NODE_PORT_SUPPORT
            value: "true"
          - name: AWS_VPC_ENI_MTU
            value: "9001"
          - name: AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG
            value: "false"
          - name: AWS_VPC_K8S_CNI_EXTERNALSNAT
            value: "false"
          - name: AWS_VPC_K8S_CNI_LOGLEVEL
            value: DEBUG
          - name: AWS_VPC_K8S_CNI_LOG_FILE
            value: /host/var/log/aws-routed-eni/ipamd.log
          - name: AWS_VPC_K8S_CNI_RANDOMIZESNAT
            value: prng
          - name: AWS_VPC_K8S_CNI_VETHPREFIX
            value: eni
          - name: AWS_VPC_K8S_PLUGIN_LOG_FILE
            value: /var/log/aws-routed-eni/plugin.log
          - name: AWS_VPC_K8S_PLUGIN_LOG_LEVEL
            value: DEBUG
          - name: CLUSTER_ENDPOINT
            value: https://260A3F90DADA104761D41ED5654BD337.gr7.us-east-1.eks.amazonaws.com
          - name: CLUSTER_NAME
            value: n6oy2vvr-K8s
          - name: DISABLE_INTROSPECTION
            value: "false"
          - name: DISABLE_METRICS
            value: "false"
          - name: DISABLE_NETWORK_RESOURCE_PROVISIONING
            value: "false"
          - name: ENABLE_IPv4
            value: "true"
          - name: ENABLE_IPv6
            value: "false"
          - name: ENABLE_POD_ENI
            value: "false"
          - name: ENABLE_PREFIX_DELEGATION
            value: "false"
          - name: ENABLE_SUBNET_DISCOVERY
            value: "true"
          - name: NETWORK_POLICY_ENFORCING_MODE
            value: standard
          - name: VPC_CNI_VERSION
            value: v1.18.3
          - name: VPC_ID
            value: vpc-0eeb81c2d824cec68
          - name: WARM_ENI_TARGET
            value: "1"
          - name: WARM_PREFIX_TARGET
            value: "1"
          - name: MY_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon-k8s-cni:v1.18.3-eksbuild.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /app/grpc-health-probe
              - -addr=:50051
              - -connect-timeout=5s
              - -rpc-timeout=5s
            failureThreshold: 3
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: aws-node
          ports:
          - containerPort: 61678
            name: metrics
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /app/grpc-health-probe
              - -addr=:50051
              - -connect-timeout=5s
              - -rpc-timeout=5s
            failureThreshold: 3
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            requests:
              cpu: 25m
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
              - NET_RAW
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /host/opt/cni/bin
            name: cni-bin-dir
          - mountPath: /host/etc/cni/net.d
            name: cni-net-dir
          - mountPath: /host/var/log/aws-routed-eni
            name: log-dir
          - mountPath: /var/run/aws-node
            name: run-dir
          - mountPath: /run/xtables.lock
            name: xtables-lock
        - args:
          - --enable-ipv6=false
          - --enable-network-policy=false
          - --enable-cloudwatch-logs=false
          - --enable-policy-event-logs=false
          - --log-file=/var/log/aws-routed-eni/network-policy-agent.log
          - --metrics-bind-addr=:8162
          - --health-probe-bind-addr=:8163
          - --conntrack-cache-cleanup-period=300
          env:
          - name: MY_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.2-eksbuild.2
          imagePullPolicy: IfNotPresent
          name: aws-eks-nodeagent
          resources:
            requests:
              cpu: 25m
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /host/opt/cni/bin
            name: cni-bin-dir
          - mountPath: /sys/fs/bpf
            name: bpf-pin-path
          - mountPath: /var/log/aws-routed-eni
            name: log-dir
          - mountPath: /var/run/aws-node
            name: run-dir
        dnsPolicy: ClusterFirst
        hostNetwork: true
        initContainers:
        - env:
          - name: DISABLE_TCP_EARLY_DEMUX
            value: "false"
          - name: ENABLE_IPv6
            value: "false"
          image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon-k8s-cni-init:v1.18.3-eksbuild.2
          imagePullPolicy: IfNotPresent
          name: aws-vpc-cni-init
          resources:
            requests:
              cpu: 25m
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /host/opt/cni/bin
            name: cni-bin-dir
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: aws-node
        serviceAccountName: aws-node
        terminationGracePeriodSeconds: 10
        tolerations:
        - operator: Exists
        volumes:
        - hostPath:
            path: /sys/fs/bpf
            type: ""
          name: bpf-pin-path
        - hostPath:
            path: /opt/cni/bin
            type: ""
          name: cni-bin-dir
        - hostPath:
            path: /etc/cni/net.d
            type: ""
          name: cni-net-dir
        - hostPath:
            path: /var/log/aws-routed-eni
            type: DirectoryOrCreate
          name: log-dir
        - hostPath:
            path: /var/run/aws-node
            type: DirectoryOrCreate
          name: run-dir
        - hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
          name: xtables-lock
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 10%
      type: RollingUpdate
  status:
    currentNumberScheduled: 2
    desiredNumberScheduled: 2
    numberAvailable: 2
    numberMisscheduled: 0
    numberReady: 2
    observedGeneration: 2
    updatedNumberScheduled: 2
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
    creationTimestamp: "2024-10-09T19:37:11Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: eks-pod-identity-agent
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: eks-pod-identity-agent
      app.kubernetes.io/version: 0.1.15
      helm.sh/chart: eks-pod-identity-agent-1.3.2
    name: eks-pod-identity-agent
    namespace: kube-system
    resourceVersion: "1528"
    uid: 419ac4ab-b5e9-4023-9ec7-6448c34cfcdf
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: eks-pod-identity-agent
        app.kubernetes.io/name: eks-pod-identity-agent
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: eks-pod-identity-agent
          app.kubernetes.io/name: eks-pod-identity-agent
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
                  - arm64
                - key: eks.amazonaws.com/compute-type
                  operator: NotIn
                  values:
                  - fargate
        containers:
        - args:
          - --port
          - "80"
          - --cluster-name
          - n6oy2vvr-K8s
          - --probe-port
          - "2703"
          command:
          - /go-runner
          - /eks-pod-identity-agent
          - server
          env:
          - name: AWS_REGION
            value: us-east-1
          image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              host: localhost
              path: /healthz
              port: probes-port
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: eks-pod-identity-agent
          ports:
          - containerPort: 80
            name: proxy
            protocol: TCP
          - containerPort: 2703
            name: probes-port
            protocol: TCP
          readinessProbe:
            failureThreshold: 30
            httpGet:
              host: localhost
              path: /readyz
              port: probes-port
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          resources: {}
          securityContext:
            capabilities:
              add:
              - CAP_NET_BIND_SERVICE
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        hostNetwork: true
        initContainers:
        - command:
          - /go-runner
          - /eks-pod-identity-agent
          - initialize
          image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
          imagePullPolicy: Always
          name: eks-pod-identity-agent-init
          resources: {}
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        tolerations:
        - operator: Exists
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 10%
      type: RollingUpdate
  status:
    currentNumberScheduled: 2
    desiredNumberScheduled: 2
    numberAvailable: 2
    numberMisscheduled: 0
    numberReady: 2
    observedGeneration: 1
    updatedNumberScheduled: 2
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
    creationTimestamp: "2024-10-09T19:32:36Z"
    generation: 1
    labels:
      eks.amazonaws.com/component: kube-proxy
      k8s-app: kube-proxy
    name: kube-proxy
    namespace: kube-system
    resourceVersion: "1326"
    uid: 4cb736d1-682e-4a49-96fe-a5f8e4dac948
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: kube-proxy
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kube-proxy
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
                  - arm64
                - key: eks.amazonaws.com/compute-type
                  operator: NotIn
                  values:
                  - fargate
        containers:
        - command:
          - kube-proxy
          - --v=2
          - --config=/var/lib/kube-proxy-config/config
          - --hostname-override=$(NODE_NAME)
          env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/kube-proxy:v1.31.0-minimal-eksbuild.2
          imagePullPolicy: IfNotPresent
          name: kube-proxy
          resources:
            requests:
              cpu: 100m
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/log
            name: varlog
          - mountPath: /run/xtables.lock
            name: xtables-lock
          - mountPath: /lib/modules
            name: lib-modules
            readOnly: true
          - mountPath: /var/lib/kube-proxy/
            name: kubeconfig
          - mountPath: /var/lib/kube-proxy-config/
            name: config
        dnsPolicy: ClusterFirst
        hostNetwork: true
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kube-proxy
        serviceAccountName: kube-proxy
        terminationGracePeriodSeconds: 30
        tolerations:
        - operator: Exists
        volumes:
        - hostPath:
            path: /var/log
            type: ""
          name: varlog
        - hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
          name: xtables-lock
        - hostPath:
            path: /lib/modules
            type: ""
          name: lib-modules
        - configMap:
            defaultMode: 420
            name: kube-proxy
          name: kubeconfig
        - configMap:
            defaultMode: 420
            name: kube-proxy-config
          name: config
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 10%
      type: RollingUpdate
  status:
    currentNumberScheduled: 2
    desiredNumberScheduled: 2
    numberAvailable: 2
    numberMisscheduled: 0
    numberReady: 2
    observedGeneration: 1
    updatedNumberScheduled: 2
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
      meta.helm.sh/release-name: ai-runtime-security
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2024-10-11T04:20:03Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
      k8s-app: pan-cni
    name: pan-cni
    namespace: kube-system
    resourceVersion: "332655"
    uid: 5aeb0b4e-e9e6-4a37-94ca-2b64e39c1ee1
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: pan-cni
    template:
      metadata:
        annotations:
          paloaltonetworks.com/app: pan-cni
          scheduler.alpha.kubernetes.io/critical-pod: ""
        creationTimestamp: null
        labels:
          k8s-app: pan-cni
      spec:
        containers:
        - command:
          - /install-pan-cni.sh
          - main
          env:
          - name: CNI_NETWORK_CONFIG
            valueFrom:
              configMapKeyRef:
                key: cni_network_config
                name: pan-cni-config
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          image: gcr.io/pan-cn-series/airs/pan-cni:4.0.0
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /install-pan-cni.sh
                - cleanup
          name: install-pan-cni
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /host/opt/cni/bin
            name: cni-bin-dir
          - mountPath: /host/etc/cni/net.d
            name: cni-net-dir
          - mountPath: /host/appinfo
            name: appinfo
        dnsPolicy: ClusterFirst
        hostNetwork: true
        nodeSelector:
          beta.kubernetes.io/os: linux
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: pan-cni-sa
        serviceAccountName: pan-cni-sa
        terminationGracePeriodSeconds: 5
        tolerations:
        - effect: NoSchedule
          operator: Exists
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          operator: Exists
        volumes:
        - hostPath:
            path: /opt/cni/bin
            type: ""
          name: cni-bin-dir
        - hostPath:
            path: /etc/cni/net.d
            type: ""
          name: cni-net-dir
        - hostPath:
            path: /var/log/pan-appinfo
            type: DirectoryOrCreate
          name: appinfo
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 2
    desiredNumberScheduled: 2
    numberAvailable: 2
    numberMisscheduled: 0
    numberReady: 2
    observedGeneration: 1
    updatedNumberScheduled: 2
kind: List
metadata:
  resourceVersion: ""
10-11-2024 04:20:04.279899 UTC DEBUG: Passed CNI_CONF_NAME=
10-11-2024 04:20:04.281546 UTC DEBUG: Using CNI config template from CNI_NETWORK_CONFIG environment variable.
10-11-2024 04:20:04.465536 UTC DEBUG: Removing existing binaries
10-11-2024 04:20:04.532043 UTC DEBUG: Wrote PAN CNI binaries to /host/opt/cni/bin
10-11-2024 04:20:04.533474 UTC DEBUG: /host/secondary-bin-dir is non-writeable, skipping
10-11-2024 04:20:04.544734 UTC DEBUG: PAN CNI config: {  "name": "pan-cni",  "type": "pan-cni",  "log_level": "debug",  "appinfo_dir": "/var/log/pan-appinfo",  "mode": "service",  "cloud": "eks",  "dpservicename": "pan-ngfw-svc",  "dpservicenamespace": "kube-system",  "traffic_object_id": "1",  "interfaces": [    "eth0"  ],  "interfacesip": [    ""  ],  "interfacesmac": [    ""  ],  "firewall": [    "pan-fw"  ],  "override_mtu": "",  "kubernetes": {    "kubeconfig": "/etc/cni/net.d/ZZZ-pan-cni-kubeconfig",    "cni_bin_dir": "/opt/cni/bin",    "exclude_namespaces": [],    "security_namespaces": [      "kube-system"    ]  }}
10-11-2024 04:20:04.548717 UTC DEBUG: CNI running in FW Service mode. Bypassfirewall can be enabled on application pods
10-11-2024 04:20:04.687965 UTC DEBUG: Created CNI config 10-aws.conflist
10-11-2024 04:20:04.690251 UTC DEBUG: Done configuring CNI.  Sleep=true, Ready delay=30 seconds
10-11-2024 04:20:04.691632 UTC DEBUG: Monitoring "pan-cni" plugin in CNI conflist (/host/etc/cni/net.d/10-aws.conflist)
10-11-2024 04:20:04.279334 UTC DEBUG: Passed CNI_CONF_NAME=
10-11-2024 04:20:04.281055 UTC DEBUG: Using CNI config template from CNI_NETWORK_CONFIG environment variable.
10-11-2024 04:20:04.392590 UTC DEBUG: Removing existing binaries
10-11-2024 04:20:04.456034 UTC DEBUG: Wrote PAN CNI binaries to /host/opt/cni/bin
10-11-2024 04:20:04.457554 UTC DEBUG: /host/secondary-bin-dir is non-writeable, skipping
10-11-2024 04:20:04.469605 UTC DEBUG: PAN CNI config: {  "name": "pan-cni",  "type": "pan-cni",  "log_level": "debug",  "appinfo_dir": "/var/log/pan-appinfo",  "mode": "service",  "cloud": "eks",  "dpservicename": "pan-ngfw-svc",  "dpservicenamespace": "kube-system",  "traffic_object_id": "1",  "interfaces": [    "eth0"  ],  "interfacesip": [    ""  ],  "interfacesmac": [    ""  ],  "firewall": [    "pan-fw"  ],  "override_mtu": "",  "kubernetes": {    "kubeconfig": "/etc/cni/net.d/ZZZ-pan-cni-kubeconfig",    "cni_bin_dir": "/opt/cni/bin",    "exclude_namespaces": [],    "security_namespaces": [      "kube-system"    ]  }}
10-11-2024 04:20:04.472663 UTC DEBUG: CNI running in FW Service mode. Bypassfirewall can be enabled on application pods
10-11-2024 04:20:04.612727 UTC DEBUG: Created CNI config 10-aws.conflist
10-11-2024 04:20:04.614656 UTC DEBUG: Done configuring CNI.  Sleep=true, Ready delay=30 seconds
10-11-2024 04:20:04.616020 UTC DEBUG: Monitoring "pan-cni" plugin in CNI conflist (/host/etc/cni/net.d/10-aws.conflist)
WARNING: ca-cert-Trust-Root-CA.pem does not contain exactly one certificate or CRL: skipping
WARNING: ca-cert-Forward-Trust-CA.pem.pem does not contain exactly one certificate or CRL: skipping
WARNING: ca-cert-Forward-Trust-CA-ECDSA.pem.pem does not contain exactly one certificate or CRL: skipping
Custom certificates added
apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-11T04:20:23Z"
    generateName: agent-deployment-558dcbcf7d-
    labels:
      app: agent
      paloaltonetworks.com/trafficobject: "1"
      pod-template-hash: 558dcbcf7d
    name: agent-deployment-558dcbcf7d-rxc6m
    namespace: ai-app
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: agent-deployment-558dcbcf7d
      uid: 62f5df92-09f8-4ebb-89ec-d8d0215ea5d5
    resourceVersion: "332911"
    uid: 2ea41209-990d-44da-9e69-e0bfb925c2d8
  spec:
    containers:
    - env:
      - name: AWS_STS_REGIONAL_ENDPOINTS
        value: regional
      - name: AWS_DEFAULT_REGION
        value: us-east-1
      - name: AWS_REGION
        value: us-east-1
      - name: AWS_ROLE_ARN
        value: arn:aws:iam::367521625516:role/n6oy2vvr-eks-pod-role
      - name: AWS_WEB_IDENTITY_TOKEN_FILE
        value: /var/run/secrets/eks.amazonaws.com/serviceaccount/token
      image: migara/agent-app:latest
      imagePullPolicy: IfNotPresent
      name: agent
      ports:
      - containerPort: 3001
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-s2r5s
        readOnly: true
      - mountPath: /var/run/secrets/eks.amazonaws.com/serviceaccount
        name: aws-iam-token
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-10-104-128-124.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: eks-pods-sa
    serviceAccountName: eks-pods-sa
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: aws-iam-token
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            audience: sts.amazonaws.com
            expirationSeconds: 86400
            path: token
    - name: kube-api-access-s2r5s
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-11T04:20:24Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-11T04:20:23Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-11T04:20:24Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-11T04:20:24Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-11T04:20:23Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://b05948a65bf7f1c13bf7d22e920024ae49f6b5f13cbdf5162f2231b01164f28d
      image: docker.io/migara/agent-app:latest
      imageID: docker.io/migara/agent-app@sha256:8caa61e4f8c13cea10ee3f2e0a07c041d4519afbaa7498cd096088f5daaf2fe5
      lastState: {}
      name: agent
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-11T04:20:24Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-s2r5s
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/run/secrets/eks.amazonaws.com/serviceaccount
        name: aws-iam-token
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.104.128.124
    hostIPs:
    - ip: 10.104.128.124
    phase: Running
    podIP: 10.104.128.98
    podIPs:
    - ip: 10.104.128.98
    qosClass: BestEffort
    startTime: "2024-10-11T04:20:23Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-11T04:20:23Z"
    generateName: ui-deployment-5457f4d4d4-
    labels:
      app: ui
      paloaltonetworks.com/trafficobject: "1"
      pod-template-hash: 5457f4d4d4
    name: ui-deployment-5457f4d4d4-tkfmq
    namespace: ai-app
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: ui-deployment-5457f4d4d4
      uid: 2098fe4f-2a38-44a1-989b-46442ca19fa5
    resourceVersion: "332904"
    uid: 1409e085-f976-44e9-811a-533ee1d89da3
  spec:
    containers:
    - image: migara/ui-app:latest
      imagePullPolicy: IfNotPresent
      name: ui
      ports:
      - containerPort: 3000
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-4sdrd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-10-104-0-216.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-4sdrd
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-11T04:20:24Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-11T04:20:23Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-11T04:20:24Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-11T04:20:24Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-11T04:20:23Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://83af9d6a6e3d794c6c4748920ce797d1d5f526a0424d05687886bc3e45885f18
      image: docker.io/migara/ui-app:latest
      imageID: docker.io/migara/ui-app@sha256:b7fcb5bd10bd616d71795e7a013340577af65062743875bb14c3d9e5c8d3325c
      lastState: {}
      name: ui
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-11T04:20:24Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-4sdrd
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.104.0.216
    hostIPs:
    - ip: 10.104.0.216
    phase: Running
    podIP: 10.104.0.116
    podIPs:
    - ip: 10.104.0.116
    qosClass: BestEffort
    startTime: "2024-10-11T04:20:23Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-11T04:20:10Z"
    generateName: ingress-nginx-controller-74dbc4858c-
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.8.1
      helm.sh/chart: ingress-nginx-4.7.1
      pod-template-hash: 74dbc4858c
    name: ingress-nginx-controller-74dbc4858c-h7fjg
    namespace: ingress-nginx
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: ingress-nginx-controller-74dbc4858c
      uid: 50c412fd-0988-4809-9850-b397d8030b77
    resourceVersion: "332818"
    uid: 9f43c020-01f5-4e2d-85d1-94ca7e7a1fa6
  spec:
    containers:
    - args:
      - /nginx-ingress-controller
      - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
      - --election-id=ingress-nginx-leader
      - --controller-class=k8s.io/ingress-nginx
      - --ingress-class=nginx
      - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
      - --validating-webhook=:8443
      - --validating-webhook-certificate=/usr/local/certificates/cert
      - --validating-webhook-key=/usr/local/certificates/key
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: LD_PRELOAD
        value: /usr/local/lib/libmimalloc.so
      image: registry.k8s.io/ingress-nginx/controller:v1.8.1@sha256:e5c4824e7375fcf2a393e1c03c293b69759af37a9ca6abdb91b13d78a93da8bd
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /wait-shutdown
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: controller
      ports:
      - containerPort: 80
        name: http
        protocol: TCP
      - containerPort: 443
        name: https
        protocol: TCP
      - containerPort: 8443
        name: webhook
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 100m
          memory: 90Mi
      securityContext:
        allowPrivilegeEscalation: true
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        runAsUser: 101
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /usr/local/certificates/
        name: webhook-cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-qkpwm
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-10-104-0-216.ec2.internal
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: ingress-nginx
    serviceAccountName: ingress-nginx
    terminationGracePeriodSeconds: 300
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: webhook-cert
      secret:
        defaultMode: 420
        secretName: ingress-nginx-admission
    - name: kube-api-access-qkpwm
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-11T04:20:12Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-11T04:20:10Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-11T04:20:21Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-11T04:20:21Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-11T04:20:10Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://8880ec068fca55a7f2eb18a4c13ff843050ba720d2fdcb5745174c8ef39502a2
      image: sha256:825aff16c20cc2c6039fce49bafaa0f510de0f9238da475f3de949adadb9be7f
      imageID: registry.k8s.io/ingress-nginx/controller@sha256:e5c4824e7375fcf2a393e1c03c293b69759af37a9ca6abdb91b13d78a93da8bd
      lastState: {}
      name: controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-11T04:20:11Z"
      volumeMounts:
      - mountPath: /usr/local/certificates/
        name: webhook-cert
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-qkpwm
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.104.0.216
    hostIPs:
    - ip: 10.104.0.216
    phase: Running
    podIP: 10.104.0.91
    podIPs:
    - ip: 10.104.0.91
    qosClass: Burstable
    startTime: "2024-10-11T04:20:10Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-09T19:37:11Z"
    generateName: aws-node-
    labels:
      app.kubernetes.io/instance: aws-vpc-cni
      app.kubernetes.io/name: aws-node
      controller-revision-hash: 7f748678d7
      k8s-app: aws-node
      pod-template-generation: "2"
    name: aws-node-hmvr2
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: aws-node
      uid: 080eb1f3-b8af-448e-95f8-bd5bc7679957
    resourceVersion: "1529"
    uid: a0719d05-dfe8-4a2b-9e7d-8475d5356f2f
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-10-104-128-124.ec2.internal
    containers:
    - env:
      - name: ADDITIONAL_ENI_TAGS
        value: '{}'
      - name: ANNOTATE_POD_IP
        value: "false"
      - name: AWS_VPC_CNI_NODE_PORT_SUPPORT
        value: "true"
      - name: AWS_VPC_ENI_MTU
        value: "9001"
      - name: AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG
        value: "false"
      - name: AWS_VPC_K8S_CNI_EXTERNALSNAT
        value: "false"
      - name: AWS_VPC_K8S_CNI_LOGLEVEL
        value: DEBUG
      - name: AWS_VPC_K8S_CNI_LOG_FILE
        value: /host/var/log/aws-routed-eni/ipamd.log
      - name: AWS_VPC_K8S_CNI_RANDOMIZESNAT
        value: prng
      - name: AWS_VPC_K8S_CNI_VETHPREFIX
        value: eni
      - name: AWS_VPC_K8S_PLUGIN_LOG_FILE
        value: /var/log/aws-routed-eni/plugin.log
      - name: AWS_VPC_K8S_PLUGIN_LOG_LEVEL
        value: DEBUG
      - name: CLUSTER_ENDPOINT
        value: https://260A3F90DADA104761D41ED5654BD337.gr7.us-east-1.eks.amazonaws.com
      - name: CLUSTER_NAME
        value: n6oy2vvr-K8s
      - name: DISABLE_INTROSPECTION
        value: "false"
      - name: DISABLE_METRICS
        value: "false"
      - name: DISABLE_NETWORK_RESOURCE_PROVISIONING
        value: "false"
      - name: ENABLE_IPv4
        value: "true"
      - name: ENABLE_IPv6
        value: "false"
      - name: ENABLE_POD_ENI
        value: "false"
      - name: ENABLE_PREFIX_DELEGATION
        value: "false"
      - name: ENABLE_SUBNET_DISCOVERY
        value: "true"
      - name: NETWORK_POLICY_ENFORCING_MODE
        value: standard
      - name: VPC_CNI_VERSION
        value: v1.18.3
      - name: VPC_ID
        value: vpc-0eeb81c2d824cec68
      - name: WARM_ENI_TARGET
        value: "1"
      - name: WARM_PREFIX_TARGET
        value: "1"
      - name: MY_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: MY_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon-k8s-cni:v1.18.3-eksbuild.2
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - /app/grpc-health-probe
          - -addr=:50051
          - -connect-timeout=5s
          - -rpc-timeout=5s
        failureThreshold: 3
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: aws-node
      ports:
      - containerPort: 61678
        hostPort: 61678
        name: metrics
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - /app/grpc-health-probe
          - -addr=:50051
          - -connect-timeout=5s
          - -rpc-timeout=5s
        failureThreshold: 3
        initialDelaySeconds: 1
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      resources:
        requests:
          cpu: 25m
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
          - NET_RAW
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /host/var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-pp8sm
        readOnly: true
    - args:
      - --enable-ipv6=false
      - --enable-network-policy=false
      - --enable-cloudwatch-logs=false
      - --enable-policy-event-logs=false
      - --log-file=/var/log/aws-routed-eni/network-policy-agent.log
      - --metrics-bind-addr=:8162
      - --health-probe-bind-addr=:8163
      - --conntrack-cache-cleanup-period=300
      env:
      - name: MY_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.2-eksbuild.2
      imagePullPolicy: IfNotPresent
      name: aws-eks-nodeagent
      resources:
        requests:
          cpu: 25m
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /sys/fs/bpf
        name: bpf-pin-path
      - mountPath: /var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-pp8sm
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - env:
      - name: DISABLE_TCP_EARLY_DEMUX
        value: "false"
      - name: ENABLE_IPv6
        value: "false"
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon-k8s-cni-init:v1.18.3-eksbuild.2
      imagePullPolicy: IfNotPresent
      name: aws-vpc-cni-init
      resources:
        requests:
          cpu: 25m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-pp8sm
        readOnly: true
    nodeName: ip-10-104-128-124.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: aws-node
    serviceAccountName: aws-node
    terminationGracePeriodSeconds: 10
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /sys/fs/bpf
        type: ""
      name: bpf-pin-path
    - hostPath:
        path: /opt/cni/bin
        type: ""
      name: cni-bin-dir
    - hostPath:
        path: /etc/cni/net.d
        type: ""
      name: cni-net-dir
    - hostPath:
        path: /var/log/aws-routed-eni
        type: DirectoryOrCreate
      name: log-dir
    - hostPath:
        path: /var/run/aws-node
        type: DirectoryOrCreate
      name: run-dir
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - name: kube-api-access-pp8sm
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:37:13Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:37:13Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:37:15Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:37:15Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:37:11Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://71fa90a97459fb4c33d7c945e12e7150a4ee959c64a5c61ad1deefa2e678d76c
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.2-eksbuild.2
      imageID: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-network-policy-agent@sha256:9744cc538f8f7afa925ada8afb4b32f6c9c7fb225383978c8f2701df1220bb9f
      lastState: {}
      name: aws-eks-nodeagent
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-09T19:37:14Z"
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /sys/fs/bpf
        name: bpf-pin-path
      - mountPath: /var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-pp8sm
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://6b21050cece9cf3fe07ce24530582a95beeeefa42a24d729bc5051eff6dd582c
      image: 066635153087.dkr.ecr.il-central-1.amazonaws.com/amazon-k8s-cni:v1.18.3-eksbuild.2
      imageID: sha256:f65b58751c202d60e13020ac144c608728fd2fcea406d6cafac1e755d5839673
      lastState: {}
      name: aws-node
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-09T19:37:13Z"
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /host/var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-pp8sm
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.104.128.124
    hostIPs:
    - ip: 10.104.128.124
    initContainerStatuses:
    - containerID: containerd://0cb8f0901974b7dca2a1919fc2bd02aebee1381db89764776e069b0f4fd517ba
      image: 066635153087.dkr.ecr.il-central-1.amazonaws.com/amazon-k8s-cni-init:v1.18.3-eksbuild.2
      imageID: sha256:addf38b09e5099344c33a451c35f4ae26b321549f05aa62c50b4e74fed9c26a6
      lastState: {}
      name: aws-vpc-cni-init
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://0cb8f0901974b7dca2a1919fc2bd02aebee1381db89764776e069b0f4fd517ba
          exitCode: 0
          finishedAt: "2024-10-09T19:37:13Z"
          reason: Completed
          startedAt: "2024-10-09T19:37:13Z"
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-pp8sm
        readOnly: true
        recursiveReadOnly: Disabled
    phase: Running
    podIP: 10.104.128.124
    podIPs:
    - ip: 10.104.128.124
    qosClass: Burstable
    startTime: "2024-10-09T19:37:11Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-09T19:37:16Z"
    generateName: aws-node-
    labels:
      app.kubernetes.io/instance: aws-vpc-cni
      app.kubernetes.io/name: aws-node
      controller-revision-hash: 7f748678d7
      k8s-app: aws-node
      pod-template-generation: "2"
    name: aws-node-ptpj4
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: aws-node
      uid: 080eb1f3-b8af-448e-95f8-bd5bc7679957
    resourceVersion: "1564"
    uid: 38b523e0-154e-4e6b-996a-0f84b2ecc1ee
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-10-104-0-216.ec2.internal
    containers:
    - env:
      - name: ADDITIONAL_ENI_TAGS
        value: '{}'
      - name: ANNOTATE_POD_IP
        value: "false"
      - name: AWS_VPC_CNI_NODE_PORT_SUPPORT
        value: "true"
      - name: AWS_VPC_ENI_MTU
        value: "9001"
      - name: AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG
        value: "false"
      - name: AWS_VPC_K8S_CNI_EXTERNALSNAT
        value: "false"
      - name: AWS_VPC_K8S_CNI_LOGLEVEL
        value: DEBUG
      - name: AWS_VPC_K8S_CNI_LOG_FILE
        value: /host/var/log/aws-routed-eni/ipamd.log
      - name: AWS_VPC_K8S_CNI_RANDOMIZESNAT
        value: prng
      - name: AWS_VPC_K8S_CNI_VETHPREFIX
        value: eni
      - name: AWS_VPC_K8S_PLUGIN_LOG_FILE
        value: /var/log/aws-routed-eni/plugin.log
      - name: AWS_VPC_K8S_PLUGIN_LOG_LEVEL
        value: DEBUG
      - name: CLUSTER_ENDPOINT
        value: https://260A3F90DADA104761D41ED5654BD337.gr7.us-east-1.eks.amazonaws.com
      - name: CLUSTER_NAME
        value: n6oy2vvr-K8s
      - name: DISABLE_INTROSPECTION
        value: "false"
      - name: DISABLE_METRICS
        value: "false"
      - name: DISABLE_NETWORK_RESOURCE_PROVISIONING
        value: "false"
      - name: ENABLE_IPv4
        value: "true"
      - name: ENABLE_IPv6
        value: "false"
      - name: ENABLE_POD_ENI
        value: "false"
      - name: ENABLE_PREFIX_DELEGATION
        value: "false"
      - name: ENABLE_SUBNET_DISCOVERY
        value: "true"
      - name: NETWORK_POLICY_ENFORCING_MODE
        value: standard
      - name: VPC_CNI_VERSION
        value: v1.18.3
      - name: VPC_ID
        value: vpc-0eeb81c2d824cec68
      - name: WARM_ENI_TARGET
        value: "1"
      - name: WARM_PREFIX_TARGET
        value: "1"
      - name: MY_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: MY_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon-k8s-cni:v1.18.3-eksbuild.2
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - /app/grpc-health-probe
          - -addr=:50051
          - -connect-timeout=5s
          - -rpc-timeout=5s
        failureThreshold: 3
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: aws-node
      ports:
      - containerPort: 61678
        hostPort: 61678
        name: metrics
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - /app/grpc-health-probe
          - -addr=:50051
          - -connect-timeout=5s
          - -rpc-timeout=5s
        failureThreshold: 3
        initialDelaySeconds: 1
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      resources:
        requests:
          cpu: 25m
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
          - NET_RAW
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /host/var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-lh4w6
        readOnly: true
    - args:
      - --enable-ipv6=false
      - --enable-network-policy=false
      - --enable-cloudwatch-logs=false
      - --enable-policy-event-logs=false
      - --log-file=/var/log/aws-routed-eni/network-policy-agent.log
      - --metrics-bind-addr=:8162
      - --health-probe-bind-addr=:8163
      - --conntrack-cache-cleanup-period=300
      env:
      - name: MY_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.2-eksbuild.2
      imagePullPolicy: IfNotPresent
      name: aws-eks-nodeagent
      resources:
        requests:
          cpu: 25m
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /sys/fs/bpf
        name: bpf-pin-path
      - mountPath: /var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-lh4w6
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - env:
      - name: DISABLE_TCP_EARLY_DEMUX
        value: "false"
      - name: ENABLE_IPv6
        value: "false"
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon-k8s-cni-init:v1.18.3-eksbuild.2
      imagePullPolicy: IfNotPresent
      name: aws-vpc-cni-init
      resources:
        requests:
          cpu: 25m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-lh4w6
        readOnly: true
    nodeName: ip-10-104-0-216.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: aws-node
    serviceAccountName: aws-node
    terminationGracePeriodSeconds: 10
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /sys/fs/bpf
        type: ""
      name: bpf-pin-path
    - hostPath:
        path: /opt/cni/bin
        type: ""
      name: cni-bin-dir
    - hostPath:
        path: /etc/cni/net.d
        type: ""
      name: cni-net-dir
    - hostPath:
        path: /var/log/aws-routed-eni
        type: DirectoryOrCreate
      name: log-dir
    - hostPath:
        path: /var/run/aws-node
        type: DirectoryOrCreate
      name: run-dir
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - name: kube-api-access-lh4w6
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:37:17Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:37:17Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:37:19Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:37:19Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:37:16Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://546ba85d7014cf1eba4a45fd577de95ec6f140e74c1fb1bc71b6036ec30b87b2
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.2-eksbuild.2
      imageID: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-network-policy-agent@sha256:9744cc538f8f7afa925ada8afb4b32f6c9c7fb225383978c8f2701df1220bb9f
      lastState: {}
      name: aws-eks-nodeagent
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-09T19:37:17Z"
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /sys/fs/bpf
        name: bpf-pin-path
      - mountPath: /var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-lh4w6
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: containerd://74336e97760aa93f3a2083d62c6da61632ccda63c1370134fc57532373c59f5d
      image: 066635153087.dkr.ecr.il-central-1.amazonaws.com/amazon-k8s-cni:v1.18.3-eksbuild.2
      imageID: sha256:f65b58751c202d60e13020ac144c608728fd2fcea406d6cafac1e755d5839673
      lastState: {}
      name: aws-node
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-09T19:37:17Z"
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /host/var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-lh4w6
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.104.0.216
    hostIPs:
    - ip: 10.104.0.216
    initContainerStatuses:
    - containerID: containerd://ea51c3f8d18e152567d5d3b910718afa2ddee7968e6e498907fab6529c70c52f
      image: 066635153087.dkr.ecr.il-central-1.amazonaws.com/amazon-k8s-cni-init:v1.18.3-eksbuild.2
      imageID: sha256:addf38b09e5099344c33a451c35f4ae26b321549f05aa62c50b4e74fed9c26a6
      lastState: {}
      name: aws-vpc-cni-init
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://ea51c3f8d18e152567d5d3b910718afa2ddee7968e6e498907fab6529c70c52f
          exitCode: 0
          finishedAt: "2024-10-09T19:37:16Z"
          reason: Completed
          startedAt: "2024-10-09T19:37:16Z"
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-lh4w6
        readOnly: true
        recursiveReadOnly: Disabled
    phase: Running
    podIP: 10.104.0.216
    podIPs:
    - ip: 10.104.0.216
    qosClass: Burstable
    startTime: "2024-10-09T19:37:16Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-09T19:32:37Z"
    generateName: coredns-789f8477df-
    labels:
      eks.amazonaws.com/component: coredns
      k8s-app: kube-dns
      pod-template-hash: 789f8477df
    name: coredns-789f8477df-gvh82
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: coredns-789f8477df
      uid: 93b266c0-0b76-4cb2-bdc1-2cfa57339349
    resourceVersion: "1406"
    uid: 9b573569-4b9f-4524-8239-7f2f76bae169
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: kubernetes.io/os
              operator: In
              values:
              - linux
            - key: kubernetes.io/arch
              operator: In
              values:
              - amd64
              - arm64
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: k8s-app
                operator: In
                values:
                - kube-dns
            topologyKey: kubernetes.io/hostname
          weight: 100
    containers:
    - args:
      - -conf
      - /etc/coredns/Corefile
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/coredns:v1.11.3-eksbuild.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /health
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: coredns
      ports:
      - containerPort: 53
        name: dns
        protocol: UDP
      - containerPort: 53
        name: dns-tcp
        protocol: TCP
      - containerPort: 9153
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /ready
          port: 8181
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 170Mi
        requests:
          cpu: 100m
          memory: 70Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-4tlkm
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    nodeName: ip-10-104-128-124.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: coredns
    serviceAccountName: coredns
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    topologySpreadConstraints:
    - labelSelector:
        matchLabels:
          k8s-app: kube-dns
      maxSkew: 1
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: ScheduleAnyway
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: Corefile
          path: Corefile
        name: coredns
      name: config-volume
    - name: kube-api-access-4tlkm
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:36:57Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:36:53Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:36:57Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:36:57Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:36:53Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://1e0eb26efe3ae27720227581fa6bdb017e5673251169007c0c0948d721af5d3a
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/coredns:v1.11.3-eksbuild.1
      imageID: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/coredns@sha256:5a047e99333089d71ed61efa3aba76b4bc2bc581c801d3a661d1109d90c3e1e6
      lastState: {}
      name: coredns
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-09T19:36:56Z"
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-4tlkm
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.104.128.124
    hostIPs:
    - ip: 10.104.128.124
    phase: Running
    podIP: 10.104.128.202
    podIPs:
    - ip: 10.104.128.202
    qosClass: Burstable
    startTime: "2024-10-09T19:36:53Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-09T19:32:37Z"
    generateName: coredns-789f8477df-
    labels:
      eks.amazonaws.com/component: coredns
      k8s-app: kube-dns
      pod-template-hash: 789f8477df
    name: coredns-789f8477df-vx7f5
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: coredns-789f8477df
      uid: 93b266c0-0b76-4cb2-bdc1-2cfa57339349
    resourceVersion: "1400"
    uid: 9c988298-2cff-4b62-b21c-c48121939d05
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: kubernetes.io/os
              operator: In
              values:
              - linux
            - key: kubernetes.io/arch
              operator: In
              values:
              - amd64
              - arm64
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: k8s-app
                operator: In
                values:
                - kube-dns
            topologyKey: kubernetes.io/hostname
          weight: 100
    containers:
    - args:
      - -conf
      - /etc/coredns/Corefile
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/coredns:v1.11.3-eksbuild.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /health
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: coredns
      ports:
      - containerPort: 53
        name: dns
        protocol: UDP
      - containerPort: 53
        name: dns-tcp
        protocol: TCP
      - containerPort: 9153
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /ready
          port: 8181
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 170Mi
        requests:
          cpu: 100m
          memory: 70Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-h5kvz
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    nodeName: ip-10-104-128-124.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: coredns
    serviceAccountName: coredns
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    topologySpreadConstraints:
    - labelSelector:
        matchLabels:
          k8s-app: kube-dns
      maxSkew: 1
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: ScheduleAnyway
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: Corefile
          path: Corefile
        name: coredns
      name: config-volume
    - name: kube-api-access-h5kvz
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:36:57Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:36:53Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:36:57Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:36:57Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:36:53Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://3b3e376de9370dcc53753832fe1809da8d8e166a04ea36b1fc19f129e2ac93af
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/coredns:v1.11.3-eksbuild.1
      imageID: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/coredns@sha256:5a047e99333089d71ed61efa3aba76b4bc2bc581c801d3a661d1109d90c3e1e6
      lastState: {}
      name: coredns
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-09T19:36:56Z"
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-h5kvz
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.104.128.124
    hostIPs:
    - ip: 10.104.128.124
    phase: Running
    podIP: 10.104.128.249
    podIPs:
    - ip: 10.104.128.249
    qosClass: Burstable
    startTime: "2024-10-09T19:36:53Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-09T19:37:11Z"
    generateName: eks-pod-identity-agent-
    labels:
      app.kubernetes.io/instance: eks-pod-identity-agent
      app.kubernetes.io/name: eks-pod-identity-agent
      controller-revision-hash: bbfd9c4b5
      pod-template-generation: "1"
    name: eks-pod-identity-agent-cvpvw
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: eks-pod-identity-agent
      uid: 419ac4ab-b5e9-4023-9ec7-6448c34cfcdf
    resourceVersion: "1516"
    uid: b50b60bf-9715-4b63-9a18-13ac74b85369
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-10-104-0-216.ec2.internal
    containers:
    - args:
      - --port
      - "80"
      - --cluster-name
      - n6oy2vvr-K8s
      - --probe-port
      - "2703"
      command:
      - /go-runner
      - /eks-pod-identity-agent
      - server
      env:
      - name: AWS_REGION
        value: us-east-1
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
      imagePullPolicy: Always
      livenessProbe:
        failureThreshold: 3
        httpGet:
          host: localhost
          path: /healthz
          port: probes-port
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: eks-pod-identity-agent
      ports:
      - containerPort: 80
        hostPort: 80
        name: proxy
        protocol: TCP
      - containerPort: 2703
        hostPort: 2703
        name: probes-port
        protocol: TCP
      readinessProbe:
        failureThreshold: 30
        httpGet:
          host: localhost
          path: /readyz
          port: probes-port
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      resources: {}
      securityContext:
        capabilities:
          add:
          - CAP_NET_BIND_SERVICE
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-ngm6p
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - command:
      - /go-runner
      - /eks-pod-identity-agent
      - initialize
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
      imagePullPolicy: Always
      name: eks-pod-identity-agent-init
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-ngm6p
        readOnly: true
    nodeName: ip-10-104-0-216.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - name: kube-api-access-ngm6p
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:37:13Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:37:13Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:37:14Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:37:14Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:37:11Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://1c45ee189045aafb3dae868a1c5a3a2ae8651f3812cd6d144cb6d7881a0fa47a
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
      imageID: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent@sha256:832ad48c9872fdcae32f2ea369d9874fa34f271b4dbc58ce04393c757befa462
      lastState: {}
      name: eks-pod-identity-agent
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-09T19:37:13Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-ngm6p
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.104.0.216
    hostIPs:
    - ip: 10.104.0.216
    initContainerStatuses:
    - containerID: containerd://144a320c9499c95237e5846fd7df993089612b270394ed05a8d0d4702eb648bb
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
      imageID: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent@sha256:832ad48c9872fdcae32f2ea369d9874fa34f271b4dbc58ce04393c757befa462
      lastState: {}
      name: eks-pod-identity-agent-init
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://144a320c9499c95237e5846fd7df993089612b270394ed05a8d0d4702eb648bb
          exitCode: 0
          finishedAt: "2024-10-09T19:37:12Z"
          reason: Completed
          startedAt: "2024-10-09T19:37:12Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-ngm6p
        readOnly: true
        recursiveReadOnly: Disabled
    phase: Running
    podIP: 10.104.0.216
    podIPs:
    - ip: 10.104.0.216
    qosClass: BestEffort
    startTime: "2024-10-09T19:37:11Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-09T19:37:11Z"
    generateName: eks-pod-identity-agent-
    labels:
      app.kubernetes.io/instance: eks-pod-identity-agent
      app.kubernetes.io/name: eks-pod-identity-agent
      controller-revision-hash: bbfd9c4b5
      pod-template-generation: "1"
    name: eks-pod-identity-agent-sp7ft
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: eks-pod-identity-agent
      uid: 419ac4ab-b5e9-4023-9ec7-6448c34cfcdf
    resourceVersion: "1527"
    uid: 2a773bca-a1dc-4c4a-b608-5c93a63b7af7
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-10-104-128-124.ec2.internal
    containers:
    - args:
      - --port
      - "80"
      - --cluster-name
      - n6oy2vvr-K8s
      - --probe-port
      - "2703"
      command:
      - /go-runner
      - /eks-pod-identity-agent
      - server
      env:
      - name: AWS_REGION
        value: us-east-1
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
      imagePullPolicy: Always
      livenessProbe:
        failureThreshold: 3
        httpGet:
          host: localhost
          path: /healthz
          port: probes-port
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: eks-pod-identity-agent
      ports:
      - containerPort: 80
        hostPort: 80
        name: proxy
        protocol: TCP
      - containerPort: 2703
        hostPort: 2703
        name: probes-port
        protocol: TCP
      readinessProbe:
        failureThreshold: 30
        httpGet:
          host: localhost
          path: /readyz
          port: probes-port
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      resources: {}
      securityContext:
        capabilities:
          add:
          - CAP_NET_BIND_SERVICE
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-gpbsg
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - command:
      - /go-runner
      - /eks-pod-identity-agent
      - initialize
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
      imagePullPolicy: Always
      name: eks-pod-identity-agent-init
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-gpbsg
        readOnly: true
    nodeName: ip-10-104-128-124.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - name: kube-api-access-gpbsg
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:37:13Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:37:13Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:37:15Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:37:15Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:37:11Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://5e01c4307be97eb852ad4cd7e215de657f6dcc0f9097fb1ac34342fa9946059c
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
      imageID: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent@sha256:832ad48c9872fdcae32f2ea369d9874fa34f271b4dbc58ce04393c757befa462
      lastState: {}
      name: eks-pod-identity-agent
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-09T19:37:14Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-gpbsg
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.104.128.124
    hostIPs:
    - ip: 10.104.128.124
    initContainerStatuses:
    - containerID: containerd://469acea4c79ac3625c9515d5a13d2bb9cd851e4a115736cd5222778086091345
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
      imageID: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent@sha256:832ad48c9872fdcae32f2ea369d9874fa34f271b4dbc58ce04393c757befa462
      lastState: {}
      name: eks-pod-identity-agent-init
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://469acea4c79ac3625c9515d5a13d2bb9cd851e4a115736cd5222778086091345
          exitCode: 0
          finishedAt: "2024-10-09T19:37:12Z"
          reason: Completed
          startedAt: "2024-10-09T19:37:12Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-gpbsg
        readOnly: true
        recursiveReadOnly: Disabled
    phase: Running
    podIP: 10.104.128.124
    podIPs:
    - ip: 10.104.128.124
    qosClass: BestEffort
    startTime: "2024-10-09T19:37:11Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-09T19:36:42Z"
    generateName: kube-proxy-
    labels:
      controller-revision-hash: 6cf9ccc4bc
      k8s-app: kube-proxy
      pod-template-generation: "1"
    name: kube-proxy-7bnxs
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kube-proxy
      uid: 4cb736d1-682e-4a49-96fe-a5f8e4dac948
    resourceVersion: "1325"
    uid: e233fb29-6e6f-45bc-8c72-712e3f7886e7
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-10-104-0-216.ec2.internal
    containers:
    - command:
      - kube-proxy
      - --v=2
      - --config=/var/lib/kube-proxy-config/config
      - --hostname-override=$(NODE_NAME)
      env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/kube-proxy:v1.31.0-minimal-eksbuild.2
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources:
        requests:
          cpu: 100m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/log
        name: varlog
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /var/lib/kube-proxy/
        name: kubeconfig
      - mountPath: /var/lib/kube-proxy-config/
        name: config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-f2npq
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ip-10-104-0-216.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-proxy
    serviceAccountName: kube-proxy
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/log
        type: ""
      name: varlog
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - configMap:
        defaultMode: 420
        name: kube-proxy
      name: kubeconfig
    - configMap:
        defaultMode: 420
        name: kube-proxy-config
      name: config
    - name: kube-api-access-f2npq
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:36:48Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:36:43Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:36:48Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:36:48Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:36:42Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://7f2e191355cd7b1de82b82bcf4447dd375301333e2ff717de3776bea469af2b3
      image: 066635153087.dkr.ecr.il-central-1.amazonaws.com/eks/kube-proxy:v1.31.0-minimal-eksbuild.2
      imageID: sha256:90cb402e7ebc61b5e0f195d0f212b4bc4b1d6b21ecb2613b6b26e2e9c9d09e0a
      lastState: {}
      name: kube-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-09T19:36:47Z"
      volumeMounts:
      - mountPath: /var/log
        name: varlog
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/lib/kube-proxy/
        name: kubeconfig
      - mountPath: /var/lib/kube-proxy-config/
        name: config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-f2npq
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.104.0.216
    hostIPs:
    - ip: 10.104.0.216
    phase: Running
    podIP: 10.104.0.216
    podIPs:
    - ip: 10.104.0.216
    qosClass: Burstable
    startTime: "2024-10-09T19:36:43Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-09T19:36:36Z"
    generateName: kube-proxy-
    labels:
      controller-revision-hash: 6cf9ccc4bc
      k8s-app: kube-proxy
      pod-template-generation: "1"
    name: kube-proxy-hdxt7
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kube-proxy
      uid: 4cb736d1-682e-4a49-96fe-a5f8e4dac948
    resourceVersion: "1312"
    uid: 7c265da3-ae8a-48c3-b679-e1fbf8dab643
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-10-104-128-124.ec2.internal
    containers:
    - command:
      - kube-proxy
      - --v=2
      - --config=/var/lib/kube-proxy-config/config
      - --hostname-override=$(NODE_NAME)
      env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/kube-proxy:v1.31.0-minimal-eksbuild.2
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources:
        requests:
          cpu: 100m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/log
        name: varlog
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /var/lib/kube-proxy/
        name: kubeconfig
      - mountPath: /var/lib/kube-proxy-config/
        name: config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-vwrvz
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ip-10-104-128-124.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-proxy
    serviceAccountName: kube-proxy
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/log
        type: ""
      name: varlog
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - configMap:
        defaultMode: 420
        name: kube-proxy
      name: kubeconfig
    - configMap:
        defaultMode: 420
        name: kube-proxy-config
      name: config
    - name: kube-api-access-vwrvz
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:36:46Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:36:37Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:36:46Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:36:46Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-09T19:36:36Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://11a50c7b179fa65d980ae467a0aa9502aa95987a28d7f68be775310ef27a690a
      image: 066635153087.dkr.ecr.il-central-1.amazonaws.com/eks/kube-proxy:v1.31.0-minimal-eksbuild.2
      imageID: sha256:90cb402e7ebc61b5e0f195d0f212b4bc4b1d6b21ecb2613b6b26e2e9c9d09e0a
      lastState: {}
      name: kube-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-09T19:36:45Z"
      volumeMounts:
      - mountPath: /var/log
        name: varlog
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/lib/kube-proxy/
        name: kubeconfig
      - mountPath: /var/lib/kube-proxy-config/
        name: config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-vwrvz
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.104.128.124
    hostIPs:
    - ip: 10.104.128.124
    phase: Running
    podIP: 10.104.128.124
    podIPs:
    - ip: 10.104.128.124
    qosClass: Burstable
    startTime: "2024-10-09T19:36:37Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      paloaltonetworks.com/app: pan-cni
      scheduler.alpha.kubernetes.io/critical-pod: ""
    creationTimestamp: "2024-10-11T04:20:03Z"
    generateName: pan-cni-
    labels:
      controller-revision-hash: 6b9d67c684
      k8s-app: pan-cni
      pod-template-generation: "1"
    name: pan-cni-l49hv
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: pan-cni
      uid: 5aeb0b4e-e9e6-4a37-94ca-2b64e39c1ee1
    resourceVersion: "332651"
    uid: 1fbbc63e-d3c5-4e99-b6c6-b5f330df2925
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-10-104-0-216.ec2.internal
    containers:
    - command:
      - /install-pan-cni.sh
      - main
      env:
      - name: CNI_NETWORK_CONFIG
        valueFrom:
          configMapKeyRef:
            key: cni_network_config
            name: pan-cni-config
      - name: MY_POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: MY_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      image: gcr.io/pan-cn-series/airs/pan-cni:4.0.0
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /install-pan-cni.sh
            - cleanup
      name: install-pan-cni
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /host/appinfo
        name: appinfo
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-d5xvd
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ip-10-104-0-216.ec2.internal
    nodeSelector:
      beta.kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: pan-cni-sa
    serviceAccountName: pan-cni-sa
    terminationGracePeriodSeconds: 5
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /opt/cni/bin
        type: ""
      name: cni-bin-dir
    - hostPath:
        path: /etc/cni/net.d
        type: ""
      name: cni-net-dir
    - hostPath:
        path: /var/log/pan-appinfo
        type: DirectoryOrCreate
      name: appinfo
    - name: kube-api-access-d5xvd
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-11T04:20:04Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-11T04:20:03Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-11T04:20:04Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-11T04:20:04Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-11T04:20:03Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://4e2d17e05a0339e122bb404446f34a26cf413b5b1f2689e099ca1c85ea2b0120
      image: gcr.io/pan-cn-series/airs/pan-cni:4.0.0
      imageID: gcr.io/pan-cn-series/airs/pan-cni@sha256:724c998c3fdf52dce1ed9fac0cfb73111ee0ead72273fae74ee21f36f7972f56
      lastState: {}
      name: install-pan-cni
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-11T04:20:04Z"
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /host/appinfo
        name: appinfo
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-d5xvd
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.104.0.216
    hostIPs:
    - ip: 10.104.0.216
    phase: Running
    podIP: 10.104.0.216
    podIPs:
    - ip: 10.104.0.216
    qosClass: BestEffort
    startTime: "2024-10-11T04:20:03Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      paloaltonetworks.com/app: pan-cni
      scheduler.alpha.kubernetes.io/critical-pod: ""
    creationTimestamp: "2024-10-11T04:20:03Z"
    generateName: pan-cni-
    labels:
      controller-revision-hash: 6b9d67c684
      k8s-app: pan-cni
      pod-template-generation: "1"
    name: pan-cni-rspdh
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: pan-cni
      uid: 5aeb0b4e-e9e6-4a37-94ca-2b64e39c1ee1
    resourceVersion: "332654"
    uid: e90e8dd7-81b8-4250-bdd9-5e7cac896b5f
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-10-104-128-124.ec2.internal
    containers:
    - command:
      - /install-pan-cni.sh
      - main
      env:
      - name: CNI_NETWORK_CONFIG
        valueFrom:
          configMapKeyRef:
            key: cni_network_config
            name: pan-cni-config
      - name: MY_POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: MY_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      image: gcr.io/pan-cn-series/airs/pan-cni:4.0.0
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /install-pan-cni.sh
            - cleanup
      name: install-pan-cni
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /host/appinfo
        name: appinfo
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-cg4hb
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ip-10-104-128-124.ec2.internal
    nodeSelector:
      beta.kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: pan-cni-sa
    serviceAccountName: pan-cni-sa
    terminationGracePeriodSeconds: 5
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /opt/cni/bin
        type: ""
      name: cni-bin-dir
    - hostPath:
        path: /etc/cni/net.d
        type: ""
      name: cni-net-dir
    - hostPath:
        path: /var/log/pan-appinfo
        type: DirectoryOrCreate
      name: appinfo
    - name: kube-api-access-cg4hb
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-11T04:20:04Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-11T04:20:03Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-11T04:20:04Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-11T04:20:04Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-11T04:20:03Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://930a316d2beb01d1142bc3696bb7d00ef93cbd7a67af9038b03260b0eef6dc36
      image: gcr.io/pan-cn-series/airs/pan-cni:4.0.0
      imageID: gcr.io/pan-cn-series/airs/pan-cni@sha256:724c998c3fdf52dce1ed9fac0cfb73111ee0ead72273fae74ee21f36f7972f56
      lastState: {}
      name: install-pan-cni
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-11T04:20:04Z"
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /host/appinfo
        name: appinfo
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-cg4hb
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.104.128.124
    hostIPs:
    - ip: 10.104.128.124
    phase: Running
    podIP: 10.104.128.124
    podIPs:
    - ip: 10.104.128.124
    qosClass: BestEffort
    startTime: "2024-10-11T04:20:03Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-11T05:19:18Z"
    generateName: netshoot-deployment-7655b866d4-
    labels:
      app: netshoot
      paloaltonetworks.com/trafficobject: "1"
      pod-template-hash: 7655b866d4
    name: netshoot-deployment-7655b866d4-7qdzs
    namespace: utilities
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: netshoot-deployment-7655b866d4
      uid: d91f8a1c-889c-446c-a839-29c2e9aff563
    resourceVersion: "343078"
    uid: 4d318239-09de-43f3-bbf2-2d9b975f7307
  spec:
    containers:
    - args:
      - -c
      - |
        cp /custom-certs/* /usr/local/share/ca-certificates/
        update-ca-certificates
        echo "Custom certificates added"
        while true; do sleep 3600; done
      command:
      - /bin/sh
      env:
      - name: AWS_STS_REGIONAL_ENDPOINTS
        value: regional
      - name: AWS_DEFAULT_REGION
        value: us-east-1
      - name: AWS_REGION
        value: us-east-1
      - name: AWS_ROLE_ARN
        value: arn:aws:iam::367521625516:role/n6oy2vvr-eks-pod-role
      - name: AWS_WEB_IDENTITY_TOKEN_FILE
        value: /var/run/secrets/eks.amazonaws.com/serviceaccount/token
      image: nicolaka/netshoot
      imagePullPolicy: Always
      name: netshoot
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /custom-certs
        name: custom-certs
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-86gfg
        readOnly: true
      - mountPath: /var/run/secrets/eks.amazonaws.com/serviceaccount
        name: aws-iam-token
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-10-104-0-216.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: eks-pods-sa
    serviceAccountName: eks-pods-sa
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: aws-iam-token
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            audience: sts.amazonaws.com
            expirationSeconds: 86400
            path: token
    - configMap:
        defaultMode: 420
        name: custom-ca-certs
      name: custom-certs
    - name: kube-api-access-86gfg
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-11T05:19:19Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-10-11T05:19:18Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-11T05:19:19Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-11T05:19:19Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-11T05:19:18Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://f35ecc1012d96cc9ea3b59d0ea57de3fb482c035b0b2c59c1ec77a138a28de72
      image: docker.io/nicolaka/netshoot:latest
      imageID: docker.io/nicolaka/netshoot@sha256:a20c2531bf35436ed3766cd6cfe89d352b050ccc4d7005ce6400adf97503da1b
      lastState: {}
      name: netshoot
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-11T05:19:19Z"
      volumeMounts:
      - mountPath: /custom-certs
        name: custom-certs
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-86gfg
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/run/secrets/eks.amazonaws.com/serviceaccount
        name: aws-iam-token
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.104.0.216
    hostIPs:
    - ip: 10.104.0.216
    phase: Running
    podIP: 10.104.0.143
    podIPs:
    - ip: 10.104.0.143
    qosClass: BestEffort
    startTime: "2024-10-11T05:19:18Z"
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: ai-app
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2024-10-11T04:20:23Z"
    labels:
      app.kubernetes.io/managed-by: Helm
    name: agent-service
    namespace: ai-app
    resourceVersion: "332839"
    uid: c02fcbf1-6014-4c6f-9278-237d3cd629d1
  spec:
    clusterIP: 172.20.212.15
    clusterIPs:
    - 172.20.212.15
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 80
      protocol: TCP
      targetPort: 3001
    selector:
      app: agent
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: ai-app
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2024-10-11T04:20:23Z"
    labels:
      app.kubernetes.io/managed-by: Helm
    name: ui-service
    namespace: ai-app
    resourceVersion: "332837"
    uid: 7fffbdf3-a755-4fda-b042-0f29845529b7
  spec:
    clusterIP: 172.20.196.23
    clusterIPs:
    - 172.20.196.23
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 80
      protocol: TCP
      targetPort: 3000
    selector:
      app: ui
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2024-10-09T19:30:57Z"
    labels:
      component: apiserver
      provider: kubernetes
    name: kubernetes
    namespace: default
    resourceVersion: "194"
    uid: f39053c6-9636-421a-a72f-e69aa46c7d2f
  spec:
    clusterIP: 172.20.0.1
    clusterIPs:
    - 172.20.0.1
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: 443
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: ingress-nginx
      meta.helm.sh/release-namespace: ingress-nginx
      service.beta.kubernetes.io/aws-load-balancer-subnets: subnet-042939e54a88bf6d0,subnet-0c8b880eb1a09a7bc
      service.beta.kubernetes.io/aws-load-balancer-type: nlb
    creationTimestamp: "2024-10-11T04:20:10Z"
    finalizers:
    - service.kubernetes.io/load-balancer-cleanup
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.8.1
      helm.sh/chart: ingress-nginx-4.7.1
    name: ingress-nginx-controller
    namespace: ingress-nginx
    resourceVersion: "332783"
    uid: 1b395e76-e8ab-433c-838b-2faae084ff2a
  spec:
    allocateLoadBalancerNodePorts: true
    clusterIP: 172.20.230.46
    clusterIPs:
    - 172.20.230.46
    externalTrafficPolicy: Cluster
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      nodePort: 31209
      port: 80
      protocol: TCP
      targetPort: http
    - name: https
      nodePort: 32175
      port: 443
      protocol: TCP
      targetPort: https
    selector:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
    sessionAffinity: None
    type: LoadBalancer
  status:
    loadBalancer:
      ingress:
      - hostname: a1b395e76e8ab433c838b2faae084ff2-2d8550f4cddebd62.elb.us-east-1.amazonaws.com
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: ingress-nginx
      meta.helm.sh/release-namespace: ingress-nginx
    creationTimestamp: "2024-10-11T04:20:10Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.8.1
      helm.sh/chart: ingress-nginx-4.7.1
    name: ingress-nginx-controller-admission
    namespace: ingress-nginx
    resourceVersion: "332718"
    uid: b24eed1b-5956-41e2-a68e-bb94ef3058e8
  spec:
    clusterIP: 172.20.181.224
    clusterIPs:
    - 172.20.181.224
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: https-webhook
      port: 443
      protocol: TCP
      targetPort: webhook
    selector:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      prometheus.io/port: "9153"
      prometheus.io/scrape: "true"
    creationTimestamp: "2024-10-09T19:32:36Z"
    labels:
      eks.amazonaws.com/component: kube-dns
      k8s-app: kube-dns
      kubernetes.io/cluster-service: "true"
      kubernetes.io/name: CoreDNS
    name: kube-dns
    namespace: kube-system
    resourceVersion: "579"
    uid: f75b1ec0-6b42-40e5-b789-a2d0e0b0f44e
  spec:
    clusterIP: 172.20.0.10
    clusterIPs:
    - 172.20.0.10
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: dns
      port: 53
      protocol: UDP
      targetPort: 53
    - name: dns-tcp
      port: 53
      protocol: TCP
      targetPort: 53
    - name: metrics
      port: 9153
      protocol: TCP
      targetPort: 9153
    selector:
      k8s-app: kube-dns
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: ai-runtime-security
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2024-10-11T04:20:03Z"
    labels:
      app: pan-ngfw-svc
      app.kubernetes.io/managed-by: Helm
    name: pan-ngfw-svc
    namespace: kube-system
    resourceVersion: "332626"
    uid: 37ca32c6-0ca1-44a9-a61b-b6f209efaa43
  spec:
    clusterIP: 172.20.222.196
    clusterIPs:
    - 172.20.222.196
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 6080
      protocol: UDP
      targetPort: 6080
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "2"
    creationTimestamp: "2024-10-09T19:32:37Z"
    generation: 2
    labels:
      app.kubernetes.io/instance: aws-vpc-cni
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: aws-node
      app.kubernetes.io/version: v1.18.3
      helm.sh/chart: aws-vpc-cni-1.18.3
      k8s-app: aws-node
    name: aws-node
    namespace: kube-system
    resourceVersion: "1565"
    uid: 080eb1f3-b8af-448e-95f8-bd5bc7679957
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: aws-node
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: aws-vpc-cni
          app.kubernetes.io/name: aws-node
          k8s-app: aws-node
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
                  - arm64
                - key: eks.amazonaws.com/compute-type
                  operator: NotIn
                  values:
                  - fargate
        containers:
        - env:
          - name: ADDITIONAL_ENI_TAGS
            value: '{}'
          - name: ANNOTATE_POD_IP
            value: "false"
          - name: AWS_VPC_CNI_NODE_PORT_SUPPORT
            value: "true"
          - name: AWS_VPC_ENI_MTU
            value: "9001"
          - name: AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG
            value: "false"
          - name: AWS_VPC_K8S_CNI_EXTERNALSNAT
            value: "false"
          - name: AWS_VPC_K8S_CNI_LOGLEVEL
            value: DEBUG
          - name: AWS_VPC_K8S_CNI_LOG_FILE
            value: /host/var/log/aws-routed-eni/ipamd.log
          - name: AWS_VPC_K8S_CNI_RANDOMIZESNAT
            value: prng
          - name: AWS_VPC_K8S_CNI_VETHPREFIX
            value: eni
          - name: AWS_VPC_K8S_PLUGIN_LOG_FILE
            value: /var/log/aws-routed-eni/plugin.log
          - name: AWS_VPC_K8S_PLUGIN_LOG_LEVEL
            value: DEBUG
          - name: CLUSTER_ENDPOINT
            value: https://260A3F90DADA104761D41ED5654BD337.gr7.us-east-1.eks.amazonaws.com
          - name: CLUSTER_NAME
            value: n6oy2vvr-K8s
          - name: DISABLE_INTROSPECTION
            value: "false"
          - name: DISABLE_METRICS
            value: "false"
          - name: DISABLE_NETWORK_RESOURCE_PROVISIONING
            value: "false"
          - name: ENABLE_IPv4
            value: "true"
          - name: ENABLE_IPv6
            value: "false"
          - name: ENABLE_POD_ENI
            value: "false"
          - name: ENABLE_PREFIX_DELEGATION
            value: "false"
          - name: ENABLE_SUBNET_DISCOVERY
            value: "true"
          - name: NETWORK_POLICY_ENFORCING_MODE
            value: standard
          - name: VPC_CNI_VERSION
            value: v1.18.3
          - name: VPC_ID
            value: vpc-0eeb81c2d824cec68
          - name: WARM_ENI_TARGET
            value: "1"
          - name: WARM_PREFIX_TARGET
            value: "1"
          - name: MY_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon-k8s-cni:v1.18.3-eksbuild.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /app/grpc-health-probe
              - -addr=:50051
              - -connect-timeout=5s
              - -rpc-timeout=5s
            failureThreshold: 3
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: aws-node
          ports:
          - containerPort: 61678
            name: metrics
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /app/grpc-health-probe
              - -addr=:50051
              - -connect-timeout=5s
              - -rpc-timeout=5s
            failureThreshold: 3
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            requests:
              cpu: 25m
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
              - NET_RAW
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /host/opt/cni/bin
            name: cni-bin-dir
          - mountPath: /host/etc/cni/net.d
            name: cni-net-dir
          - mountPath: /host/var/log/aws-routed-eni
            name: log-dir
          - mountPath: /var/run/aws-node
            name: run-dir
          - mountPath: /run/xtables.lock
            name: xtables-lock
        - args:
          - --enable-ipv6=false
          - --enable-network-policy=false
          - --enable-cloudwatch-logs=false
          - --enable-policy-event-logs=false
          - --log-file=/var/log/aws-routed-eni/network-policy-agent.log
          - --metrics-bind-addr=:8162
          - --health-probe-bind-addr=:8163
          - --conntrack-cache-cleanup-period=300
          env:
          - name: MY_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.2-eksbuild.2
          imagePullPolicy: IfNotPresent
          name: aws-eks-nodeagent
          resources:
            requests:
              cpu: 25m
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /host/opt/cni/bin
            name: cni-bin-dir
          - mountPath: /sys/fs/bpf
            name: bpf-pin-path
          - mountPath: /var/log/aws-routed-eni
            name: log-dir
          - mountPath: /var/run/aws-node
            name: run-dir
        dnsPolicy: ClusterFirst
        hostNetwork: true
        initContainers:
        - env:
          - name: DISABLE_TCP_EARLY_DEMUX
            value: "false"
          - name: ENABLE_IPv6
            value: "false"
          image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon-k8s-cni-init:v1.18.3-eksbuild.2
          imagePullPolicy: IfNotPresent
          name: aws-vpc-cni-init
          resources:
            requests:
              cpu: 25m
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /host/opt/cni/bin
            name: cni-bin-dir
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: aws-node
        serviceAccountName: aws-node
        terminationGracePeriodSeconds: 10
        tolerations:
        - operator: Exists
        volumes:
        - hostPath:
            path: /sys/fs/bpf
            type: ""
          name: bpf-pin-path
        - hostPath:
            path: /opt/cni/bin
            type: ""
          name: cni-bin-dir
        - hostPath:
            path: /etc/cni/net.d
            type: ""
          name: cni-net-dir
        - hostPath:
            path: /var/log/aws-routed-eni
            type: DirectoryOrCreate
          name: log-dir
        - hostPath:
            path: /var/run/aws-node
            type: DirectoryOrCreate
          name: run-dir
        - hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
          name: xtables-lock
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 10%
      type: RollingUpdate
  status:
    currentNumberScheduled: 2
    desiredNumberScheduled: 2
    numberAvailable: 2
    numberMisscheduled: 0
    numberReady: 2
    observedGeneration: 2
    updatedNumberScheduled: 2
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
    creationTimestamp: "2024-10-09T19:37:11Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: eks-pod-identity-agent
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: eks-pod-identity-agent
      app.kubernetes.io/version: 0.1.15
      helm.sh/chart: eks-pod-identity-agent-1.3.2
    name: eks-pod-identity-agent
    namespace: kube-system
    resourceVersion: "1528"
    uid: 419ac4ab-b5e9-4023-9ec7-6448c34cfcdf
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: eks-pod-identity-agent
        app.kubernetes.io/name: eks-pod-identity-agent
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: eks-pod-identity-agent
          app.kubernetes.io/name: eks-pod-identity-agent
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
                  - arm64
                - key: eks.amazonaws.com/compute-type
                  operator: NotIn
                  values:
                  - fargate
        containers:
        - args:
          - --port
          - "80"
          - --cluster-name
          - n6oy2vvr-K8s
          - --probe-port
          - "2703"
          command:
          - /go-runner
          - /eks-pod-identity-agent
          - server
          env:
          - name: AWS_REGION
            value: us-east-1
          image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              host: localhost
              path: /healthz
              port: probes-port
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: eks-pod-identity-agent
          ports:
          - containerPort: 80
            name: proxy
            protocol: TCP
          - containerPort: 2703
            name: probes-port
            protocol: TCP
          readinessProbe:
            failureThreshold: 30
            httpGet:
              host: localhost
              path: /readyz
              port: probes-port
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          resources: {}
          securityContext:
            capabilities:
              add:
              - CAP_NET_BIND_SERVICE
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        hostNetwork: true
        initContainers:
        - command:
          - /go-runner
          - /eks-pod-identity-agent
          - initialize
          image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/eks-pod-identity-agent:0.1.15
          imagePullPolicy: Always
          name: eks-pod-identity-agent-init
          resources: {}
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        tolerations:
        - operator: Exists
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 10%
      type: RollingUpdate
  status:
    currentNumberScheduled: 2
    desiredNumberScheduled: 2
    numberAvailable: 2
    numberMisscheduled: 0
    numberReady: 2
    observedGeneration: 1
    updatedNumberScheduled: 2
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
    creationTimestamp: "2024-10-09T19:32:36Z"
    generation: 1
    labels:
      eks.amazonaws.com/component: kube-proxy
      k8s-app: kube-proxy
    name: kube-proxy
    namespace: kube-system
    resourceVersion: "1326"
    uid: 4cb736d1-682e-4a49-96fe-a5f8e4dac948
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: kube-proxy
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kube-proxy
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
                  - arm64
                - key: eks.amazonaws.com/compute-type
                  operator: NotIn
                  values:
                  - fargate
        containers:
        - command:
          - kube-proxy
          - --v=2
          - --config=/var/lib/kube-proxy-config/config
          - --hostname-override=$(NODE_NAME)
          env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/kube-proxy:v1.31.0-minimal-eksbuild.2
          imagePullPolicy: IfNotPresent
          name: kube-proxy
          resources:
            requests:
              cpu: 100m
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/log
            name: varlog
          - mountPath: /run/xtables.lock
            name: xtables-lock
          - mountPath: /lib/modules
            name: lib-modules
            readOnly: true
          - mountPath: /var/lib/kube-proxy/
            name: kubeconfig
          - mountPath: /var/lib/kube-proxy-config/
            name: config
        dnsPolicy: ClusterFirst
        hostNetwork: true
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kube-proxy
        serviceAccountName: kube-proxy
        terminationGracePeriodSeconds: 30
        tolerations:
        - operator: Exists
        volumes:
        - hostPath:
            path: /var/log
            type: ""
          name: varlog
        - hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
          name: xtables-lock
        - hostPath:
            path: /lib/modules
            type: ""
          name: lib-modules
        - configMap:
            defaultMode: 420
            name: kube-proxy
          name: kubeconfig
        - configMap:
            defaultMode: 420
            name: kube-proxy-config
          name: config
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 10%
      type: RollingUpdate
  status:
    currentNumberScheduled: 2
    desiredNumberScheduled: 2
    numberAvailable: 2
    numberMisscheduled: 0
    numberReady: 2
    observedGeneration: 1
    updatedNumberScheduled: 2
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
      meta.helm.sh/release-name: ai-runtime-security
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2024-10-11T04:20:03Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
      k8s-app: pan-cni
    name: pan-cni
    namespace: kube-system
    resourceVersion: "332655"
    uid: 5aeb0b4e-e9e6-4a37-94ca-2b64e39c1ee1
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: pan-cni
    template:
      metadata:
        annotations:
          paloaltonetworks.com/app: pan-cni
          scheduler.alpha.kubernetes.io/critical-pod: ""
        creationTimestamp: null
        labels:
          k8s-app: pan-cni
      spec:
        containers:
        - command:
          - /install-pan-cni.sh
          - main
          env:
          - name: CNI_NETWORK_CONFIG
            valueFrom:
              configMapKeyRef:
                key: cni_network_config
                name: pan-cni-config
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          image: gcr.io/pan-cn-series/airs/pan-cni:4.0.0
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /install-pan-cni.sh
                - cleanup
          name: install-pan-cni
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /host/opt/cni/bin
            name: cni-bin-dir
          - mountPath: /host/etc/cni/net.d
            name: cni-net-dir
          - mountPath: /host/appinfo
            name: appinfo
        dnsPolicy: ClusterFirst
        hostNetwork: true
        nodeSelector:
          beta.kubernetes.io/os: linux
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: pan-cni-sa
        serviceAccountName: pan-cni-sa
        terminationGracePeriodSeconds: 5
        tolerations:
        - effect: NoSchedule
          operator: Exists
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          operator: Exists
        volumes:
        - hostPath:
            path: /opt/cni/bin
            type: ""
          name: cni-bin-dir
        - hostPath:
            path: /etc/cni/net.d
            type: ""
          name: cni-net-dir
        - hostPath:
            path: /var/log/pan-appinfo
            type: DirectoryOrCreate
          name: appinfo
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 2
    desiredNumberScheduled: 2
    numberAvailable: 2
    numberMisscheduled: 0
    numberReady: 2
    observedGeneration: 1
    updatedNumberScheduled: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: ai-app
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2024-10-11T04:20:23Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
    name: agent-deployment
    namespace: ai-app
    resourceVersion: "332915"
    uid: 435d968e-663c-4972-93bc-b07132ff2b47
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: agent
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: agent
      spec:
        containers:
        - image: migara/agent-app:latest
          imagePullPolicy: IfNotPresent
          name: agent
          ports:
          - containerPort: 3001
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: eks-pods-sa
        serviceAccountName: eks-pods-sa
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-10-11T04:20:24Z"
      lastUpdateTime: "2024-10-11T04:20:24Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-10-11T04:20:23Z"
      lastUpdateTime: "2024-10-11T04:20:24Z"
      message: ReplicaSet "agent-deployment-558dcbcf7d" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: ai-app
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2024-10-11T04:20:23Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
    name: ui-deployment
    namespace: ai-app
    resourceVersion: "332908"
    uid: e08f51fb-113b-4a57-803e-c60ef839e463
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: ui
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ui
      spec:
        containers:
        - image: migara/ui-app:latest
          imagePullPolicy: IfNotPresent
          name: ui
          ports:
          - containerPort: 3000
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-10-11T04:20:24Z"
      lastUpdateTime: "2024-10-11T04:20:24Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-10-11T04:20:23Z"
      lastUpdateTime: "2024-10-11T04:20:24Z"
      message: ReplicaSet "ui-deployment-5457f4d4d4" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: ingress-nginx
      meta.helm.sh/release-namespace: ingress-nginx
    creationTimestamp: "2024-10-11T04:20:10Z"
    generation: 1
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.8.1
      helm.sh/chart: ingress-nginx-4.7.1
    name: ingress-nginx-controller
    namespace: ingress-nginx
    resourceVersion: "332824"
    uid: 6d7432ef-f30d-4bd4-bdfe-d5a3754717a8
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx
        app.kubernetes.io/name: ingress-nginx
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: ingress-nginx
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.8.1
          helm.sh/chart: ingress-nginx-4.7.1
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
          - --election-id=ingress-nginx-leader
          - --controller-class=k8s.io/ingress-nginx
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.8.1@sha256:e5c4824e7375fcf2a393e1c03c293b69759af37a9ca6abdb91b13d78a93da8bd
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 101
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ingress-nginx
        serviceAccountName: ingress-nginx
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: ingress-nginx-admission
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-10-11T04:20:21Z"
      lastUpdateTime: "2024-10-11T04:20:21Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-10-11T04:20:10Z"
      lastUpdateTime: "2024-10-11T04:20:21Z"
      message: ReplicaSet "ingress-nginx-controller-74dbc4858c" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-10-09T19:32:36Z"
    generation: 1
    labels:
      eks.amazonaws.com/component: coredns
      k8s-app: kube-dns
      kubernetes.io/name: CoreDNS
    name: coredns
    namespace: kube-system
    resourceVersion: "1409"
    uid: 36c997c4-446c-47de-9805-4cc72f3be3e4
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        eks.amazonaws.com/component: coredns
        k8s-app: kube-dns
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          eks.amazonaws.com/component: coredns
          k8s-app: kube-dns
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
                  - arm64
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: k8s-app
                    operator: In
                    values:
                    - kube-dns
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - args:
          - -conf
          - /etc/coredns/Corefile
          image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/coredns:v1.11.3-eksbuild.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: coredns
          ports:
          - containerPort: 53
            name: dns
            protocol: UDP
          - containerPort: 53
            name: dns-tcp
            protocol: TCP
          - containerPort: 9153
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8181
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 170Mi
            requests:
              cpu: 100m
              memory: 70Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/coredns
            name: config-volume
            readOnly: true
        dnsPolicy: Default
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: coredns
        serviceAccountName: coredns
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
        - key: CriticalAddonsOnly
          operator: Exists
        topologySpreadConstraints:
        - labelSelector:
            matchLabels:
              k8s-app: kube-dns
          maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: Corefile
              path: Corefile
            name: coredns
          name: config-volume
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2024-10-09T19:36:57Z"
      lastUpdateTime: "2024-10-09T19:36:57Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-10-09T19:32:36Z"
      lastUpdateTime: "2024-10-09T19:36:57Z"
      message: ReplicaSet "coredns-789f8477df" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: utilities
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2024-10-11T05:19:18Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
    name: netshoot-deployment
    namespace: utilities
    resourceVersion: "343080"
    uid: d9240fef-64ef-4169-8838-c08c2ed1d12b
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: netshoot
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: netshoot
      spec:
        containers:
        - args:
          - -c
          - |
            cp /custom-certs/* /usr/local/share/ca-certificates/
            update-ca-certificates
            echo "Custom certificates added"
            while true; do sleep 3600; done
          command:
          - /bin/sh
          image: nicolaka/netshoot
          imagePullPolicy: Always
          name: netshoot
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /custom-certs
            name: custom-certs
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: eks-pods-sa
        serviceAccountName: eks-pods-sa
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: custom-ca-certs
          name: custom-certs
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-10-11T05:19:19Z"
      lastUpdateTime: "2024-10-11T05:19:19Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-10-11T05:19:18Z"
      lastUpdateTime: "2024-10-11T05:19:19Z"
      message: ReplicaSet "netshoot-deployment-7655b866d4" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: ai-app
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2024-10-11T04:20:23Z"
    generation: 1
    labels:
      app: agent
      pod-template-hash: 558dcbcf7d
    name: agent-deployment-558dcbcf7d
    namespace: ai-app
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: agent-deployment
      uid: 435d968e-663c-4972-93bc-b07132ff2b47
    resourceVersion: "332914"
    uid: 62f5df92-09f8-4ebb-89ec-d8d0215ea5d5
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: agent
        pod-template-hash: 558dcbcf7d
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: agent
          pod-template-hash: 558dcbcf7d
      spec:
        containers:
        - image: migara/agent-app:latest
          imagePullPolicy: IfNotPresent
          name: agent
          ports:
          - containerPort: 3001
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: eks-pods-sa
        serviceAccountName: eks-pods-sa
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: ai-app
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2024-10-11T04:20:23Z"
    generation: 1
    labels:
      app: ui
      pod-template-hash: 5457f4d4d4
    name: ui-deployment-5457f4d4d4
    namespace: ai-app
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: ui-deployment
      uid: e08f51fb-113b-4a57-803e-c60ef839e463
    resourceVersion: "332907"
    uid: 2098fe4f-2a38-44a1-989b-46442ca19fa5
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: ui
        pod-template-hash: 5457f4d4d4
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ui
          pod-template-hash: 5457f4d4d4
      spec:
        containers:
        - image: migara/ui-app:latest
          imagePullPolicy: IfNotPresent
          name: ui
          ports:
          - containerPort: 3000
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: ingress-nginx
      meta.helm.sh/release-namespace: ingress-nginx
    creationTimestamp: "2024-10-11T04:20:10Z"
    generation: 1
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.8.1
      helm.sh/chart: ingress-nginx-4.7.1
      pod-template-hash: 74dbc4858c
    name: ingress-nginx-controller-74dbc4858c
    namespace: ingress-nginx
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: ingress-nginx-controller
      uid: 6d7432ef-f30d-4bd4-bdfe-d5a3754717a8
    resourceVersion: "332823"
    uid: 50c412fd-0988-4809-9850-b397d8030b77
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx
        app.kubernetes.io/name: ingress-nginx
        pod-template-hash: 74dbc4858c
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: ingress-nginx
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.8.1
          helm.sh/chart: ingress-nginx-4.7.1
          pod-template-hash: 74dbc4858c
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
          - --election-id=ingress-nginx-leader
          - --controller-class=k8s.io/ingress-nginx
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.8.1@sha256:e5c4824e7375fcf2a393e1c03c293b69759af37a9ca6abdb91b13d78a93da8bd
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 101
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ingress-nginx
        serviceAccountName: ingress-nginx
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: ingress-nginx-admission
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-10-09T19:32:36Z"
    generation: 1
    labels:
      eks.amazonaws.com/component: coredns
      k8s-app: kube-dns
      pod-template-hash: 789f8477df
    name: coredns-789f8477df
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: coredns
      uid: 36c997c4-446c-47de-9805-4cc72f3be3e4
    resourceVersion: "1407"
    uid: 93b266c0-0b76-4cb2-bdc1-2cfa57339349
  spec:
    replicas: 2
    selector:
      matchLabels:
        eks.amazonaws.com/component: coredns
        k8s-app: kube-dns
        pod-template-hash: 789f8477df
    template:
      metadata:
        creationTimestamp: null
        labels:
          eks.amazonaws.com/component: coredns
          k8s-app: kube-dns
          pod-template-hash: 789f8477df
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
                  - arm64
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: k8s-app
                    operator: In
                    values:
                    - kube-dns
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - args:
          - -conf
          - /etc/coredns/Corefile
          image: 602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/coredns:v1.11.3-eksbuild.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: coredns
          ports:
          - containerPort: 53
            name: dns
            protocol: UDP
          - containerPort: 53
            name: dns-tcp
            protocol: TCP
          - containerPort: 9153
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8181
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 170Mi
            requests:
              cpu: 100m
              memory: 70Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/coredns
            name: config-volume
            readOnly: true
        dnsPolicy: Default
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: coredns
        serviceAccountName: coredns
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
        - key: CriticalAddonsOnly
          operator: Exists
        topologySpreadConstraints:
        - labelSelector:
            matchLabels:
              k8s-app: kube-dns
          maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: Corefile
              path: Corefile
            name: coredns
          name: config-volume
  status:
    availableReplicas: 2
    fullyLabeledReplicas: 2
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: utilities
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2024-10-11T05:19:18Z"
    generation: 1
    labels:
      app: netshoot
      pod-template-hash: 7655b866d4
    name: netshoot-deployment-7655b866d4
    namespace: utilities
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: netshoot-deployment
      uid: d9240fef-64ef-4169-8838-c08c2ed1d12b
    resourceVersion: "343079"
    uid: d91f8a1c-889c-446c-a839-29c2e9aff563
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: netshoot
        pod-template-hash: 7655b866d4
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: netshoot
          pod-template-hash: 7655b866d4
      spec:
        containers:
        - args:
          - -c
          - |
            cp /custom-certs/* /usr/local/share/ca-certificates/
            update-ca-certificates
            echo "Custom certificates added"
            while true; do sleep 3600; done
          command:
          - /bin/sh
          image: nicolaka/netshoot
          imagePullPolicy: Always
          name: netshoot
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /custom-certs
            name: custom-certs
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: eks-pods-sa
        serviceAccountName: eks-pods-sa
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: custom-ca-certs
          name: custom-certs
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
kind: List
metadata:
  resourceVersion: ""
